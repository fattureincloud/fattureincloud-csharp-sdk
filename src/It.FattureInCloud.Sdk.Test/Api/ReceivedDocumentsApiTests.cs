/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol. For more information, please visit https://www.fattureincloud.it.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Api;
// uncomment below to import models
//using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing ReceivedDocumentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ReceivedDocumentsApiTests : IDisposable
    {
        private ReceivedDocumentsApi instance;

        public ReceivedDocumentsApiTests()
        {
            instance = new ReceivedDocumentsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ReceivedDocumentsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ReceivedDocumentsApi
            //Assert.IsType<ReceivedDocumentsApi>(instance);
        }

        /// <summary>
        /// Test CreateReceivedDocument
        /// </summary>
        [Fact]
        public void CreateReceivedDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int companyId = null;
            //CreateReceivedDocumentRequest createReceivedDocumentRequest = null;
            //var response = instance.CreateReceivedDocument(companyId, createReceivedDocumentRequest);
            //Assert.IsType<CreateReceivedDocumentResponse>(response);
        }

        /// <summary>
        /// Test DeleteReceivedDocument
        /// </summary>
        [Fact]
        public void DeleteReceivedDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int companyId = null;
            //int documentId = null;
            //instance.DeleteReceivedDocument(companyId, documentId);
        }

        /// <summary>
        /// Test DeleteReceivedDocumentAttachment
        /// </summary>
        [Fact]
        public void DeleteReceivedDocumentAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int companyId = null;
            //int documentId = null;
            //instance.DeleteReceivedDocumentAttachment(companyId, documentId);
        }

        /// <summary>
        /// Test GetExistingReceivedDocumentTotals
        /// </summary>
        [Fact]
        public void GetExistingReceivedDocumentTotalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int companyId = null;
            //int documentId = null;
            //GetExistingReceivedDocumentTotalsRequest getExistingReceivedDocumentTotalsRequest = null;
            //var response = instance.GetExistingReceivedDocumentTotals(companyId, documentId, getExistingReceivedDocumentTotalsRequest);
            //Assert.IsType<GetExistingReceivedDocumentTotalsResponse>(response);
        }

        /// <summary>
        /// Test GetNewReceivedDocumentTotals
        /// </summary>
        [Fact]
        public void GetNewReceivedDocumentTotalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int companyId = null;
            //GetNewReceivedDocumentTotalsRequest getNewReceivedDocumentTotalsRequest = null;
            //var response = instance.GetNewReceivedDocumentTotals(companyId, getNewReceivedDocumentTotalsRequest);
            //Assert.IsType<GetNewReceivedDocumentTotalsResponse>(response);
        }

        /// <summary>
        /// Test GetReceivedDocument
        /// </summary>
        [Fact]
        public void GetReceivedDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int companyId = null;
            //int documentId = null;
            //string fields = null;
            //string fieldset = null;
            //var response = instance.GetReceivedDocument(companyId, documentId, fields, fieldset);
            //Assert.IsType<GetReceivedDocumentResponse>(response);
        }

        /// <summary>
        /// Test GetReceivedDocumentPreCreateInfo
        /// </summary>
        [Fact]
        public void GetReceivedDocumentPreCreateInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int companyId = null;
            //string type = null;
            //var response = instance.GetReceivedDocumentPreCreateInfo(companyId, type);
            //Assert.IsType<GetReceivedDocumentPreCreateInfoResponse>(response);
        }

        /// <summary>
        /// Test ListReceivedDocuments
        /// </summary>
        [Fact]
        public void ListReceivedDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int companyId = null;
            //string type = null;
            //string fields = null;
            //string fieldset = null;
            //string sort = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ListReceivedDocuments(companyId, type, fields, fieldset, sort, page, perPage);
            //Assert.IsType<ListReceivedDocumentsResponse>(response);
        }

        /// <summary>
        /// Test ModifyReceivedDocument
        /// </summary>
        [Fact]
        public void ModifyReceivedDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int companyId = null;
            //int documentId = null;
            //ModifyReceivedDocumentRequest modifyReceivedDocumentRequest = null;
            //var response = instance.ModifyReceivedDocument(companyId, documentId, modifyReceivedDocumentRequest);
            //Assert.IsType<ModifyReceivedDocumentResponse>(response);
        }

        /// <summary>
        /// Test UploadReceivedDocumentAttachment
        /// </summary>
        [Fact]
        public void UploadReceivedDocumentAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int companyId = null;
            //string filename = null;
            //System.IO.Stream attachment = null;
            //var response = instance.UploadReceivedDocumentAttachment(companyId, filename, attachment);
            //Assert.IsType<UploadReceivedDocumentAttachmentResponse>(response);
        }
    }
}
