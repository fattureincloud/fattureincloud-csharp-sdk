/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using It.FattureInCloud.Sdk.Api;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Test.Api
{
    /// <summary>
    ///     Class for testing CashbookApi
    /// </summary>
    /// <remarks>
    ///     This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    ///     Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CashbookApiTests : IDisposable
    {
        private readonly string createCashbookResponseBody;
        private readonly string getCashbookResponseBody;
        private readonly string listCashbookResponseBody;
        private readonly string modifyCashbookResponseBody;
        private Mock<ICashbookApi> instance = new Mock<ICashbookApi>();

        public CashbookApiTests()
        {
            createCashbookResponseBody =
                "{ 'data': { 'kind': 'issued_document', 'type': 'out', 'date': '2021-10-10', 'description': 'Fattura n. 201/2021', 'entity_name': 'Rossi S.r.l.', 'document': { 'id': 54321 }, 'amount_out': 122.0, 'payment_account_out': { 'id': 21, 'virtual': false } } }";
            var createCashbookResponse =
                JsonConvert.DeserializeObject<CreateCashbookEntryResponse>(createCashbookResponseBody);
            instance
                .Setup(p => p.CreateCashbookEntry(Moq.It.IsAny<int>(), Moq.It.IsAny<CreateCashbookEntryRequest>()))
                .Returns(createCashbookResponse);

            getCashbookResponseBody =
                "{ 'data': { 'kind': 'issued_document', 'type': 'out', 'date': '2021-10-10', 'description': 'Fattura n. 201/2021', 'entity_name': 'Rossi S.r.l.', 'document': { 'id': 54321 }, 'amount_out': 122.0, 'payment_account_out': { 'id': 21, 'virtual': false } } }";
            var getCashbookResponse = JsonConvert.DeserializeObject<GetCashbookEntryResponse>(getCashbookResponseBody);
            instance
                .Setup(p => p.GetCashbookEntry(Moq.It.IsAny<int>(), Moq.It.IsAny<int>(), Moq.It.IsAny<string>(),
                    Moq.It.IsAny<string>()))
                .Returns(getCashbookResponse);

            listCashbookResponseBody =
                "{ 'data': [{ 'kind': 'issued_document', 'type': 'out', 'date': '2021-10-10', 'description': 'Fattura n. 201/2021', 'entity_name': 'Rossi S.r.l.', 'document': { 'id': 54321 }, 'amount_out': 122.0, 'payment_account_out': { 'id': 21, 'virtual': false } } ,{ 'kind': 'issued_document', 'type': 'out', 'date': '2021-10-10', 'description': 'Fattura n. 201/2021', 'entity_name': 'Rossi S.r.l.', 'document': { 'id': 54321 }, 'amount_out': 122.0, 'payment_account_out': { 'id': 21, 'virtual': false } } ] }";
            var listCashbookResponse =
                JsonConvert.DeserializeObject<ListCashbookEntriesResponse>(listCashbookResponseBody);
            instance
                .Setup(p => p.ListCashbookEntries(Moq.It.IsAny<int>(), Moq.It.IsAny<string>(), Moq.It.IsAny<string>(),
                    Moq.It.IsAny<int>(), Moq.It.IsAny<string>(), Moq.It.IsAny<int>()))
                .Returns(listCashbookResponse);

            modifyCashbookResponseBody =
                "{ 'data': { 'kind': 'issued_document', 'type': 'out', 'date': '2021-10-10', 'description': 'Fattura n. 201/2021', 'entity_name': 'Rossi S.r.l.', 'document': { 'id': 54321 }, 'amount_out': 122.0, 'payment_account_out': { 'id': 21, 'virtual': false } } }";
            var modifyCashbookResponse =
                JsonConvert.DeserializeObject<ModifyCashbookEntryResponse>(modifyCashbookResponseBody);
            instance
                .Setup(p => p.ModifyCashbookEntry(Moq.It.IsAny<int>(), Moq.It.IsAny<int>(),
                    Moq.It.IsAny<ModifyCashbookEntryRequest>()))
                .Returns(modifyCashbookResponse);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        ///     Test an instance of CashbookApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<Mock<ICashbookApi>>(instance);
        }

        /// <summary>
        ///     Test CreateCashbookEntry
        /// </summary>
        [Fact]
        public void CreateCashbookEntryTest()
        {
            var companyId = 2;
            var createCashbookEntryRequest = new CreateCashbookEntryRequest();

            var response = instance.Object.CreateCashbookEntry(companyId, createCashbookEntryRequest);
            JObject obj = JObject.Parse(createCashbookResponseBody);

            Assert.True(JToken.DeepEquals(obj, JObject.FromObject(response)));
        }

        /// <summary>
        ///     Test DeleteCashbookEntry
        /// </summary>
        [Fact]
        public void DeleteCashbookEntryTest()
        {
            Assert.True(true);
        }

        /// <summary>
        ///     Test GetCashbookEntry
        /// </summary>
        [Fact]
        public void GetCashbookEntryTest()
        {
            var companyId = 2;
            var documentId = 12345;
            var fields = "";
            var fieldset = "";

            var response = instance.Object.GetCashbookEntry(companyId, documentId, fields, fieldset);
            JObject obj = JObject.Parse(getCashbookResponseBody);

            Assert.True(JToken.DeepEquals(obj, JObject.FromObject(response)));
        }

        /// <summary>
        ///     Test ListCashbookEntries
        /// </summary>
        [Fact]
        public void ListCashbookEntriesTest()
        {
            var companyId = 2;
            var dateFrom = "";
            var dateTo = "";
            int? year = 2020;
            var type = "";
            int? paymentAccountId = 1;

            var response =
                instance.Object.ListCashbookEntries(companyId, dateFrom, dateTo, year, type, paymentAccountId);
            JObject obj = JObject.Parse(listCashbookResponseBody);

            Assert.True(JToken.DeepEquals(obj, JObject.FromObject(response)));
        }

        /// <summary>
        ///     Test ModifyCashbookEntry
        /// </summary>
        [Fact]
        public void ModifyCashbookEntryTest()
        {
            var companyId = 2;
            var documentId = 12345;
            var modifyCashbookEntryRequest = new ModifyCashbookEntryRequest();

            var response = instance.Object.ModifyCashbookEntry(companyId, documentId, modifyCashbookEntryRequest);
            JObject obj = JObject.Parse(modifyCashbookResponseBody);

            Assert.True(JToken.DeepEquals(obj, JObject.FromObject(response)));
        }
    }
}