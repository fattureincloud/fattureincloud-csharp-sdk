/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.  For more information, please visit https://www.fattureincloud.it.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;
using Moq;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Api;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing CompaniesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CompaniesApiTests : IDisposable
    {
        Mock<ICompaniesApi> instance = new Mock<ICompaniesApi>();
        string getCompanyInfoResponseBody;

        public CompaniesApiTests()
        {
            getCompanyInfoResponseBody = "{ 'data': { 'type': 'accountant', 'fic_plan_name': 'premium_plus', 'id': 12345, 'name': 'Studio Commercialista', 'email': 'mario.rossi@examplea.com', 'fic': true, 'fic_license_type': 'coupon_b', 'fic_payment_subject': 'client', 'fic_license_expire': '2030-12-31', 'fic_signup_date': '2013-11-01', 'use_fic': true, 'fic_need_setup': false, 'dic': true, 'dic_license_expire': '2022-12-31', 'use_dic': true, 'dic_need_setup': false, 'access_info': { 'role': 'master', 'permissions': { 'fic_situation': 'read', 'fic_clients': 'write', 'fic_suppliers': 'write', 'fic_products': 'write', 'fic_issued_documents': 'detailed', 'fic_received_documents': 'write', 'fic_receipts': 'write', 'fic_calendar': 'write', 'fic_archive': 'write', 'fic_taxes': 'write', 'fic_stock': 'write', 'fic_cashbook': 'write', 'fic_settings': 'write', 'fic_emails': 'read', 'fic_export': 'write', 'fic_import_bankstatements': 'none', 'fic_import_clients_suppliers': 'write', 'fic_import_issued_documents': 'none', 'fic_import_products': 'write', 'fic_recurring': 'write', 'fic_riba': 'write', 'dic_employees': 'none', 'dic_settings': 'none', 'dic_timesheet': 'none', 'fic_issued_documents_detailed': { 'quotes': 'write', 'proformas': 'write', 'invoices': 'write', 'receipts': 'write', 'delivery_notes': 'write', 'credit_notes': 'write', 'orders': 'write', 'work_reports': 'write', 'supplier_orders': 'write', 'self_invoices': 'write' } }, 'through_accountant': false }, 'plan_info': { 'limits': { 'clients': 5000, 'suppliers': 5000, 'products': 5000, 'documents': 3000 }, 'functions': { 'archive': true, 'cerved': true, 'document_attachments': true, 'e_invoice': true, 'genius': true, 'mail_tracking': true, 'payment_notifications': true, 'paypal': true, 'receipts': true, 'recurring': true, 'smtp': true, 'sofort': false, 'stock': true, 'subaccounts': true, 'tessera_sanitaria': true, 'ts_digital': true, 'ts_invoice_trading': true, 'ts_pay': true }, 'functions_status': { 'ts_digital': { 'active': true }, 'ts_pay': { 'active': true } } }, 'can_use_coupon': false, 'accountant_id': 12345, 'dic_license_type': null, 'dic_payment_subject': 'client', 'dic_plan_name': 'trial', 'dic_signup_date': '2018-03-26', 'is_accountant': true, 'registration_service': 'fic'} }";
            var getCompanyInfoResponse = JsonConvert.DeserializeObject<GetCompanyInfoResponse>(getCompanyInfoResponseBody);
            instance
                .Setup(p => p.GetCompanyInfo(Moq.It.IsAny<int>()))
                .Returns(getCompanyInfoResponse);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CompaniesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<Mock<ICompaniesApi>>(instance);
        }

        /// <summary>
        /// Test GetCompanyInfo
        /// </summary>
        [Fact]
        public void GetCompanyInfoTest()
        {
            int companyId = 2;

            var response = instance.Object.GetCompanyInfo(companyId);
            JObject obj = JObject.Parse(getCompanyInfoResponseBody);

            Assert.True(JToken.DeepEquals(obj, JObject.FromObject(response)));
        }
    }
}
