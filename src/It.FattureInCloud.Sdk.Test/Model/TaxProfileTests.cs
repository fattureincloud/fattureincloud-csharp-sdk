/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.3
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using It.FattureInCloud.Sdk.Model;
using It.FattureInCloud.Sdk.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace It.FattureInCloud.Sdk.Test.Model
{
    /// <summary>
    ///  Class for testing TaxProfile
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class TaxProfileTests : IDisposable
    {
        private TaxProfile instance;

        public TaxProfileTests()
        {
            var body = "{ 'company_type': 'individual', 'company_subtype': 'artigiani', 'profession': 'test', 'regime': 'forfettario_5', 'rivalsa_name': '', 'default_rivalsa': 0, 'cassa_name': '', 'default_cassa': 0, 'default_cassa_taxable': 100, 'cassa2_name': '', 'default_cassa2': 0, 'default_cassa2_taxable': 0, 'default_withholding_tax': 0, 'default_withholding_tax_taxable': 100, 'default_other_withholding_tax': 0, 'enasarco': false, 'enasarco_type': 'null', 'contributions_percentage': 0, 'med': false, 'default_vat': { 'id': 66, 'value': 0, 'description': 'Contribuenti forfettari', 'notes': 'Operazione non soggetta a IVA ai sensi dell\"art. 1, commi 54-89, Legge n. 190\\/2014 e succ. modifiche\\/integrazioni', 'e_invoice': true, 'ei_type': '2.2', 'ei_description': 'Non soggetta art. 1\\/54-89 L. 190\\/2014 e succ. modifiche\\/integrazioni', 'editable': false, 'is_disabled': false, 'default': true } }";
            instance = JsonConvert.DeserializeObject<TaxProfile>(body);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TaxProfile
        /// </summary>
        [Fact]
        public void TaxProfileInstanceTest()
        {
            Assert.IsType<TaxProfile>(instance);
        }

        /// <summary>
        /// Test the property 'CompanyType'
        /// </summary>
        [Fact]
        public void CompanyTypeTest()
        {
            Assert.IsType<string>(instance.CompanyType);
        }

        /// <summary>
        /// Test the property 'CompanySubtype'
        /// </summary>
        [Fact]
        public void CompanySubtypeTest()
        {
            Assert.IsType<string>(instance.CompanySubtype);
        }

        /// <summary>
        /// Test the property 'Profession'
        /// </summary>
        [Fact]
        public void ProfessionTest()
        {
            Assert.IsType<string>(instance.Profession);
        }

        /// <summary>
        /// Test the property 'Regime'
        /// </summary>
        [Fact]
        public void RegimeTest()
        {
            Assert.IsType<string>(instance.Regime);
        }

        /// <summary>
        /// Test the property 'RivalsaName'
        /// </summary>
        [Fact]
        public void RivalsaNameTest()
        {
            Assert.IsType<string>(instance.RivalsaName);
        }

        /// <summary>
        /// Test the property 'DefaultRivalsa'
        /// </summary>
        [Fact]
        public void DefaultRivalsaTest()
        {
            Assert.IsType<decimal>(instance.DefaultRivalsa);
        }

        /// <summary>
        /// Test the property 'CassaName'
        /// </summary>
        [Fact]
        public void CassaNameTest()
        {
            Assert.IsType<string>(instance.CassaName);
        }

        /// <summary>
        /// Test the property 'DefaultCassa'
        /// </summary>
        [Fact]
        public void DefaultCassaTest()
        {
            Assert.IsType<decimal>(instance.DefaultCassa);
        }

        /// <summary>
        /// Test the property 'DefaultCassaTaxable'
        /// </summary>
        [Fact]
        public void DefaultCassaTaxableTest()
        {
            Assert.IsType<decimal>(instance.DefaultCassaTaxable);
        }

        /// <summary>
        /// Test the property 'Cassa2Name'
        /// </summary>
        [Fact]
        public void Cassa2NameTest()
        {
            Assert.IsType<string>(instance.Cassa2Name);
        }

        /// <summary>
        /// Test the property 'DefaultCassa2'
        /// </summary>
        [Fact]
        public void DefaultCassa2Test()
        {
            Assert.IsType<decimal>(instance.DefaultCassa2);
        }

        /// <summary>
        /// Test the property 'DefaultCassa2Taxable'
        /// </summary>
        [Fact]
        public void DefaultCassa2TaxableTest()
        {
            Assert.IsType<decimal>(instance.DefaultCassa2Taxable);
        }

        /// <summary>
        /// Test the property 'DefaultWithholdingTax'
        /// </summary>
        [Fact]
        public void DefaultWithholdingTaxTest()
        {
            Assert.IsType<decimal>(instance.DefaultWithholdingTax);
        }

        /// <summary>
        /// Test the property 'DefaultWithholdingTaxTaxable'
        /// </summary>
        [Fact]
        public void DefaultWithholdingTaxTaxableTest()
        {
            Assert.IsType<decimal>(instance.DefaultWithholdingTaxTaxable);
        }

        /// <summary>
        /// Test the property 'DefaultOtherWithholdingTax'
        /// </summary>
        [Fact]
        public void DefaultOtherWithholdingTaxTest()
        {
            Assert.IsType<decimal>(instance.DefaultOtherWithholdingTax);
        }

        /// <summary>
        /// Test the property 'Enasarco'
        /// </summary>
        [Fact]
        public void EnasarcoTest()
        {
            Assert.IsType<bool>(instance.Enasarco);
        }

        /// <summary>
        /// Test the property 'EnasarcoType'
        /// </summary>
        [Fact]
        public void EnasarcoTypeTest()
        {
            Assert.IsType<string>(instance.EnasarcoType);
        }

        /// <summary>
        /// Test the property 'ContributionsPercentage'
        /// </summary>
        [Fact]
        public void ContributionsPercentageTest()
        {
            Assert.IsType<decimal>(instance.ContributionsPercentage);
        }

        /// <summary>
        /// Test the property 'Med'
        /// </summary>
        [Fact]
        public void MedTest()
        {
            Assert.IsType<bool>(instance.Med);
        }

        /// <summary>
        /// Test the property 'DefaultVat'
        /// </summary>
        [Fact]
        public void DefaultVatTest()
        {
            Assert.IsType<VatType>(instance.DefaultVat);
        }
    }
}
