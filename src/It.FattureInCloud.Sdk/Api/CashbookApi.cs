/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.13
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICashbookApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Creates a new cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createCashbookEntryRequest">Cashbook entry.  (optional)</param>
        /// <returns>CreateCashbookEntryResponse</returns>
        CreateCashbookEntryResponse CreateCashbookEntry(int companyId, CreateCashbookEntryRequest createCashbookEntryRequest = default(CreateCashbookEntryRequest));

        /// <summary>
        /// Create Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Creates a new cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createCashbookEntryRequest">Cashbook entry.  (optional)</param>
        /// <returns>ApiResponse of CreateCashbookEntryResponse</returns>
        ApiResponse<CreateCashbookEntryResponse> CreateCashbookEntryWithHttpInfo(int companyId, CreateCashbookEntryRequest createCashbookEntryRequest = default(CreateCashbookEntryRequest));
        /// <summary>
        /// Delete Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Deletes the specified cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <returns></returns>
        void DeleteCashbookEntry(int companyId, int documentId);

        /// <summary>
        /// Delete Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Deletes the specified cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCashbookEntryWithHttpInfo(int companyId, int documentId);
        /// <summary>
        /// Get Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Gets the specified cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>GetCashbookEntryResponse</returns>
        GetCashbookEntryResponse GetCashbookEntry(int companyId, int documentId, string fields = default(string), string fieldset = default(string));

        /// <summary>
        /// Get Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Gets the specified cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of GetCashbookEntryResponse</returns>
        ApiResponse<GetCashbookEntryResponse> GetCashbookEntryWithHttpInfo(int companyId, int documentId, string fields = default(string), string fieldset = default(string));
        /// <summary>
        /// List Cashbook Entries
        /// </summary>
        /// <remarks>
        /// Lists the cashbook entries.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="dateFrom">Start date.</param>
        /// <param name="dateTo">End date.</param>
        /// <param name="year">Filter cashbook by year. (optional)</param>
        /// <param name="type">Filter cashbook by type. (optional)</param>
        /// <param name="paymentAccountId">Filter by payment account. (optional)</param>
        /// <returns>ListCashbookEntriesResponse</returns>
        ListCashbookEntriesResponse ListCashbookEntries(int companyId, string dateFrom, string dateTo, int? year = default(int?), string type = default(string), int? paymentAccountId = default(int?));

        /// <summary>
        /// List Cashbook Entries
        /// </summary>
        /// <remarks>
        /// Lists the cashbook entries.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="dateFrom">Start date.</param>
        /// <param name="dateTo">End date.</param>
        /// <param name="year">Filter cashbook by year. (optional)</param>
        /// <param name="type">Filter cashbook by type. (optional)</param>
        /// <param name="paymentAccountId">Filter by payment account. (optional)</param>
        /// <returns>ApiResponse of ListCashbookEntriesResponse</returns>
        ApiResponse<ListCashbookEntriesResponse> ListCashbookEntriesWithHttpInfo(int companyId, string dateFrom, string dateTo, int? year = default(int?), string type = default(string), int? paymentAccountId = default(int?));
        /// <summary>
        /// Modify Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Modifies the specified cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyCashbookEntryRequest">Cashbook Entry (optional)</param>
        /// <returns>ModifyCashbookEntryResponse</returns>
        ModifyCashbookEntryResponse ModifyCashbookEntry(int companyId, int documentId, ModifyCashbookEntryRequest modifyCashbookEntryRequest = default(ModifyCashbookEntryRequest));

        /// <summary>
        /// Modify Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Modifies the specified cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyCashbookEntryRequest">Cashbook Entry (optional)</param>
        /// <returns>ApiResponse of ModifyCashbookEntryResponse</returns>
        ApiResponse<ModifyCashbookEntryResponse> ModifyCashbookEntryWithHttpInfo(int companyId, int documentId, ModifyCashbookEntryRequest modifyCashbookEntryRequest = default(ModifyCashbookEntryRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICashbookApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Creates a new cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createCashbookEntryRequest">Cashbook entry.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCashbookEntryResponse</returns>
        System.Threading.Tasks.Task<CreateCashbookEntryResponse> CreateCashbookEntryAsync(int companyId, CreateCashbookEntryRequest createCashbookEntryRequest = default(CreateCashbookEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Creates a new cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createCashbookEntryRequest">Cashbook entry.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCashbookEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCashbookEntryResponse>> CreateCashbookEntryWithHttpInfoAsync(int companyId, CreateCashbookEntryRequest createCashbookEntryRequest = default(CreateCashbookEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Deletes the specified cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCashbookEntryAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Deletes the specified cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCashbookEntryWithHttpInfoAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Gets the specified cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCashbookEntryResponse</returns>
        System.Threading.Tasks.Task<GetCashbookEntryResponse> GetCashbookEntryAsync(int companyId, int documentId, string fields = default(string), string fieldset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Gets the specified cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCashbookEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCashbookEntryResponse>> GetCashbookEntryWithHttpInfoAsync(int companyId, int documentId, string fields = default(string), string fieldset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Cashbook Entries
        /// </summary>
        /// <remarks>
        /// Lists the cashbook entries.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="dateFrom">Start date.</param>
        /// <param name="dateTo">End date.</param>
        /// <param name="year">Filter cashbook by year. (optional)</param>
        /// <param name="type">Filter cashbook by type. (optional)</param>
        /// <param name="paymentAccountId">Filter by payment account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCashbookEntriesResponse</returns>
        System.Threading.Tasks.Task<ListCashbookEntriesResponse> ListCashbookEntriesAsync(int companyId, string dateFrom, string dateTo, int? year = default(int?), string type = default(string), int? paymentAccountId = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Cashbook Entries
        /// </summary>
        /// <remarks>
        /// Lists the cashbook entries.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="dateFrom">Start date.</param>
        /// <param name="dateTo">End date.</param>
        /// <param name="year">Filter cashbook by year. (optional)</param>
        /// <param name="type">Filter cashbook by type. (optional)</param>
        /// <param name="paymentAccountId">Filter by payment account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCashbookEntriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCashbookEntriesResponse>> ListCashbookEntriesWithHttpInfoAsync(int companyId, string dateFrom, string dateTo, int? year = default(int?), string type = default(string), int? paymentAccountId = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Modify Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Modifies the specified cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyCashbookEntryRequest">Cashbook Entry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyCashbookEntryResponse</returns>
        System.Threading.Tasks.Task<ModifyCashbookEntryResponse> ModifyCashbookEntryAsync(int companyId, int documentId, ModifyCashbookEntryRequest modifyCashbookEntryRequest = default(ModifyCashbookEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modify Cashbook Entry
        /// </summary>
        /// <remarks>
        /// Modifies the specified cashbook entry.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyCashbookEntryRequest">Cashbook Entry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyCashbookEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyCashbookEntryResponse>> ModifyCashbookEntryWithHttpInfoAsync(int companyId, int documentId, ModifyCashbookEntryRequest modifyCashbookEntryRequest = default(ModifyCashbookEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICashbookApi : ICashbookApiSync, ICashbookApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CashbookApi : ICashbookApi
    {
        private It.FattureInCloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CashbookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CashbookApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CashbookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CashbookApi(string basePath)
        {
            this.Configuration = It.FattureInCloud.Sdk.Client.Configuration.MergeConfigurations(
                It.FattureInCloud.Sdk.Client.GlobalConfiguration.Instance,
                new It.FattureInCloud.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CashbookApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CashbookApi(It.FattureInCloud.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = It.FattureInCloud.Sdk.Client.Configuration.MergeConfigurations(
                It.FattureInCloud.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CashbookApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CashbookApi(It.FattureInCloud.Sdk.Client.ISynchronousClient client, It.FattureInCloud.Sdk.Client.IAsynchronousClient asyncClient, It.FattureInCloud.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public It.FattureInCloud.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Cashbook Entry Creates a new cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createCashbookEntryRequest">Cashbook entry.  (optional)</param>
        /// <returns>CreateCashbookEntryResponse</returns>
        public CreateCashbookEntryResponse CreateCashbookEntry(int companyId, CreateCashbookEntryRequest createCashbookEntryRequest = default(CreateCashbookEntryRequest))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<CreateCashbookEntryResponse> localVarResponse = CreateCashbookEntryWithHttpInfo(companyId, createCashbookEntryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Cashbook Entry Creates a new cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createCashbookEntryRequest">Cashbook entry.  (optional)</param>
        /// <returns>ApiResponse of CreateCashbookEntryResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<CreateCashbookEntryResponse> CreateCashbookEntryWithHttpInfo(int companyId, CreateCashbookEntryRequest createCashbookEntryRequest = default(CreateCashbookEntryRequest))
        {
            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createCashbookEntryRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCashbookEntryResponse>("/c/{company_id}/cashbook", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCashbookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Cashbook Entry Creates a new cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createCashbookEntryRequest">Cashbook entry.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCashbookEntryResponse</returns>
        public async System.Threading.Tasks.Task<CreateCashbookEntryResponse> CreateCashbookEntryAsync(int companyId, CreateCashbookEntryRequest createCashbookEntryRequest = default(CreateCashbookEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<CreateCashbookEntryResponse> localVarResponse = await CreateCashbookEntryWithHttpInfoAsync(companyId, createCashbookEntryRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Cashbook Entry Creates a new cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createCashbookEntryRequest">Cashbook entry.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCashbookEntryResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<CreateCashbookEntryResponse>> CreateCashbookEntryWithHttpInfoAsync(int companyId, CreateCashbookEntryRequest createCashbookEntryRequest = default(CreateCashbookEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createCashbookEntryRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCashbookEntryResponse>("/c/{company_id}/cashbook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCashbookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Cashbook Entry Deletes the specified cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <returns></returns>
        public void DeleteCashbookEntry(int companyId, int documentId)
        {
            DeleteCashbookEntryWithHttpInfo(companyId, documentId);
        }

        /// <summary>
        /// Delete Cashbook Entry Deletes the specified cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<Object> DeleteCashbookEntryWithHttpInfo(int companyId, int documentId)
        {
            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/c/{company_id}/cashbook/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCashbookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Cashbook Entry Deletes the specified cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCashbookEntryAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCashbookEntryWithHttpInfoAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Cashbook Entry Deletes the specified cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<Object>> DeleteCashbookEntryWithHttpInfoAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/c/{company_id}/cashbook/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCashbookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Cashbook Entry Gets the specified cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>GetCashbookEntryResponse</returns>
        public GetCashbookEntryResponse GetCashbookEntry(int companyId, int documentId, string fields = default(string), string fieldset = default(string))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetCashbookEntryResponse> localVarResponse = GetCashbookEntryWithHttpInfo(companyId, documentId, fields, fieldset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cashbook Entry Gets the specified cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of GetCashbookEntryResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetCashbookEntryResponse> GetCashbookEntryWithHttpInfo(int companyId, int documentId, string fields = default(string), string fieldset = default(string))
        {
            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (fieldset != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            }

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCashbookEntryResponse>("/c/{company_id}/cashbook/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCashbookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Cashbook Entry Gets the specified cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCashbookEntryResponse</returns>
        public async System.Threading.Tasks.Task<GetCashbookEntryResponse> GetCashbookEntryAsync(int companyId, int documentId, string fields = default(string), string fieldset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetCashbookEntryResponse> localVarResponse = await GetCashbookEntryWithHttpInfoAsync(companyId, documentId, fields, fieldset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cashbook Entry Gets the specified cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCashbookEntryResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetCashbookEntryResponse>> GetCashbookEntryWithHttpInfoAsync(int companyId, int documentId, string fields = default(string), string fieldset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (fieldset != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            }

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCashbookEntryResponse>("/c/{company_id}/cashbook/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCashbookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Cashbook Entries Lists the cashbook entries.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="dateFrom">Start date.</param>
        /// <param name="dateTo">End date.</param>
        /// <param name="year">Filter cashbook by year. (optional)</param>
        /// <param name="type">Filter cashbook by type. (optional)</param>
        /// <param name="paymentAccountId">Filter by payment account. (optional)</param>
        /// <returns>ListCashbookEntriesResponse</returns>
        public ListCashbookEntriesResponse ListCashbookEntries(int companyId, string dateFrom, string dateTo, int? year = default(int?), string type = default(string), int? paymentAccountId = default(int?))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ListCashbookEntriesResponse> localVarResponse = ListCashbookEntriesWithHttpInfo(companyId, dateFrom, dateTo, year, type, paymentAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Cashbook Entries Lists the cashbook entries.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="dateFrom">Start date.</param>
        /// <param name="dateTo">End date.</param>
        /// <param name="year">Filter cashbook by year. (optional)</param>
        /// <param name="type">Filter cashbook by type. (optional)</param>
        /// <param name="paymentAccountId">Filter by payment account. (optional)</param>
        /// <returns>ApiResponse of ListCashbookEntriesResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<ListCashbookEntriesResponse> ListCashbookEntriesWithHttpInfo(int companyId, string dateFrom, string dateTo, int? year = default(int?), string type = default(string), int? paymentAccountId = default(int?))
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'dateFrom' when calling CashbookApi->ListCashbookEntries");
            }

            // verify the required parameter 'dateTo' is set
            if (dateTo == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'dateTo' when calling CashbookApi->ListCashbookEntries");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_from", dateFrom));
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_to", dateTo));
            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (paymentAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "payment_account_id", paymentAccountId));
            }

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListCashbookEntriesResponse>("/c/{company_id}/cashbook", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCashbookEntries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Cashbook Entries Lists the cashbook entries.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="dateFrom">Start date.</param>
        /// <param name="dateTo">End date.</param>
        /// <param name="year">Filter cashbook by year. (optional)</param>
        /// <param name="type">Filter cashbook by type. (optional)</param>
        /// <param name="paymentAccountId">Filter by payment account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCashbookEntriesResponse</returns>
        public async System.Threading.Tasks.Task<ListCashbookEntriesResponse> ListCashbookEntriesAsync(int companyId, string dateFrom, string dateTo, int? year = default(int?), string type = default(string), int? paymentAccountId = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ListCashbookEntriesResponse> localVarResponse = await ListCashbookEntriesWithHttpInfoAsync(companyId, dateFrom, dateTo, year, type, paymentAccountId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Cashbook Entries Lists the cashbook entries.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="dateFrom">Start date.</param>
        /// <param name="dateTo">End date.</param>
        /// <param name="year">Filter cashbook by year. (optional)</param>
        /// <param name="type">Filter cashbook by type. (optional)</param>
        /// <param name="paymentAccountId">Filter by payment account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCashbookEntriesResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<ListCashbookEntriesResponse>> ListCashbookEntriesWithHttpInfoAsync(int companyId, string dateFrom, string dateTo, int? year = default(int?), string type = default(string), int? paymentAccountId = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'dateFrom' when calling CashbookApi->ListCashbookEntries");
            }

            // verify the required parameter 'dateTo' is set
            if (dateTo == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'dateTo' when calling CashbookApi->ListCashbookEntries");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_from", dateFrom));
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_to", dateTo));
            if (year != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "year", year));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (paymentAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "payment_account_id", paymentAccountId));
            }

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListCashbookEntriesResponse>("/c/{company_id}/cashbook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCashbookEntries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify Cashbook Entry Modifies the specified cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyCashbookEntryRequest">Cashbook Entry (optional)</param>
        /// <returns>ModifyCashbookEntryResponse</returns>
        public ModifyCashbookEntryResponse ModifyCashbookEntry(int companyId, int documentId, ModifyCashbookEntryRequest modifyCashbookEntryRequest = default(ModifyCashbookEntryRequest))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ModifyCashbookEntryResponse> localVarResponse = ModifyCashbookEntryWithHttpInfo(companyId, documentId, modifyCashbookEntryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify Cashbook Entry Modifies the specified cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyCashbookEntryRequest">Cashbook Entry (optional)</param>
        /// <returns>ApiResponse of ModifyCashbookEntryResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<ModifyCashbookEntryResponse> ModifyCashbookEntryWithHttpInfo(int companyId, int documentId, ModifyCashbookEntryRequest modifyCashbookEntryRequest = default(ModifyCashbookEntryRequest))
        {
            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            localVarRequestOptions.Data = modifyCashbookEntryRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ModifyCashbookEntryResponse>("/c/{company_id}/cashbook/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyCashbookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify Cashbook Entry Modifies the specified cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyCashbookEntryRequest">Cashbook Entry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyCashbookEntryResponse</returns>
        public async System.Threading.Tasks.Task<ModifyCashbookEntryResponse> ModifyCashbookEntryAsync(int companyId, int documentId, ModifyCashbookEntryRequest modifyCashbookEntryRequest = default(ModifyCashbookEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ModifyCashbookEntryResponse> localVarResponse = await ModifyCashbookEntryWithHttpInfoAsync(companyId, documentId, modifyCashbookEntryRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify Cashbook Entry Modifies the specified cashbook entry.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyCashbookEntryRequest">Cashbook Entry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyCashbookEntryResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<ModifyCashbookEntryResponse>> ModifyCashbookEntryWithHttpInfoAsync(int companyId, int documentId, ModifyCashbookEntryRequest modifyCashbookEntryRequest = default(ModifyCashbookEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            localVarRequestOptions.Data = modifyCashbookEntryRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ModifyCashbookEntryResponse>("/c/{company_id}/cashbook/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyCashbookEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
