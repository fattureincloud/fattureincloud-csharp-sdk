// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IWebhooksApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        WebhooksApiEvents Events { get; }

        /// <summary>
        /// Create a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Register some webhooks Subscriptions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebhooksSubscriptionApiResponse"/>&gt;</returns>
        Task<ICreateWebhooksSubscriptionApiResponse> CreateWebhooksSubscriptionAsync(int companyId, Option<CreateWebhooksSubscriptionRequest> createWebhooksSubscriptionRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Register some webhooks Subscriptions.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebhooksSubscriptionApiResponse"/>&gt;</returns>
        Task<ICreateWebhooksSubscriptionApiResponse> CreateWebhooksSubscriptionOrDefaultAsync(int companyId, Option<CreateWebhooksSubscriptionRequest> createWebhooksSubscriptionRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Delete a webhooks subscription.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWebhooksSubscriptionApiResponse"/>&gt;</returns>
        Task<IDeleteWebhooksSubscriptionApiResponse> DeleteWebhooksSubscriptionAsync(int companyId, string subscriptionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Delete a webhooks subscription.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWebhooksSubscriptionApiResponse"/>&gt;</returns>
        Task<IDeleteWebhooksSubscriptionApiResponse> DeleteWebhooksSubscriptionOrDefaultAsync(int companyId, string subscriptionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Get a webhooks subscription.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhooksSubscriptionApiResponse"/>&gt;</returns>
        Task<IGetWebhooksSubscriptionApiResponse> GetWebhooksSubscriptionAsync(int companyId, string subscriptionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Get a webhooks subscription.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhooksSubscriptionApiResponse"/>&gt;</returns>
        Task<IGetWebhooksSubscriptionApiResponse> GetWebhooksSubscriptionOrDefaultAsync(int companyId, string subscriptionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Webhooks Subscriptions
        /// </summary>
        /// <remarks>
        /// List active webhooks subscriptions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListWebhooksSubscriptionsApiResponse"/>&gt;</returns>
        Task<IListWebhooksSubscriptionsApiResponse> ListWebhooksSubscriptionsAsync(int companyId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Webhooks Subscriptions
        /// </summary>
        /// <remarks>
        /// List active webhooks subscriptions.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListWebhooksSubscriptionsApiResponse"/>&gt;</returns>
        Task<IListWebhooksSubscriptionsApiResponse> ListWebhooksSubscriptionsOrDefaultAsync(int companyId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Edit a webhooks subscription.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="modifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyWebhooksSubscriptionApiResponse"/>&gt;</returns>
        Task<IModifyWebhooksSubscriptionApiResponse> ModifyWebhooksSubscriptionAsync(int companyId, string subscriptionId, Option<ModifyWebhooksSubscriptionRequest> modifyWebhooksSubscriptionRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Edit a webhooks subscription.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="modifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyWebhooksSubscriptionApiResponse"/>&gt;</returns>
        Task<IModifyWebhooksSubscriptionApiResponse> ModifyWebhooksSubscriptionOrDefaultAsync(int companyId, string subscriptionId, Option<ModifyWebhooksSubscriptionRequest> modifyWebhooksSubscriptionRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Verify a webhook subscription.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="verifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyWebhooksSubscriptionApiResponse"/>&gt;</returns>
        Task<IVerifyWebhooksSubscriptionApiResponse> VerifyWebhooksSubscriptionAsync(int companyId, string subscriptionId, Option<VerifyWebhooksSubscriptionRequest> verifyWebhooksSubscriptionRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Verify a webhook subscription.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="verifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyWebhooksSubscriptionApiResponse"/>&gt;</returns>
        Task<IVerifyWebhooksSubscriptionApiResponse> VerifyWebhooksSubscriptionOrDefaultAsync(int companyId, string subscriptionId, Option<VerifyWebhooksSubscriptionRequest> verifyWebhooksSubscriptionRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateWebhooksSubscriptionApiResponse"/>
    /// </summary>
    public interface ICreateWebhooksSubscriptionApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.CreateWebhooksSubscriptionResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteWebhooksSubscriptionApiResponse"/>
    /// </summary>
    public interface IDeleteWebhooksSubscriptionApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetWebhooksSubscriptionApiResponse"/>
    /// </summary>
    public interface IGetWebhooksSubscriptionApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetWebhooksSubscriptionResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListWebhooksSubscriptionsApiResponse"/>
    /// </summary>
    public interface IListWebhooksSubscriptionsApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ListWebhooksSubscriptionsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IModifyWebhooksSubscriptionApiResponse"/>
    /// </summary>
    public interface IModifyWebhooksSubscriptionApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ModifyWebhooksSubscriptionResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IVerifyWebhooksSubscriptionApiResponse"/>
    /// </summary>
    public interface IVerifyWebhooksSubscriptionApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class WebhooksApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateWebhooksSubscription;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateWebhooksSubscription;

        internal void ExecuteOnCreateWebhooksSubscription(WebhooksApi.CreateWebhooksSubscriptionApiResponse apiResponse)
        {
            OnCreateWebhooksSubscription?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateWebhooksSubscription(Exception exception)
        {
            OnErrorCreateWebhooksSubscription?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteWebhooksSubscription;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteWebhooksSubscription;

        internal void ExecuteOnDeleteWebhooksSubscription(WebhooksApi.DeleteWebhooksSubscriptionApiResponse apiResponse)
        {
            OnDeleteWebhooksSubscription?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteWebhooksSubscription(Exception exception)
        {
            OnErrorDeleteWebhooksSubscription?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetWebhooksSubscription;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetWebhooksSubscription;

        internal void ExecuteOnGetWebhooksSubscription(WebhooksApi.GetWebhooksSubscriptionApiResponse apiResponse)
        {
            OnGetWebhooksSubscription?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWebhooksSubscription(Exception exception)
        {
            OnErrorGetWebhooksSubscription?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnListWebhooksSubscriptions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorListWebhooksSubscriptions;

        internal void ExecuteOnListWebhooksSubscriptions(WebhooksApi.ListWebhooksSubscriptionsApiResponse apiResponse)
        {
            OnListWebhooksSubscriptions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListWebhooksSubscriptions(Exception exception)
        {
            OnErrorListWebhooksSubscriptions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnModifyWebhooksSubscription;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorModifyWebhooksSubscription;

        internal void ExecuteOnModifyWebhooksSubscription(WebhooksApi.ModifyWebhooksSubscriptionApiResponse apiResponse)
        {
            OnModifyWebhooksSubscription?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorModifyWebhooksSubscription(Exception exception)
        {
            OnErrorModifyWebhooksSubscription?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnVerifyWebhooksSubscription;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorVerifyWebhooksSubscription;

        internal void ExecuteOnVerifyWebhooksSubscription(WebhooksApi.VerifyWebhooksSubscriptionApiResponse apiResponse)
        {
            OnVerifyWebhooksSubscription?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorVerifyWebhooksSubscription(Exception exception)
        {
            OnErrorVerifyWebhooksSubscription?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class WebhooksApi : IWebhooksApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<WebhooksApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public WebhooksApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(ILogger<WebhooksApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, WebhooksApiEvents webhooksApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<WebhooksApi>();
            HttpClient = httpClient;
            Events = webhooksApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatCreateWebhooksSubscription(ref int companyId, Option<CreateWebhooksSubscriptionRequest> createWebhooksSubscriptionRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createWebhooksSubscriptionRequest"></param>
        /// <returns></returns>
        private void ValidateCreateWebhooksSubscription(Option<CreateWebhooksSubscriptionRequest> createWebhooksSubscriptionRequest)
        {
            if (createWebhooksSubscriptionRequest.IsSet && createWebhooksSubscriptionRequest.Value == null)
                throw new ArgumentNullException(nameof(createWebhooksSubscriptionRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createWebhooksSubscriptionRequest"></param>
        private void AfterCreateWebhooksSubscriptionDefaultImplementation(ICreateWebhooksSubscriptionApiResponse apiResponseLocalVar, int companyId, Option<CreateWebhooksSubscriptionRequest> createWebhooksSubscriptionRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateWebhooksSubscription(ref suppressDefaultLog, apiResponseLocalVar, companyId, createWebhooksSubscriptionRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createWebhooksSubscriptionRequest"></param>
        partial void AfterCreateWebhooksSubscription(ref bool suppressDefaultLog, ICreateWebhooksSubscriptionApiResponse apiResponseLocalVar, int companyId, Option<CreateWebhooksSubscriptionRequest> createWebhooksSubscriptionRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createWebhooksSubscriptionRequest"></param>
        private void OnErrorCreateWebhooksSubscriptionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreateWebhooksSubscriptionRequest> createWebhooksSubscriptionRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateWebhooksSubscription(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, createWebhooksSubscriptionRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createWebhooksSubscriptionRequest"></param>
        partial void OnErrorCreateWebhooksSubscription(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreateWebhooksSubscriptionRequest> createWebhooksSubscriptionRequest);

        /// <summary>
        /// Create a Webhook Subscription Register some webhooks Subscriptions.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebhooksSubscriptionApiResponse"/>&gt;</returns>
        public async Task<ICreateWebhooksSubscriptionApiResponse> CreateWebhooksSubscriptionOrDefaultAsync(int companyId, Option<CreateWebhooksSubscriptionRequest> createWebhooksSubscriptionRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateWebhooksSubscriptionAsync(companyId, createWebhooksSubscriptionRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a Webhook Subscription Register some webhooks Subscriptions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebhooksSubscriptionApiResponse"/>&gt;</returns>
        public async Task<ICreateWebhooksSubscriptionApiResponse> CreateWebhooksSubscriptionAsync(int companyId, Option<CreateWebhooksSubscriptionRequest> createWebhooksSubscriptionRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateWebhooksSubscription(createWebhooksSubscriptionRequest);

                FormatCreateWebhooksSubscription(ref companyId, createWebhooksSubscriptionRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/subscriptions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/subscriptions");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    if (createWebhooksSubscriptionRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createWebhooksSubscriptionRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createWebhooksSubscriptionRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreateWebhooksSubscriptionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateWebhooksSubscriptionApiResponse>();
                        CreateWebhooksSubscriptionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new CreateWebhooksSubscriptionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/subscriptions", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreateWebhooksSubscriptionDefaultImplementation(apiResponseLocalVar, companyId, createWebhooksSubscriptionRequest);

                        Events.ExecuteOnCreateWebhooksSubscription(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateWebhooksSubscriptionDefaultImplementation(e, "/c/{company_id}/subscriptions", uriBuilderLocalVar.Path, companyId, createWebhooksSubscriptionRequest);
                Events.ExecuteOnErrorCreateWebhooksSubscription(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateWebhooksSubscriptionApiResponse"/>
        /// </summary>
        public partial class CreateWebhooksSubscriptionApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, ICreateWebhooksSubscriptionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateWebhooksSubscriptionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateWebhooksSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateWebhooksSubscriptionApiResponse(ILogger<CreateWebhooksSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreateWebhooksSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateWebhooksSubscriptionApiResponse(ILogger<CreateWebhooksSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.CreateWebhooksSubscriptionResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.CreateWebhooksSubscriptionResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.CreateWebhooksSubscriptionResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteWebhooksSubscription(ref int companyId, ref string subscriptionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <returns></returns>
        private void ValidateDeleteWebhooksSubscription(string subscriptionId)
        {
            if (subscriptionId == null)
                throw new ArgumentNullException(nameof(subscriptionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        private void AfterDeleteWebhooksSubscriptionDefaultImplementation(IDeleteWebhooksSubscriptionApiResponse apiResponseLocalVar, int companyId, string subscriptionId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteWebhooksSubscription(ref suppressDefaultLog, apiResponseLocalVar, companyId, subscriptionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        partial void AfterDeleteWebhooksSubscription(ref bool suppressDefaultLog, IDeleteWebhooksSubscriptionApiResponse apiResponseLocalVar, int companyId, string subscriptionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        private void OnErrorDeleteWebhooksSubscriptionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string subscriptionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteWebhooksSubscription(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, subscriptionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        partial void OnErrorDeleteWebhooksSubscription(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string subscriptionId);

        /// <summary>
        /// Delete Webhooks Subscription Delete a webhooks subscription.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWebhooksSubscriptionApiResponse"/>&gt;</returns>
        public async Task<IDeleteWebhooksSubscriptionApiResponse> DeleteWebhooksSubscriptionOrDefaultAsync(int companyId, string subscriptionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteWebhooksSubscriptionAsync(companyId, subscriptionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Webhooks Subscription Delete a webhooks subscription.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWebhooksSubscriptionApiResponse"/>&gt;</returns>
        public async Task<IDeleteWebhooksSubscriptionApiResponse> DeleteWebhooksSubscriptionAsync(int companyId, string subscriptionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteWebhooksSubscription(subscriptionId);

                FormatDeleteWebhooksSubscription(ref companyId, ref subscriptionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/subscriptions/{subscription_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/subscriptions/{subscription_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsubscription_id%7D", Uri.EscapeDataString(subscriptionId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteWebhooksSubscriptionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteWebhooksSubscriptionApiResponse>();
                        DeleteWebhooksSubscriptionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteWebhooksSubscriptionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/subscriptions/{subscription_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteWebhooksSubscriptionDefaultImplementation(apiResponseLocalVar, companyId, subscriptionId);

                        Events.ExecuteOnDeleteWebhooksSubscription(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteWebhooksSubscriptionDefaultImplementation(e, "/c/{company_id}/subscriptions/{subscription_id}", uriBuilderLocalVar.Path, companyId, subscriptionId);
                Events.ExecuteOnErrorDeleteWebhooksSubscription(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteWebhooksSubscriptionApiResponse"/>
        /// </summary>
        public partial class DeleteWebhooksSubscriptionApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IDeleteWebhooksSubscriptionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteWebhooksSubscriptionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteWebhooksSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteWebhooksSubscriptionApiResponse(ILogger<DeleteWebhooksSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteWebhooksSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteWebhooksSubscriptionApiResponse(ILogger<DeleteWebhooksSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetWebhooksSubscription(ref int companyId, ref string subscriptionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <returns></returns>
        private void ValidateGetWebhooksSubscription(string subscriptionId)
        {
            if (subscriptionId == null)
                throw new ArgumentNullException(nameof(subscriptionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        private void AfterGetWebhooksSubscriptionDefaultImplementation(IGetWebhooksSubscriptionApiResponse apiResponseLocalVar, int companyId, string subscriptionId)
        {
            bool suppressDefaultLog = false;
            AfterGetWebhooksSubscription(ref suppressDefaultLog, apiResponseLocalVar, companyId, subscriptionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        partial void AfterGetWebhooksSubscription(ref bool suppressDefaultLog, IGetWebhooksSubscriptionApiResponse apiResponseLocalVar, int companyId, string subscriptionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        private void OnErrorGetWebhooksSubscriptionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string subscriptionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWebhooksSubscription(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, subscriptionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        partial void OnErrorGetWebhooksSubscription(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string subscriptionId);

        /// <summary>
        /// Get Webhooks Subscription Get a webhooks subscription.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhooksSubscriptionApiResponse"/>&gt;</returns>
        public async Task<IGetWebhooksSubscriptionApiResponse> GetWebhooksSubscriptionOrDefaultAsync(int companyId, string subscriptionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWebhooksSubscriptionAsync(companyId, subscriptionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Webhooks Subscription Get a webhooks subscription.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhooksSubscriptionApiResponse"/>&gt;</returns>
        public async Task<IGetWebhooksSubscriptionApiResponse> GetWebhooksSubscriptionAsync(int companyId, string subscriptionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetWebhooksSubscription(subscriptionId);

                FormatGetWebhooksSubscription(ref companyId, ref subscriptionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/subscriptions/{subscription_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/subscriptions/{subscription_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsubscription_id%7D", Uri.EscapeDataString(subscriptionId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetWebhooksSubscriptionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWebhooksSubscriptionApiResponse>();
                        GetWebhooksSubscriptionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetWebhooksSubscriptionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/subscriptions/{subscription_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetWebhooksSubscriptionDefaultImplementation(apiResponseLocalVar, companyId, subscriptionId);

                        Events.ExecuteOnGetWebhooksSubscription(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWebhooksSubscriptionDefaultImplementation(e, "/c/{company_id}/subscriptions/{subscription_id}", uriBuilderLocalVar.Path, companyId, subscriptionId);
                Events.ExecuteOnErrorGetWebhooksSubscription(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWebhooksSubscriptionApiResponse"/>
        /// </summary>
        public partial class GetWebhooksSubscriptionApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetWebhooksSubscriptionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWebhooksSubscriptionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWebhooksSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWebhooksSubscriptionApiResponse(ILogger<GetWebhooksSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetWebhooksSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWebhooksSubscriptionApiResponse(ILogger<GetWebhooksSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetWebhooksSubscriptionResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetWebhooksSubscriptionResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetWebhooksSubscriptionResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListWebhooksSubscriptions(ref int companyId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        private void AfterListWebhooksSubscriptionsDefaultImplementation(IListWebhooksSubscriptionsApiResponse apiResponseLocalVar, int companyId)
        {
            bool suppressDefaultLog = false;
            AfterListWebhooksSubscriptions(ref suppressDefaultLog, apiResponseLocalVar, companyId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        partial void AfterListWebhooksSubscriptions(ref bool suppressDefaultLog, IListWebhooksSubscriptionsApiResponse apiResponseLocalVar, int companyId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        private void OnErrorListWebhooksSubscriptionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListWebhooksSubscriptions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        partial void OnErrorListWebhooksSubscriptions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId);

        /// <summary>
        /// List Webhooks Subscriptions List active webhooks subscriptions.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListWebhooksSubscriptionsApiResponse"/>&gt;</returns>
        public async Task<IListWebhooksSubscriptionsApiResponse> ListWebhooksSubscriptionsOrDefaultAsync(int companyId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListWebhooksSubscriptionsAsync(companyId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Webhooks Subscriptions List active webhooks subscriptions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListWebhooksSubscriptionsApiResponse"/>&gt;</returns>
        public async Task<IListWebhooksSubscriptionsApiResponse> ListWebhooksSubscriptionsAsync(int companyId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatListWebhooksSubscriptions(ref companyId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/subscriptions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/subscriptions");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ListWebhooksSubscriptionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListWebhooksSubscriptionsApiResponse>();
                        ListWebhooksSubscriptionsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ListWebhooksSubscriptionsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/subscriptions", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterListWebhooksSubscriptionsDefaultImplementation(apiResponseLocalVar, companyId);

                        Events.ExecuteOnListWebhooksSubscriptions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListWebhooksSubscriptionsDefaultImplementation(e, "/c/{company_id}/subscriptions", uriBuilderLocalVar.Path, companyId);
                Events.ExecuteOnErrorListWebhooksSubscriptions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListWebhooksSubscriptionsApiResponse"/>
        /// </summary>
        public partial class ListWebhooksSubscriptionsApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IListWebhooksSubscriptionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListWebhooksSubscriptionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListWebhooksSubscriptionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListWebhooksSubscriptionsApiResponse(ILogger<ListWebhooksSubscriptionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ListWebhooksSubscriptionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListWebhooksSubscriptionsApiResponse(ILogger<ListWebhooksSubscriptionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ListWebhooksSubscriptionsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ListWebhooksSubscriptionsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ListWebhooksSubscriptionsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatModifyWebhooksSubscription(ref int companyId, ref string subscriptionId, Option<ModifyWebhooksSubscriptionRequest> modifyWebhooksSubscriptionRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <param name="modifyWebhooksSubscriptionRequest"></param>
        /// <returns></returns>
        private void ValidateModifyWebhooksSubscription(string subscriptionId, Option<ModifyWebhooksSubscriptionRequest> modifyWebhooksSubscriptionRequest)
        {
            if (subscriptionId == null)
                throw new ArgumentNullException(nameof(subscriptionId));

            if (modifyWebhooksSubscriptionRequest.IsSet && modifyWebhooksSubscriptionRequest.Value == null)
                throw new ArgumentNullException(nameof(modifyWebhooksSubscriptionRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="modifyWebhooksSubscriptionRequest"></param>
        private void AfterModifyWebhooksSubscriptionDefaultImplementation(IModifyWebhooksSubscriptionApiResponse apiResponseLocalVar, int companyId, string subscriptionId, Option<ModifyWebhooksSubscriptionRequest> modifyWebhooksSubscriptionRequest)
        {
            bool suppressDefaultLog = false;
            AfterModifyWebhooksSubscription(ref suppressDefaultLog, apiResponseLocalVar, companyId, subscriptionId, modifyWebhooksSubscriptionRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="modifyWebhooksSubscriptionRequest"></param>
        partial void AfterModifyWebhooksSubscription(ref bool suppressDefaultLog, IModifyWebhooksSubscriptionApiResponse apiResponseLocalVar, int companyId, string subscriptionId, Option<ModifyWebhooksSubscriptionRequest> modifyWebhooksSubscriptionRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="modifyWebhooksSubscriptionRequest"></param>
        private void OnErrorModifyWebhooksSubscriptionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string subscriptionId, Option<ModifyWebhooksSubscriptionRequest> modifyWebhooksSubscriptionRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorModifyWebhooksSubscription(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, subscriptionId, modifyWebhooksSubscriptionRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="modifyWebhooksSubscriptionRequest"></param>
        partial void OnErrorModifyWebhooksSubscription(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string subscriptionId, Option<ModifyWebhooksSubscriptionRequest> modifyWebhooksSubscriptionRequest);

        /// <summary>
        /// Modify Webhooks Subscription Edit a webhooks subscription.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="modifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyWebhooksSubscriptionApiResponse"/>&gt;</returns>
        public async Task<IModifyWebhooksSubscriptionApiResponse> ModifyWebhooksSubscriptionOrDefaultAsync(int companyId, string subscriptionId, Option<ModifyWebhooksSubscriptionRequest> modifyWebhooksSubscriptionRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ModifyWebhooksSubscriptionAsync(companyId, subscriptionId, modifyWebhooksSubscriptionRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Modify Webhooks Subscription Edit a webhooks subscription.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="modifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyWebhooksSubscriptionApiResponse"/>&gt;</returns>
        public async Task<IModifyWebhooksSubscriptionApiResponse> ModifyWebhooksSubscriptionAsync(int companyId, string subscriptionId, Option<ModifyWebhooksSubscriptionRequest> modifyWebhooksSubscriptionRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateModifyWebhooksSubscription(subscriptionId, modifyWebhooksSubscriptionRequest);

                FormatModifyWebhooksSubscription(ref companyId, ref subscriptionId, modifyWebhooksSubscriptionRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/subscriptions/{subscription_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/subscriptions/{subscription_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsubscription_id%7D", Uri.EscapeDataString(subscriptionId.ToString()));

                    if (modifyWebhooksSubscriptionRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (modifyWebhooksSubscriptionRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modifyWebhooksSubscriptionRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ModifyWebhooksSubscriptionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ModifyWebhooksSubscriptionApiResponse>();
                        ModifyWebhooksSubscriptionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ModifyWebhooksSubscriptionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/subscriptions/{subscription_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterModifyWebhooksSubscriptionDefaultImplementation(apiResponseLocalVar, companyId, subscriptionId, modifyWebhooksSubscriptionRequest);

                        Events.ExecuteOnModifyWebhooksSubscription(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorModifyWebhooksSubscriptionDefaultImplementation(e, "/c/{company_id}/subscriptions/{subscription_id}", uriBuilderLocalVar.Path, companyId, subscriptionId, modifyWebhooksSubscriptionRequest);
                Events.ExecuteOnErrorModifyWebhooksSubscription(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ModifyWebhooksSubscriptionApiResponse"/>
        /// </summary>
        public partial class ModifyWebhooksSubscriptionApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IModifyWebhooksSubscriptionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ModifyWebhooksSubscriptionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ModifyWebhooksSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyWebhooksSubscriptionApiResponse(ILogger<ModifyWebhooksSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ModifyWebhooksSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyWebhooksSubscriptionApiResponse(ILogger<ModifyWebhooksSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ModifyWebhooksSubscriptionResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ModifyWebhooksSubscriptionResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ModifyWebhooksSubscriptionResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatVerifyWebhooksSubscription(ref int companyId, ref string subscriptionId, Option<VerifyWebhooksSubscriptionRequest> verifyWebhooksSubscriptionRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <param name="verifyWebhooksSubscriptionRequest"></param>
        /// <returns></returns>
        private void ValidateVerifyWebhooksSubscription(string subscriptionId, Option<VerifyWebhooksSubscriptionRequest> verifyWebhooksSubscriptionRequest)
        {
            if (subscriptionId == null)
                throw new ArgumentNullException(nameof(subscriptionId));

            if (verifyWebhooksSubscriptionRequest.IsSet && verifyWebhooksSubscriptionRequest.Value == null)
                throw new ArgumentNullException(nameof(verifyWebhooksSubscriptionRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="verifyWebhooksSubscriptionRequest"></param>
        private void AfterVerifyWebhooksSubscriptionDefaultImplementation(IVerifyWebhooksSubscriptionApiResponse apiResponseLocalVar, int companyId, string subscriptionId, Option<VerifyWebhooksSubscriptionRequest> verifyWebhooksSubscriptionRequest)
        {
            bool suppressDefaultLog = false;
            AfterVerifyWebhooksSubscription(ref suppressDefaultLog, apiResponseLocalVar, companyId, subscriptionId, verifyWebhooksSubscriptionRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="verifyWebhooksSubscriptionRequest"></param>
        partial void AfterVerifyWebhooksSubscription(ref bool suppressDefaultLog, IVerifyWebhooksSubscriptionApiResponse apiResponseLocalVar, int companyId, string subscriptionId, Option<VerifyWebhooksSubscriptionRequest> verifyWebhooksSubscriptionRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="verifyWebhooksSubscriptionRequest"></param>
        private void OnErrorVerifyWebhooksSubscriptionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string subscriptionId, Option<VerifyWebhooksSubscriptionRequest> verifyWebhooksSubscriptionRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorVerifyWebhooksSubscription(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, subscriptionId, verifyWebhooksSubscriptionRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="verifyWebhooksSubscriptionRequest"></param>
        partial void OnErrorVerifyWebhooksSubscription(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string subscriptionId, Option<VerifyWebhooksSubscriptionRequest> verifyWebhooksSubscriptionRequest);

        /// <summary>
        /// Verify Webhooks Subscription Verify a webhook subscription.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="verifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyWebhooksSubscriptionApiResponse"/>&gt;</returns>
        public async Task<IVerifyWebhooksSubscriptionApiResponse> VerifyWebhooksSubscriptionOrDefaultAsync(int companyId, string subscriptionId, Option<VerifyWebhooksSubscriptionRequest> verifyWebhooksSubscriptionRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await VerifyWebhooksSubscriptionAsync(companyId, subscriptionId, verifyWebhooksSubscriptionRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Verify Webhooks Subscription Verify a webhook subscription.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="verifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyWebhooksSubscriptionApiResponse"/>&gt;</returns>
        public async Task<IVerifyWebhooksSubscriptionApiResponse> VerifyWebhooksSubscriptionAsync(int companyId, string subscriptionId, Option<VerifyWebhooksSubscriptionRequest> verifyWebhooksSubscriptionRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateVerifyWebhooksSubscription(subscriptionId, verifyWebhooksSubscriptionRequest);

                FormatVerifyWebhooksSubscription(ref companyId, ref subscriptionId, verifyWebhooksSubscriptionRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/subscriptions/{subscription_id}/verify"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/subscriptions/{subscription_id}/verify");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsubscription_id%7D", Uri.EscapeDataString(subscriptionId.ToString()));

                    if (verifyWebhooksSubscriptionRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (verifyWebhooksSubscriptionRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(verifyWebhooksSubscriptionRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<VerifyWebhooksSubscriptionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<VerifyWebhooksSubscriptionApiResponse>();
                        VerifyWebhooksSubscriptionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new VerifyWebhooksSubscriptionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/subscriptions/{subscription_id}/verify", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterVerifyWebhooksSubscriptionDefaultImplementation(apiResponseLocalVar, companyId, subscriptionId, verifyWebhooksSubscriptionRequest);

                        Events.ExecuteOnVerifyWebhooksSubscription(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorVerifyWebhooksSubscriptionDefaultImplementation(e, "/c/{company_id}/subscriptions/{subscription_id}/verify", uriBuilderLocalVar.Path, companyId, subscriptionId, verifyWebhooksSubscriptionRequest);
                Events.ExecuteOnErrorVerifyWebhooksSubscription(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="VerifyWebhooksSubscriptionApiResponse"/>
        /// </summary>
        public partial class VerifyWebhooksSubscriptionApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IVerifyWebhooksSubscriptionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<VerifyWebhooksSubscriptionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="VerifyWebhooksSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public VerifyWebhooksSubscriptionApiResponse(ILogger<VerifyWebhooksSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="VerifyWebhooksSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public VerifyWebhooksSubscriptionApiResponse(ILogger<VerifyWebhooksSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
