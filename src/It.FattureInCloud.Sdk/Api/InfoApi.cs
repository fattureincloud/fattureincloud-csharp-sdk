/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInfoApiSync : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///     List Archive Categories
        /// </summary>
        /// <remarks>
        ///     Lists the archive categories.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ListArchiveCategoriesResponse</returns>
        ListArchiveCategoriesResponse ListArchiveCategories(int companyId);

        /// <summary>
        ///     List Archive Categories
        /// </summary>
        /// <remarks>
        ///     Lists the archive categories.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ApiResponse of ListArchiveCategoriesResponse</returns>
        ApiResponse<ListArchiveCategoriesResponse> ListArchiveCategoriesWithHttpInfo(int companyId);

        /// <summary>
        ///     List Cities
        /// </summary>
        /// <remarks>
        ///     Lists the Italian cities.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">Postal code for filtering. (optional)</param>
        /// <param name="city">City for filtering (ignored if postal_code is passed). (optional)</param>
        /// <returns>ListCitiesResponse</returns>
        ListCitiesResponse ListCities(string postalCode = default(string), string city = default(string));

        /// <summary>
        ///     List Cities
        /// </summary>
        /// <remarks>
        ///     Lists the Italian cities.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">Postal code for filtering. (optional)</param>
        /// <param name="city">City for filtering (ignored if postal_code is passed). (optional)</param>
        /// <returns>ApiResponse of ListCitiesResponse</returns>
        ApiResponse<ListCitiesResponse> ListCitiesWithHttpInfo(string postalCode = default(string),
            string city = default(string));

        /// <summary>
        ///     List Cost Centers
        /// </summary>
        /// <remarks>
        ///     Lists the cost centers.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ListCostCentersResponse</returns>
        ListCostCentersResponse ListCostCenters(int companyId);

        /// <summary>
        ///     List Cost Centers
        /// </summary>
        /// <remarks>
        ///     Lists the cost centers.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ApiResponse of ListCostCentersResponse</returns>
        ApiResponse<ListCostCentersResponse> ListCostCentersWithHttpInfo(int companyId);

        /// <summary>
        ///     List Countries
        /// </summary>
        /// <remarks>
        ///     Lists the supported countries.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListCountriesResponse</returns>
        ListCountriesResponse ListCountries();

        /// <summary>
        ///     List Countries
        /// </summary>
        /// <remarks>
        ///     Lists the supported countries.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListCountriesResponse</returns>
        ApiResponse<ListCountriesResponse> ListCountriesWithHttpInfo();

        /// <summary>
        ///     List Currencies
        /// </summary>
        /// <remarks>
        ///     Lists the supported currencies.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListCurrenciesResponse</returns>
        ListCurrenciesResponse ListCurrencies();

        /// <summary>
        ///     List Currencies
        /// </summary>
        /// <remarks>
        ///     Lists the supported currencies.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListCurrenciesResponse</returns>
        ApiResponse<ListCurrenciesResponse> ListCurrenciesWithHttpInfo();

        /// <summary>
        ///     List Delivery Notes Default Causals
        /// </summary>
        /// <remarks>
        ///     Lists the delivery note default causals.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListDeliveryNotesDefaultCausalsResponse</returns>
        ListDeliveryNotesDefaultCausalsResponse ListDeliveryNotesDefaultCausals();

        /// <summary>
        ///     List Delivery Notes Default Causals
        /// </summary>
        /// <remarks>
        ///     Lists the delivery note default causals.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListDeliveryNotesDefaultCausalsResponse</returns>
        ApiResponse<ListDeliveryNotesDefaultCausalsResponse> ListDeliveryNotesDefaultCausalsWithHttpInfo();

        /// <summary>
        ///     List Detailed Countries
        /// </summary>
        /// <remarks>
        ///     Lists the supported countries.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListDetailedCountriesResponse</returns>
        ListDetailedCountriesResponse ListDetailedCountries();

        /// <summary>
        ///     List Detailed Countries
        /// </summary>
        /// <remarks>
        ///     Lists the supported countries.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListDetailedCountriesResponse</returns>
        ApiResponse<ListDetailedCountriesResponse> ListDetailedCountriesWithHttpInfo();

        /// <summary>
        ///     List Languages
        /// </summary>
        /// <remarks>
        ///     Lists the supported languages.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListLanguagesResponse</returns>
        ListLanguagesResponse ListLanguages();

        /// <summary>
        ///     List Languages
        /// </summary>
        /// <remarks>
        ///     Lists the supported languages.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListLanguagesResponse</returns>
        ApiResponse<ListLanguagesResponse> ListLanguagesWithHttpInfo();

        /// <summary>
        ///     List Payment Accounts
        /// </summary>
        /// <remarks>
        ///     Lists the available payment accounts.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <returns>ListPaymentAccountsResponse</returns>
        ListPaymentAccountsResponse ListPaymentAccounts(int companyId, string fields = default(string),
            string fieldset = default(string), string sort = default(string));

        /// <summary>
        ///     List Payment Accounts
        /// </summary>
        /// <remarks>
        ///     Lists the available payment accounts.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <returns>ApiResponse of ListPaymentAccountsResponse</returns>
        ApiResponse<ListPaymentAccountsResponse> ListPaymentAccountsWithHttpInfo(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string));

        /// <summary>
        ///     List Payment Methods
        /// </summary>
        /// <remarks>
        ///     Lists the available payment methods.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <returns>ListPaymentMethodsResponse</returns>
        ListPaymentMethodsResponse ListPaymentMethods(int companyId, string fields = default(string),
            string fieldset = default(string), string sort = default(string));

        /// <summary>
        ///     List Payment Methods
        /// </summary>
        /// <remarks>
        ///     Lists the available payment methods.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <returns>ApiResponse of ListPaymentMethodsResponse</returns>
        ApiResponse<ListPaymentMethodsResponse> ListPaymentMethodsWithHttpInfo(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string));

        /// <summary>
        ///     List Product Categories
        /// </summary>
        /// <remarks>
        ///     Lists the product categories.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="context"></param>
        /// <returns>ListProductCategoriesResponse</returns>
        ListProductCategoriesResponse ListProductCategories(int companyId, string context);

        /// <summary>
        ///     List Product Categories
        /// </summary>
        /// <remarks>
        ///     Lists the product categories.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="context"></param>
        /// <returns>ApiResponse of ListProductCategoriesResponse</returns>
        ApiResponse<ListProductCategoriesResponse> ListProductCategoriesWithHttpInfo(int companyId, string context);

        /// <summary>
        ///     List Received Document Categories
        /// </summary>
        /// <remarks>
        ///     Lists the received document categories.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ListReceivedDocumentCategoriesResponse</returns>
        ListReceivedDocumentCategoriesResponse ListReceivedDocumentCategories(int companyId);

        /// <summary>
        ///     List Received Document Categories
        /// </summary>
        /// <remarks>
        ///     Lists the received document categories.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ApiResponse of ListReceivedDocumentCategoriesResponse</returns>
        ApiResponse<ListReceivedDocumentCategoriesResponse> ListReceivedDocumentCategoriesWithHttpInfo(int companyId);

        /// <summary>
        ///     List Revenue Centers
        /// </summary>
        /// <remarks>
        ///     Lists the revenue centers.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ListRevenueCentersResponse</returns>
        ListRevenueCentersResponse ListRevenueCenters(int companyId);

        /// <summary>
        ///     List Revenue Centers
        /// </summary>
        /// <remarks>
        ///     Lists the revenue centers.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ApiResponse of ListRevenueCentersResponse</returns>
        ApiResponse<ListRevenueCentersResponse> ListRevenueCentersWithHttpInfo(int companyId);

        /// <summary>
        ///     List Templates
        /// </summary>
        /// <remarks>
        ///     Lists the available templates.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the templates. (optional, default to all)</param>
        /// <param name="byType">
        ///     [Only if type&#x3D;all] If true, splits the list in objects, grouping templates by type.
        ///     (optional, default to false)
        /// </param>
        /// <returns>ListTemplatesResponse</returns>
        ListTemplatesResponse ListTemplates(string type = default(string), bool? byType = default(bool?));

        /// <summary>
        ///     List Templates
        /// </summary>
        /// <remarks>
        ///     Lists the available templates.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the templates. (optional, default to all)</param>
        /// <param name="byType">
        ///     [Only if type&#x3D;all] If true, splits the list in objects, grouping templates by type.
        ///     (optional, default to false)
        /// </param>
        /// <returns>ApiResponse of ListTemplatesResponse</returns>
        ApiResponse<ListTemplatesResponse> ListTemplatesWithHttpInfo(string type = default(string),
            bool? byType = default(bool?));

        /// <summary>
        ///     List Units of Measure
        /// </summary>
        /// <remarks>
        ///     Lists the units of measure.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListUnitsOfMeasureResponse</returns>
        ListUnitsOfMeasureResponse ListUnitsOfMeasure();

        /// <summary>
        ///     List Units of Measure
        /// </summary>
        /// <remarks>
        ///     Lists the units of measure.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListUnitsOfMeasureResponse</returns>
        ApiResponse<ListUnitsOfMeasureResponse> ListUnitsOfMeasureWithHttpInfo();

        /// <summary>
        ///     List Vat Types
        /// </summary>
        /// <remarks>
        ///     Lists the available vat types.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ListVatTypesResponse</returns>
        ListVatTypesResponse ListVatTypes(int companyId, string fieldset = default(string));

        /// <summary>
        ///     List Vat Types
        /// </summary>
        /// <remarks>
        ///     Lists the available vat types.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of ListVatTypesResponse</returns>
        ApiResponse<ListVatTypesResponse> ListVatTypesWithHttpInfo(int companyId, string fieldset = default(string));

        #endregion Synchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInfoApiAsync : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        ///     List Archive Categories
        /// </summary>
        /// <remarks>
        ///     Lists the archive categories.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListArchiveCategoriesResponse</returns>
        System.Threading.Tasks.Task<ListArchiveCategoriesResponse> ListArchiveCategoriesAsync(int companyId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Archive Categories
        /// </summary>
        /// <remarks>
        ///     Lists the archive categories.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListArchiveCategoriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListArchiveCategoriesResponse>> ListArchiveCategoriesWithHttpInfoAsync(
            int companyId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Cities
        /// </summary>
        /// <remarks>
        ///     Lists the Italian cities.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">Postal code for filtering. (optional)</param>
        /// <param name="city">City for filtering (ignored if postal_code is passed). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCitiesResponse</returns>
        System.Threading.Tasks.Task<ListCitiesResponse> ListCitiesAsync(string postalCode = default(string),
            string city = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Cities
        /// </summary>
        /// <remarks>
        ///     Lists the Italian cities.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">Postal code for filtering. (optional)</param>
        /// <param name="city">City for filtering (ignored if postal_code is passed). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCitiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCitiesResponse>> ListCitiesWithHttpInfoAsync(
            string postalCode = default(string), string city = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Cost Centers
        /// </summary>
        /// <remarks>
        ///     Lists the cost centers.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCostCentersResponse</returns>
        System.Threading.Tasks.Task<ListCostCentersResponse> ListCostCentersAsync(int companyId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Cost Centers
        /// </summary>
        /// <remarks>
        ///     Lists the cost centers.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCostCentersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCostCentersResponse>> ListCostCentersWithHttpInfoAsync(
            int companyId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Countries
        /// </summary>
        /// <remarks>
        ///     Lists the supported countries.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCountriesResponse</returns>
        System.Threading.Tasks.Task<ListCountriesResponse> ListCountriesAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Countries
        /// </summary>
        /// <remarks>
        ///     Lists the supported countries.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCountriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCountriesResponse>> ListCountriesWithHttpInfoAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Currencies
        /// </summary>
        /// <remarks>
        ///     Lists the supported currencies.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCurrenciesResponse</returns>
        System.Threading.Tasks.Task<ListCurrenciesResponse> ListCurrenciesAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Currencies
        /// </summary>
        /// <remarks>
        ///     Lists the supported currencies.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCurrenciesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCurrenciesResponse>> ListCurrenciesWithHttpInfoAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Delivery Notes Default Causals
        /// </summary>
        /// <remarks>
        ///     Lists the delivery note default causals.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDeliveryNotesDefaultCausalsResponse</returns>
        System.Threading.Tasks.Task<ListDeliveryNotesDefaultCausalsResponse> ListDeliveryNotesDefaultCausalsAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Delivery Notes Default Causals
        /// </summary>
        /// <remarks>
        ///     Lists the delivery note default causals.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDeliveryNotesDefaultCausalsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDeliveryNotesDefaultCausalsResponse>>
            ListDeliveryNotesDefaultCausalsWithHttpInfoAsync(
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Detailed Countries
        /// </summary>
        /// <remarks>
        ///     Lists the supported countries.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDetailedCountriesResponse</returns>
        System.Threading.Tasks.Task<ListDetailedCountriesResponse> ListDetailedCountriesAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Detailed Countries
        /// </summary>
        /// <remarks>
        ///     Lists the supported countries.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDetailedCountriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDetailedCountriesResponse>> ListDetailedCountriesWithHttpInfoAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Languages
        /// </summary>
        /// <remarks>
        ///     Lists the supported languages.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLanguagesResponse</returns>
        System.Threading.Tasks.Task<ListLanguagesResponse> ListLanguagesAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Languages
        /// </summary>
        /// <remarks>
        ///     Lists the supported languages.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLanguagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListLanguagesResponse>> ListLanguagesWithHttpInfoAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Payment Accounts
        /// </summary>
        /// <remarks>
        ///     Lists the available payment accounts.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListPaymentAccountsResponse</returns>
        System.Threading.Tasks.Task<ListPaymentAccountsResponse> ListPaymentAccountsAsync(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Payment Accounts
        /// </summary>
        /// <remarks>
        ///     Lists the available payment accounts.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListPaymentAccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPaymentAccountsResponse>> ListPaymentAccountsWithHttpInfoAsync(
            int companyId, string fields = default(string), string fieldset = default(string),
            string sort = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Payment Methods
        /// </summary>
        /// <remarks>
        ///     Lists the available payment methods.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListPaymentMethodsResponse</returns>
        System.Threading.Tasks.Task<ListPaymentMethodsResponse> ListPaymentMethodsAsync(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Payment Methods
        /// </summary>
        /// <remarks>
        ///     Lists the available payment methods.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListPaymentMethodsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPaymentMethodsResponse>> ListPaymentMethodsWithHttpInfoAsync(
            int companyId, string fields = default(string), string fieldset = default(string),
            string sort = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Product Categories
        /// </summary>
        /// <remarks>
        ///     Lists the product categories.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="context"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListProductCategoriesResponse</returns>
        System.Threading.Tasks.Task<ListProductCategoriesResponse> ListProductCategoriesAsync(int companyId,
            string context,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Product Categories
        /// </summary>
        /// <remarks>
        ///     Lists the product categories.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="context"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListProductCategoriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListProductCategoriesResponse>> ListProductCategoriesWithHttpInfoAsync(
            int companyId, string context,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Received Document Categories
        /// </summary>
        /// <remarks>
        ///     Lists the received document categories.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListReceivedDocumentCategoriesResponse</returns>
        System.Threading.Tasks.Task<ListReceivedDocumentCategoriesResponse> ListReceivedDocumentCategoriesAsync(
            int companyId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Received Document Categories
        /// </summary>
        /// <remarks>
        ///     Lists the received document categories.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListReceivedDocumentCategoriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListReceivedDocumentCategoriesResponse>>
            ListReceivedDocumentCategoriesWithHttpInfoAsync(int companyId,
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Revenue Centers
        /// </summary>
        /// <remarks>
        ///     Lists the revenue centers.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRevenueCentersResponse</returns>
        System.Threading.Tasks.Task<ListRevenueCentersResponse> ListRevenueCentersAsync(int companyId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Revenue Centers
        /// </summary>
        /// <remarks>
        ///     Lists the revenue centers.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRevenueCentersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRevenueCentersResponse>> ListRevenueCentersWithHttpInfoAsync(
            int companyId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Templates
        /// </summary>
        /// <remarks>
        ///     Lists the available templates.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the templates. (optional, default to all)</param>
        /// <param name="byType">
        ///     [Only if type&#x3D;all] If true, splits the list in objects, grouping templates by type.
        ///     (optional, default to false)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTemplatesResponse</returns>
        System.Threading.Tasks.Task<ListTemplatesResponse> ListTemplatesAsync(string type = default(string),
            bool? byType = default(bool?),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Templates
        /// </summary>
        /// <remarks>
        ///     Lists the available templates.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the templates. (optional, default to all)</param>
        /// <param name="byType">
        ///     [Only if type&#x3D;all] If true, splits the list in objects, grouping templates by type.
        ///     (optional, default to false)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTemplatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTemplatesResponse>> ListTemplatesWithHttpInfoAsync(
            string type = default(string), bool? byType = default(bool?),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Units of Measure
        /// </summary>
        /// <remarks>
        ///     Lists the units of measure.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListUnitsOfMeasureResponse</returns>
        System.Threading.Tasks.Task<ListUnitsOfMeasureResponse> ListUnitsOfMeasureAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Units of Measure
        /// </summary>
        /// <remarks>
        ///     Lists the units of measure.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListUnitsOfMeasureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListUnitsOfMeasureResponse>> ListUnitsOfMeasureWithHttpInfoAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Vat Types
        /// </summary>
        /// <remarks>
        ///     Lists the available vat types.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListVatTypesResponse</returns>
        System.Threading.Tasks.Task<ListVatTypesResponse> ListVatTypesAsync(int companyId,
            string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Vat Types
        /// </summary>
        /// <remarks>
        ///     Lists the available vat types.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListVatTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListVatTypesResponse>> ListVatTypesWithHttpInfoAsync(int companyId,
            string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInfoApi : IInfoApiSync, IInfoApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class InfoApi : IInfoApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="InfoApi" /> class.
        /// </summary>
        /// <returns></returns>
        public InfoApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="InfoApi" /> class.
        /// </summary>
        /// <returns></returns>
        public InfoApi(string basePath)
        {
            Configuration = Sdk.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="InfoApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InfoApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            Configuration = Sdk.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="InfoApi" /> class
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InfoApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     List Archive Categories Lists the archive categories.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ListArchiveCategoriesResponse</returns>
        public ListArchiveCategoriesResponse ListArchiveCategories(int companyId)
        {
            var localVarResponse = ListArchiveCategoriesWithHttpInfo(companyId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Archive Categories Lists the archive categories.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ApiResponse of ListArchiveCategoriesResponse</returns>
        public ApiResponse<ListArchiveCategoriesResponse> ListArchiveCategoriesWithHttpInfo(int companyId)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<ListArchiveCategoriesResponse>("/c/{company_id}/info/archive_categories",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListArchiveCategories", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Archive Categories Lists the archive categories.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListArchiveCategoriesResponse</returns>
        public async System.Threading.Tasks.Task<ListArchiveCategoriesResponse> ListArchiveCategoriesAsync(
            int companyId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListArchiveCategoriesResponse> localVarResponse =
                await ListArchiveCategoriesWithHttpInfoAsync(companyId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Archive Categories Lists the archive categories.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListArchiveCategoriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListArchiveCategoriesResponse>>
            ListArchiveCategoriesWithHttpInfoAsync(int companyId,
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListArchiveCategoriesResponse>("/c/{company_id}/info/archive_categories",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListArchiveCategories", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Cities Lists the Italian cities.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">Postal code for filtering. (optional)</param>
        /// <param name="city">City for filtering (ignored if postal_code is passed). (optional)</param>
        /// <returns>ListCitiesResponse</returns>
        public ListCitiesResponse ListCities(string postalCode = default(string), string city = default(string))
        {
            var localVarResponse = ListCitiesWithHttpInfo(postalCode, city);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Cities Lists the Italian cities.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">Postal code for filtering. (optional)</param>
        /// <param name="city">City for filtering (ignored if postal_code is passed). (optional)</param>
        /// <returns>ApiResponse of ListCitiesResponse</returns>
        public ApiResponse<ListCitiesResponse> ListCitiesWithHttpInfo(string postalCode = default(string),
            string city = default(string))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (postalCode != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "postal_code", postalCode));
            if (city != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "city", city));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<ListCitiesResponse>("/info/cities", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListCities", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Cities Lists the Italian cities.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">Postal code for filtering. (optional)</param>
        /// <param name="city">City for filtering (ignored if postal_code is passed). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCitiesResponse</returns>
        public async System.Threading.Tasks.Task<ListCitiesResponse> ListCitiesAsync(
            string postalCode = default(string), string city = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListCitiesResponse> localVarResponse =
                await ListCitiesWithHttpInfoAsync(postalCode, city, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Cities Lists the Italian cities.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">Postal code for filtering. (optional)</param>
        /// <param name="city">City for filtering (ignored if postal_code is passed). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCitiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListCitiesResponse>> ListCitiesWithHttpInfoAsync(
            string postalCode = default(string), string city = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (postalCode != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "postal_code", postalCode));
            if (city != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "city", city));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListCitiesResponse>("/info/cities", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListCities", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Cost Centers Lists the cost centers.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ListCostCentersResponse</returns>
        public ListCostCentersResponse ListCostCenters(int companyId)
        {
            var localVarResponse = ListCostCentersWithHttpInfo(companyId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Cost Centers Lists the cost centers.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ApiResponse of ListCostCentersResponse</returns>
        public ApiResponse<ListCostCentersResponse> ListCostCentersWithHttpInfo(int companyId)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<ListCostCentersResponse>("/c/{company_id}/info/cost_centers",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListCostCenters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Cost Centers Lists the cost centers.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCostCentersResponse</returns>
        public async System.Threading.Tasks.Task<ListCostCentersResponse> ListCostCentersAsync(int companyId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListCostCentersResponse> localVarResponse =
                await ListCostCentersWithHttpInfoAsync(companyId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Cost Centers Lists the cost centers.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCostCentersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListCostCentersResponse>> ListCostCentersWithHttpInfoAsync(
            int companyId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListCostCentersResponse>("/c/{company_id}/info/cost_centers", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListCostCenters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Countries Lists the supported countries.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListCountriesResponse</returns>
        public ListCountriesResponse ListCountries()
        {
            var localVarResponse = ListCountriesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Countries Lists the supported countries.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListCountriesResponse</returns>
        public ApiResponse<ListCountriesResponse> ListCountriesWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<ListCountriesResponse>("/info/countries", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListCountries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Countries Lists the supported countries.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCountriesResponse</returns>
        public async System.Threading.Tasks.Task<ListCountriesResponse> ListCountriesAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListCountriesResponse> localVarResponse =
                await ListCountriesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Countries Lists the supported countries.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCountriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListCountriesResponse>> ListCountriesWithHttpInfoAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListCountriesResponse>("/info/countries", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListCountries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Currencies Lists the supported currencies.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListCurrenciesResponse</returns>
        public ListCurrenciesResponse ListCurrencies()
        {
            var localVarResponse = ListCurrenciesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Currencies Lists the supported currencies.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListCurrenciesResponse</returns>
        public ApiResponse<ListCurrenciesResponse> ListCurrenciesWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<ListCurrenciesResponse>("/info/currencies", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Currencies Lists the supported currencies.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCurrenciesResponse</returns>
        public async System.Threading.Tasks.Task<ListCurrenciesResponse> ListCurrenciesAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListCurrenciesResponse> localVarResponse =
                await ListCurrenciesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Currencies Lists the supported currencies.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCurrenciesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListCurrenciesResponse>> ListCurrenciesWithHttpInfoAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListCurrenciesResponse>("/info/currencies", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Delivery Notes Default Causals Lists the delivery note default causals.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListDeliveryNotesDefaultCausalsResponse</returns>
        public ListDeliveryNotesDefaultCausalsResponse ListDeliveryNotesDefaultCausals()
        {
            var localVarResponse = ListDeliveryNotesDefaultCausalsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Delivery Notes Default Causals Lists the delivery note default causals.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListDeliveryNotesDefaultCausalsResponse</returns>
        public ApiResponse<ListDeliveryNotesDefaultCausalsResponse> ListDeliveryNotesDefaultCausalsWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<ListDeliveryNotesDefaultCausalsResponse>("/info/dn_causals", localVarRequestOptions,
                    Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListDeliveryNotesDefaultCausals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Delivery Notes Default Causals Lists the delivery note default causals.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDeliveryNotesDefaultCausalsResponse</returns>
        public async System.Threading.Tasks.Task<ListDeliveryNotesDefaultCausalsResponse>
            ListDeliveryNotesDefaultCausalsAsync(
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListDeliveryNotesDefaultCausalsResponse> localVarResponse =
                await ListDeliveryNotesDefaultCausalsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Delivery Notes Default Causals Lists the delivery note default causals.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDeliveryNotesDefaultCausalsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListDeliveryNotesDefaultCausalsResponse>>
            ListDeliveryNotesDefaultCausalsWithHttpInfoAsync(
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListDeliveryNotesDefaultCausalsResponse>("/info/dn_causals", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListDeliveryNotesDefaultCausals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Detailed Countries Lists the supported countries.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListDetailedCountriesResponse</returns>
        public ListDetailedCountriesResponse ListDetailedCountries()
        {
            var localVarResponse = ListDetailedCountriesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Detailed Countries Lists the supported countries.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListDetailedCountriesResponse</returns>
        public ApiResponse<ListDetailedCountriesResponse> ListDetailedCountriesWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<ListDetailedCountriesResponse>("/info/detailed_countries", localVarRequestOptions,
                    Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListDetailedCountries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Detailed Countries Lists the supported countries.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDetailedCountriesResponse</returns>
        public async System.Threading.Tasks.Task<ListDetailedCountriesResponse> ListDetailedCountriesAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListDetailedCountriesResponse> localVarResponse =
                await ListDetailedCountriesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Detailed Countries Lists the supported countries.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDetailedCountriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListDetailedCountriesResponse>>
            ListDetailedCountriesWithHttpInfoAsync(
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListDetailedCountriesResponse>("/info/detailed_countries", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListDetailedCountries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Languages Lists the supported languages.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListLanguagesResponse</returns>
        public ListLanguagesResponse ListLanguages()
        {
            var localVarResponse = ListLanguagesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Languages Lists the supported languages.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListLanguagesResponse</returns>
        public ApiResponse<ListLanguagesResponse> ListLanguagesWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<ListLanguagesResponse>("/info/languages", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListLanguages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Languages Lists the supported languages.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLanguagesResponse</returns>
        public async System.Threading.Tasks.Task<ListLanguagesResponse> ListLanguagesAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListLanguagesResponse> localVarResponse =
                await ListLanguagesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Languages Lists the supported languages.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLanguagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListLanguagesResponse>> ListLanguagesWithHttpInfoAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListLanguagesResponse>("/info/languages", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListLanguages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Payment Accounts Lists the available payment accounts.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <returns>ListPaymentAccountsResponse</returns>
        public ListPaymentAccountsResponse ListPaymentAccounts(int companyId, string fields = default(string),
            string fieldset = default(string), string sort = default(string))
        {
            var localVarResponse = ListPaymentAccountsWithHttpInfo(companyId, fields, fieldset, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Payment Accounts Lists the available payment accounts.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <returns>ApiResponse of ListPaymentAccountsResponse</returns>
        public ApiResponse<ListPaymentAccountsResponse> ListPaymentAccountsWithHttpInfo(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            if (sort != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<ListPaymentAccountsResponse>("/c/{company_id}/info/payment_accounts",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListPaymentAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Payment Accounts Lists the available payment accounts.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListPaymentAccountsResponse</returns>
        public async System.Threading.Tasks.Task<ListPaymentAccountsResponse> ListPaymentAccountsAsync(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListPaymentAccountsResponse> localVarResponse =
                await ListPaymentAccountsWithHttpInfoAsync(companyId, fields, fieldset, sort, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Payment Accounts Lists the available payment accounts.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListPaymentAccountsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPaymentAccountsResponse>>
            ListPaymentAccountsWithHttpInfoAsync(int companyId, string fields = default(string),
                string fieldset = default(string), string sort = default(string),
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            if (sort != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListPaymentAccountsResponse>("/c/{company_id}/info/payment_accounts", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListPaymentAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Payment Methods Lists the available payment methods.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <returns>ListPaymentMethodsResponse</returns>
        public ListPaymentMethodsResponse ListPaymentMethods(int companyId, string fields = default(string),
            string fieldset = default(string), string sort = default(string))
        {
            var localVarResponse = ListPaymentMethodsWithHttpInfo(companyId, fields, fieldset, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Payment Methods Lists the available payment methods.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <returns>ApiResponse of ListPaymentMethodsResponse</returns>
        public ApiResponse<ListPaymentMethodsResponse> ListPaymentMethodsWithHttpInfo(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            if (sort != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<ListPaymentMethodsResponse>("/c/{company_id}/info/payment_methods",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListPaymentMethods", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Payment Methods Lists the available payment methods.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListPaymentMethodsResponse</returns>
        public async System.Threading.Tasks.Task<ListPaymentMethodsResponse> ListPaymentMethodsAsync(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListPaymentMethodsResponse> localVarResponse =
                await ListPaymentMethodsWithHttpInfoAsync(companyId, fields, fieldset, sort, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Payment Methods Lists the available payment methods.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListPaymentMethodsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPaymentMethodsResponse>>
            ListPaymentMethodsWithHttpInfoAsync(int companyId, string fields = default(string),
                string fieldset = default(string), string sort = default(string),
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            if (sort != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListPaymentMethodsResponse>("/c/{company_id}/info/payment_methods", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListPaymentMethods", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Product Categories Lists the product categories.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="context"></param>
        /// <returns>ListProductCategoriesResponse</returns>
        public ListProductCategoriesResponse ListProductCategories(int companyId, string context)
        {
            var localVarResponse = ListProductCategoriesWithHttpInfo(companyId, context);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Product Categories Lists the product categories.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="context"></param>
        /// <returns>ApiResponse of ListProductCategoriesResponse</returns>
        public ApiResponse<ListProductCategoriesResponse> ListProductCategoriesWithHttpInfo(int companyId,
            string context)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400,
                    "Missing required parameter 'context' when calling InfoApi->ListProductCategories");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "context", context));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<ListProductCategoriesResponse>("/c/{company_id}/info/product_categories",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListProductCategories", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Product Categories Lists the product categories.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="context"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListProductCategoriesResponse</returns>
        public async System.Threading.Tasks.Task<ListProductCategoriesResponse> ListProductCategoriesAsync(
            int companyId, string context,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListProductCategoriesResponse> localVarResponse =
                await ListProductCategoriesWithHttpInfoAsync(companyId, context, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Product Categories Lists the product categories.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="context"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListProductCategoriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListProductCategoriesResponse>>
            ListProductCategoriesWithHttpInfoAsync(int companyId, string context,
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400,
                    "Missing required parameter 'context' when calling InfoApi->ListProductCategories");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "context", context));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListProductCategoriesResponse>("/c/{company_id}/info/product_categories",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListProductCategories", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Received Document Categories Lists the received document categories.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ListReceivedDocumentCategoriesResponse</returns>
        public ListReceivedDocumentCategoriesResponse ListReceivedDocumentCategories(int companyId)
        {
            var localVarResponse = ListReceivedDocumentCategoriesWithHttpInfo(companyId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Received Document Categories Lists the received document categories.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ApiResponse of ListReceivedDocumentCategoriesResponse</returns>
        public ApiResponse<ListReceivedDocumentCategoriesResponse> ListReceivedDocumentCategoriesWithHttpInfo(
            int companyId)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<ListReceivedDocumentCategoriesResponse>(
                "/c/{company_id}/info/received_document_categories", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListReceivedDocumentCategories", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Received Document Categories Lists the received document categories.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListReceivedDocumentCategoriesResponse</returns>
        public async System.Threading.Tasks.Task<ListReceivedDocumentCategoriesResponse>
            ListReceivedDocumentCategoriesAsync(int companyId,
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListReceivedDocumentCategoriesResponse> localVarResponse =
                await ListReceivedDocumentCategoriesWithHttpInfoAsync(companyId, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Received Document Categories Lists the received document categories.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListReceivedDocumentCategoriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListReceivedDocumentCategoriesResponse>>
            ListReceivedDocumentCategoriesWithHttpInfoAsync(int companyId,
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListReceivedDocumentCategoriesResponse>("/c/{company_id}/info/received_document_categories",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListReceivedDocumentCategories", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Revenue Centers Lists the revenue centers.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ListRevenueCentersResponse</returns>
        public ListRevenueCentersResponse ListRevenueCenters(int companyId)
        {
            var localVarResponse = ListRevenueCentersWithHttpInfo(companyId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Revenue Centers Lists the revenue centers.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ApiResponse of ListRevenueCentersResponse</returns>
        public ApiResponse<ListRevenueCentersResponse> ListRevenueCentersWithHttpInfo(int companyId)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<ListRevenueCentersResponse>("/c/{company_id}/info/revenue_centers",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListRevenueCenters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Revenue Centers Lists the revenue centers.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRevenueCentersResponse</returns>
        public async System.Threading.Tasks.Task<ListRevenueCentersResponse> ListRevenueCentersAsync(int companyId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListRevenueCentersResponse> localVarResponse =
                await ListRevenueCentersWithHttpInfoAsync(companyId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Revenue Centers Lists the revenue centers.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRevenueCentersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListRevenueCentersResponse>>
            ListRevenueCentersWithHttpInfoAsync(int companyId,
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListRevenueCentersResponse>("/c/{company_id}/info/revenue_centers", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListRevenueCenters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Templates Lists the available templates.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the templates. (optional, default to all)</param>
        /// <param name="byType">
        ///     [Only if type&#x3D;all] If true, splits the list in objects, grouping templates by type.
        ///     (optional, default to false)
        /// </param>
        /// <returns>ListTemplatesResponse</returns>
        public ListTemplatesResponse ListTemplates(string type = default(string), bool? byType = default(bool?))
        {
            var localVarResponse = ListTemplatesWithHttpInfo(type, byType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Templates Lists the available templates.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the templates. (optional, default to all)</param>
        /// <param name="byType">
        ///     [Only if type&#x3D;all] If true, splits the list in objects, grouping templates by type.
        ///     (optional, default to false)
        /// </param>
        /// <returns>ApiResponse of ListTemplatesResponse</returns>
        public ApiResponse<ListTemplatesResponse> ListTemplatesWithHttpInfo(string type = default(string),
            bool? byType = default(bool?))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            if (byType != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "by_type", byType));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<ListTemplatesResponse>("/info/templates", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListTemplates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Templates Lists the available templates.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the templates. (optional, default to all)</param>
        /// <param name="byType">
        ///     [Only if type&#x3D;all] If true, splits the list in objects, grouping templates by type.
        ///     (optional, default to false)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTemplatesResponse</returns>
        public async System.Threading.Tasks.Task<ListTemplatesResponse> ListTemplatesAsync(
            string type = default(string), bool? byType = default(bool?),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListTemplatesResponse> localVarResponse =
                await ListTemplatesWithHttpInfoAsync(type, byType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Templates Lists the available templates.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the templates. (optional, default to all)</param>
        /// <param name="byType">
        ///     [Only if type&#x3D;all] If true, splits the list in objects, grouping templates by type.
        ///     (optional, default to false)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTemplatesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListTemplatesResponse>> ListTemplatesWithHttpInfoAsync(
            string type = default(string), bool? byType = default(bool?),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            if (byType != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "by_type", byType));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListTemplatesResponse>("/info/templates", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListTemplates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Units of Measure Lists the units of measure.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListUnitsOfMeasureResponse</returns>
        public ListUnitsOfMeasureResponse ListUnitsOfMeasure()
        {
            var localVarResponse = ListUnitsOfMeasureWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Units of Measure Lists the units of measure.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListUnitsOfMeasureResponse</returns>
        public ApiResponse<ListUnitsOfMeasureResponse> ListUnitsOfMeasureWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<ListUnitsOfMeasureResponse>("/info/measures", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListUnitsOfMeasure", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Units of Measure Lists the units of measure.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListUnitsOfMeasureResponse</returns>
        public async System.Threading.Tasks.Task<ListUnitsOfMeasureResponse> ListUnitsOfMeasureAsync(
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListUnitsOfMeasureResponse> localVarResponse =
                await ListUnitsOfMeasureWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Units of Measure Lists the units of measure.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListUnitsOfMeasureResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListUnitsOfMeasureResponse>>
            ListUnitsOfMeasureWithHttpInfoAsync(
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListUnitsOfMeasureResponse>("/info/measures", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListUnitsOfMeasure", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Vat Types Lists the available vat types.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ListVatTypesResponse</returns>
        public ListVatTypesResponse ListVatTypes(int companyId, string fieldset = default(string))
        {
            var localVarResponse = ListVatTypesWithHttpInfo(companyId, fieldset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Vat Types Lists the available vat types.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of ListVatTypesResponse</returns>
        public ApiResponse<ListVatTypesResponse> ListVatTypesWithHttpInfo(int companyId,
            string fieldset = default(string))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<ListVatTypesResponse>("/c/{company_id}/info/vat_types",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListVatTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Vat Types Lists the available vat types.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListVatTypesResponse</returns>
        public async System.Threading.Tasks.Task<ListVatTypesResponse> ListVatTypesAsync(int companyId,
            string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListVatTypesResponse> localVarResponse =
                await ListVatTypesWithHttpInfoAsync(companyId, fieldset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Vat Types Lists the available vat types.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListVatTypesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListVatTypesResponse>> ListVatTypesWithHttpInfoAsync(
            int companyId, string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListVatTypesResponse>("/c/{company_id}/info/vat_types", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListVatTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }
    }
}