// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IReceivedDocumentsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ReceivedDocumentsApiEvents Events { get; }

        /// <summary>
        /// Create Received Document
        /// </summary>
        /// <remarks>
        /// Creates a new document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceivedDocumentRequest">Document to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateReceivedDocumentApiResponse"/>&gt;</returns>
        Task<ICreateReceivedDocumentApiResponse> CreateReceivedDocumentAsync(int companyId, Option<CreateReceivedDocumentRequest> createReceivedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Received Document
        /// </summary>
        /// <remarks>
        /// Creates a new document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceivedDocumentRequest">Document to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateReceivedDocumentApiResponse"/>&gt;</returns>
        Task<ICreateReceivedDocumentApiResponse> CreateReceivedDocumentOrDefaultAsync(int companyId, Option<CreateReceivedDocumentRequest> createReceivedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Bin Received Document
        /// </summary>
        /// <remarks>
        /// Delete Bin Received Document
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBinReceivedDocumentApiResponse"/>&gt;</returns>
        Task<IDeleteBinReceivedDocumentApiResponse> DeleteBinReceivedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Bin Received Document
        /// </summary>
        /// <remarks>
        /// Delete Bin Received Document
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBinReceivedDocumentApiResponse"/>&gt;</returns>
        Task<IDeleteBinReceivedDocumentApiResponse> DeleteBinReceivedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Received Document
        /// </summary>
        /// <remarks>
        /// Deletes the specified document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReceivedDocumentApiResponse"/>&gt;</returns>
        Task<IDeleteReceivedDocumentApiResponse> DeleteReceivedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Received Document
        /// </summary>
        /// <remarks>
        /// Deletes the specified document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReceivedDocumentApiResponse"/>&gt;</returns>
        Task<IDeleteReceivedDocumentApiResponse> DeleteReceivedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Received Document Attachment
        /// </summary>
        /// <remarks>
        /// Removes the attachment of the specified document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReceivedDocumentAttachmentApiResponse"/>&gt;</returns>
        Task<IDeleteReceivedDocumentAttachmentApiResponse> DeleteReceivedDocumentAttachmentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Received Document Attachment
        /// </summary>
        /// <remarks>
        /// Removes the attachment of the specified document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReceivedDocumentAttachmentApiResponse"/>&gt;</returns>
        Task<IDeleteReceivedDocumentAttachmentApiResponse> DeleteReceivedDocumentAttachmentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Bin Received Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents detail
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBinReceivedDocumentApiResponse"/>&gt;</returns>
        Task<IGetBinReceivedDocumentApiResponse> GetBinReceivedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Bin Received Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents detail
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBinReceivedDocumentApiResponse"/>&gt;</returns>
        Task<IGetBinReceivedDocumentApiResponse> GetBinReceivedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Existing Received Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for the specified document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExistingReceivedDocumentTotalsApiResponse"/>&gt;</returns>
        Task<IGetExistingReceivedDocumentTotalsApiResponse> GetExistingReceivedDocumentTotalsAsync(int companyId, int documentId, Option<GetExistingReceivedDocumentTotalsRequest> getExistingReceivedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Existing Received Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for the specified document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExistingReceivedDocumentTotalsApiResponse"/>&gt;</returns>
        Task<IGetExistingReceivedDocumentTotalsApiResponse> GetExistingReceivedDocumentTotalsOrDefaultAsync(int companyId, int documentId, Option<GetExistingReceivedDocumentTotalsRequest> getExistingReceivedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get New Received Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a new document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNewReceivedDocumentTotalsApiResponse"/>&gt;</returns>
        Task<IGetNewReceivedDocumentTotalsApiResponse> GetNewReceivedDocumentTotalsAsync(int companyId, Option<GetNewReceivedDocumentTotalsRequest> getNewReceivedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get New Received Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a new document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNewReceivedDocumentTotalsApiResponse"/>&gt;</returns>
        Task<IGetNewReceivedDocumentTotalsApiResponse> GetNewReceivedDocumentTotalsOrDefaultAsync(int companyId, Option<GetNewReceivedDocumentTotalsRequest> getNewReceivedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Received Document
        /// </summary>
        /// <remarks>
        /// Gets the specified document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceivedDocumentApiResponse"/>&gt;</returns>
        Task<IGetReceivedDocumentApiResponse> GetReceivedDocumentAsync(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Received Document
        /// </summary>
        /// <remarks>
        /// Gets the specified document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceivedDocumentApiResponse"/>&gt;</returns>
        Task<IGetReceivedDocumentApiResponse> GetReceivedDocumentOrDefaultAsync(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Received Document Pre-Create Info
        /// </summary>
        /// <remarks>
        /// Retrieves the information useful while creating a new document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceivedDocumentPreCreateInfoApiResponse"/>&gt;</returns>
        Task<IGetReceivedDocumentPreCreateInfoApiResponse> GetReceivedDocumentPreCreateInfoAsync(int companyId, string type, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Received Document Pre-Create Info
        /// </summary>
        /// <remarks>
        /// Retrieves the information useful while creating a new document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceivedDocumentPreCreateInfoApiResponse"/>&gt;</returns>
        Task<IGetReceivedDocumentPreCreateInfoApiResponse> GetReceivedDocumentPreCreateInfoOrDefaultAsync(int companyId, string type, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Bin Received Documents List
        /// </summary>
        /// <remarks>
        /// Get bin Received documents list
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBinReceivedDocumentsApiResponse"/>&gt;</returns>
        Task<IListBinReceivedDocumentsApiResponse> ListBinReceivedDocumentsAsync(int companyId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Bin Received Documents List
        /// </summary>
        /// <remarks>
        /// Get bin Received documents list
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBinReceivedDocumentsApiResponse"/>&gt;</returns>
        Task<IListBinReceivedDocumentsApiResponse> ListBinReceivedDocumentsOrDefaultAsync(int companyId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Received Documents
        /// </summary>
        /// <remarks>
        /// Lists the received documents.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListReceivedDocumentsApiResponse"/>&gt;</returns>
        Task<IListReceivedDocumentsApiResponse> ListReceivedDocumentsAsync(int companyId, string type, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Received Documents
        /// </summary>
        /// <remarks>
        /// Lists the received documents.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListReceivedDocumentsApiResponse"/>&gt;</returns>
        Task<IListReceivedDocumentsApiResponse> ListReceivedDocumentsOrDefaultAsync(int companyId, string type, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Received Document
        /// </summary>
        /// <remarks>
        /// Modifies the specified document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceivedDocumentRequest">Modified document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyReceivedDocumentApiResponse"/>&gt;</returns>
        Task<IModifyReceivedDocumentApiResponse> ModifyReceivedDocumentAsync(int companyId, int documentId, Option<ModifyReceivedDocumentRequest> modifyReceivedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Received Document
        /// </summary>
        /// <remarks>
        /// Modifies the specified document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceivedDocumentRequest">Modified document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyReceivedDocumentApiResponse"/>&gt;</returns>
        Task<IModifyReceivedDocumentApiResponse> ModifyReceivedDocumentOrDefaultAsync(int companyId, int documentId, Option<ModifyReceivedDocumentRequest> modifyReceivedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Recover Received Document From The Bin
        /// </summary>
        /// <remarks>
        /// Recover Received Document From The Bin
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRecoverBinReceivedDocumentApiResponse"/>&gt;</returns>
        Task<IRecoverBinReceivedDocumentApiResponse> RecoverBinReceivedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Recover Received Document From The Bin
        /// </summary>
        /// <remarks>
        /// Recover Received Document From The Bin
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRecoverBinReceivedDocumentApiResponse"/>&gt;</returns>
        Task<IRecoverBinReceivedDocumentApiResponse> RecoverBinReceivedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Received Document Attachment
        /// </summary>
        /// <remarks>
        /// Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadReceivedDocumentAttachmentApiResponse"/>&gt;</returns>
        Task<IUploadReceivedDocumentAttachmentApiResponse> UploadReceivedDocumentAttachmentAsync(int companyId, Option<string> filename = default, Option<System.IO.Stream> attachment = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Received Document Attachment
        /// </summary>
        /// <remarks>
        /// Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadReceivedDocumentAttachmentApiResponse"/>&gt;</returns>
        Task<IUploadReceivedDocumentAttachmentApiResponse> UploadReceivedDocumentAttachmentOrDefaultAsync(int companyId, Option<string> filename = default, Option<System.IO.Stream> attachment = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateReceivedDocumentApiResponse"/>
    /// </summary>
    public interface ICreateReceivedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.CreateReceivedDocumentResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteBinReceivedDocumentApiResponse"/>
    /// </summary>
    public interface IDeleteBinReceivedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteReceivedDocumentApiResponse"/>
    /// </summary>
    public interface IDeleteReceivedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteReceivedDocumentAttachmentApiResponse"/>
    /// </summary>
    public interface IDeleteReceivedDocumentAttachmentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetBinReceivedDocumentApiResponse"/>
    /// </summary>
    public interface IGetBinReceivedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetBinIssuedDocumentResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetExistingReceivedDocumentTotalsApiResponse"/>
    /// </summary>
    public interface IGetExistingReceivedDocumentTotalsApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetExistingReceivedDocumentTotalsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetNewReceivedDocumentTotalsApiResponse"/>
    /// </summary>
    public interface IGetNewReceivedDocumentTotalsApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetNewReceivedDocumentTotalsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetReceivedDocumentApiResponse"/>
    /// </summary>
    public interface IGetReceivedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetReceivedDocumentResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetReceivedDocumentPreCreateInfoApiResponse"/>
    /// </summary>
    public interface IGetReceivedDocumentPreCreateInfoApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetReceivedDocumentPreCreateInfoResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListBinReceivedDocumentsApiResponse"/>
    /// </summary>
    public interface IListBinReceivedDocumentsApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ListBinReceivedDocuments>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListReceivedDocumentsApiResponse"/>
    /// </summary>
    public interface IListReceivedDocumentsApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ListReceivedDocumentsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IModifyReceivedDocumentApiResponse"/>
    /// </summary>
    public interface IModifyReceivedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ModifyReceivedDocumentResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IRecoverBinReceivedDocumentApiResponse"/>
    /// </summary>
    public interface IRecoverBinReceivedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUploadReceivedDocumentAttachmentApiResponse"/>
    /// </summary>
    public interface IUploadReceivedDocumentAttachmentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.UploadReceivedDocumentAttachmentResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ReceivedDocumentsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateReceivedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateReceivedDocument;

        internal void ExecuteOnCreateReceivedDocument(ReceivedDocumentsApi.CreateReceivedDocumentApiResponse apiResponse)
        {
            OnCreateReceivedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateReceivedDocument(Exception exception)
        {
            OnErrorCreateReceivedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteBinReceivedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteBinReceivedDocument;

        internal void ExecuteOnDeleteBinReceivedDocument(ReceivedDocumentsApi.DeleteBinReceivedDocumentApiResponse apiResponse)
        {
            OnDeleteBinReceivedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteBinReceivedDocument(Exception exception)
        {
            OnErrorDeleteBinReceivedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteReceivedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteReceivedDocument;

        internal void ExecuteOnDeleteReceivedDocument(ReceivedDocumentsApi.DeleteReceivedDocumentApiResponse apiResponse)
        {
            OnDeleteReceivedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteReceivedDocument(Exception exception)
        {
            OnErrorDeleteReceivedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteReceivedDocumentAttachment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteReceivedDocumentAttachment;

        internal void ExecuteOnDeleteReceivedDocumentAttachment(ReceivedDocumentsApi.DeleteReceivedDocumentAttachmentApiResponse apiResponse)
        {
            OnDeleteReceivedDocumentAttachment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteReceivedDocumentAttachment(Exception exception)
        {
            OnErrorDeleteReceivedDocumentAttachment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetBinReceivedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetBinReceivedDocument;

        internal void ExecuteOnGetBinReceivedDocument(ReceivedDocumentsApi.GetBinReceivedDocumentApiResponse apiResponse)
        {
            OnGetBinReceivedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBinReceivedDocument(Exception exception)
        {
            OnErrorGetBinReceivedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetExistingReceivedDocumentTotals;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetExistingReceivedDocumentTotals;

        internal void ExecuteOnGetExistingReceivedDocumentTotals(ReceivedDocumentsApi.GetExistingReceivedDocumentTotalsApiResponse apiResponse)
        {
            OnGetExistingReceivedDocumentTotals?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetExistingReceivedDocumentTotals(Exception exception)
        {
            OnErrorGetExistingReceivedDocumentTotals?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetNewReceivedDocumentTotals;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetNewReceivedDocumentTotals;

        internal void ExecuteOnGetNewReceivedDocumentTotals(ReceivedDocumentsApi.GetNewReceivedDocumentTotalsApiResponse apiResponse)
        {
            OnGetNewReceivedDocumentTotals?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetNewReceivedDocumentTotals(Exception exception)
        {
            OnErrorGetNewReceivedDocumentTotals?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetReceivedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetReceivedDocument;

        internal void ExecuteOnGetReceivedDocument(ReceivedDocumentsApi.GetReceivedDocumentApiResponse apiResponse)
        {
            OnGetReceivedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetReceivedDocument(Exception exception)
        {
            OnErrorGetReceivedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetReceivedDocumentPreCreateInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetReceivedDocumentPreCreateInfo;

        internal void ExecuteOnGetReceivedDocumentPreCreateInfo(ReceivedDocumentsApi.GetReceivedDocumentPreCreateInfoApiResponse apiResponse)
        {
            OnGetReceivedDocumentPreCreateInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetReceivedDocumentPreCreateInfo(Exception exception)
        {
            OnErrorGetReceivedDocumentPreCreateInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnListBinReceivedDocuments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorListBinReceivedDocuments;

        internal void ExecuteOnListBinReceivedDocuments(ReceivedDocumentsApi.ListBinReceivedDocumentsApiResponse apiResponse)
        {
            OnListBinReceivedDocuments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListBinReceivedDocuments(Exception exception)
        {
            OnErrorListBinReceivedDocuments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnListReceivedDocuments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorListReceivedDocuments;

        internal void ExecuteOnListReceivedDocuments(ReceivedDocumentsApi.ListReceivedDocumentsApiResponse apiResponse)
        {
            OnListReceivedDocuments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListReceivedDocuments(Exception exception)
        {
            OnErrorListReceivedDocuments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnModifyReceivedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorModifyReceivedDocument;

        internal void ExecuteOnModifyReceivedDocument(ReceivedDocumentsApi.ModifyReceivedDocumentApiResponse apiResponse)
        {
            OnModifyReceivedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorModifyReceivedDocument(Exception exception)
        {
            OnErrorModifyReceivedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnRecoverBinReceivedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorRecoverBinReceivedDocument;

        internal void ExecuteOnRecoverBinReceivedDocument(ReceivedDocumentsApi.RecoverBinReceivedDocumentApiResponse apiResponse)
        {
            OnRecoverBinReceivedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRecoverBinReceivedDocument(Exception exception)
        {
            OnErrorRecoverBinReceivedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUploadReceivedDocumentAttachment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUploadReceivedDocumentAttachment;

        internal void ExecuteOnUploadReceivedDocumentAttachment(ReceivedDocumentsApi.UploadReceivedDocumentAttachmentApiResponse apiResponse)
        {
            OnUploadReceivedDocumentAttachment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUploadReceivedDocumentAttachment(Exception exception)
        {
            OnErrorUploadReceivedDocumentAttachment?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ReceivedDocumentsApi : IReceivedDocumentsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ReceivedDocumentsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ReceivedDocumentsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivedDocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReceivedDocumentsApi(ILogger<ReceivedDocumentsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ReceivedDocumentsApiEvents receivedDocumentsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ReceivedDocumentsApi>();
            HttpClient = httpClient;
            Events = receivedDocumentsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatCreateReceivedDocument(ref int companyId, Option<CreateReceivedDocumentRequest> createReceivedDocumentRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createReceivedDocumentRequest"></param>
        /// <returns></returns>
        private void ValidateCreateReceivedDocument(Option<CreateReceivedDocumentRequest> createReceivedDocumentRequest)
        {
            if (createReceivedDocumentRequest.IsSet && createReceivedDocumentRequest.Value == null)
                throw new ArgumentNullException(nameof(createReceivedDocumentRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createReceivedDocumentRequest"></param>
        private void AfterCreateReceivedDocumentDefaultImplementation(ICreateReceivedDocumentApiResponse apiResponseLocalVar, int companyId, Option<CreateReceivedDocumentRequest> createReceivedDocumentRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateReceivedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, createReceivedDocumentRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createReceivedDocumentRequest"></param>
        partial void AfterCreateReceivedDocument(ref bool suppressDefaultLog, ICreateReceivedDocumentApiResponse apiResponseLocalVar, int companyId, Option<CreateReceivedDocumentRequest> createReceivedDocumentRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createReceivedDocumentRequest"></param>
        private void OnErrorCreateReceivedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreateReceivedDocumentRequest> createReceivedDocumentRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateReceivedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, createReceivedDocumentRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createReceivedDocumentRequest"></param>
        partial void OnErrorCreateReceivedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreateReceivedDocumentRequest> createReceivedDocumentRequest);

        /// <summary>
        /// Create Received Document Creates a new document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceivedDocumentRequest">Document to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateReceivedDocumentApiResponse"/>&gt;</returns>
        public async Task<ICreateReceivedDocumentApiResponse> CreateReceivedDocumentOrDefaultAsync(int companyId, Option<CreateReceivedDocumentRequest> createReceivedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateReceivedDocumentAsync(companyId, createReceivedDocumentRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Received Document Creates a new document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceivedDocumentRequest">Document to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateReceivedDocumentApiResponse"/>&gt;</returns>
        public async Task<ICreateReceivedDocumentApiResponse> CreateReceivedDocumentAsync(int companyId, Option<CreateReceivedDocumentRequest> createReceivedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateReceivedDocument(createReceivedDocumentRequest);

                FormatCreateReceivedDocument(ref companyId, createReceivedDocumentRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/received_documents"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/received_documents");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    if (createReceivedDocumentRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createReceivedDocumentRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createReceivedDocumentRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreateReceivedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateReceivedDocumentApiResponse>();
                        CreateReceivedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new CreateReceivedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/received_documents", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreateReceivedDocumentDefaultImplementation(apiResponseLocalVar, companyId, createReceivedDocumentRequest);

                        Events.ExecuteOnCreateReceivedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateReceivedDocumentDefaultImplementation(e, "/c/{company_id}/received_documents", uriBuilderLocalVar.Path, companyId, createReceivedDocumentRequest);
                Events.ExecuteOnErrorCreateReceivedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateReceivedDocumentApiResponse"/>
        /// </summary>
        public partial class CreateReceivedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, ICreateReceivedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateReceivedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateReceivedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateReceivedDocumentApiResponse(ILogger<CreateReceivedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreateReceivedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateReceivedDocumentApiResponse(ILogger<CreateReceivedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.CreateReceivedDocumentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.CreateReceivedDocumentResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.CreateReceivedDocumentResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteBinReceivedDocument(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterDeleteBinReceivedDocumentDefaultImplementation(IDeleteBinReceivedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteBinReceivedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterDeleteBinReceivedDocument(ref bool suppressDefaultLog, IDeleteBinReceivedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorDeleteBinReceivedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteBinReceivedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorDeleteBinReceivedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Delete Bin Received Document Delete Bin Received Document
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBinReceivedDocumentApiResponse"/>&gt;</returns>
        public async Task<IDeleteBinReceivedDocumentApiResponse> DeleteBinReceivedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteBinReceivedDocumentAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Bin Received Document Delete Bin Received Document
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBinReceivedDocumentApiResponse"/>&gt;</returns>
        public async Task<IDeleteBinReceivedDocumentApiResponse> DeleteBinReceivedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteBinReceivedDocument(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/bin/received_documents/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/bin/received_documents/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteBinReceivedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteBinReceivedDocumentApiResponse>();
                        DeleteBinReceivedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteBinReceivedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/bin/received_documents/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteBinReceivedDocumentDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnDeleteBinReceivedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteBinReceivedDocumentDefaultImplementation(e, "/c/{company_id}/bin/received_documents/{document_id}", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorDeleteBinReceivedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteBinReceivedDocumentApiResponse"/>
        /// </summary>
        public partial class DeleteBinReceivedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IDeleteBinReceivedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteBinReceivedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteBinReceivedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteBinReceivedDocumentApiResponse(ILogger<DeleteBinReceivedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteBinReceivedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteBinReceivedDocumentApiResponse(ILogger<DeleteBinReceivedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteReceivedDocument(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterDeleteReceivedDocumentDefaultImplementation(IDeleteReceivedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteReceivedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterDeleteReceivedDocument(ref bool suppressDefaultLog, IDeleteReceivedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorDeleteReceivedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteReceivedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorDeleteReceivedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Delete Received Document Deletes the specified document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReceivedDocumentApiResponse"/>&gt;</returns>
        public async Task<IDeleteReceivedDocumentApiResponse> DeleteReceivedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteReceivedDocumentAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Received Document Deletes the specified document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReceivedDocumentApiResponse"/>&gt;</returns>
        public async Task<IDeleteReceivedDocumentApiResponse> DeleteReceivedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteReceivedDocument(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/received_documents/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/received_documents/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteReceivedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteReceivedDocumentApiResponse>();
                        DeleteReceivedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteReceivedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/received_documents/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteReceivedDocumentDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnDeleteReceivedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteReceivedDocumentDefaultImplementation(e, "/c/{company_id}/received_documents/{document_id}", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorDeleteReceivedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteReceivedDocumentApiResponse"/>
        /// </summary>
        public partial class DeleteReceivedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IDeleteReceivedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteReceivedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteReceivedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteReceivedDocumentApiResponse(ILogger<DeleteReceivedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteReceivedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteReceivedDocumentApiResponse(ILogger<DeleteReceivedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteReceivedDocumentAttachment(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterDeleteReceivedDocumentAttachmentDefaultImplementation(IDeleteReceivedDocumentAttachmentApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteReceivedDocumentAttachment(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterDeleteReceivedDocumentAttachment(ref bool suppressDefaultLog, IDeleteReceivedDocumentAttachmentApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorDeleteReceivedDocumentAttachmentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteReceivedDocumentAttachment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorDeleteReceivedDocumentAttachment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Delete Received Document Attachment Removes the attachment of the specified document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReceivedDocumentAttachmentApiResponse"/>&gt;</returns>
        public async Task<IDeleteReceivedDocumentAttachmentApiResponse> DeleteReceivedDocumentAttachmentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteReceivedDocumentAttachmentAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Received Document Attachment Removes the attachment of the specified document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReceivedDocumentAttachmentApiResponse"/>&gt;</returns>
        public async Task<IDeleteReceivedDocumentAttachmentApiResponse> DeleteReceivedDocumentAttachmentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteReceivedDocumentAttachment(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/received_documents/{document_id}/attachment"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/received_documents/{document_id}/attachment");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteReceivedDocumentAttachmentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteReceivedDocumentAttachmentApiResponse>();
                        DeleteReceivedDocumentAttachmentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteReceivedDocumentAttachmentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/received_documents/{document_id}/attachment", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteReceivedDocumentAttachmentDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnDeleteReceivedDocumentAttachment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteReceivedDocumentAttachmentDefaultImplementation(e, "/c/{company_id}/received_documents/{document_id}/attachment", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorDeleteReceivedDocumentAttachment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteReceivedDocumentAttachmentApiResponse"/>
        /// </summary>
        public partial class DeleteReceivedDocumentAttachmentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IDeleteReceivedDocumentAttachmentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteReceivedDocumentAttachmentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteReceivedDocumentAttachmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteReceivedDocumentAttachmentApiResponse(ILogger<DeleteReceivedDocumentAttachmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteReceivedDocumentAttachmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteReceivedDocumentAttachmentApiResponse(ILogger<DeleteReceivedDocumentAttachmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetBinReceivedDocument(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterGetBinReceivedDocumentDefaultImplementation(IGetBinReceivedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterGetBinReceivedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterGetBinReceivedDocument(ref bool suppressDefaultLog, IGetBinReceivedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorGetBinReceivedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetBinReceivedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorGetBinReceivedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Get Bin Received Documents List Get bin issued documents detail
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBinReceivedDocumentApiResponse"/>&gt;</returns>
        public async Task<IGetBinReceivedDocumentApiResponse> GetBinReceivedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBinReceivedDocumentAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Bin Received Documents List Get bin issued documents detail
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBinReceivedDocumentApiResponse"/>&gt;</returns>
        public async Task<IGetBinReceivedDocumentApiResponse> GetBinReceivedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetBinReceivedDocument(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/bin/received_documents/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/bin/received_documents/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetBinReceivedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBinReceivedDocumentApiResponse>();
                        GetBinReceivedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetBinReceivedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/bin/received_documents/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetBinReceivedDocumentDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnGetBinReceivedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBinReceivedDocumentDefaultImplementation(e, "/c/{company_id}/bin/received_documents/{document_id}", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorGetBinReceivedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBinReceivedDocumentApiResponse"/>
        /// </summary>
        public partial class GetBinReceivedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetBinReceivedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBinReceivedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBinReceivedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBinReceivedDocumentApiResponse(ILogger<GetBinReceivedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetBinReceivedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBinReceivedDocumentApiResponse(ILogger<GetBinReceivedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetBinIssuedDocumentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetBinIssuedDocumentResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetBinIssuedDocumentResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetExistingReceivedDocumentTotals(ref int companyId, ref int documentId, Option<GetExistingReceivedDocumentTotalsRequest> getExistingReceivedDocumentTotalsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="getExistingReceivedDocumentTotalsRequest"></param>
        /// <returns></returns>
        private void ValidateGetExistingReceivedDocumentTotals(Option<GetExistingReceivedDocumentTotalsRequest> getExistingReceivedDocumentTotalsRequest)
        {
            if (getExistingReceivedDocumentTotalsRequest.IsSet && getExistingReceivedDocumentTotalsRequest.Value == null)
                throw new ArgumentNullException(nameof(getExistingReceivedDocumentTotalsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="getExistingReceivedDocumentTotalsRequest"></param>
        private void AfterGetExistingReceivedDocumentTotalsDefaultImplementation(IGetExistingReceivedDocumentTotalsApiResponse apiResponseLocalVar, int companyId, int documentId, Option<GetExistingReceivedDocumentTotalsRequest> getExistingReceivedDocumentTotalsRequest)
        {
            bool suppressDefaultLog = false;
            AfterGetExistingReceivedDocumentTotals(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId, getExistingReceivedDocumentTotalsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="getExistingReceivedDocumentTotalsRequest"></param>
        partial void AfterGetExistingReceivedDocumentTotals(ref bool suppressDefaultLog, IGetExistingReceivedDocumentTotalsApiResponse apiResponseLocalVar, int companyId, int documentId, Option<GetExistingReceivedDocumentTotalsRequest> getExistingReceivedDocumentTotalsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="getExistingReceivedDocumentTotalsRequest"></param>
        private void OnErrorGetExistingReceivedDocumentTotalsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<GetExistingReceivedDocumentTotalsRequest> getExistingReceivedDocumentTotalsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetExistingReceivedDocumentTotals(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId, getExistingReceivedDocumentTotalsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="getExistingReceivedDocumentTotalsRequest"></param>
        partial void OnErrorGetExistingReceivedDocumentTotals(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<GetExistingReceivedDocumentTotalsRequest> getExistingReceivedDocumentTotalsRequest);

        /// <summary>
        /// Get Existing Received Document Totals Returns the totals for the specified document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExistingReceivedDocumentTotalsApiResponse"/>&gt;</returns>
        public async Task<IGetExistingReceivedDocumentTotalsApiResponse> GetExistingReceivedDocumentTotalsOrDefaultAsync(int companyId, int documentId, Option<GetExistingReceivedDocumentTotalsRequest> getExistingReceivedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetExistingReceivedDocumentTotalsAsync(companyId, documentId, getExistingReceivedDocumentTotalsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Existing Received Document Totals Returns the totals for the specified document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExistingReceivedDocumentTotalsApiResponse"/>&gt;</returns>
        public async Task<IGetExistingReceivedDocumentTotalsApiResponse> GetExistingReceivedDocumentTotalsAsync(int companyId, int documentId, Option<GetExistingReceivedDocumentTotalsRequest> getExistingReceivedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetExistingReceivedDocumentTotals(getExistingReceivedDocumentTotalsRequest);

                FormatGetExistingReceivedDocumentTotals(ref companyId, ref documentId, getExistingReceivedDocumentTotalsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/received_documents/{document_id}/totals"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/received_documents/{document_id}/totals");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    if (getExistingReceivedDocumentTotalsRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (getExistingReceivedDocumentTotalsRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(getExistingReceivedDocumentTotalsRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetExistingReceivedDocumentTotalsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetExistingReceivedDocumentTotalsApiResponse>();
                        GetExistingReceivedDocumentTotalsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetExistingReceivedDocumentTotalsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/received_documents/{document_id}/totals", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetExistingReceivedDocumentTotalsDefaultImplementation(apiResponseLocalVar, companyId, documentId, getExistingReceivedDocumentTotalsRequest);

                        Events.ExecuteOnGetExistingReceivedDocumentTotals(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetExistingReceivedDocumentTotalsDefaultImplementation(e, "/c/{company_id}/received_documents/{document_id}/totals", uriBuilderLocalVar.Path, companyId, documentId, getExistingReceivedDocumentTotalsRequest);
                Events.ExecuteOnErrorGetExistingReceivedDocumentTotals(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetExistingReceivedDocumentTotalsApiResponse"/>
        /// </summary>
        public partial class GetExistingReceivedDocumentTotalsApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetExistingReceivedDocumentTotalsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetExistingReceivedDocumentTotalsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetExistingReceivedDocumentTotalsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetExistingReceivedDocumentTotalsApiResponse(ILogger<GetExistingReceivedDocumentTotalsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetExistingReceivedDocumentTotalsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetExistingReceivedDocumentTotalsApiResponse(ILogger<GetExistingReceivedDocumentTotalsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetExistingReceivedDocumentTotalsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetExistingReceivedDocumentTotalsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetExistingReceivedDocumentTotalsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetNewReceivedDocumentTotals(ref int companyId, Option<GetNewReceivedDocumentTotalsRequest> getNewReceivedDocumentTotalsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="getNewReceivedDocumentTotalsRequest"></param>
        /// <returns></returns>
        private void ValidateGetNewReceivedDocumentTotals(Option<GetNewReceivedDocumentTotalsRequest> getNewReceivedDocumentTotalsRequest)
        {
            if (getNewReceivedDocumentTotalsRequest.IsSet && getNewReceivedDocumentTotalsRequest.Value == null)
                throw new ArgumentNullException(nameof(getNewReceivedDocumentTotalsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="getNewReceivedDocumentTotalsRequest"></param>
        private void AfterGetNewReceivedDocumentTotalsDefaultImplementation(IGetNewReceivedDocumentTotalsApiResponse apiResponseLocalVar, int companyId, Option<GetNewReceivedDocumentTotalsRequest> getNewReceivedDocumentTotalsRequest)
        {
            bool suppressDefaultLog = false;
            AfterGetNewReceivedDocumentTotals(ref suppressDefaultLog, apiResponseLocalVar, companyId, getNewReceivedDocumentTotalsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="getNewReceivedDocumentTotalsRequest"></param>
        partial void AfterGetNewReceivedDocumentTotals(ref bool suppressDefaultLog, IGetNewReceivedDocumentTotalsApiResponse apiResponseLocalVar, int companyId, Option<GetNewReceivedDocumentTotalsRequest> getNewReceivedDocumentTotalsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="getNewReceivedDocumentTotalsRequest"></param>
        private void OnErrorGetNewReceivedDocumentTotalsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<GetNewReceivedDocumentTotalsRequest> getNewReceivedDocumentTotalsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetNewReceivedDocumentTotals(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, getNewReceivedDocumentTotalsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="getNewReceivedDocumentTotalsRequest"></param>
        partial void OnErrorGetNewReceivedDocumentTotals(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<GetNewReceivedDocumentTotalsRequest> getNewReceivedDocumentTotalsRequest);

        /// <summary>
        /// Get New Received Document Totals Returns the totals for a new document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNewReceivedDocumentTotalsApiResponse"/>&gt;</returns>
        public async Task<IGetNewReceivedDocumentTotalsApiResponse> GetNewReceivedDocumentTotalsOrDefaultAsync(int companyId, Option<GetNewReceivedDocumentTotalsRequest> getNewReceivedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetNewReceivedDocumentTotalsAsync(companyId, getNewReceivedDocumentTotalsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get New Received Document Totals Returns the totals for a new document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNewReceivedDocumentTotalsApiResponse"/>&gt;</returns>
        public async Task<IGetNewReceivedDocumentTotalsApiResponse> GetNewReceivedDocumentTotalsAsync(int companyId, Option<GetNewReceivedDocumentTotalsRequest> getNewReceivedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetNewReceivedDocumentTotals(getNewReceivedDocumentTotalsRequest);

                FormatGetNewReceivedDocumentTotals(ref companyId, getNewReceivedDocumentTotalsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/received_documents/totals"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/received_documents/totals");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    if (getNewReceivedDocumentTotalsRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (getNewReceivedDocumentTotalsRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(getNewReceivedDocumentTotalsRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetNewReceivedDocumentTotalsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetNewReceivedDocumentTotalsApiResponse>();
                        GetNewReceivedDocumentTotalsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetNewReceivedDocumentTotalsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/received_documents/totals", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetNewReceivedDocumentTotalsDefaultImplementation(apiResponseLocalVar, companyId, getNewReceivedDocumentTotalsRequest);

                        Events.ExecuteOnGetNewReceivedDocumentTotals(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetNewReceivedDocumentTotalsDefaultImplementation(e, "/c/{company_id}/received_documents/totals", uriBuilderLocalVar.Path, companyId, getNewReceivedDocumentTotalsRequest);
                Events.ExecuteOnErrorGetNewReceivedDocumentTotals(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetNewReceivedDocumentTotalsApiResponse"/>
        /// </summary>
        public partial class GetNewReceivedDocumentTotalsApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetNewReceivedDocumentTotalsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetNewReceivedDocumentTotalsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetNewReceivedDocumentTotalsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetNewReceivedDocumentTotalsApiResponse(ILogger<GetNewReceivedDocumentTotalsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetNewReceivedDocumentTotalsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetNewReceivedDocumentTotalsApiResponse(ILogger<GetNewReceivedDocumentTotalsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetNewReceivedDocumentTotalsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetNewReceivedDocumentTotalsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetNewReceivedDocumentTotalsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetReceivedDocument(ref int companyId, ref int documentId, ref Option<string> fields, ref Option<string> fieldset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <returns></returns>
        private void ValidateGetReceivedDocument(Option<string> fields, Option<string> fieldset)
        {
            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields));

            if (fieldset.IsSet && fieldset.Value == null)
                throw new ArgumentNullException(nameof(fieldset));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        private void AfterGetReceivedDocumentDefaultImplementation(IGetReceivedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset)
        {
            bool suppressDefaultLog = false;
            AfterGetReceivedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId, fields, fieldset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        partial void AfterGetReceivedDocument(ref bool suppressDefaultLog, IGetReceivedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        private void OnErrorGetReceivedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetReceivedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId, fields, fieldset);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        partial void OnErrorGetReceivedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset);

        /// <summary>
        /// Get Received Document Gets the specified document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceivedDocumentApiResponse"/>&gt;</returns>
        public async Task<IGetReceivedDocumentApiResponse> GetReceivedDocumentOrDefaultAsync(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetReceivedDocumentAsync(companyId, documentId, fields, fieldset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Received Document Gets the specified document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceivedDocumentApiResponse"/>&gt;</returns>
        public async Task<IGetReceivedDocumentApiResponse> GetReceivedDocumentAsync(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetReceivedDocument(fields, fieldset);

                FormatGetReceivedDocument(ref companyId, ref documentId, ref fields, ref fieldset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/received_documents/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/received_documents/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (fields.IsSet)
                        parseQueryStringLocalVar["fields"] = ClientUtils.ParameterToString(fields.Value);

                    if (fieldset.IsSet)
                        parseQueryStringLocalVar["fieldset"] = ClientUtils.ParameterToString(fieldset.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetReceivedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetReceivedDocumentApiResponse>();
                        GetReceivedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetReceivedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/received_documents/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetReceivedDocumentDefaultImplementation(apiResponseLocalVar, companyId, documentId, fields, fieldset);

                        Events.ExecuteOnGetReceivedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetReceivedDocumentDefaultImplementation(e, "/c/{company_id}/received_documents/{document_id}", uriBuilderLocalVar.Path, companyId, documentId, fields, fieldset);
                Events.ExecuteOnErrorGetReceivedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetReceivedDocumentApiResponse"/>
        /// </summary>
        public partial class GetReceivedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetReceivedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetReceivedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetReceivedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetReceivedDocumentApiResponse(ILogger<GetReceivedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetReceivedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetReceivedDocumentApiResponse(ILogger<GetReceivedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetReceivedDocumentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetReceivedDocumentResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetReceivedDocumentResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetReceivedDocumentPreCreateInfo(ref int companyId, ref string type);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        private void ValidateGetReceivedDocumentPreCreateInfo(string type)
        {
            if (type == null)
                throw new ArgumentNullException(nameof(type));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        private void AfterGetReceivedDocumentPreCreateInfoDefaultImplementation(IGetReceivedDocumentPreCreateInfoApiResponse apiResponseLocalVar, int companyId, string type)
        {
            bool suppressDefaultLog = false;
            AfterGetReceivedDocumentPreCreateInfo(ref suppressDefaultLog, apiResponseLocalVar, companyId, type);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        partial void AfterGetReceivedDocumentPreCreateInfo(ref bool suppressDefaultLog, IGetReceivedDocumentPreCreateInfoApiResponse apiResponseLocalVar, int companyId, string type);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        private void OnErrorGetReceivedDocumentPreCreateInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string type)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetReceivedDocumentPreCreateInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, type);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        partial void OnErrorGetReceivedDocumentPreCreateInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string type);

        /// <summary>
        /// Get Received Document Pre-Create Info Retrieves the information useful while creating a new document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceivedDocumentPreCreateInfoApiResponse"/>&gt;</returns>
        public async Task<IGetReceivedDocumentPreCreateInfoApiResponse> GetReceivedDocumentPreCreateInfoOrDefaultAsync(int companyId, string type, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetReceivedDocumentPreCreateInfoAsync(companyId, type, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Received Document Pre-Create Info Retrieves the information useful while creating a new document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceivedDocumentPreCreateInfoApiResponse"/>&gt;</returns>
        public async Task<IGetReceivedDocumentPreCreateInfoApiResponse> GetReceivedDocumentPreCreateInfoAsync(int companyId, string type, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetReceivedDocumentPreCreateInfo(type);

                FormatGetReceivedDocumentPreCreateInfo(ref companyId, ref type);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/received_documents/info"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/received_documents/info");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetReceivedDocumentPreCreateInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetReceivedDocumentPreCreateInfoApiResponse>();
                        GetReceivedDocumentPreCreateInfoApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetReceivedDocumentPreCreateInfoApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/received_documents/info", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetReceivedDocumentPreCreateInfoDefaultImplementation(apiResponseLocalVar, companyId, type);

                        Events.ExecuteOnGetReceivedDocumentPreCreateInfo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetReceivedDocumentPreCreateInfoDefaultImplementation(e, "/c/{company_id}/received_documents/info", uriBuilderLocalVar.Path, companyId, type);
                Events.ExecuteOnErrorGetReceivedDocumentPreCreateInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetReceivedDocumentPreCreateInfoApiResponse"/>
        /// </summary>
        public partial class GetReceivedDocumentPreCreateInfoApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetReceivedDocumentPreCreateInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetReceivedDocumentPreCreateInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetReceivedDocumentPreCreateInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetReceivedDocumentPreCreateInfoApiResponse(ILogger<GetReceivedDocumentPreCreateInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetReceivedDocumentPreCreateInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetReceivedDocumentPreCreateInfoApiResponse(ILogger<GetReceivedDocumentPreCreateInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetReceivedDocumentPreCreateInfoResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetReceivedDocumentPreCreateInfoResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetReceivedDocumentPreCreateInfoResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListBinReceivedDocuments(ref int companyId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        private void AfterListBinReceivedDocumentsDefaultImplementation(IListBinReceivedDocumentsApiResponse apiResponseLocalVar, int companyId)
        {
            bool suppressDefaultLog = false;
            AfterListBinReceivedDocuments(ref suppressDefaultLog, apiResponseLocalVar, companyId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        partial void AfterListBinReceivedDocuments(ref bool suppressDefaultLog, IListBinReceivedDocumentsApiResponse apiResponseLocalVar, int companyId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        private void OnErrorListBinReceivedDocumentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListBinReceivedDocuments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        partial void OnErrorListBinReceivedDocuments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId);

        /// <summary>
        /// Get Bin Received Documents List Get bin Received documents list
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBinReceivedDocumentsApiResponse"/>&gt;</returns>
        public async Task<IListBinReceivedDocumentsApiResponse> ListBinReceivedDocumentsOrDefaultAsync(int companyId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListBinReceivedDocumentsAsync(companyId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Bin Received Documents List Get bin Received documents list
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBinReceivedDocumentsApiResponse"/>&gt;</returns>
        public async Task<IListBinReceivedDocumentsApiResponse> ListBinReceivedDocumentsAsync(int companyId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatListBinReceivedDocuments(ref companyId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/bin/received_documents"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/bin/received_documents");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ListBinReceivedDocumentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListBinReceivedDocumentsApiResponse>();
                        ListBinReceivedDocumentsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ListBinReceivedDocumentsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/bin/received_documents", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterListBinReceivedDocumentsDefaultImplementation(apiResponseLocalVar, companyId);

                        Events.ExecuteOnListBinReceivedDocuments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListBinReceivedDocumentsDefaultImplementation(e, "/c/{company_id}/bin/received_documents", uriBuilderLocalVar.Path, companyId);
                Events.ExecuteOnErrorListBinReceivedDocuments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListBinReceivedDocumentsApiResponse"/>
        /// </summary>
        public partial class ListBinReceivedDocumentsApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IListBinReceivedDocumentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListBinReceivedDocumentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListBinReceivedDocumentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListBinReceivedDocumentsApiResponse(ILogger<ListBinReceivedDocumentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ListBinReceivedDocumentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListBinReceivedDocumentsApiResponse(ILogger<ListBinReceivedDocumentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ListBinReceivedDocuments Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ListBinReceivedDocuments>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ListBinReceivedDocuments result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListReceivedDocuments(ref int companyId, ref string type, ref Option<string> fields, ref Option<string> fieldset, ref Option<string> sort, ref Option<int> page, ref Option<int> perPage, ref Option<string> q);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="type"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="q"></param>
        /// <returns></returns>
        private void ValidateListReceivedDocuments(string type, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<string> q)
        {
            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields));

            if (fieldset.IsSet && fieldset.Value == null)
                throw new ArgumentNullException(nameof(fieldset));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (q.IsSet && q.Value == null)
                throw new ArgumentNullException(nameof(q));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        private void AfterListReceivedDocumentsDefaultImplementation(IListReceivedDocumentsApiResponse apiResponseLocalVar, int companyId, string type, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q)
        {
            bool suppressDefaultLog = false;
            AfterListReceivedDocuments(ref suppressDefaultLog, apiResponseLocalVar, companyId, type, fields, fieldset, sort, page, perPage, q);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        partial void AfterListReceivedDocuments(ref bool suppressDefaultLog, IListReceivedDocumentsApiResponse apiResponseLocalVar, int companyId, string type, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        private void OnErrorListReceivedDocumentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string type, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListReceivedDocuments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, type, fields, fieldset, sort, page, perPage, q);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        partial void OnErrorListReceivedDocuments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string type, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q);

        /// <summary>
        /// List Received Documents Lists the received documents.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListReceivedDocumentsApiResponse"/>&gt;</returns>
        public async Task<IListReceivedDocumentsApiResponse> ListReceivedDocumentsOrDefaultAsync(int companyId, string type, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListReceivedDocumentsAsync(companyId, type, fields, fieldset, sort, page, perPage, q, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Received Documents Lists the received documents.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListReceivedDocumentsApiResponse"/>&gt;</returns>
        public async Task<IListReceivedDocumentsApiResponse> ListReceivedDocumentsAsync(int companyId, string type, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListReceivedDocuments(type, fields, fieldset, sort, q);

                FormatListReceivedDocuments(ref companyId, ref type, ref fields, ref fieldset, ref sort, ref page, ref perPage, ref q);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/received_documents"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/received_documents");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type);

                    if (fields.IsSet)
                        parseQueryStringLocalVar["fields"] = ClientUtils.ParameterToString(fields.Value);

                    if (fieldset.IsSet)
                        parseQueryStringLocalVar["fieldset"] = ClientUtils.ParameterToString(fieldset.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (perPage.IsSet)
                        parseQueryStringLocalVar["per_page"] = ClientUtils.ParameterToString(perPage.Value);

                    if (q.IsSet)
                        parseQueryStringLocalVar["q"] = ClientUtils.ParameterToString(q.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ListReceivedDocumentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListReceivedDocumentsApiResponse>();
                        ListReceivedDocumentsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ListReceivedDocumentsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/received_documents", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterListReceivedDocumentsDefaultImplementation(apiResponseLocalVar, companyId, type, fields, fieldset, sort, page, perPage, q);

                        Events.ExecuteOnListReceivedDocuments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListReceivedDocumentsDefaultImplementation(e, "/c/{company_id}/received_documents", uriBuilderLocalVar.Path, companyId, type, fields, fieldset, sort, page, perPage, q);
                Events.ExecuteOnErrorListReceivedDocuments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListReceivedDocumentsApiResponse"/>
        /// </summary>
        public partial class ListReceivedDocumentsApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IListReceivedDocumentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListReceivedDocumentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListReceivedDocumentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListReceivedDocumentsApiResponse(ILogger<ListReceivedDocumentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ListReceivedDocumentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListReceivedDocumentsApiResponse(ILogger<ListReceivedDocumentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ListReceivedDocumentsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ListReceivedDocumentsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ListReceivedDocumentsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatModifyReceivedDocument(ref int companyId, ref int documentId, Option<ModifyReceivedDocumentRequest> modifyReceivedDocumentRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modifyReceivedDocumentRequest"></param>
        /// <returns></returns>
        private void ValidateModifyReceivedDocument(Option<ModifyReceivedDocumentRequest> modifyReceivedDocumentRequest)
        {
            if (modifyReceivedDocumentRequest.IsSet && modifyReceivedDocumentRequest.Value == null)
                throw new ArgumentNullException(nameof(modifyReceivedDocumentRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyReceivedDocumentRequest"></param>
        private void AfterModifyReceivedDocumentDefaultImplementation(IModifyReceivedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId, Option<ModifyReceivedDocumentRequest> modifyReceivedDocumentRequest)
        {
            bool suppressDefaultLog = false;
            AfterModifyReceivedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId, modifyReceivedDocumentRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyReceivedDocumentRequest"></param>
        partial void AfterModifyReceivedDocument(ref bool suppressDefaultLog, IModifyReceivedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId, Option<ModifyReceivedDocumentRequest> modifyReceivedDocumentRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyReceivedDocumentRequest"></param>
        private void OnErrorModifyReceivedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<ModifyReceivedDocumentRequest> modifyReceivedDocumentRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorModifyReceivedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId, modifyReceivedDocumentRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyReceivedDocumentRequest"></param>
        partial void OnErrorModifyReceivedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<ModifyReceivedDocumentRequest> modifyReceivedDocumentRequest);

        /// <summary>
        /// Modify Received Document Modifies the specified document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceivedDocumentRequest">Modified document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyReceivedDocumentApiResponse"/>&gt;</returns>
        public async Task<IModifyReceivedDocumentApiResponse> ModifyReceivedDocumentOrDefaultAsync(int companyId, int documentId, Option<ModifyReceivedDocumentRequest> modifyReceivedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ModifyReceivedDocumentAsync(companyId, documentId, modifyReceivedDocumentRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Modify Received Document Modifies the specified document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceivedDocumentRequest">Modified document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyReceivedDocumentApiResponse"/>&gt;</returns>
        public async Task<IModifyReceivedDocumentApiResponse> ModifyReceivedDocumentAsync(int companyId, int documentId, Option<ModifyReceivedDocumentRequest> modifyReceivedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateModifyReceivedDocument(modifyReceivedDocumentRequest);

                FormatModifyReceivedDocument(ref companyId, ref documentId, modifyReceivedDocumentRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/received_documents/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/received_documents/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    if (modifyReceivedDocumentRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (modifyReceivedDocumentRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modifyReceivedDocumentRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ModifyReceivedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ModifyReceivedDocumentApiResponse>();
                        ModifyReceivedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ModifyReceivedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/received_documents/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterModifyReceivedDocumentDefaultImplementation(apiResponseLocalVar, companyId, documentId, modifyReceivedDocumentRequest);

                        Events.ExecuteOnModifyReceivedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorModifyReceivedDocumentDefaultImplementation(e, "/c/{company_id}/received_documents/{document_id}", uriBuilderLocalVar.Path, companyId, documentId, modifyReceivedDocumentRequest);
                Events.ExecuteOnErrorModifyReceivedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ModifyReceivedDocumentApiResponse"/>
        /// </summary>
        public partial class ModifyReceivedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IModifyReceivedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ModifyReceivedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ModifyReceivedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyReceivedDocumentApiResponse(ILogger<ModifyReceivedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ModifyReceivedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyReceivedDocumentApiResponse(ILogger<ModifyReceivedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ModifyReceivedDocumentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ModifyReceivedDocumentResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ModifyReceivedDocumentResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRecoverBinReceivedDocument(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterRecoverBinReceivedDocumentDefaultImplementation(IRecoverBinReceivedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterRecoverBinReceivedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterRecoverBinReceivedDocument(ref bool suppressDefaultLog, IRecoverBinReceivedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorRecoverBinReceivedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRecoverBinReceivedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorRecoverBinReceivedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Recover Received Document From The Bin Recover Received Document From The Bin
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRecoverBinReceivedDocumentApiResponse"/>&gt;</returns>
        public async Task<IRecoverBinReceivedDocumentApiResponse> RecoverBinReceivedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RecoverBinReceivedDocumentAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Recover Received Document From The Bin Recover Received Document From The Bin
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRecoverBinReceivedDocumentApiResponse"/>&gt;</returns>
        public async Task<IRecoverBinReceivedDocumentApiResponse> RecoverBinReceivedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatRecoverBinReceivedDocument(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/bin/received_documents/{document_id}/recover"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/bin/received_documents/{document_id}/recover");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<RecoverBinReceivedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RecoverBinReceivedDocumentApiResponse>();
                        RecoverBinReceivedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new RecoverBinReceivedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/bin/received_documents/{document_id}/recover", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterRecoverBinReceivedDocumentDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnRecoverBinReceivedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRecoverBinReceivedDocumentDefaultImplementation(e, "/c/{company_id}/bin/received_documents/{document_id}/recover", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorRecoverBinReceivedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RecoverBinReceivedDocumentApiResponse"/>
        /// </summary>
        public partial class RecoverBinReceivedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IRecoverBinReceivedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RecoverBinReceivedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RecoverBinReceivedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RecoverBinReceivedDocumentApiResponse(ILogger<RecoverBinReceivedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="RecoverBinReceivedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RecoverBinReceivedDocumentApiResponse(ILogger<RecoverBinReceivedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUploadReceivedDocumentAttachment(ref int companyId, ref Option<string> filename, ref Option<System.IO.Stream> attachment);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="attachment"></param>
        /// <returns></returns>
        private void ValidateUploadReceivedDocumentAttachment(Option<System.IO.Stream> attachment)
        {
            if (attachment.IsSet && attachment.Value == null)
                throw new ArgumentNullException(nameof(attachment));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="filename"></param>
        /// <param name="attachment"></param>
        private void AfterUploadReceivedDocumentAttachmentDefaultImplementation(IUploadReceivedDocumentAttachmentApiResponse apiResponseLocalVar, int companyId, Option<string> filename, Option<System.IO.Stream> attachment)
        {
            bool suppressDefaultLog = false;
            AfterUploadReceivedDocumentAttachment(ref suppressDefaultLog, apiResponseLocalVar, companyId, filename, attachment);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="filename"></param>
        /// <param name="attachment"></param>
        partial void AfterUploadReceivedDocumentAttachment(ref bool suppressDefaultLog, IUploadReceivedDocumentAttachmentApiResponse apiResponseLocalVar, int companyId, Option<string> filename, Option<System.IO.Stream> attachment);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="filename"></param>
        /// <param name="attachment"></param>
        private void OnErrorUploadReceivedDocumentAttachmentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<string> filename, Option<System.IO.Stream> attachment)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUploadReceivedDocumentAttachment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, filename, attachment);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="filename"></param>
        /// <param name="attachment"></param>
        partial void OnErrorUploadReceivedDocumentAttachment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<string> filename, Option<System.IO.Stream> attachment);

        /// <summary>
        /// Upload Received Document Attachment Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadReceivedDocumentAttachmentApiResponse"/>&gt;</returns>
        public async Task<IUploadReceivedDocumentAttachmentApiResponse> UploadReceivedDocumentAttachmentOrDefaultAsync(int companyId, Option<string> filename = default, Option<System.IO.Stream> attachment = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UploadReceivedDocumentAttachmentAsync(companyId, filename, attachment, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Upload Received Document Attachment Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadReceivedDocumentAttachmentApiResponse"/>&gt;</returns>
        public async Task<IUploadReceivedDocumentAttachmentApiResponse> UploadReceivedDocumentAttachmentAsync(int companyId, Option<string> filename = default, Option<System.IO.Stream> attachment = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUploadReceivedDocumentAttachment(attachment);

                FormatUploadReceivedDocumentAttachment(ref companyId, ref filename, ref attachment);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/received_documents/attachment"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/received_documents/attachment");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string, string>> formParameterLocalVars = new List<KeyValuePair<string, string>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (filename.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string, string>("filename", ClientUtils.ParameterToString(filename.Value)));

                    if (attachment.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(attachment.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<UploadReceivedDocumentAttachmentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UploadReceivedDocumentAttachmentApiResponse>();
                        UploadReceivedDocumentAttachmentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new UploadReceivedDocumentAttachmentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/received_documents/attachment", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterUploadReceivedDocumentAttachmentDefaultImplementation(apiResponseLocalVar, companyId, filename, attachment);

                        Events.ExecuteOnUploadReceivedDocumentAttachment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUploadReceivedDocumentAttachmentDefaultImplementation(e, "/c/{company_id}/received_documents/attachment", uriBuilderLocalVar.Path, companyId, filename, attachment);
                Events.ExecuteOnErrorUploadReceivedDocumentAttachment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UploadReceivedDocumentAttachmentApiResponse"/>
        /// </summary>
        public partial class UploadReceivedDocumentAttachmentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IUploadReceivedDocumentAttachmentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UploadReceivedDocumentAttachmentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UploadReceivedDocumentAttachmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadReceivedDocumentAttachmentApiResponse(ILogger<UploadReceivedDocumentAttachmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="UploadReceivedDocumentAttachmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadReceivedDocumentAttachmentApiResponse(ILogger<UploadReceivedDocumentAttachmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.UploadReceivedDocumentAttachmentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.UploadReceivedDocumentAttachmentResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.UploadReceivedDocumentAttachmentResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
