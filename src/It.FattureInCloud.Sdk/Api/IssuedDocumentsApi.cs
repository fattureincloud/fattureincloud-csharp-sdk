// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IIssuedDocumentsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        IssuedDocumentsApiEvents Events { get; }

        /// <summary>
        /// Create Issued Document
        /// </summary>
        /// <remarks>
        /// Creates a new document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createIssuedDocumentRequest">The Issued Document (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateIssuedDocumentApiResponse"/>&gt;</returns>
        Task<ICreateIssuedDocumentApiResponse> CreateIssuedDocumentAsync(int companyId, Option<CreateIssuedDocumentRequest> createIssuedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Issued Document
        /// </summary>
        /// <remarks>
        /// Creates a new document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createIssuedDocumentRequest">The Issued Document (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateIssuedDocumentApiResponse"/>&gt;</returns>
        Task<ICreateIssuedDocumentApiResponse> CreateIssuedDocumentOrDefaultAsync(int companyId, Option<CreateIssuedDocumentRequest> createIssuedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Bin Issued Document
        /// </summary>
        /// <remarks>
        /// Delete Bin Issued Document
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBinIssuedDocumentApiResponse"/>&gt;</returns>
        Task<IDeleteBinIssuedDocumentApiResponse> DeleteBinIssuedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Bin Issued Document
        /// </summary>
        /// <remarks>
        /// Delete Bin Issued Document
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBinIssuedDocumentApiResponse"/>&gt;</returns>
        Task<IDeleteBinIssuedDocumentApiResponse> DeleteBinIssuedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Issued Document
        /// </summary>
        /// <remarks>
        /// Deletes the specified document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssuedDocumentApiResponse"/>&gt;</returns>
        Task<IDeleteIssuedDocumentApiResponse> DeleteIssuedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Issued Document
        /// </summary>
        /// <remarks>
        /// Deletes the specified document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssuedDocumentApiResponse"/>&gt;</returns>
        Task<IDeleteIssuedDocumentApiResponse> DeleteIssuedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Issued Document Attachment
        /// </summary>
        /// <remarks>
        /// Removes the attachment of the specified document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssuedDocumentAttachmentApiResponse"/>&gt;</returns>
        Task<IDeleteIssuedDocumentAttachmentApiResponse> DeleteIssuedDocumentAttachmentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Issued Document Attachment
        /// </summary>
        /// <remarks>
        /// Removes the attachment of the specified document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssuedDocumentAttachmentApiResponse"/>&gt;</returns>
        Task<IDeleteIssuedDocumentAttachmentApiResponse> DeleteIssuedDocumentAttachmentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Bin Issued Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents detail
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBinIssuedDocumentApiResponse"/>&gt;</returns>
        Task<IGetBinIssuedDocumentApiResponse> GetBinIssuedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Bin Issued Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents detail
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBinIssuedDocumentApiResponse"/>&gt;</returns>
        Task<IGetBinIssuedDocumentApiResponse> GetBinIssuedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Email Data
        /// </summary>
        /// <remarks>
        /// Gets the pre-compiled email details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmailDataApiResponse"/>&gt;</returns>
        Task<IGetEmailDataApiResponse> GetEmailDataAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Email Data
        /// </summary>
        /// <remarks>
        /// Gets the pre-compiled email details.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmailDataApiResponse"/>&gt;</returns>
        Task<IGetEmailDataApiResponse> GetEmailDataOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Existing Issued Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a specified document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExistingIssuedDocumentTotalsApiResponse"/>&gt;</returns>
        Task<IGetExistingIssuedDocumentTotalsApiResponse> GetExistingIssuedDocumentTotalsAsync(int companyId, int documentId, Option<GetExistingIssuedDocumentTotalsRequest> getExistingIssuedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Existing Issued Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a specified document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExistingIssuedDocumentTotalsApiResponse"/>&gt;</returns>
        Task<IGetExistingIssuedDocumentTotalsApiResponse> GetExistingIssuedDocumentTotalsOrDefaultAsync(int companyId, int documentId, Option<GetExistingIssuedDocumentTotalsRequest> getExistingIssuedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Issued Document
        /// </summary>
        /// <remarks>
        /// Gets the specified document. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssuedDocumentApiResponse"/>&gt;</returns>
        Task<IGetIssuedDocumentApiResponse> GetIssuedDocumentAsync(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Issued Document
        /// </summary>
        /// <remarks>
        /// Gets the specified document. 
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssuedDocumentApiResponse"/>&gt;</returns>
        Task<IGetIssuedDocumentApiResponse> GetIssuedDocumentOrDefaultAsync(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Issued Document Pre-Create Info
        /// </summary>
        /// <remarks>
        /// Retrieves the information useful while creating a new document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssuedDocumentPreCreateInfoApiResponse"/>&gt;</returns>
        Task<IGetIssuedDocumentPreCreateInfoApiResponse> GetIssuedDocumentPreCreateInfoAsync(int companyId, string type, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Issued Document Pre-Create Info
        /// </summary>
        /// <remarks>
        /// Retrieves the information useful while creating a new document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssuedDocumentPreCreateInfoApiResponse"/>&gt;</returns>
        Task<IGetIssuedDocumentPreCreateInfoApiResponse> GetIssuedDocumentPreCreateInfoOrDefaultAsync(int companyId, string type, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get New Issued Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a new document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNewIssuedDocumentTotalsApiResponse"/>&gt;</returns>
        Task<IGetNewIssuedDocumentTotalsApiResponse> GetNewIssuedDocumentTotalsAsync(int companyId, Option<GetNewIssuedDocumentTotalsRequest> getNewIssuedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get New Issued Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a new document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNewIssuedDocumentTotalsApiResponse"/>&gt;</returns>
        Task<IGetNewIssuedDocumentTotalsApiResponse> GetNewIssuedDocumentTotalsOrDefaultAsync(int companyId, Option<GetNewIssuedDocumentTotalsRequest> getNewIssuedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Join Issued Documents
        /// </summary>
        /// <remarks>
        /// Joins issued documents.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="ids">Ids of the documents.</param>
        /// <param name="group">Group items. (optional)</param>
        /// <param name="type">Type of the documents to be joined (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJoinIssuedDocumentsApiResponse"/>&gt;</returns>
        Task<IJoinIssuedDocumentsApiResponse> JoinIssuedDocumentsAsync(int companyId, string ids, Option<int> group = default, Option<string> type = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Join Issued Documents
        /// </summary>
        /// <remarks>
        /// Joins issued documents.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="ids">Ids of the documents.</param>
        /// <param name="group">Group items. (optional)</param>
        /// <param name="type">Type of the documents to be joined (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJoinIssuedDocumentsApiResponse"/>&gt;</returns>
        Task<IJoinIssuedDocumentsApiResponse> JoinIssuedDocumentsOrDefaultAsync(int companyId, string ids, Option<int> group = default, Option<string> type = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Bin Issued Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents list
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBinIssuedDocumentsApiResponse"/>&gt;</returns>
        Task<IListBinIssuedDocumentsApiResponse> ListBinIssuedDocumentsAsync(int companyId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Bin Issued Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents list
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBinIssuedDocumentsApiResponse"/>&gt;</returns>
        Task<IListBinIssuedDocumentsApiResponse> ListBinIssuedDocumentsOrDefaultAsync(int companyId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Issued Documents
        /// </summary>
        /// <remarks>
        /// Lists the issued documents.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="inclusive">(Only for type &#x3D; delivery_notes) Include invoices delivery notes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssuedDocumentsApiResponse"/>&gt;</returns>
        Task<IListIssuedDocumentsApiResponse> ListIssuedDocumentsAsync(int companyId, string type, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, Option<int> inclusive = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Issued Documents
        /// </summary>
        /// <remarks>
        /// Lists the issued documents.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="inclusive">(Only for type &#x3D; delivery_notes) Include invoices delivery notes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssuedDocumentsApiResponse"/>&gt;</returns>
        Task<IListIssuedDocumentsApiResponse> ListIssuedDocumentsOrDefaultAsync(int companyId, string type, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, Option<int> inclusive = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Issued Document
        /// </summary>
        /// <remarks>
        /// Modifies the specified document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyIssuedDocumentRequest">The modified document (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyIssuedDocumentApiResponse"/>&gt;</returns>
        Task<IModifyIssuedDocumentApiResponse> ModifyIssuedDocumentAsync(int companyId, int documentId, Option<ModifyIssuedDocumentRequest> modifyIssuedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Issued Document
        /// </summary>
        /// <remarks>
        /// Modifies the specified document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyIssuedDocumentRequest">The modified document (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyIssuedDocumentApiResponse"/>&gt;</returns>
        Task<IModifyIssuedDocumentApiResponse> ModifyIssuedDocumentOrDefaultAsync(int companyId, int documentId, Option<ModifyIssuedDocumentRequest> modifyIssuedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Recover Issued Document From The Bin
        /// </summary>
        /// <remarks>
        /// Recover Issued Document From The Bin
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRecoverBinIssuedDocumentApiResponse"/>&gt;</returns>
        Task<IRecoverBinIssuedDocumentApiResponse> RecoverBinIssuedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Recover Issued Document From The Bin
        /// </summary>
        /// <remarks>
        /// Recover Issued Document From The Bin
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRecoverBinIssuedDocumentApiResponse"/>&gt;</returns>
        Task<IRecoverBinIssuedDocumentApiResponse> RecoverBinIssuedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Schedule Email
        /// </summary>
        /// <remarks>
        /// Schedules the sending of a document by email.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="scheduleEmailRequest">Email Schedule (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IScheduleEmailApiResponse"/>&gt;</returns>
        Task<IScheduleEmailApiResponse> ScheduleEmailAsync(int companyId, int documentId, Option<ScheduleEmailRequest> scheduleEmailRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Schedule Email
        /// </summary>
        /// <remarks>
        /// Schedules the sending of a document by email.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="scheduleEmailRequest">Email Schedule (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IScheduleEmailApiResponse"/>&gt;</returns>
        Task<IScheduleEmailApiResponse> ScheduleEmailOrDefaultAsync(int companyId, int documentId, Option<ScheduleEmailRequest> scheduleEmailRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transform Issued Document
        /// </summary>
        /// <remarks>
        /// Transforms the document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="originalDocumentId">Original document id.</param>
        /// <param name="newType">New document type.</param>
        /// <param name="type">Current document type. (optional)</param>
        /// <param name="eInvoice">New document e_invoice. (optional)</param>
        /// <param name="transformKeepCopy">Keep the old document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransformIssuedDocumentApiResponse"/>&gt;</returns>
        Task<ITransformIssuedDocumentApiResponse> TransformIssuedDocumentAsync(int companyId, int originalDocumentId, string newType, Option<string> type = default, Option<int> eInvoice = default, Option<int> transformKeepCopy = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transform Issued Document
        /// </summary>
        /// <remarks>
        /// Transforms the document.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="originalDocumentId">Original document id.</param>
        /// <param name="newType">New document type.</param>
        /// <param name="type">Current document type. (optional)</param>
        /// <param name="eInvoice">New document e_invoice. (optional)</param>
        /// <param name="transformKeepCopy">Keep the old document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransformIssuedDocumentApiResponse"/>&gt;</returns>
        Task<ITransformIssuedDocumentApiResponse> TransformIssuedDocumentOrDefaultAsync(int companyId, int originalDocumentId, string newType, Option<string> type = default, Option<int> eInvoice = default, Option<int> transformKeepCopy = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Issued Document Attachment
        /// </summary>
        /// <remarks>
        /// Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadIssuedDocumentAttachmentApiResponse"/>&gt;</returns>
        Task<IUploadIssuedDocumentAttachmentApiResponse> UploadIssuedDocumentAttachmentAsync(int companyId, Option<string> filename = default, Option<System.IO.Stream> attachment = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Issued Document Attachment
        /// </summary>
        /// <remarks>
        /// Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadIssuedDocumentAttachmentApiResponse"/>&gt;</returns>
        Task<IUploadIssuedDocumentAttachmentApiResponse> UploadIssuedDocumentAttachmentOrDefaultAsync(int companyId, Option<string> filename = default, Option<System.IO.Stream> attachment = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateIssuedDocumentApiResponse"/>
    /// </summary>
    public interface ICreateIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.CreateIssuedDocumentResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteBinIssuedDocumentApiResponse"/>
    /// </summary>
    public interface IDeleteBinIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteIssuedDocumentApiResponse"/>
    /// </summary>
    public interface IDeleteIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteIssuedDocumentAttachmentApiResponse"/>
    /// </summary>
    public interface IDeleteIssuedDocumentAttachmentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetBinIssuedDocumentApiResponse"/>
    /// </summary>
    public interface IGetBinIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetBinIssuedDocumentResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetEmailDataApiResponse"/>
    /// </summary>
    public interface IGetEmailDataApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetEmailDataResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetExistingIssuedDocumentTotalsApiResponse"/>
    /// </summary>
    public interface IGetExistingIssuedDocumentTotalsApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetExistingIssuedDocumentTotalsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetIssuedDocumentApiResponse"/>
    /// </summary>
    public interface IGetIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetIssuedDocumentResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetIssuedDocumentPreCreateInfoApiResponse"/>
    /// </summary>
    public interface IGetIssuedDocumentPreCreateInfoApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetIssuedDocumentPreCreateInfoResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetNewIssuedDocumentTotalsApiResponse"/>
    /// </summary>
    public interface IGetNewIssuedDocumentTotalsApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetNewIssuedDocumentTotalsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IJoinIssuedDocumentsApiResponse"/>
    /// </summary>
    public interface IJoinIssuedDocumentsApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.JoinIssuedDocumentsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListBinIssuedDocumentsApiResponse"/>
    /// </summary>
    public interface IListBinIssuedDocumentsApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ListBinIssuedDocuments>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListIssuedDocumentsApiResponse"/>
    /// </summary>
    public interface IListIssuedDocumentsApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ListIssuedDocumentsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IModifyIssuedDocumentApiResponse"/>
    /// </summary>
    public interface IModifyIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ModifyIssuedDocumentResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IRecoverBinIssuedDocumentApiResponse"/>
    /// </summary>
    public interface IRecoverBinIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IScheduleEmailApiResponse"/>
    /// </summary>
    public interface IScheduleEmailApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="ITransformIssuedDocumentApiResponse"/>
    /// </summary>
    public interface ITransformIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.TransformIssuedDocumentResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUploadIssuedDocumentAttachmentApiResponse"/>
    /// </summary>
    public interface IUploadIssuedDocumentAttachmentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.UploadIssuedDocumentAttachmentResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class IssuedDocumentsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateIssuedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateIssuedDocument;

        internal void ExecuteOnCreateIssuedDocument(IssuedDocumentsApi.CreateIssuedDocumentApiResponse apiResponse)
        {
            OnCreateIssuedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateIssuedDocument(Exception exception)
        {
            OnErrorCreateIssuedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteBinIssuedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteBinIssuedDocument;

        internal void ExecuteOnDeleteBinIssuedDocument(IssuedDocumentsApi.DeleteBinIssuedDocumentApiResponse apiResponse)
        {
            OnDeleteBinIssuedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteBinIssuedDocument(Exception exception)
        {
            OnErrorDeleteBinIssuedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteIssuedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteIssuedDocument;

        internal void ExecuteOnDeleteIssuedDocument(IssuedDocumentsApi.DeleteIssuedDocumentApiResponse apiResponse)
        {
            OnDeleteIssuedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteIssuedDocument(Exception exception)
        {
            OnErrorDeleteIssuedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteIssuedDocumentAttachment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteIssuedDocumentAttachment;

        internal void ExecuteOnDeleteIssuedDocumentAttachment(IssuedDocumentsApi.DeleteIssuedDocumentAttachmentApiResponse apiResponse)
        {
            OnDeleteIssuedDocumentAttachment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteIssuedDocumentAttachment(Exception exception)
        {
            OnErrorDeleteIssuedDocumentAttachment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetBinIssuedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetBinIssuedDocument;

        internal void ExecuteOnGetBinIssuedDocument(IssuedDocumentsApi.GetBinIssuedDocumentApiResponse apiResponse)
        {
            OnGetBinIssuedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBinIssuedDocument(Exception exception)
        {
            OnErrorGetBinIssuedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetEmailData;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetEmailData;

        internal void ExecuteOnGetEmailData(IssuedDocumentsApi.GetEmailDataApiResponse apiResponse)
        {
            OnGetEmailData?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEmailData(Exception exception)
        {
            OnErrorGetEmailData?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetExistingIssuedDocumentTotals;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetExistingIssuedDocumentTotals;

        internal void ExecuteOnGetExistingIssuedDocumentTotals(IssuedDocumentsApi.GetExistingIssuedDocumentTotalsApiResponse apiResponse)
        {
            OnGetExistingIssuedDocumentTotals?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetExistingIssuedDocumentTotals(Exception exception)
        {
            OnErrorGetExistingIssuedDocumentTotals?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetIssuedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetIssuedDocument;

        internal void ExecuteOnGetIssuedDocument(IssuedDocumentsApi.GetIssuedDocumentApiResponse apiResponse)
        {
            OnGetIssuedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetIssuedDocument(Exception exception)
        {
            OnErrorGetIssuedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetIssuedDocumentPreCreateInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetIssuedDocumentPreCreateInfo;

        internal void ExecuteOnGetIssuedDocumentPreCreateInfo(IssuedDocumentsApi.GetIssuedDocumentPreCreateInfoApiResponse apiResponse)
        {
            OnGetIssuedDocumentPreCreateInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetIssuedDocumentPreCreateInfo(Exception exception)
        {
            OnErrorGetIssuedDocumentPreCreateInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetNewIssuedDocumentTotals;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetNewIssuedDocumentTotals;

        internal void ExecuteOnGetNewIssuedDocumentTotals(IssuedDocumentsApi.GetNewIssuedDocumentTotalsApiResponse apiResponse)
        {
            OnGetNewIssuedDocumentTotals?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetNewIssuedDocumentTotals(Exception exception)
        {
            OnErrorGetNewIssuedDocumentTotals?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnJoinIssuedDocuments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorJoinIssuedDocuments;

        internal void ExecuteOnJoinIssuedDocuments(IssuedDocumentsApi.JoinIssuedDocumentsApiResponse apiResponse)
        {
            OnJoinIssuedDocuments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJoinIssuedDocuments(Exception exception)
        {
            OnErrorJoinIssuedDocuments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnListBinIssuedDocuments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorListBinIssuedDocuments;

        internal void ExecuteOnListBinIssuedDocuments(IssuedDocumentsApi.ListBinIssuedDocumentsApiResponse apiResponse)
        {
            OnListBinIssuedDocuments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListBinIssuedDocuments(Exception exception)
        {
            OnErrorListBinIssuedDocuments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnListIssuedDocuments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorListIssuedDocuments;

        internal void ExecuteOnListIssuedDocuments(IssuedDocumentsApi.ListIssuedDocumentsApiResponse apiResponse)
        {
            OnListIssuedDocuments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListIssuedDocuments(Exception exception)
        {
            OnErrorListIssuedDocuments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnModifyIssuedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorModifyIssuedDocument;

        internal void ExecuteOnModifyIssuedDocument(IssuedDocumentsApi.ModifyIssuedDocumentApiResponse apiResponse)
        {
            OnModifyIssuedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorModifyIssuedDocument(Exception exception)
        {
            OnErrorModifyIssuedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnRecoverBinIssuedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorRecoverBinIssuedDocument;

        internal void ExecuteOnRecoverBinIssuedDocument(IssuedDocumentsApi.RecoverBinIssuedDocumentApiResponse apiResponse)
        {
            OnRecoverBinIssuedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRecoverBinIssuedDocument(Exception exception)
        {
            OnErrorRecoverBinIssuedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnScheduleEmail;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorScheduleEmail;

        internal void ExecuteOnScheduleEmail(IssuedDocumentsApi.ScheduleEmailApiResponse apiResponse)
        {
            OnScheduleEmail?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorScheduleEmail(Exception exception)
        {
            OnErrorScheduleEmail?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTransformIssuedDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTransformIssuedDocument;

        internal void ExecuteOnTransformIssuedDocument(IssuedDocumentsApi.TransformIssuedDocumentApiResponse apiResponse)
        {
            OnTransformIssuedDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransformIssuedDocument(Exception exception)
        {
            OnErrorTransformIssuedDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUploadIssuedDocumentAttachment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUploadIssuedDocumentAttachment;

        internal void ExecuteOnUploadIssuedDocumentAttachment(IssuedDocumentsApi.UploadIssuedDocumentAttachmentApiResponse apiResponse)
        {
            OnUploadIssuedDocumentAttachment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUploadIssuedDocumentAttachment(Exception exception)
        {
            OnErrorUploadIssuedDocumentAttachment?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class IssuedDocumentsApi : IIssuedDocumentsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<IssuedDocumentsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public IssuedDocumentsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssuedDocumentsApi(ILogger<IssuedDocumentsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, IssuedDocumentsApiEvents issuedDocumentsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<IssuedDocumentsApi>();
            HttpClient = httpClient;
            Events = issuedDocumentsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatCreateIssuedDocument(ref int companyId, Option<CreateIssuedDocumentRequest> createIssuedDocumentRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createIssuedDocumentRequest"></param>
        /// <returns></returns>
        private void ValidateCreateIssuedDocument(Option<CreateIssuedDocumentRequest> createIssuedDocumentRequest)
        {
            if (createIssuedDocumentRequest.IsSet && createIssuedDocumentRequest.Value == null)
                throw new ArgumentNullException(nameof(createIssuedDocumentRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createIssuedDocumentRequest"></param>
        private void AfterCreateIssuedDocumentDefaultImplementation(ICreateIssuedDocumentApiResponse apiResponseLocalVar, int companyId, Option<CreateIssuedDocumentRequest> createIssuedDocumentRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateIssuedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, createIssuedDocumentRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createIssuedDocumentRequest"></param>
        partial void AfterCreateIssuedDocument(ref bool suppressDefaultLog, ICreateIssuedDocumentApiResponse apiResponseLocalVar, int companyId, Option<CreateIssuedDocumentRequest> createIssuedDocumentRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createIssuedDocumentRequest"></param>
        private void OnErrorCreateIssuedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreateIssuedDocumentRequest> createIssuedDocumentRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateIssuedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, createIssuedDocumentRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createIssuedDocumentRequest"></param>
        partial void OnErrorCreateIssuedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreateIssuedDocumentRequest> createIssuedDocumentRequest);

        /// <summary>
        /// Create Issued Document Creates a new document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createIssuedDocumentRequest">The Issued Document (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<ICreateIssuedDocumentApiResponse> CreateIssuedDocumentOrDefaultAsync(int companyId, Option<CreateIssuedDocumentRequest> createIssuedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateIssuedDocumentAsync(companyId, createIssuedDocumentRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Issued Document Creates a new document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createIssuedDocumentRequest">The Issued Document (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<ICreateIssuedDocumentApiResponse> CreateIssuedDocumentAsync(int companyId, Option<CreateIssuedDocumentRequest> createIssuedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateIssuedDocument(createIssuedDocumentRequest);

                FormatCreateIssuedDocument(ref companyId, createIssuedDocumentRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    if (createIssuedDocumentRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createIssuedDocumentRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createIssuedDocumentRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreateIssuedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateIssuedDocumentApiResponse>();
                        CreateIssuedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new CreateIssuedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreateIssuedDocumentDefaultImplementation(apiResponseLocalVar, companyId, createIssuedDocumentRequest);

                        Events.ExecuteOnCreateIssuedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateIssuedDocumentDefaultImplementation(e, "/c/{company_id}/issued_documents", uriBuilderLocalVar.Path, companyId, createIssuedDocumentRequest);
                Events.ExecuteOnErrorCreateIssuedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateIssuedDocumentApiResponse"/>
        /// </summary>
        public partial class CreateIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, ICreateIssuedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateIssuedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateIssuedDocumentApiResponse(ILogger<CreateIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreateIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateIssuedDocumentApiResponse(ILogger<CreateIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.CreateIssuedDocumentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.CreateIssuedDocumentResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.CreateIssuedDocumentResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteBinIssuedDocument(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterDeleteBinIssuedDocumentDefaultImplementation(IDeleteBinIssuedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteBinIssuedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterDeleteBinIssuedDocument(ref bool suppressDefaultLog, IDeleteBinIssuedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorDeleteBinIssuedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteBinIssuedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorDeleteBinIssuedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Delete Bin Issued Document Delete Bin Issued Document
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBinIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<IDeleteBinIssuedDocumentApiResponse> DeleteBinIssuedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteBinIssuedDocumentAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Bin Issued Document Delete Bin Issued Document
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBinIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<IDeleteBinIssuedDocumentApiResponse> DeleteBinIssuedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteBinIssuedDocument(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/bin/issued_documents/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/bin/issued_documents/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteBinIssuedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteBinIssuedDocumentApiResponse>();
                        DeleteBinIssuedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteBinIssuedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/bin/issued_documents/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteBinIssuedDocumentDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnDeleteBinIssuedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteBinIssuedDocumentDefaultImplementation(e, "/c/{company_id}/bin/issued_documents/{document_id}", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorDeleteBinIssuedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteBinIssuedDocumentApiResponse"/>
        /// </summary>
        public partial class DeleteBinIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IDeleteBinIssuedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteBinIssuedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteBinIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteBinIssuedDocumentApiResponse(ILogger<DeleteBinIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteBinIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteBinIssuedDocumentApiResponse(ILogger<DeleteBinIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteIssuedDocument(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterDeleteIssuedDocumentDefaultImplementation(IDeleteIssuedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteIssuedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterDeleteIssuedDocument(ref bool suppressDefaultLog, IDeleteIssuedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorDeleteIssuedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteIssuedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorDeleteIssuedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Delete Issued Document Deletes the specified document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<IDeleteIssuedDocumentApiResponse> DeleteIssuedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteIssuedDocumentAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Issued Document Deletes the specified document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<IDeleteIssuedDocumentApiResponse> DeleteIssuedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteIssuedDocument(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteIssuedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteIssuedDocumentApiResponse>();
                        DeleteIssuedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteIssuedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteIssuedDocumentDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnDeleteIssuedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteIssuedDocumentDefaultImplementation(e, "/c/{company_id}/issued_documents/{document_id}", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorDeleteIssuedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteIssuedDocumentApiResponse"/>
        /// </summary>
        public partial class DeleteIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IDeleteIssuedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteIssuedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteIssuedDocumentApiResponse(ILogger<DeleteIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteIssuedDocumentApiResponse(ILogger<DeleteIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteIssuedDocumentAttachment(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterDeleteIssuedDocumentAttachmentDefaultImplementation(IDeleteIssuedDocumentAttachmentApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteIssuedDocumentAttachment(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterDeleteIssuedDocumentAttachment(ref bool suppressDefaultLog, IDeleteIssuedDocumentAttachmentApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorDeleteIssuedDocumentAttachmentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteIssuedDocumentAttachment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorDeleteIssuedDocumentAttachment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Delete Issued Document Attachment Removes the attachment of the specified document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssuedDocumentAttachmentApiResponse"/>&gt;</returns>
        public async Task<IDeleteIssuedDocumentAttachmentApiResponse> DeleteIssuedDocumentAttachmentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteIssuedDocumentAttachmentAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Issued Document Attachment Removes the attachment of the specified document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteIssuedDocumentAttachmentApiResponse"/>&gt;</returns>
        public async Task<IDeleteIssuedDocumentAttachmentApiResponse> DeleteIssuedDocumentAttachmentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteIssuedDocumentAttachment(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/{document_id}/attachment"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/{document_id}/attachment");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteIssuedDocumentAttachmentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteIssuedDocumentAttachmentApiResponse>();
                        DeleteIssuedDocumentAttachmentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteIssuedDocumentAttachmentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/{document_id}/attachment", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteIssuedDocumentAttachmentDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnDeleteIssuedDocumentAttachment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteIssuedDocumentAttachmentDefaultImplementation(e, "/c/{company_id}/issued_documents/{document_id}/attachment", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorDeleteIssuedDocumentAttachment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteIssuedDocumentAttachmentApiResponse"/>
        /// </summary>
        public partial class DeleteIssuedDocumentAttachmentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IDeleteIssuedDocumentAttachmentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteIssuedDocumentAttachmentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteIssuedDocumentAttachmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteIssuedDocumentAttachmentApiResponse(ILogger<DeleteIssuedDocumentAttachmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteIssuedDocumentAttachmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteIssuedDocumentAttachmentApiResponse(ILogger<DeleteIssuedDocumentAttachmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetBinIssuedDocument(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterGetBinIssuedDocumentDefaultImplementation(IGetBinIssuedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterGetBinIssuedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterGetBinIssuedDocument(ref bool suppressDefaultLog, IGetBinIssuedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorGetBinIssuedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetBinIssuedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorGetBinIssuedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Get Bin Issued Documents List Get bin issued documents detail
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBinIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<IGetBinIssuedDocumentApiResponse> GetBinIssuedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBinIssuedDocumentAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Bin Issued Documents List Get bin issued documents detail
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBinIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<IGetBinIssuedDocumentApiResponse> GetBinIssuedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetBinIssuedDocument(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/bin/issued_documents/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/bin/issued_documents/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetBinIssuedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBinIssuedDocumentApiResponse>();
                        GetBinIssuedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetBinIssuedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/bin/issued_documents/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetBinIssuedDocumentDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnGetBinIssuedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBinIssuedDocumentDefaultImplementation(e, "/c/{company_id}/bin/issued_documents/{document_id}", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorGetBinIssuedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBinIssuedDocumentApiResponse"/>
        /// </summary>
        public partial class GetBinIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetBinIssuedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBinIssuedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBinIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBinIssuedDocumentApiResponse(ILogger<GetBinIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetBinIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBinIssuedDocumentApiResponse(ILogger<GetBinIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetBinIssuedDocumentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetBinIssuedDocumentResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetBinIssuedDocumentResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEmailData(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterGetEmailDataDefaultImplementation(IGetEmailDataApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterGetEmailData(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterGetEmailData(ref bool suppressDefaultLog, IGetEmailDataApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorGetEmailDataDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEmailData(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorGetEmailData(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Get Email Data Gets the pre-compiled email details.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmailDataApiResponse"/>&gt;</returns>
        public async Task<IGetEmailDataApiResponse> GetEmailDataOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEmailDataAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Email Data Gets the pre-compiled email details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmailDataApiResponse"/>&gt;</returns>
        public async Task<IGetEmailDataApiResponse> GetEmailDataAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetEmailData(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/{document_id}/email"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/{document_id}/email");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetEmailDataApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEmailDataApiResponse>();
                        GetEmailDataApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetEmailDataApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/{document_id}/email", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetEmailDataDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnGetEmailData(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEmailDataDefaultImplementation(e, "/c/{company_id}/issued_documents/{document_id}/email", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorGetEmailData(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEmailDataApiResponse"/>
        /// </summary>
        public partial class GetEmailDataApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetEmailDataApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEmailDataApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEmailDataApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEmailDataApiResponse(ILogger<GetEmailDataApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetEmailDataApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEmailDataApiResponse(ILogger<GetEmailDataApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetEmailDataResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetEmailDataResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetEmailDataResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetExistingIssuedDocumentTotals(ref int companyId, ref int documentId, Option<GetExistingIssuedDocumentTotalsRequest> getExistingIssuedDocumentTotalsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="getExistingIssuedDocumentTotalsRequest"></param>
        /// <returns></returns>
        private void ValidateGetExistingIssuedDocumentTotals(Option<GetExistingIssuedDocumentTotalsRequest> getExistingIssuedDocumentTotalsRequest)
        {
            if (getExistingIssuedDocumentTotalsRequest.IsSet && getExistingIssuedDocumentTotalsRequest.Value == null)
                throw new ArgumentNullException(nameof(getExistingIssuedDocumentTotalsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"></param>
        private void AfterGetExistingIssuedDocumentTotalsDefaultImplementation(IGetExistingIssuedDocumentTotalsApiResponse apiResponseLocalVar, int companyId, int documentId, Option<GetExistingIssuedDocumentTotalsRequest> getExistingIssuedDocumentTotalsRequest)
        {
            bool suppressDefaultLog = false;
            AfterGetExistingIssuedDocumentTotals(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId, getExistingIssuedDocumentTotalsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"></param>
        partial void AfterGetExistingIssuedDocumentTotals(ref bool suppressDefaultLog, IGetExistingIssuedDocumentTotalsApiResponse apiResponseLocalVar, int companyId, int documentId, Option<GetExistingIssuedDocumentTotalsRequest> getExistingIssuedDocumentTotalsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"></param>
        private void OnErrorGetExistingIssuedDocumentTotalsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<GetExistingIssuedDocumentTotalsRequest> getExistingIssuedDocumentTotalsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetExistingIssuedDocumentTotals(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId, getExistingIssuedDocumentTotalsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"></param>
        partial void OnErrorGetExistingIssuedDocumentTotals(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<GetExistingIssuedDocumentTotalsRequest> getExistingIssuedDocumentTotalsRequest);

        /// <summary>
        /// Get Existing Issued Document Totals Returns the totals for a specified document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExistingIssuedDocumentTotalsApiResponse"/>&gt;</returns>
        public async Task<IGetExistingIssuedDocumentTotalsApiResponse> GetExistingIssuedDocumentTotalsOrDefaultAsync(int companyId, int documentId, Option<GetExistingIssuedDocumentTotalsRequest> getExistingIssuedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetExistingIssuedDocumentTotalsAsync(companyId, documentId, getExistingIssuedDocumentTotalsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Existing Issued Document Totals Returns the totals for a specified document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExistingIssuedDocumentTotalsApiResponse"/>&gt;</returns>
        public async Task<IGetExistingIssuedDocumentTotalsApiResponse> GetExistingIssuedDocumentTotalsAsync(int companyId, int documentId, Option<GetExistingIssuedDocumentTotalsRequest> getExistingIssuedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetExistingIssuedDocumentTotals(getExistingIssuedDocumentTotalsRequest);

                FormatGetExistingIssuedDocumentTotals(ref companyId, ref documentId, getExistingIssuedDocumentTotalsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/{document_id}/totals"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/{document_id}/totals");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    if (getExistingIssuedDocumentTotalsRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (getExistingIssuedDocumentTotalsRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(getExistingIssuedDocumentTotalsRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetExistingIssuedDocumentTotalsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetExistingIssuedDocumentTotalsApiResponse>();
                        GetExistingIssuedDocumentTotalsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetExistingIssuedDocumentTotalsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/{document_id}/totals", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetExistingIssuedDocumentTotalsDefaultImplementation(apiResponseLocalVar, companyId, documentId, getExistingIssuedDocumentTotalsRequest);

                        Events.ExecuteOnGetExistingIssuedDocumentTotals(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetExistingIssuedDocumentTotalsDefaultImplementation(e, "/c/{company_id}/issued_documents/{document_id}/totals", uriBuilderLocalVar.Path, companyId, documentId, getExistingIssuedDocumentTotalsRequest);
                Events.ExecuteOnErrorGetExistingIssuedDocumentTotals(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetExistingIssuedDocumentTotalsApiResponse"/>
        /// </summary>
        public partial class GetExistingIssuedDocumentTotalsApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetExistingIssuedDocumentTotalsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetExistingIssuedDocumentTotalsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetExistingIssuedDocumentTotalsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetExistingIssuedDocumentTotalsApiResponse(ILogger<GetExistingIssuedDocumentTotalsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetExistingIssuedDocumentTotalsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetExistingIssuedDocumentTotalsApiResponse(ILogger<GetExistingIssuedDocumentTotalsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetExistingIssuedDocumentTotalsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetExistingIssuedDocumentTotalsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetExistingIssuedDocumentTotalsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetIssuedDocument(ref int companyId, ref int documentId, ref Option<string> fields, ref Option<string> fieldset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <returns></returns>
        private void ValidateGetIssuedDocument(Option<string> fields, Option<string> fieldset)
        {
            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields));

            if (fieldset.IsSet && fieldset.Value == null)
                throw new ArgumentNullException(nameof(fieldset));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        private void AfterGetIssuedDocumentDefaultImplementation(IGetIssuedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset)
        {
            bool suppressDefaultLog = false;
            AfterGetIssuedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId, fields, fieldset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        partial void AfterGetIssuedDocument(ref bool suppressDefaultLog, IGetIssuedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        private void OnErrorGetIssuedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetIssuedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId, fields, fieldset);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        partial void OnErrorGetIssuedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset);

        /// <summary>
        /// Get Issued Document Gets the specified document. 
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<IGetIssuedDocumentApiResponse> GetIssuedDocumentOrDefaultAsync(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetIssuedDocumentAsync(companyId, documentId, fields, fieldset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Issued Document Gets the specified document. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<IGetIssuedDocumentApiResponse> GetIssuedDocumentAsync(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetIssuedDocument(fields, fieldset);

                FormatGetIssuedDocument(ref companyId, ref documentId, ref fields, ref fieldset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (fields.IsSet)
                        parseQueryStringLocalVar["fields"] = ClientUtils.ParameterToString(fields.Value);

                    if (fieldset.IsSet)
                        parseQueryStringLocalVar["fieldset"] = ClientUtils.ParameterToString(fieldset.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetIssuedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetIssuedDocumentApiResponse>();
                        GetIssuedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetIssuedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetIssuedDocumentDefaultImplementation(apiResponseLocalVar, companyId, documentId, fields, fieldset);

                        Events.ExecuteOnGetIssuedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetIssuedDocumentDefaultImplementation(e, "/c/{company_id}/issued_documents/{document_id}", uriBuilderLocalVar.Path, companyId, documentId, fields, fieldset);
                Events.ExecuteOnErrorGetIssuedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetIssuedDocumentApiResponse"/>
        /// </summary>
        public partial class GetIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetIssuedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetIssuedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetIssuedDocumentApiResponse(ILogger<GetIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetIssuedDocumentApiResponse(ILogger<GetIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetIssuedDocumentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetIssuedDocumentResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetIssuedDocumentResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetIssuedDocumentPreCreateInfo(ref int companyId, ref string type);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        private void ValidateGetIssuedDocumentPreCreateInfo(string type)
        {
            if (type == null)
                throw new ArgumentNullException(nameof(type));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        private void AfterGetIssuedDocumentPreCreateInfoDefaultImplementation(IGetIssuedDocumentPreCreateInfoApiResponse apiResponseLocalVar, int companyId, string type)
        {
            bool suppressDefaultLog = false;
            AfterGetIssuedDocumentPreCreateInfo(ref suppressDefaultLog, apiResponseLocalVar, companyId, type);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        partial void AfterGetIssuedDocumentPreCreateInfo(ref bool suppressDefaultLog, IGetIssuedDocumentPreCreateInfoApiResponse apiResponseLocalVar, int companyId, string type);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        private void OnErrorGetIssuedDocumentPreCreateInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string type)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetIssuedDocumentPreCreateInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, type);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        partial void OnErrorGetIssuedDocumentPreCreateInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string type);

        /// <summary>
        /// Get Issued Document Pre-Create Info Retrieves the information useful while creating a new document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssuedDocumentPreCreateInfoApiResponse"/>&gt;</returns>
        public async Task<IGetIssuedDocumentPreCreateInfoApiResponse> GetIssuedDocumentPreCreateInfoOrDefaultAsync(int companyId, string type, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetIssuedDocumentPreCreateInfoAsync(companyId, type, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Issued Document Pre-Create Info Retrieves the information useful while creating a new document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIssuedDocumentPreCreateInfoApiResponse"/>&gt;</returns>
        public async Task<IGetIssuedDocumentPreCreateInfoApiResponse> GetIssuedDocumentPreCreateInfoAsync(int companyId, string type, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetIssuedDocumentPreCreateInfo(type);

                FormatGetIssuedDocumentPreCreateInfo(ref companyId, ref type);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/info"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/info");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetIssuedDocumentPreCreateInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetIssuedDocumentPreCreateInfoApiResponse>();
                        GetIssuedDocumentPreCreateInfoApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetIssuedDocumentPreCreateInfoApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/info", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetIssuedDocumentPreCreateInfoDefaultImplementation(apiResponseLocalVar, companyId, type);

                        Events.ExecuteOnGetIssuedDocumentPreCreateInfo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetIssuedDocumentPreCreateInfoDefaultImplementation(e, "/c/{company_id}/issued_documents/info", uriBuilderLocalVar.Path, companyId, type);
                Events.ExecuteOnErrorGetIssuedDocumentPreCreateInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetIssuedDocumentPreCreateInfoApiResponse"/>
        /// </summary>
        public partial class GetIssuedDocumentPreCreateInfoApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetIssuedDocumentPreCreateInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetIssuedDocumentPreCreateInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetIssuedDocumentPreCreateInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetIssuedDocumentPreCreateInfoApiResponse(ILogger<GetIssuedDocumentPreCreateInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetIssuedDocumentPreCreateInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetIssuedDocumentPreCreateInfoApiResponse(ILogger<GetIssuedDocumentPreCreateInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetIssuedDocumentPreCreateInfoResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetIssuedDocumentPreCreateInfoResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetIssuedDocumentPreCreateInfoResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetNewIssuedDocumentTotals(ref int companyId, Option<GetNewIssuedDocumentTotalsRequest> getNewIssuedDocumentTotalsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="getNewIssuedDocumentTotalsRequest"></param>
        /// <returns></returns>
        private void ValidateGetNewIssuedDocumentTotals(Option<GetNewIssuedDocumentTotalsRequest> getNewIssuedDocumentTotalsRequest)
        {
            if (getNewIssuedDocumentTotalsRequest.IsSet && getNewIssuedDocumentTotalsRequest.Value == null)
                throw new ArgumentNullException(nameof(getNewIssuedDocumentTotalsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="getNewIssuedDocumentTotalsRequest"></param>
        private void AfterGetNewIssuedDocumentTotalsDefaultImplementation(IGetNewIssuedDocumentTotalsApiResponse apiResponseLocalVar, int companyId, Option<GetNewIssuedDocumentTotalsRequest> getNewIssuedDocumentTotalsRequest)
        {
            bool suppressDefaultLog = false;
            AfterGetNewIssuedDocumentTotals(ref suppressDefaultLog, apiResponseLocalVar, companyId, getNewIssuedDocumentTotalsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="getNewIssuedDocumentTotalsRequest"></param>
        partial void AfterGetNewIssuedDocumentTotals(ref bool suppressDefaultLog, IGetNewIssuedDocumentTotalsApiResponse apiResponseLocalVar, int companyId, Option<GetNewIssuedDocumentTotalsRequest> getNewIssuedDocumentTotalsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="getNewIssuedDocumentTotalsRequest"></param>
        private void OnErrorGetNewIssuedDocumentTotalsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<GetNewIssuedDocumentTotalsRequest> getNewIssuedDocumentTotalsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetNewIssuedDocumentTotals(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, getNewIssuedDocumentTotalsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="getNewIssuedDocumentTotalsRequest"></param>
        partial void OnErrorGetNewIssuedDocumentTotals(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<GetNewIssuedDocumentTotalsRequest> getNewIssuedDocumentTotalsRequest);

        /// <summary>
        /// Get New Issued Document Totals Returns the totals for a new document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNewIssuedDocumentTotalsApiResponse"/>&gt;</returns>
        public async Task<IGetNewIssuedDocumentTotalsApiResponse> GetNewIssuedDocumentTotalsOrDefaultAsync(int companyId, Option<GetNewIssuedDocumentTotalsRequest> getNewIssuedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetNewIssuedDocumentTotalsAsync(companyId, getNewIssuedDocumentTotalsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get New Issued Document Totals Returns the totals for a new document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNewIssuedDocumentTotalsApiResponse"/>&gt;</returns>
        public async Task<IGetNewIssuedDocumentTotalsApiResponse> GetNewIssuedDocumentTotalsAsync(int companyId, Option<GetNewIssuedDocumentTotalsRequest> getNewIssuedDocumentTotalsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetNewIssuedDocumentTotals(getNewIssuedDocumentTotalsRequest);

                FormatGetNewIssuedDocumentTotals(ref companyId, getNewIssuedDocumentTotalsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/totals"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/totals");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    if (getNewIssuedDocumentTotalsRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (getNewIssuedDocumentTotalsRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(getNewIssuedDocumentTotalsRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetNewIssuedDocumentTotalsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetNewIssuedDocumentTotalsApiResponse>();
                        GetNewIssuedDocumentTotalsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetNewIssuedDocumentTotalsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/totals", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetNewIssuedDocumentTotalsDefaultImplementation(apiResponseLocalVar, companyId, getNewIssuedDocumentTotalsRequest);

                        Events.ExecuteOnGetNewIssuedDocumentTotals(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetNewIssuedDocumentTotalsDefaultImplementation(e, "/c/{company_id}/issued_documents/totals", uriBuilderLocalVar.Path, companyId, getNewIssuedDocumentTotalsRequest);
                Events.ExecuteOnErrorGetNewIssuedDocumentTotals(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetNewIssuedDocumentTotalsApiResponse"/>
        /// </summary>
        public partial class GetNewIssuedDocumentTotalsApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetNewIssuedDocumentTotalsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetNewIssuedDocumentTotalsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetNewIssuedDocumentTotalsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetNewIssuedDocumentTotalsApiResponse(ILogger<GetNewIssuedDocumentTotalsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetNewIssuedDocumentTotalsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetNewIssuedDocumentTotalsApiResponse(ILogger<GetNewIssuedDocumentTotalsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetNewIssuedDocumentTotalsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetNewIssuedDocumentTotalsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetNewIssuedDocumentTotalsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJoinIssuedDocuments(ref int companyId, ref string ids, ref Option<int> group, ref Option<string> type);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ids"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        private void ValidateJoinIssuedDocuments(string ids, Option<string> type)
        {
            if (ids == null)
                throw new ArgumentNullException(nameof(ids));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="ids"></param>
        /// <param name="group"></param>
        /// <param name="type"></param>
        private void AfterJoinIssuedDocumentsDefaultImplementation(IJoinIssuedDocumentsApiResponse apiResponseLocalVar, int companyId, string ids, Option<int> group, Option<string> type)
        {
            bool suppressDefaultLog = false;
            AfterJoinIssuedDocuments(ref suppressDefaultLog, apiResponseLocalVar, companyId, ids, group, type);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="ids"></param>
        /// <param name="group"></param>
        /// <param name="type"></param>
        partial void AfterJoinIssuedDocuments(ref bool suppressDefaultLog, IJoinIssuedDocumentsApiResponse apiResponseLocalVar, int companyId, string ids, Option<int> group, Option<string> type);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="ids"></param>
        /// <param name="group"></param>
        /// <param name="type"></param>
        private void OnErrorJoinIssuedDocumentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string ids, Option<int> group, Option<string> type)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJoinIssuedDocuments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, ids, group, type);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="ids"></param>
        /// <param name="group"></param>
        /// <param name="type"></param>
        partial void OnErrorJoinIssuedDocuments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string ids, Option<int> group, Option<string> type);

        /// <summary>
        /// Join Issued Documents Joins issued documents.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="ids">Ids of the documents.</param>
        /// <param name="group">Group items. (optional)</param>
        /// <param name="type">Type of the documents to be joined (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJoinIssuedDocumentsApiResponse"/>&gt;</returns>
        public async Task<IJoinIssuedDocumentsApiResponse> JoinIssuedDocumentsOrDefaultAsync(int companyId, string ids, Option<int> group = default, Option<string> type = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JoinIssuedDocumentsAsync(companyId, ids, group, type, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Join Issued Documents Joins issued documents.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="ids">Ids of the documents.</param>
        /// <param name="group">Group items. (optional)</param>
        /// <param name="type">Type of the documents to be joined (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJoinIssuedDocumentsApiResponse"/>&gt;</returns>
        public async Task<IJoinIssuedDocumentsApiResponse> JoinIssuedDocumentsAsync(int companyId, string ids, Option<int> group = default, Option<string> type = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJoinIssuedDocuments(ids, type);

                FormatJoinIssuedDocuments(ref companyId, ref ids, ref group, ref type);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/join"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/join");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["ids"] = ClientUtils.ParameterToString(ids);

                    if (group.IsSet)
                        parseQueryStringLocalVar["group"] = ClientUtils.ParameterToString(group.Value);

                    if (type.IsSet)
                        parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<JoinIssuedDocumentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JoinIssuedDocumentsApiResponse>();
                        JoinIssuedDocumentsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new JoinIssuedDocumentsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/join", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterJoinIssuedDocumentsDefaultImplementation(apiResponseLocalVar, companyId, ids, group, type);

                        Events.ExecuteOnJoinIssuedDocuments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJoinIssuedDocumentsDefaultImplementation(e, "/c/{company_id}/issued_documents/join", uriBuilderLocalVar.Path, companyId, ids, group, type);
                Events.ExecuteOnErrorJoinIssuedDocuments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JoinIssuedDocumentsApiResponse"/>
        /// </summary>
        public partial class JoinIssuedDocumentsApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IJoinIssuedDocumentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JoinIssuedDocumentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JoinIssuedDocumentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JoinIssuedDocumentsApiResponse(ILogger<JoinIssuedDocumentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="JoinIssuedDocumentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JoinIssuedDocumentsApiResponse(ILogger<JoinIssuedDocumentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.JoinIssuedDocumentsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.JoinIssuedDocumentsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.JoinIssuedDocumentsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListBinIssuedDocuments(ref int companyId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        private void AfterListBinIssuedDocumentsDefaultImplementation(IListBinIssuedDocumentsApiResponse apiResponseLocalVar, int companyId)
        {
            bool suppressDefaultLog = false;
            AfterListBinIssuedDocuments(ref suppressDefaultLog, apiResponseLocalVar, companyId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        partial void AfterListBinIssuedDocuments(ref bool suppressDefaultLog, IListBinIssuedDocumentsApiResponse apiResponseLocalVar, int companyId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        private void OnErrorListBinIssuedDocumentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListBinIssuedDocuments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        partial void OnErrorListBinIssuedDocuments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId);

        /// <summary>
        /// Get Bin Issued Documents List Get bin issued documents list
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBinIssuedDocumentsApiResponse"/>&gt;</returns>
        public async Task<IListBinIssuedDocumentsApiResponse> ListBinIssuedDocumentsOrDefaultAsync(int companyId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListBinIssuedDocumentsAsync(companyId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Bin Issued Documents List Get bin issued documents list
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBinIssuedDocumentsApiResponse"/>&gt;</returns>
        public async Task<IListBinIssuedDocumentsApiResponse> ListBinIssuedDocumentsAsync(int companyId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatListBinIssuedDocuments(ref companyId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/bin/issued_documents"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/bin/issued_documents");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ListBinIssuedDocumentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListBinIssuedDocumentsApiResponse>();
                        ListBinIssuedDocumentsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ListBinIssuedDocumentsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/bin/issued_documents", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterListBinIssuedDocumentsDefaultImplementation(apiResponseLocalVar, companyId);

                        Events.ExecuteOnListBinIssuedDocuments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListBinIssuedDocumentsDefaultImplementation(e, "/c/{company_id}/bin/issued_documents", uriBuilderLocalVar.Path, companyId);
                Events.ExecuteOnErrorListBinIssuedDocuments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListBinIssuedDocumentsApiResponse"/>
        /// </summary>
        public partial class ListBinIssuedDocumentsApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IListBinIssuedDocumentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListBinIssuedDocumentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListBinIssuedDocumentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListBinIssuedDocumentsApiResponse(ILogger<ListBinIssuedDocumentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ListBinIssuedDocumentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListBinIssuedDocumentsApiResponse(ILogger<ListBinIssuedDocumentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ListBinIssuedDocuments Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ListBinIssuedDocuments>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ListBinIssuedDocuments result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListIssuedDocuments(ref int companyId, ref string type, ref Option<string> fields, ref Option<string> fieldset, ref Option<string> sort, ref Option<int> page, ref Option<int> perPage, ref Option<string> q, ref Option<int> inclusive);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="type"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="q"></param>
        /// <returns></returns>
        private void ValidateListIssuedDocuments(string type, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<string> q)
        {
            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields));

            if (fieldset.IsSet && fieldset.Value == null)
                throw new ArgumentNullException(nameof(fieldset));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (q.IsSet && q.Value == null)
                throw new ArgumentNullException(nameof(q));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        /// <param name="inclusive"></param>
        private void AfterListIssuedDocumentsDefaultImplementation(IListIssuedDocumentsApiResponse apiResponseLocalVar, int companyId, string type, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q, Option<int> inclusive)
        {
            bool suppressDefaultLog = false;
            AfterListIssuedDocuments(ref suppressDefaultLog, apiResponseLocalVar, companyId, type, fields, fieldset, sort, page, perPage, q, inclusive);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        /// <param name="inclusive"></param>
        partial void AfterListIssuedDocuments(ref bool suppressDefaultLog, IListIssuedDocumentsApiResponse apiResponseLocalVar, int companyId, string type, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q, Option<int> inclusive);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        /// <param name="inclusive"></param>
        private void OnErrorListIssuedDocumentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string type, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q, Option<int> inclusive)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListIssuedDocuments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, type, fields, fieldset, sort, page, perPage, q, inclusive);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        /// <param name="inclusive"></param>
        partial void OnErrorListIssuedDocuments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string type, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q, Option<int> inclusive);

        /// <summary>
        /// List Issued Documents Lists the issued documents.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="inclusive">(Only for type &#x3D; delivery_notes) Include invoices delivery notes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssuedDocumentsApiResponse"/>&gt;</returns>
        public async Task<IListIssuedDocumentsApiResponse> ListIssuedDocumentsOrDefaultAsync(int companyId, string type, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, Option<int> inclusive = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListIssuedDocumentsAsync(companyId, type, fields, fieldset, sort, page, perPage, q, inclusive, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Issued Documents Lists the issued documents.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="inclusive">(Only for type &#x3D; delivery_notes) Include invoices delivery notes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIssuedDocumentsApiResponse"/>&gt;</returns>
        public async Task<IListIssuedDocumentsApiResponse> ListIssuedDocumentsAsync(int companyId, string type, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, Option<int> inclusive = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListIssuedDocuments(type, fields, fieldset, sort, q);

                FormatListIssuedDocuments(ref companyId, ref type, ref fields, ref fieldset, ref sort, ref page, ref perPage, ref q, ref inclusive);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type);

                    if (fields.IsSet)
                        parseQueryStringLocalVar["fields"] = ClientUtils.ParameterToString(fields.Value);

                    if (fieldset.IsSet)
                        parseQueryStringLocalVar["fieldset"] = ClientUtils.ParameterToString(fieldset.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (perPage.IsSet)
                        parseQueryStringLocalVar["per_page"] = ClientUtils.ParameterToString(perPage.Value);

                    if (q.IsSet)
                        parseQueryStringLocalVar["q"] = ClientUtils.ParameterToString(q.Value);

                    if (inclusive.IsSet)
                        parseQueryStringLocalVar["inclusive"] = ClientUtils.ParameterToString(inclusive.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ListIssuedDocumentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListIssuedDocumentsApiResponse>();
                        ListIssuedDocumentsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ListIssuedDocumentsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterListIssuedDocumentsDefaultImplementation(apiResponseLocalVar, companyId, type, fields, fieldset, sort, page, perPage, q, inclusive);

                        Events.ExecuteOnListIssuedDocuments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListIssuedDocumentsDefaultImplementation(e, "/c/{company_id}/issued_documents", uriBuilderLocalVar.Path, companyId, type, fields, fieldset, sort, page, perPage, q, inclusive);
                Events.ExecuteOnErrorListIssuedDocuments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListIssuedDocumentsApiResponse"/>
        /// </summary>
        public partial class ListIssuedDocumentsApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IListIssuedDocumentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListIssuedDocumentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListIssuedDocumentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListIssuedDocumentsApiResponse(ILogger<ListIssuedDocumentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ListIssuedDocumentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListIssuedDocumentsApiResponse(ILogger<ListIssuedDocumentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ListIssuedDocumentsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ListIssuedDocumentsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ListIssuedDocumentsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatModifyIssuedDocument(ref int companyId, ref int documentId, Option<ModifyIssuedDocumentRequest> modifyIssuedDocumentRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modifyIssuedDocumentRequest"></param>
        /// <returns></returns>
        private void ValidateModifyIssuedDocument(Option<ModifyIssuedDocumentRequest> modifyIssuedDocumentRequest)
        {
            if (modifyIssuedDocumentRequest.IsSet && modifyIssuedDocumentRequest.Value == null)
                throw new ArgumentNullException(nameof(modifyIssuedDocumentRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyIssuedDocumentRequest"></param>
        private void AfterModifyIssuedDocumentDefaultImplementation(IModifyIssuedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId, Option<ModifyIssuedDocumentRequest> modifyIssuedDocumentRequest)
        {
            bool suppressDefaultLog = false;
            AfterModifyIssuedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId, modifyIssuedDocumentRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyIssuedDocumentRequest"></param>
        partial void AfterModifyIssuedDocument(ref bool suppressDefaultLog, IModifyIssuedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId, Option<ModifyIssuedDocumentRequest> modifyIssuedDocumentRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyIssuedDocumentRequest"></param>
        private void OnErrorModifyIssuedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<ModifyIssuedDocumentRequest> modifyIssuedDocumentRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorModifyIssuedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId, modifyIssuedDocumentRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyIssuedDocumentRequest"></param>
        partial void OnErrorModifyIssuedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<ModifyIssuedDocumentRequest> modifyIssuedDocumentRequest);

        /// <summary>
        /// Modify Issued Document Modifies the specified document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyIssuedDocumentRequest">The modified document (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<IModifyIssuedDocumentApiResponse> ModifyIssuedDocumentOrDefaultAsync(int companyId, int documentId, Option<ModifyIssuedDocumentRequest> modifyIssuedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ModifyIssuedDocumentAsync(companyId, documentId, modifyIssuedDocumentRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Modify Issued Document Modifies the specified document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyIssuedDocumentRequest">The modified document (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<IModifyIssuedDocumentApiResponse> ModifyIssuedDocumentAsync(int companyId, int documentId, Option<ModifyIssuedDocumentRequest> modifyIssuedDocumentRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateModifyIssuedDocument(modifyIssuedDocumentRequest);

                FormatModifyIssuedDocument(ref companyId, ref documentId, modifyIssuedDocumentRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    if (modifyIssuedDocumentRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (modifyIssuedDocumentRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modifyIssuedDocumentRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ModifyIssuedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ModifyIssuedDocumentApiResponse>();
                        ModifyIssuedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ModifyIssuedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterModifyIssuedDocumentDefaultImplementation(apiResponseLocalVar, companyId, documentId, modifyIssuedDocumentRequest);

                        Events.ExecuteOnModifyIssuedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorModifyIssuedDocumentDefaultImplementation(e, "/c/{company_id}/issued_documents/{document_id}", uriBuilderLocalVar.Path, companyId, documentId, modifyIssuedDocumentRequest);
                Events.ExecuteOnErrorModifyIssuedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ModifyIssuedDocumentApiResponse"/>
        /// </summary>
        public partial class ModifyIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IModifyIssuedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ModifyIssuedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ModifyIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyIssuedDocumentApiResponse(ILogger<ModifyIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ModifyIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyIssuedDocumentApiResponse(ILogger<ModifyIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ModifyIssuedDocumentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ModifyIssuedDocumentResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ModifyIssuedDocumentResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRecoverBinIssuedDocument(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterRecoverBinIssuedDocumentDefaultImplementation(IRecoverBinIssuedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterRecoverBinIssuedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterRecoverBinIssuedDocument(ref bool suppressDefaultLog, IRecoverBinIssuedDocumentApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorRecoverBinIssuedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRecoverBinIssuedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorRecoverBinIssuedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Recover Issued Document From The Bin Recover Issued Document From The Bin
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRecoverBinIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<IRecoverBinIssuedDocumentApiResponse> RecoverBinIssuedDocumentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RecoverBinIssuedDocumentAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Recover Issued Document From The Bin Recover Issued Document From The Bin
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRecoverBinIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<IRecoverBinIssuedDocumentApiResponse> RecoverBinIssuedDocumentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatRecoverBinIssuedDocument(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/bin/issued_documents/{document_id}/recover"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/bin/issued_documents/{document_id}/recover");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<RecoverBinIssuedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RecoverBinIssuedDocumentApiResponse>();
                        RecoverBinIssuedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new RecoverBinIssuedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/bin/issued_documents/{document_id}/recover", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterRecoverBinIssuedDocumentDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnRecoverBinIssuedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRecoverBinIssuedDocumentDefaultImplementation(e, "/c/{company_id}/bin/issued_documents/{document_id}/recover", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorRecoverBinIssuedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RecoverBinIssuedDocumentApiResponse"/>
        /// </summary>
        public partial class RecoverBinIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IRecoverBinIssuedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RecoverBinIssuedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RecoverBinIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RecoverBinIssuedDocumentApiResponse(ILogger<RecoverBinIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="RecoverBinIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RecoverBinIssuedDocumentApiResponse(ILogger<RecoverBinIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatScheduleEmail(ref int companyId, ref int documentId, Option<ScheduleEmailRequest> scheduleEmailRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="scheduleEmailRequest"></param>
        /// <returns></returns>
        private void ValidateScheduleEmail(Option<ScheduleEmailRequest> scheduleEmailRequest)
        {
            if (scheduleEmailRequest.IsSet && scheduleEmailRequest.Value == null)
                throw new ArgumentNullException(nameof(scheduleEmailRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="scheduleEmailRequest"></param>
        private void AfterScheduleEmailDefaultImplementation(IScheduleEmailApiResponse apiResponseLocalVar, int companyId, int documentId, Option<ScheduleEmailRequest> scheduleEmailRequest)
        {
            bool suppressDefaultLog = false;
            AfterScheduleEmail(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId, scheduleEmailRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="scheduleEmailRequest"></param>
        partial void AfterScheduleEmail(ref bool suppressDefaultLog, IScheduleEmailApiResponse apiResponseLocalVar, int companyId, int documentId, Option<ScheduleEmailRequest> scheduleEmailRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="scheduleEmailRequest"></param>
        private void OnErrorScheduleEmailDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<ScheduleEmailRequest> scheduleEmailRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorScheduleEmail(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId, scheduleEmailRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="scheduleEmailRequest"></param>
        partial void OnErrorScheduleEmail(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<ScheduleEmailRequest> scheduleEmailRequest);

        /// <summary>
        /// Schedule Email Schedules the sending of a document by email.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="scheduleEmailRequest">Email Schedule (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IScheduleEmailApiResponse"/>&gt;</returns>
        public async Task<IScheduleEmailApiResponse> ScheduleEmailOrDefaultAsync(int companyId, int documentId, Option<ScheduleEmailRequest> scheduleEmailRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ScheduleEmailAsync(companyId, documentId, scheduleEmailRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Schedule Email Schedules the sending of a document by email.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="scheduleEmailRequest">Email Schedule (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IScheduleEmailApiResponse"/>&gt;</returns>
        public async Task<IScheduleEmailApiResponse> ScheduleEmailAsync(int companyId, int documentId, Option<ScheduleEmailRequest> scheduleEmailRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateScheduleEmail(scheduleEmailRequest);

                FormatScheduleEmail(ref companyId, ref documentId, scheduleEmailRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/{document_id}/email"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/{document_id}/email");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    if (scheduleEmailRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (scheduleEmailRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(scheduleEmailRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ScheduleEmailApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ScheduleEmailApiResponse>();
                        ScheduleEmailApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ScheduleEmailApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/{document_id}/email", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterScheduleEmailDefaultImplementation(apiResponseLocalVar, companyId, documentId, scheduleEmailRequest);

                        Events.ExecuteOnScheduleEmail(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorScheduleEmailDefaultImplementation(e, "/c/{company_id}/issued_documents/{document_id}/email", uriBuilderLocalVar.Path, companyId, documentId, scheduleEmailRequest);
                Events.ExecuteOnErrorScheduleEmail(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ScheduleEmailApiResponse"/>
        /// </summary>
        public partial class ScheduleEmailApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IScheduleEmailApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ScheduleEmailApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ScheduleEmailApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ScheduleEmailApiResponse(ILogger<ScheduleEmailApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ScheduleEmailApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ScheduleEmailApiResponse(ILogger<ScheduleEmailApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransformIssuedDocument(ref int companyId, ref int originalDocumentId, ref string newType, ref Option<string> type, ref Option<int> eInvoice, ref Option<int> transformKeepCopy);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="newType"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        private void ValidateTransformIssuedDocument(string newType, Option<string> type)
        {
            if (newType == null)
                throw new ArgumentNullException(nameof(newType));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="originalDocumentId"></param>
        /// <param name="newType"></param>
        /// <param name="type"></param>
        /// <param name="eInvoice"></param>
        /// <param name="transformKeepCopy"></param>
        private void AfterTransformIssuedDocumentDefaultImplementation(ITransformIssuedDocumentApiResponse apiResponseLocalVar, int companyId, int originalDocumentId, string newType, Option<string> type, Option<int> eInvoice, Option<int> transformKeepCopy)
        {
            bool suppressDefaultLog = false;
            AfterTransformIssuedDocument(ref suppressDefaultLog, apiResponseLocalVar, companyId, originalDocumentId, newType, type, eInvoice, transformKeepCopy);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="originalDocumentId"></param>
        /// <param name="newType"></param>
        /// <param name="type"></param>
        /// <param name="eInvoice"></param>
        /// <param name="transformKeepCopy"></param>
        partial void AfterTransformIssuedDocument(ref bool suppressDefaultLog, ITransformIssuedDocumentApiResponse apiResponseLocalVar, int companyId, int originalDocumentId, string newType, Option<string> type, Option<int> eInvoice, Option<int> transformKeepCopy);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="originalDocumentId"></param>
        /// <param name="newType"></param>
        /// <param name="type"></param>
        /// <param name="eInvoice"></param>
        /// <param name="transformKeepCopy"></param>
        private void OnErrorTransformIssuedDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int originalDocumentId, string newType, Option<string> type, Option<int> eInvoice, Option<int> transformKeepCopy)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTransformIssuedDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, originalDocumentId, newType, type, eInvoice, transformKeepCopy);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="originalDocumentId"></param>
        /// <param name="newType"></param>
        /// <param name="type"></param>
        /// <param name="eInvoice"></param>
        /// <param name="transformKeepCopy"></param>
        partial void OnErrorTransformIssuedDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int originalDocumentId, string newType, Option<string> type, Option<int> eInvoice, Option<int> transformKeepCopy);

        /// <summary>
        /// Transform Issued Document Transforms the document.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="originalDocumentId">Original document id.</param>
        /// <param name="newType">New document type.</param>
        /// <param name="type">Current document type. (optional)</param>
        /// <param name="eInvoice">New document e_invoice. (optional)</param>
        /// <param name="transformKeepCopy">Keep the old document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransformIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<ITransformIssuedDocumentApiResponse> TransformIssuedDocumentOrDefaultAsync(int companyId, int originalDocumentId, string newType, Option<string> type = default, Option<int> eInvoice = default, Option<int> transformKeepCopy = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TransformIssuedDocumentAsync(companyId, originalDocumentId, newType, type, eInvoice, transformKeepCopy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Transform Issued Document Transforms the document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="originalDocumentId">Original document id.</param>
        /// <param name="newType">New document type.</param>
        /// <param name="type">Current document type. (optional)</param>
        /// <param name="eInvoice">New document e_invoice. (optional)</param>
        /// <param name="transformKeepCopy">Keep the old document. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransformIssuedDocumentApiResponse"/>&gt;</returns>
        public async Task<ITransformIssuedDocumentApiResponse> TransformIssuedDocumentAsync(int companyId, int originalDocumentId, string newType, Option<string> type = default, Option<int> eInvoice = default, Option<int> transformKeepCopy = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransformIssuedDocument(newType, type);

                FormatTransformIssuedDocument(ref companyId, ref originalDocumentId, ref newType, ref type, ref eInvoice, ref transformKeepCopy);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/transform"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/transform");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["original_document_id"] = ClientUtils.ParameterToString(originalDocumentId);
                    parseQueryStringLocalVar["new_type"] = ClientUtils.ParameterToString(newType);

                    if (type.IsSet)
                        parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type.Value);

                    if (eInvoice.IsSet)
                        parseQueryStringLocalVar["e_invoice"] = ClientUtils.ParameterToString(eInvoice.Value);

                    if (transformKeepCopy.IsSet)
                        parseQueryStringLocalVar["transform_keep_copy"] = ClientUtils.ParameterToString(transformKeepCopy.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<TransformIssuedDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TransformIssuedDocumentApiResponse>();
                        TransformIssuedDocumentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new TransformIssuedDocumentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/transform", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterTransformIssuedDocumentDefaultImplementation(apiResponseLocalVar, companyId, originalDocumentId, newType, type, eInvoice, transformKeepCopy);

                        Events.ExecuteOnTransformIssuedDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransformIssuedDocumentDefaultImplementation(e, "/c/{company_id}/issued_documents/transform", uriBuilderLocalVar.Path, companyId, originalDocumentId, newType, type, eInvoice, transformKeepCopy);
                Events.ExecuteOnErrorTransformIssuedDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TransformIssuedDocumentApiResponse"/>
        /// </summary>
        public partial class TransformIssuedDocumentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, ITransformIssuedDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TransformIssuedDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TransformIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransformIssuedDocumentApiResponse(ILogger<TransformIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="TransformIssuedDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransformIssuedDocumentApiResponse(ILogger<TransformIssuedDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.TransformIssuedDocumentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.TransformIssuedDocumentResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.TransformIssuedDocumentResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUploadIssuedDocumentAttachment(ref int companyId, ref Option<string> filename, ref Option<System.IO.Stream> attachment);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="attachment"></param>
        /// <returns></returns>
        private void ValidateUploadIssuedDocumentAttachment(Option<System.IO.Stream> attachment)
        {
            if (attachment.IsSet && attachment.Value == null)
                throw new ArgumentNullException(nameof(attachment));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="filename"></param>
        /// <param name="attachment"></param>
        private void AfterUploadIssuedDocumentAttachmentDefaultImplementation(IUploadIssuedDocumentAttachmentApiResponse apiResponseLocalVar, int companyId, Option<string> filename, Option<System.IO.Stream> attachment)
        {
            bool suppressDefaultLog = false;
            AfterUploadIssuedDocumentAttachment(ref suppressDefaultLog, apiResponseLocalVar, companyId, filename, attachment);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="filename"></param>
        /// <param name="attachment"></param>
        partial void AfterUploadIssuedDocumentAttachment(ref bool suppressDefaultLog, IUploadIssuedDocumentAttachmentApiResponse apiResponseLocalVar, int companyId, Option<string> filename, Option<System.IO.Stream> attachment);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="filename"></param>
        /// <param name="attachment"></param>
        private void OnErrorUploadIssuedDocumentAttachmentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<string> filename, Option<System.IO.Stream> attachment)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUploadIssuedDocumentAttachment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, filename, attachment);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="filename"></param>
        /// <param name="attachment"></param>
        partial void OnErrorUploadIssuedDocumentAttachment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<string> filename, Option<System.IO.Stream> attachment);

        /// <summary>
        /// Upload Issued Document Attachment Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadIssuedDocumentAttachmentApiResponse"/>&gt;</returns>
        public async Task<IUploadIssuedDocumentAttachmentApiResponse> UploadIssuedDocumentAttachmentOrDefaultAsync(int companyId, Option<string> filename = default, Option<System.IO.Stream> attachment = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UploadIssuedDocumentAttachmentAsync(companyId, filename, attachment, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Upload Issued Document Attachment Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadIssuedDocumentAttachmentApiResponse"/>&gt;</returns>
        public async Task<IUploadIssuedDocumentAttachmentApiResponse> UploadIssuedDocumentAttachmentAsync(int companyId, Option<string> filename = default, Option<System.IO.Stream> attachment = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUploadIssuedDocumentAttachment(attachment);

                FormatUploadIssuedDocumentAttachment(ref companyId, ref filename, ref attachment);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/attachment"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/attachment");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string, string>> formParameterLocalVars = new List<KeyValuePair<string, string>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (filename.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string, string>("filename", ClientUtils.ParameterToString(filename.Value)));

                    if (attachment.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(attachment.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<UploadIssuedDocumentAttachmentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UploadIssuedDocumentAttachmentApiResponse>();
                        UploadIssuedDocumentAttachmentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new UploadIssuedDocumentAttachmentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/attachment", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterUploadIssuedDocumentAttachmentDefaultImplementation(apiResponseLocalVar, companyId, filename, attachment);

                        Events.ExecuteOnUploadIssuedDocumentAttachment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUploadIssuedDocumentAttachmentDefaultImplementation(e, "/c/{company_id}/issued_documents/attachment", uriBuilderLocalVar.Path, companyId, filename, attachment);
                Events.ExecuteOnErrorUploadIssuedDocumentAttachment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UploadIssuedDocumentAttachmentApiResponse"/>
        /// </summary>
        public partial class UploadIssuedDocumentAttachmentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IUploadIssuedDocumentAttachmentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UploadIssuedDocumentAttachmentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UploadIssuedDocumentAttachmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadIssuedDocumentAttachmentApiResponse(ILogger<UploadIssuedDocumentAttachmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="UploadIssuedDocumentAttachmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadIssuedDocumentAttachmentApiResponse(ILogger<UploadIssuedDocumentAttachmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.UploadIssuedDocumentAttachmentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.UploadIssuedDocumentAttachmentResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.UploadIssuedDocumentAttachmentResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
