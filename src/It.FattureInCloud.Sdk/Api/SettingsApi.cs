// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISettingsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SettingsApiEvents Events { get; }

        /// <summary>
        /// Create Payment Account
        /// </summary>
        /// <remarks>
        /// Creates a new payment account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePaymentAccountApiResponse"/>&gt;</returns>
        Task<ICreatePaymentAccountApiResponse> CreatePaymentAccountAsync(int companyId, Option<CreatePaymentAccountRequest> createPaymentAccountRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Payment Account
        /// </summary>
        /// <remarks>
        /// Creates a new payment account.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePaymentAccountApiResponse"/>&gt;</returns>
        Task<ICreatePaymentAccountApiResponse> CreatePaymentAccountOrDefaultAsync(int companyId, Option<CreatePaymentAccountRequest> createPaymentAccountRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Payment Method
        /// </summary>
        /// <remarks>
        /// Creates a new payment method.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePaymentMethodApiResponse"/>&gt;</returns>
        Task<ICreatePaymentMethodApiResponse> CreatePaymentMethodAsync(int companyId, Option<CreatePaymentMethodRequest> createPaymentMethodRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Payment Method
        /// </summary>
        /// <remarks>
        /// Creates a new payment method.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePaymentMethodApiResponse"/>&gt;</returns>
        Task<ICreatePaymentMethodApiResponse> CreatePaymentMethodOrDefaultAsync(int companyId, Option<CreatePaymentMethodRequest> createPaymentMethodRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Vat Type
        /// </summary>
        /// <remarks>
        /// Creates a vat type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateVatTypeApiResponse"/>&gt;</returns>
        Task<ICreateVatTypeApiResponse> CreateVatTypeAsync(int companyId, Option<CreateVatTypeRequest> createVatTypeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Vat Type
        /// </summary>
        /// <remarks>
        /// Creates a vat type.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateVatTypeApiResponse"/>&gt;</returns>
        Task<ICreateVatTypeApiResponse> CreateVatTypeOrDefaultAsync(int companyId, Option<CreateVatTypeRequest> createVatTypeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Payment Account
        /// </summary>
        /// <remarks>
        /// Deletes the specified payment account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePaymentAccountApiResponse"/>&gt;</returns>
        Task<IDeletePaymentAccountApiResponse> DeletePaymentAccountAsync(int companyId, int paymentAccountId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Payment Account
        /// </summary>
        /// <remarks>
        /// Deletes the specified payment account.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePaymentAccountApiResponse"/>&gt;</returns>
        Task<IDeletePaymentAccountApiResponse> DeletePaymentAccountOrDefaultAsync(int companyId, int paymentAccountId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Payment Method
        /// </summary>
        /// <remarks>
        /// Deletes the specified payment method.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePaymentMethodApiResponse"/>&gt;</returns>
        Task<IDeletePaymentMethodApiResponse> DeletePaymentMethodAsync(int companyId, int paymentMethodId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Payment Method
        /// </summary>
        /// <remarks>
        /// Deletes the specified payment method.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePaymentMethodApiResponse"/>&gt;</returns>
        Task<IDeletePaymentMethodApiResponse> DeletePaymentMethodOrDefaultAsync(int companyId, int paymentMethodId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Vat Type
        /// </summary>
        /// <remarks>
        /// Deletes the specified vat type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteVatTypeApiResponse"/>&gt;</returns>
        Task<IDeleteVatTypeApiResponse> DeleteVatTypeAsync(int companyId, int vatTypeId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Vat Type
        /// </summary>
        /// <remarks>
        /// Deletes the specified vat type.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteVatTypeApiResponse"/>&gt;</returns>
        Task<IDeleteVatTypeApiResponse> DeleteVatTypeOrDefaultAsync(int companyId, int vatTypeId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Payment Account
        /// </summary>
        /// <remarks>
        /// Gets the specified payment account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPaymentAccountApiResponse"/>&gt;</returns>
        Task<IGetPaymentAccountApiResponse> GetPaymentAccountAsync(int companyId, int paymentAccountId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Payment Account
        /// </summary>
        /// <remarks>
        /// Gets the specified payment account.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPaymentAccountApiResponse"/>&gt;</returns>
        Task<IGetPaymentAccountApiResponse> GetPaymentAccountOrDefaultAsync(int companyId, int paymentAccountId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Payment Method
        /// </summary>
        /// <remarks>
        /// Gets the specified payment method.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPaymentMethodApiResponse"/>&gt;</returns>
        Task<IGetPaymentMethodApiResponse> GetPaymentMethodAsync(int companyId, int paymentMethodId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Payment Method
        /// </summary>
        /// <remarks>
        /// Gets the specified payment method.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPaymentMethodApiResponse"/>&gt;</returns>
        Task<IGetPaymentMethodApiResponse> GetPaymentMethodOrDefaultAsync(int companyId, int paymentMethodId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tax Profile
        /// </summary>
        /// <remarks>
        /// Gets the Tax Profile
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTaxProfileApiResponse"/>&gt;</returns>
        Task<IGetTaxProfileApiResponse> GetTaxProfileAsync(int companyId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tax Profile
        /// </summary>
        /// <remarks>
        /// Gets the Tax Profile
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTaxProfileApiResponse"/>&gt;</returns>
        Task<IGetTaxProfileApiResponse> GetTaxProfileOrDefaultAsync(int companyId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Vat Type
        /// </summary>
        /// <remarks>
        /// Gets the specified vat type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVatTypeApiResponse"/>&gt;</returns>
        Task<IGetVatTypeApiResponse> GetVatTypeAsync(int companyId, int vatTypeId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Vat Type
        /// </summary>
        /// <remarks>
        /// Gets the specified vat type.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVatTypeApiResponse"/>&gt;</returns>
        Task<IGetVatTypeApiResponse> GetVatTypeOrDefaultAsync(int companyId, int vatTypeId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Payment Account
        /// </summary>
        /// <remarks>
        /// Modifies the specified payment account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyPaymentAccountApiResponse"/>&gt;</returns>
        Task<IModifyPaymentAccountApiResponse> ModifyPaymentAccountAsync(int companyId, int paymentAccountId, Option<ModifyPaymentAccountRequest> modifyPaymentAccountRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Payment Account
        /// </summary>
        /// <remarks>
        /// Modifies the specified payment account.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyPaymentAccountApiResponse"/>&gt;</returns>
        Task<IModifyPaymentAccountApiResponse> ModifyPaymentAccountOrDefaultAsync(int companyId, int paymentAccountId, Option<ModifyPaymentAccountRequest> modifyPaymentAccountRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Payment Method
        /// </summary>
        /// <remarks>
        /// Modifies the specified payment method.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyPaymentMethodApiResponse"/>&gt;</returns>
        Task<IModifyPaymentMethodApiResponse> ModifyPaymentMethodAsync(int companyId, int paymentMethodId, Option<ModifyPaymentMethodRequest> modifyPaymentMethodRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Payment Method
        /// </summary>
        /// <remarks>
        /// Modifies the specified payment method.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyPaymentMethodApiResponse"/>&gt;</returns>
        Task<IModifyPaymentMethodApiResponse> ModifyPaymentMethodOrDefaultAsync(int companyId, int paymentMethodId, Option<ModifyPaymentMethodRequest> modifyPaymentMethodRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Vat Type
        /// </summary>
        /// <remarks>
        /// Modifies the specified vat type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="modifyVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyVatTypeApiResponse"/>&gt;</returns>
        Task<IModifyVatTypeApiResponse> ModifyVatTypeAsync(int companyId, int vatTypeId, Option<ModifyVatTypeRequest> modifyVatTypeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Vat Type
        /// </summary>
        /// <remarks>
        /// Modifies the specified vat type.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="modifyVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyVatTypeApiResponse"/>&gt;</returns>
        Task<IModifyVatTypeApiResponse> ModifyVatTypeOrDefaultAsync(int companyId, int vatTypeId, Option<ModifyVatTypeRequest> modifyVatTypeRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreatePaymentAccountApiResponse"/>
    /// </summary>
    public interface ICreatePaymentAccountApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.CreatePaymentAccountResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ICreatePaymentMethodApiResponse"/>
    /// </summary>
    public interface ICreatePaymentMethodApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.CreatePaymentMethodResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ICreateVatTypeApiResponse"/>
    /// </summary>
    public interface ICreateVatTypeApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.CreateVatTypeResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeletePaymentAccountApiResponse"/>
    /// </summary>
    public interface IDeletePaymentAccountApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeletePaymentMethodApiResponse"/>
    /// </summary>
    public interface IDeletePaymentMethodApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteVatTypeApiResponse"/>
    /// </summary>
    public interface IDeleteVatTypeApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPaymentAccountApiResponse"/>
    /// </summary>
    public interface IGetPaymentAccountApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetPaymentAccountResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPaymentMethodApiResponse"/>
    /// </summary>
    public interface IGetPaymentMethodApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetPaymentMethodResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTaxProfileApiResponse"/>
    /// </summary>
    public interface IGetTaxProfileApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetTaxProfileResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetVatTypeApiResponse"/>
    /// </summary>
    public interface IGetVatTypeApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetVatTypeResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IModifyPaymentAccountApiResponse"/>
    /// </summary>
    public interface IModifyPaymentAccountApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ModifyPaymentAccountResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IModifyPaymentMethodApiResponse"/>
    /// </summary>
    public interface IModifyPaymentMethodApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ModifyPaymentMethodResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IModifyVatTypeApiResponse"/>
    /// </summary>
    public interface IModifyVatTypeApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ModifyVatTypeResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SettingsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreatePaymentAccount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreatePaymentAccount;

        internal void ExecuteOnCreatePaymentAccount(SettingsApi.CreatePaymentAccountApiResponse apiResponse)
        {
            OnCreatePaymentAccount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreatePaymentAccount(Exception exception)
        {
            OnErrorCreatePaymentAccount?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreatePaymentMethod;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreatePaymentMethod;

        internal void ExecuteOnCreatePaymentMethod(SettingsApi.CreatePaymentMethodApiResponse apiResponse)
        {
            OnCreatePaymentMethod?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreatePaymentMethod(Exception exception)
        {
            OnErrorCreatePaymentMethod?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateVatType;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateVatType;

        internal void ExecuteOnCreateVatType(SettingsApi.CreateVatTypeApiResponse apiResponse)
        {
            OnCreateVatType?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateVatType(Exception exception)
        {
            OnErrorCreateVatType?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeletePaymentAccount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeletePaymentAccount;

        internal void ExecuteOnDeletePaymentAccount(SettingsApi.DeletePaymentAccountApiResponse apiResponse)
        {
            OnDeletePaymentAccount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePaymentAccount(Exception exception)
        {
            OnErrorDeletePaymentAccount?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeletePaymentMethod;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeletePaymentMethod;

        internal void ExecuteOnDeletePaymentMethod(SettingsApi.DeletePaymentMethodApiResponse apiResponse)
        {
            OnDeletePaymentMethod?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePaymentMethod(Exception exception)
        {
            OnErrorDeletePaymentMethod?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteVatType;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteVatType;

        internal void ExecuteOnDeleteVatType(SettingsApi.DeleteVatTypeApiResponse apiResponse)
        {
            OnDeleteVatType?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteVatType(Exception exception)
        {
            OnErrorDeleteVatType?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPaymentAccount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPaymentAccount;

        internal void ExecuteOnGetPaymentAccount(SettingsApi.GetPaymentAccountApiResponse apiResponse)
        {
            OnGetPaymentAccount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPaymentAccount(Exception exception)
        {
            OnErrorGetPaymentAccount?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPaymentMethod;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPaymentMethod;

        internal void ExecuteOnGetPaymentMethod(SettingsApi.GetPaymentMethodApiResponse apiResponse)
        {
            OnGetPaymentMethod?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPaymentMethod(Exception exception)
        {
            OnErrorGetPaymentMethod?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTaxProfile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTaxProfile;

        internal void ExecuteOnGetTaxProfile(SettingsApi.GetTaxProfileApiResponse apiResponse)
        {
            OnGetTaxProfile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTaxProfile(Exception exception)
        {
            OnErrorGetTaxProfile?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetVatType;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetVatType;

        internal void ExecuteOnGetVatType(SettingsApi.GetVatTypeApiResponse apiResponse)
        {
            OnGetVatType?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetVatType(Exception exception)
        {
            OnErrorGetVatType?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnModifyPaymentAccount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorModifyPaymentAccount;

        internal void ExecuteOnModifyPaymentAccount(SettingsApi.ModifyPaymentAccountApiResponse apiResponse)
        {
            OnModifyPaymentAccount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorModifyPaymentAccount(Exception exception)
        {
            OnErrorModifyPaymentAccount?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnModifyPaymentMethod;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorModifyPaymentMethod;

        internal void ExecuteOnModifyPaymentMethod(SettingsApi.ModifyPaymentMethodApiResponse apiResponse)
        {
            OnModifyPaymentMethod?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorModifyPaymentMethod(Exception exception)
        {
            OnErrorModifyPaymentMethod?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnModifyVatType;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorModifyVatType;

        internal void ExecuteOnModifyVatType(SettingsApi.ModifyVatTypeApiResponse apiResponse)
        {
            OnModifyVatType?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorModifyVatType(Exception exception)
        {
            OnErrorModifyVatType?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SettingsApi : ISettingsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SettingsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SettingsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi(ILogger<SettingsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SettingsApiEvents settingsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SettingsApi>();
            HttpClient = httpClient;
            Events = settingsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatCreatePaymentAccount(ref int companyId, Option<CreatePaymentAccountRequest> createPaymentAccountRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createPaymentAccountRequest"></param>
        /// <returns></returns>
        private void ValidateCreatePaymentAccount(Option<CreatePaymentAccountRequest> createPaymentAccountRequest)
        {
            if (createPaymentAccountRequest.IsSet && createPaymentAccountRequest.Value == null)
                throw new ArgumentNullException(nameof(createPaymentAccountRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createPaymentAccountRequest"></param>
        private void AfterCreatePaymentAccountDefaultImplementation(ICreatePaymentAccountApiResponse apiResponseLocalVar, int companyId, Option<CreatePaymentAccountRequest> createPaymentAccountRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreatePaymentAccount(ref suppressDefaultLog, apiResponseLocalVar, companyId, createPaymentAccountRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createPaymentAccountRequest"></param>
        partial void AfterCreatePaymentAccount(ref bool suppressDefaultLog, ICreatePaymentAccountApiResponse apiResponseLocalVar, int companyId, Option<CreatePaymentAccountRequest> createPaymentAccountRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createPaymentAccountRequest"></param>
        private void OnErrorCreatePaymentAccountDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreatePaymentAccountRequest> createPaymentAccountRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreatePaymentAccount(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, createPaymentAccountRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createPaymentAccountRequest"></param>
        partial void OnErrorCreatePaymentAccount(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreatePaymentAccountRequest> createPaymentAccountRequest);

        /// <summary>
        /// Create Payment Account Creates a new payment account.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePaymentAccountApiResponse"/>&gt;</returns>
        public async Task<ICreatePaymentAccountApiResponse> CreatePaymentAccountOrDefaultAsync(int companyId, Option<CreatePaymentAccountRequest> createPaymentAccountRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreatePaymentAccountAsync(companyId, createPaymentAccountRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Payment Account Creates a new payment account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePaymentAccountApiResponse"/>&gt;</returns>
        public async Task<ICreatePaymentAccountApiResponse> CreatePaymentAccountAsync(int companyId, Option<CreatePaymentAccountRequest> createPaymentAccountRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreatePaymentAccount(createPaymentAccountRequest);

                FormatCreatePaymentAccount(ref companyId, createPaymentAccountRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/settings/payment_accounts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/settings/payment_accounts");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    if (createPaymentAccountRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createPaymentAccountRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createPaymentAccountRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreatePaymentAccountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreatePaymentAccountApiResponse>();
                        CreatePaymentAccountApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new CreatePaymentAccountApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/settings/payment_accounts", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreatePaymentAccountDefaultImplementation(apiResponseLocalVar, companyId, createPaymentAccountRequest);

                        Events.ExecuteOnCreatePaymentAccount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreatePaymentAccountDefaultImplementation(e, "/c/{company_id}/settings/payment_accounts", uriBuilderLocalVar.Path, companyId, createPaymentAccountRequest);
                Events.ExecuteOnErrorCreatePaymentAccount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreatePaymentAccountApiResponse"/>
        /// </summary>
        public partial class CreatePaymentAccountApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, ICreatePaymentAccountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreatePaymentAccountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreatePaymentAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreatePaymentAccountApiResponse(ILogger<CreatePaymentAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreatePaymentAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreatePaymentAccountApiResponse(ILogger<CreatePaymentAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.CreatePaymentAccountResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.CreatePaymentAccountResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.CreatePaymentAccountResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreatePaymentMethod(ref int companyId, Option<CreatePaymentMethodRequest> createPaymentMethodRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createPaymentMethodRequest"></param>
        /// <returns></returns>
        private void ValidateCreatePaymentMethod(Option<CreatePaymentMethodRequest> createPaymentMethodRequest)
        {
            if (createPaymentMethodRequest.IsSet && createPaymentMethodRequest.Value == null)
                throw new ArgumentNullException(nameof(createPaymentMethodRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createPaymentMethodRequest"></param>
        private void AfterCreatePaymentMethodDefaultImplementation(ICreatePaymentMethodApiResponse apiResponseLocalVar, int companyId, Option<CreatePaymentMethodRequest> createPaymentMethodRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreatePaymentMethod(ref suppressDefaultLog, apiResponseLocalVar, companyId, createPaymentMethodRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createPaymentMethodRequest"></param>
        partial void AfterCreatePaymentMethod(ref bool suppressDefaultLog, ICreatePaymentMethodApiResponse apiResponseLocalVar, int companyId, Option<CreatePaymentMethodRequest> createPaymentMethodRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createPaymentMethodRequest"></param>
        private void OnErrorCreatePaymentMethodDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreatePaymentMethodRequest> createPaymentMethodRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreatePaymentMethod(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, createPaymentMethodRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createPaymentMethodRequest"></param>
        partial void OnErrorCreatePaymentMethod(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreatePaymentMethodRequest> createPaymentMethodRequest);

        /// <summary>
        /// Create Payment Method Creates a new payment method.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePaymentMethodApiResponse"/>&gt;</returns>
        public async Task<ICreatePaymentMethodApiResponse> CreatePaymentMethodOrDefaultAsync(int companyId, Option<CreatePaymentMethodRequest> createPaymentMethodRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreatePaymentMethodAsync(companyId, createPaymentMethodRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Payment Method Creates a new payment method.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePaymentMethodApiResponse"/>&gt;</returns>
        public async Task<ICreatePaymentMethodApiResponse> CreatePaymentMethodAsync(int companyId, Option<CreatePaymentMethodRequest> createPaymentMethodRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreatePaymentMethod(createPaymentMethodRequest);

                FormatCreatePaymentMethod(ref companyId, createPaymentMethodRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/settings/payment_methods"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/settings/payment_methods");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    if (createPaymentMethodRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createPaymentMethodRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createPaymentMethodRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreatePaymentMethodApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreatePaymentMethodApiResponse>();
                        CreatePaymentMethodApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new CreatePaymentMethodApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/settings/payment_methods", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreatePaymentMethodDefaultImplementation(apiResponseLocalVar, companyId, createPaymentMethodRequest);

                        Events.ExecuteOnCreatePaymentMethod(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreatePaymentMethodDefaultImplementation(e, "/c/{company_id}/settings/payment_methods", uriBuilderLocalVar.Path, companyId, createPaymentMethodRequest);
                Events.ExecuteOnErrorCreatePaymentMethod(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreatePaymentMethodApiResponse"/>
        /// </summary>
        public partial class CreatePaymentMethodApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, ICreatePaymentMethodApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreatePaymentMethodApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreatePaymentMethodApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreatePaymentMethodApiResponse(ILogger<CreatePaymentMethodApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreatePaymentMethodApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreatePaymentMethodApiResponse(ILogger<CreatePaymentMethodApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.CreatePaymentMethodResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.CreatePaymentMethodResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.CreatePaymentMethodResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateVatType(ref int companyId, Option<CreateVatTypeRequest> createVatTypeRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createVatTypeRequest"></param>
        /// <returns></returns>
        private void ValidateCreateVatType(Option<CreateVatTypeRequest> createVatTypeRequest)
        {
            if (createVatTypeRequest.IsSet && createVatTypeRequest.Value == null)
                throw new ArgumentNullException(nameof(createVatTypeRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createVatTypeRequest"></param>
        private void AfterCreateVatTypeDefaultImplementation(ICreateVatTypeApiResponse apiResponseLocalVar, int companyId, Option<CreateVatTypeRequest> createVatTypeRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateVatType(ref suppressDefaultLog, apiResponseLocalVar, companyId, createVatTypeRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createVatTypeRequest"></param>
        partial void AfterCreateVatType(ref bool suppressDefaultLog, ICreateVatTypeApiResponse apiResponseLocalVar, int companyId, Option<CreateVatTypeRequest> createVatTypeRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createVatTypeRequest"></param>
        private void OnErrorCreateVatTypeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreateVatTypeRequest> createVatTypeRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateVatType(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, createVatTypeRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createVatTypeRequest"></param>
        partial void OnErrorCreateVatType(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreateVatTypeRequest> createVatTypeRequest);

        /// <summary>
        /// Create Vat Type Creates a vat type.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateVatTypeApiResponse"/>&gt;</returns>
        public async Task<ICreateVatTypeApiResponse> CreateVatTypeOrDefaultAsync(int companyId, Option<CreateVatTypeRequest> createVatTypeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateVatTypeAsync(companyId, createVatTypeRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Vat Type Creates a vat type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateVatTypeApiResponse"/>&gt;</returns>
        public async Task<ICreateVatTypeApiResponse> CreateVatTypeAsync(int companyId, Option<CreateVatTypeRequest> createVatTypeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateVatType(createVatTypeRequest);

                FormatCreateVatType(ref companyId, createVatTypeRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/settings/vat_types"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/settings/vat_types");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    if (createVatTypeRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createVatTypeRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createVatTypeRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreateVatTypeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateVatTypeApiResponse>();
                        CreateVatTypeApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new CreateVatTypeApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/settings/vat_types", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreateVatTypeDefaultImplementation(apiResponseLocalVar, companyId, createVatTypeRequest);

                        Events.ExecuteOnCreateVatType(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateVatTypeDefaultImplementation(e, "/c/{company_id}/settings/vat_types", uriBuilderLocalVar.Path, companyId, createVatTypeRequest);
                Events.ExecuteOnErrorCreateVatType(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateVatTypeApiResponse"/>
        /// </summary>
        public partial class CreateVatTypeApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, ICreateVatTypeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateVatTypeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateVatTypeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateVatTypeApiResponse(ILogger<CreateVatTypeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreateVatTypeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateVatTypeApiResponse(ILogger<CreateVatTypeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.CreateVatTypeResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.CreateVatTypeResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.CreateVatTypeResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletePaymentAccount(ref int companyId, ref int paymentAccountId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentAccountId"></param>
        private void AfterDeletePaymentAccountDefaultImplementation(IDeletePaymentAccountApiResponse apiResponseLocalVar, int companyId, int paymentAccountId)
        {
            bool suppressDefaultLog = false;
            AfterDeletePaymentAccount(ref suppressDefaultLog, apiResponseLocalVar, companyId, paymentAccountId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentAccountId"></param>
        partial void AfterDeletePaymentAccount(ref bool suppressDefaultLog, IDeletePaymentAccountApiResponse apiResponseLocalVar, int companyId, int paymentAccountId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentAccountId"></param>
        private void OnErrorDeletePaymentAccountDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int paymentAccountId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletePaymentAccount(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, paymentAccountId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentAccountId"></param>
        partial void OnErrorDeletePaymentAccount(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int paymentAccountId);

        /// <summary>
        /// Delete Payment Account Deletes the specified payment account.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePaymentAccountApiResponse"/>&gt;</returns>
        public async Task<IDeletePaymentAccountApiResponse> DeletePaymentAccountOrDefaultAsync(int companyId, int paymentAccountId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePaymentAccountAsync(companyId, paymentAccountId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Payment Account Deletes the specified payment account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePaymentAccountApiResponse"/>&gt;</returns>
        public async Task<IDeletePaymentAccountApiResponse> DeletePaymentAccountAsync(int companyId, int paymentAccountId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletePaymentAccount(ref companyId, ref paymentAccountId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/settings/payment_accounts/{payment_account_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/settings/payment_accounts/{payment_account_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpayment_account_id%7D", Uri.EscapeDataString(paymentAccountId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeletePaymentAccountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePaymentAccountApiResponse>();
                        DeletePaymentAccountApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeletePaymentAccountApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/settings/payment_accounts/{payment_account_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeletePaymentAccountDefaultImplementation(apiResponseLocalVar, companyId, paymentAccountId);

                        Events.ExecuteOnDeletePaymentAccount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePaymentAccountDefaultImplementation(e, "/c/{company_id}/settings/payment_accounts/{payment_account_id}", uriBuilderLocalVar.Path, companyId, paymentAccountId);
                Events.ExecuteOnErrorDeletePaymentAccount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePaymentAccountApiResponse"/>
        /// </summary>
        public partial class DeletePaymentAccountApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IDeletePaymentAccountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePaymentAccountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePaymentAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePaymentAccountApiResponse(ILogger<DeletePaymentAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeletePaymentAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePaymentAccountApiResponse(ILogger<DeletePaymentAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletePaymentMethod(ref int companyId, ref int paymentMethodId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentMethodId"></param>
        private void AfterDeletePaymentMethodDefaultImplementation(IDeletePaymentMethodApiResponse apiResponseLocalVar, int companyId, int paymentMethodId)
        {
            bool suppressDefaultLog = false;
            AfterDeletePaymentMethod(ref suppressDefaultLog, apiResponseLocalVar, companyId, paymentMethodId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentMethodId"></param>
        partial void AfterDeletePaymentMethod(ref bool suppressDefaultLog, IDeletePaymentMethodApiResponse apiResponseLocalVar, int companyId, int paymentMethodId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentMethodId"></param>
        private void OnErrorDeletePaymentMethodDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int paymentMethodId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletePaymentMethod(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, paymentMethodId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentMethodId"></param>
        partial void OnErrorDeletePaymentMethod(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int paymentMethodId);

        /// <summary>
        /// Delete Payment Method Deletes the specified payment method.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePaymentMethodApiResponse"/>&gt;</returns>
        public async Task<IDeletePaymentMethodApiResponse> DeletePaymentMethodOrDefaultAsync(int companyId, int paymentMethodId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePaymentMethodAsync(companyId, paymentMethodId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Payment Method Deletes the specified payment method.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePaymentMethodApiResponse"/>&gt;</returns>
        public async Task<IDeletePaymentMethodApiResponse> DeletePaymentMethodAsync(int companyId, int paymentMethodId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletePaymentMethod(ref companyId, ref paymentMethodId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/settings/payment_methods/{payment_method_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/settings/payment_methods/{payment_method_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpayment_method_id%7D", Uri.EscapeDataString(paymentMethodId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeletePaymentMethodApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePaymentMethodApiResponse>();
                        DeletePaymentMethodApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeletePaymentMethodApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/settings/payment_methods/{payment_method_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeletePaymentMethodDefaultImplementation(apiResponseLocalVar, companyId, paymentMethodId);

                        Events.ExecuteOnDeletePaymentMethod(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePaymentMethodDefaultImplementation(e, "/c/{company_id}/settings/payment_methods/{payment_method_id}", uriBuilderLocalVar.Path, companyId, paymentMethodId);
                Events.ExecuteOnErrorDeletePaymentMethod(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePaymentMethodApiResponse"/>
        /// </summary>
        public partial class DeletePaymentMethodApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IDeletePaymentMethodApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePaymentMethodApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePaymentMethodApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePaymentMethodApiResponse(ILogger<DeletePaymentMethodApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeletePaymentMethodApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePaymentMethodApiResponse(ILogger<DeletePaymentMethodApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteVatType(ref int companyId, ref int vatTypeId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="vatTypeId"></param>
        private void AfterDeleteVatTypeDefaultImplementation(IDeleteVatTypeApiResponse apiResponseLocalVar, int companyId, int vatTypeId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteVatType(ref suppressDefaultLog, apiResponseLocalVar, companyId, vatTypeId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="vatTypeId"></param>
        partial void AfterDeleteVatType(ref bool suppressDefaultLog, IDeleteVatTypeApiResponse apiResponseLocalVar, int companyId, int vatTypeId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="vatTypeId"></param>
        private void OnErrorDeleteVatTypeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int vatTypeId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteVatType(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, vatTypeId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="vatTypeId"></param>
        partial void OnErrorDeleteVatType(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int vatTypeId);

        /// <summary>
        /// Delete Vat Type Deletes the specified vat type.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteVatTypeApiResponse"/>&gt;</returns>
        public async Task<IDeleteVatTypeApiResponse> DeleteVatTypeOrDefaultAsync(int companyId, int vatTypeId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteVatTypeAsync(companyId, vatTypeId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Vat Type Deletes the specified vat type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteVatTypeApiResponse"/>&gt;</returns>
        public async Task<IDeleteVatTypeApiResponse> DeleteVatTypeAsync(int companyId, int vatTypeId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteVatType(ref companyId, ref vatTypeId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/settings/vat_types/{vat_type_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/settings/vat_types/{vat_type_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bvat_type_id%7D", Uri.EscapeDataString(vatTypeId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteVatTypeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteVatTypeApiResponse>();
                        DeleteVatTypeApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteVatTypeApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/settings/vat_types/{vat_type_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteVatTypeDefaultImplementation(apiResponseLocalVar, companyId, vatTypeId);

                        Events.ExecuteOnDeleteVatType(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteVatTypeDefaultImplementation(e, "/c/{company_id}/settings/vat_types/{vat_type_id}", uriBuilderLocalVar.Path, companyId, vatTypeId);
                Events.ExecuteOnErrorDeleteVatType(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteVatTypeApiResponse"/>
        /// </summary>
        public partial class DeleteVatTypeApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IDeleteVatTypeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteVatTypeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteVatTypeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteVatTypeApiResponse(ILogger<DeleteVatTypeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteVatTypeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteVatTypeApiResponse(ILogger<DeleteVatTypeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPaymentAccount(ref int companyId, ref int paymentAccountId, ref Option<string> fields, ref Option<string> fieldset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <returns></returns>
        private void ValidateGetPaymentAccount(Option<string> fields, Option<string> fieldset)
        {
            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields));

            if (fieldset.IsSet && fieldset.Value == null)
                throw new ArgumentNullException(nameof(fieldset));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentAccountId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        private void AfterGetPaymentAccountDefaultImplementation(IGetPaymentAccountApiResponse apiResponseLocalVar, int companyId, int paymentAccountId, Option<string> fields, Option<string> fieldset)
        {
            bool suppressDefaultLog = false;
            AfterGetPaymentAccount(ref suppressDefaultLog, apiResponseLocalVar, companyId, paymentAccountId, fields, fieldset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentAccountId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        partial void AfterGetPaymentAccount(ref bool suppressDefaultLog, IGetPaymentAccountApiResponse apiResponseLocalVar, int companyId, int paymentAccountId, Option<string> fields, Option<string> fieldset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentAccountId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        private void OnErrorGetPaymentAccountDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int paymentAccountId, Option<string> fields, Option<string> fieldset)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPaymentAccount(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, paymentAccountId, fields, fieldset);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentAccountId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        partial void OnErrorGetPaymentAccount(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int paymentAccountId, Option<string> fields, Option<string> fieldset);

        /// <summary>
        /// Get Payment Account Gets the specified payment account.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPaymentAccountApiResponse"/>&gt;</returns>
        public async Task<IGetPaymentAccountApiResponse> GetPaymentAccountOrDefaultAsync(int companyId, int paymentAccountId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPaymentAccountAsync(companyId, paymentAccountId, fields, fieldset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Payment Account Gets the specified payment account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPaymentAccountApiResponse"/>&gt;</returns>
        public async Task<IGetPaymentAccountApiResponse> GetPaymentAccountAsync(int companyId, int paymentAccountId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPaymentAccount(fields, fieldset);

                FormatGetPaymentAccount(ref companyId, ref paymentAccountId, ref fields, ref fieldset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/settings/payment_accounts/{payment_account_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/settings/payment_accounts/{payment_account_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpayment_account_id%7D", Uri.EscapeDataString(paymentAccountId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (fields.IsSet)
                        parseQueryStringLocalVar["fields"] = ClientUtils.ParameterToString(fields.Value);

                    if (fieldset.IsSet)
                        parseQueryStringLocalVar["fieldset"] = ClientUtils.ParameterToString(fieldset.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetPaymentAccountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPaymentAccountApiResponse>();
                        GetPaymentAccountApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetPaymentAccountApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/settings/payment_accounts/{payment_account_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetPaymentAccountDefaultImplementation(apiResponseLocalVar, companyId, paymentAccountId, fields, fieldset);

                        Events.ExecuteOnGetPaymentAccount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPaymentAccountDefaultImplementation(e, "/c/{company_id}/settings/payment_accounts/{payment_account_id}", uriBuilderLocalVar.Path, companyId, paymentAccountId, fields, fieldset);
                Events.ExecuteOnErrorGetPaymentAccount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPaymentAccountApiResponse"/>
        /// </summary>
        public partial class GetPaymentAccountApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetPaymentAccountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPaymentAccountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPaymentAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPaymentAccountApiResponse(ILogger<GetPaymentAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetPaymentAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPaymentAccountApiResponse(ILogger<GetPaymentAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetPaymentAccountResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetPaymentAccountResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetPaymentAccountResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPaymentMethod(ref int companyId, ref int paymentMethodId, ref Option<string> fields, ref Option<string> fieldset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <returns></returns>
        private void ValidateGetPaymentMethod(Option<string> fields, Option<string> fieldset)
        {
            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields));

            if (fieldset.IsSet && fieldset.Value == null)
                throw new ArgumentNullException(nameof(fieldset));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentMethodId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        private void AfterGetPaymentMethodDefaultImplementation(IGetPaymentMethodApiResponse apiResponseLocalVar, int companyId, int paymentMethodId, Option<string> fields, Option<string> fieldset)
        {
            bool suppressDefaultLog = false;
            AfterGetPaymentMethod(ref suppressDefaultLog, apiResponseLocalVar, companyId, paymentMethodId, fields, fieldset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentMethodId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        partial void AfterGetPaymentMethod(ref bool suppressDefaultLog, IGetPaymentMethodApiResponse apiResponseLocalVar, int companyId, int paymentMethodId, Option<string> fields, Option<string> fieldset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentMethodId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        private void OnErrorGetPaymentMethodDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int paymentMethodId, Option<string> fields, Option<string> fieldset)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPaymentMethod(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, paymentMethodId, fields, fieldset);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentMethodId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        partial void OnErrorGetPaymentMethod(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int paymentMethodId, Option<string> fields, Option<string> fieldset);

        /// <summary>
        /// Get Payment Method Gets the specified payment method.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPaymentMethodApiResponse"/>&gt;</returns>
        public async Task<IGetPaymentMethodApiResponse> GetPaymentMethodOrDefaultAsync(int companyId, int paymentMethodId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPaymentMethodAsync(companyId, paymentMethodId, fields, fieldset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Payment Method Gets the specified payment method.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPaymentMethodApiResponse"/>&gt;</returns>
        public async Task<IGetPaymentMethodApiResponse> GetPaymentMethodAsync(int companyId, int paymentMethodId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPaymentMethod(fields, fieldset);

                FormatGetPaymentMethod(ref companyId, ref paymentMethodId, ref fields, ref fieldset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/settings/payment_methods/{payment_method_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/settings/payment_methods/{payment_method_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpayment_method_id%7D", Uri.EscapeDataString(paymentMethodId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (fields.IsSet)
                        parseQueryStringLocalVar["fields"] = ClientUtils.ParameterToString(fields.Value);

                    if (fieldset.IsSet)
                        parseQueryStringLocalVar["fieldset"] = ClientUtils.ParameterToString(fieldset.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetPaymentMethodApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPaymentMethodApiResponse>();
                        GetPaymentMethodApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetPaymentMethodApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/settings/payment_methods/{payment_method_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetPaymentMethodDefaultImplementation(apiResponseLocalVar, companyId, paymentMethodId, fields, fieldset);

                        Events.ExecuteOnGetPaymentMethod(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPaymentMethodDefaultImplementation(e, "/c/{company_id}/settings/payment_methods/{payment_method_id}", uriBuilderLocalVar.Path, companyId, paymentMethodId, fields, fieldset);
                Events.ExecuteOnErrorGetPaymentMethod(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPaymentMethodApiResponse"/>
        /// </summary>
        public partial class GetPaymentMethodApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetPaymentMethodApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPaymentMethodApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPaymentMethodApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPaymentMethodApiResponse(ILogger<GetPaymentMethodApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetPaymentMethodApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPaymentMethodApiResponse(ILogger<GetPaymentMethodApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetPaymentMethodResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetPaymentMethodResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetPaymentMethodResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTaxProfile(ref int companyId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        private void AfterGetTaxProfileDefaultImplementation(IGetTaxProfileApiResponse apiResponseLocalVar, int companyId)
        {
            bool suppressDefaultLog = false;
            AfterGetTaxProfile(ref suppressDefaultLog, apiResponseLocalVar, companyId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        partial void AfterGetTaxProfile(ref bool suppressDefaultLog, IGetTaxProfileApiResponse apiResponseLocalVar, int companyId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        private void OnErrorGetTaxProfileDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTaxProfile(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        partial void OnErrorGetTaxProfile(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId);

        /// <summary>
        /// Get Tax Profile Gets the Tax Profile
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTaxProfileApiResponse"/>&gt;</returns>
        public async Task<IGetTaxProfileApiResponse> GetTaxProfileOrDefaultAsync(int companyId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTaxProfileAsync(companyId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Tax Profile Gets the Tax Profile
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTaxProfileApiResponse"/>&gt;</returns>
        public async Task<IGetTaxProfileApiResponse> GetTaxProfileAsync(int companyId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetTaxProfile(ref companyId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/settings/tax_profile"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/settings/tax_profile");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetTaxProfileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTaxProfileApiResponse>();
                        GetTaxProfileApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetTaxProfileApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/settings/tax_profile", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetTaxProfileDefaultImplementation(apiResponseLocalVar, companyId);

                        Events.ExecuteOnGetTaxProfile(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTaxProfileDefaultImplementation(e, "/c/{company_id}/settings/tax_profile", uriBuilderLocalVar.Path, companyId);
                Events.ExecuteOnErrorGetTaxProfile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTaxProfileApiResponse"/>
        /// </summary>
        public partial class GetTaxProfileApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetTaxProfileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTaxProfileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTaxProfileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTaxProfileApiResponse(ILogger<GetTaxProfileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetTaxProfileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTaxProfileApiResponse(ILogger<GetTaxProfileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetTaxProfileResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetTaxProfileResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetTaxProfileResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetVatType(ref int companyId, ref int vatTypeId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="vatTypeId"></param>
        private void AfterGetVatTypeDefaultImplementation(IGetVatTypeApiResponse apiResponseLocalVar, int companyId, int vatTypeId)
        {
            bool suppressDefaultLog = false;
            AfterGetVatType(ref suppressDefaultLog, apiResponseLocalVar, companyId, vatTypeId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="vatTypeId"></param>
        partial void AfterGetVatType(ref bool suppressDefaultLog, IGetVatTypeApiResponse apiResponseLocalVar, int companyId, int vatTypeId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="vatTypeId"></param>
        private void OnErrorGetVatTypeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int vatTypeId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetVatType(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, vatTypeId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="vatTypeId"></param>
        partial void OnErrorGetVatType(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int vatTypeId);

        /// <summary>
        /// Get Vat Type Gets the specified vat type.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVatTypeApiResponse"/>&gt;</returns>
        public async Task<IGetVatTypeApiResponse> GetVatTypeOrDefaultAsync(int companyId, int vatTypeId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetVatTypeAsync(companyId, vatTypeId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Vat Type Gets the specified vat type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVatTypeApiResponse"/>&gt;</returns>
        public async Task<IGetVatTypeApiResponse> GetVatTypeAsync(int companyId, int vatTypeId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetVatType(ref companyId, ref vatTypeId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/settings/vat_types/{vat_type_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/settings/vat_types/{vat_type_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bvat_type_id%7D", Uri.EscapeDataString(vatTypeId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetVatTypeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetVatTypeApiResponse>();
                        GetVatTypeApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetVatTypeApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/settings/vat_types/{vat_type_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetVatTypeDefaultImplementation(apiResponseLocalVar, companyId, vatTypeId);

                        Events.ExecuteOnGetVatType(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetVatTypeDefaultImplementation(e, "/c/{company_id}/settings/vat_types/{vat_type_id}", uriBuilderLocalVar.Path, companyId, vatTypeId);
                Events.ExecuteOnErrorGetVatType(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetVatTypeApiResponse"/>
        /// </summary>
        public partial class GetVatTypeApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetVatTypeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetVatTypeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetVatTypeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetVatTypeApiResponse(ILogger<GetVatTypeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetVatTypeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetVatTypeApiResponse(ILogger<GetVatTypeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetVatTypeResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetVatTypeResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetVatTypeResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatModifyPaymentAccount(ref int companyId, ref int paymentAccountId, Option<ModifyPaymentAccountRequest> modifyPaymentAccountRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modifyPaymentAccountRequest"></param>
        /// <returns></returns>
        private void ValidateModifyPaymentAccount(Option<ModifyPaymentAccountRequest> modifyPaymentAccountRequest)
        {
            if (modifyPaymentAccountRequest.IsSet && modifyPaymentAccountRequest.Value == null)
                throw new ArgumentNullException(nameof(modifyPaymentAccountRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentAccountId"></param>
        /// <param name="modifyPaymentAccountRequest"></param>
        private void AfterModifyPaymentAccountDefaultImplementation(IModifyPaymentAccountApiResponse apiResponseLocalVar, int companyId, int paymentAccountId, Option<ModifyPaymentAccountRequest> modifyPaymentAccountRequest)
        {
            bool suppressDefaultLog = false;
            AfterModifyPaymentAccount(ref suppressDefaultLog, apiResponseLocalVar, companyId, paymentAccountId, modifyPaymentAccountRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentAccountId"></param>
        /// <param name="modifyPaymentAccountRequest"></param>
        partial void AfterModifyPaymentAccount(ref bool suppressDefaultLog, IModifyPaymentAccountApiResponse apiResponseLocalVar, int companyId, int paymentAccountId, Option<ModifyPaymentAccountRequest> modifyPaymentAccountRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentAccountId"></param>
        /// <param name="modifyPaymentAccountRequest"></param>
        private void OnErrorModifyPaymentAccountDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int paymentAccountId, Option<ModifyPaymentAccountRequest> modifyPaymentAccountRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorModifyPaymentAccount(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, paymentAccountId, modifyPaymentAccountRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentAccountId"></param>
        /// <param name="modifyPaymentAccountRequest"></param>
        partial void OnErrorModifyPaymentAccount(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int paymentAccountId, Option<ModifyPaymentAccountRequest> modifyPaymentAccountRequest);

        /// <summary>
        /// Modify Payment Account Modifies the specified payment account.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyPaymentAccountApiResponse"/>&gt;</returns>
        public async Task<IModifyPaymentAccountApiResponse> ModifyPaymentAccountOrDefaultAsync(int companyId, int paymentAccountId, Option<ModifyPaymentAccountRequest> modifyPaymentAccountRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ModifyPaymentAccountAsync(companyId, paymentAccountId, modifyPaymentAccountRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Modify Payment Account Modifies the specified payment account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyPaymentAccountApiResponse"/>&gt;</returns>
        public async Task<IModifyPaymentAccountApiResponse> ModifyPaymentAccountAsync(int companyId, int paymentAccountId, Option<ModifyPaymentAccountRequest> modifyPaymentAccountRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateModifyPaymentAccount(modifyPaymentAccountRequest);

                FormatModifyPaymentAccount(ref companyId, ref paymentAccountId, modifyPaymentAccountRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/settings/payment_accounts/{payment_account_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/settings/payment_accounts/{payment_account_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpayment_account_id%7D", Uri.EscapeDataString(paymentAccountId.ToString()));

                    if (modifyPaymentAccountRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (modifyPaymentAccountRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modifyPaymentAccountRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ModifyPaymentAccountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ModifyPaymentAccountApiResponse>();
                        ModifyPaymentAccountApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ModifyPaymentAccountApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/settings/payment_accounts/{payment_account_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterModifyPaymentAccountDefaultImplementation(apiResponseLocalVar, companyId, paymentAccountId, modifyPaymentAccountRequest);

                        Events.ExecuteOnModifyPaymentAccount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorModifyPaymentAccountDefaultImplementation(e, "/c/{company_id}/settings/payment_accounts/{payment_account_id}", uriBuilderLocalVar.Path, companyId, paymentAccountId, modifyPaymentAccountRequest);
                Events.ExecuteOnErrorModifyPaymentAccount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ModifyPaymentAccountApiResponse"/>
        /// </summary>
        public partial class ModifyPaymentAccountApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IModifyPaymentAccountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ModifyPaymentAccountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ModifyPaymentAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyPaymentAccountApiResponse(ILogger<ModifyPaymentAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ModifyPaymentAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyPaymentAccountApiResponse(ILogger<ModifyPaymentAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ModifyPaymentAccountResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ModifyPaymentAccountResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ModifyPaymentAccountResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatModifyPaymentMethod(ref int companyId, ref int paymentMethodId, Option<ModifyPaymentMethodRequest> modifyPaymentMethodRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modifyPaymentMethodRequest"></param>
        /// <returns></returns>
        private void ValidateModifyPaymentMethod(Option<ModifyPaymentMethodRequest> modifyPaymentMethodRequest)
        {
            if (modifyPaymentMethodRequest.IsSet && modifyPaymentMethodRequest.Value == null)
                throw new ArgumentNullException(nameof(modifyPaymentMethodRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentMethodId"></param>
        /// <param name="modifyPaymentMethodRequest"></param>
        private void AfterModifyPaymentMethodDefaultImplementation(IModifyPaymentMethodApiResponse apiResponseLocalVar, int companyId, int paymentMethodId, Option<ModifyPaymentMethodRequest> modifyPaymentMethodRequest)
        {
            bool suppressDefaultLog = false;
            AfterModifyPaymentMethod(ref suppressDefaultLog, apiResponseLocalVar, companyId, paymentMethodId, modifyPaymentMethodRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentMethodId"></param>
        /// <param name="modifyPaymentMethodRequest"></param>
        partial void AfterModifyPaymentMethod(ref bool suppressDefaultLog, IModifyPaymentMethodApiResponse apiResponseLocalVar, int companyId, int paymentMethodId, Option<ModifyPaymentMethodRequest> modifyPaymentMethodRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentMethodId"></param>
        /// <param name="modifyPaymentMethodRequest"></param>
        private void OnErrorModifyPaymentMethodDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int paymentMethodId, Option<ModifyPaymentMethodRequest> modifyPaymentMethodRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorModifyPaymentMethod(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, paymentMethodId, modifyPaymentMethodRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="paymentMethodId"></param>
        /// <param name="modifyPaymentMethodRequest"></param>
        partial void OnErrorModifyPaymentMethod(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int paymentMethodId, Option<ModifyPaymentMethodRequest> modifyPaymentMethodRequest);

        /// <summary>
        /// Modify Payment Method Modifies the specified payment method.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyPaymentMethodApiResponse"/>&gt;</returns>
        public async Task<IModifyPaymentMethodApiResponse> ModifyPaymentMethodOrDefaultAsync(int companyId, int paymentMethodId, Option<ModifyPaymentMethodRequest> modifyPaymentMethodRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ModifyPaymentMethodAsync(companyId, paymentMethodId, modifyPaymentMethodRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Modify Payment Method Modifies the specified payment method.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyPaymentMethodApiResponse"/>&gt;</returns>
        public async Task<IModifyPaymentMethodApiResponse> ModifyPaymentMethodAsync(int companyId, int paymentMethodId, Option<ModifyPaymentMethodRequest> modifyPaymentMethodRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateModifyPaymentMethod(modifyPaymentMethodRequest);

                FormatModifyPaymentMethod(ref companyId, ref paymentMethodId, modifyPaymentMethodRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/settings/payment_methods/{payment_method_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/settings/payment_methods/{payment_method_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpayment_method_id%7D", Uri.EscapeDataString(paymentMethodId.ToString()));

                    if (modifyPaymentMethodRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (modifyPaymentMethodRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modifyPaymentMethodRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ModifyPaymentMethodApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ModifyPaymentMethodApiResponse>();
                        ModifyPaymentMethodApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ModifyPaymentMethodApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/settings/payment_methods/{payment_method_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterModifyPaymentMethodDefaultImplementation(apiResponseLocalVar, companyId, paymentMethodId, modifyPaymentMethodRequest);

                        Events.ExecuteOnModifyPaymentMethod(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorModifyPaymentMethodDefaultImplementation(e, "/c/{company_id}/settings/payment_methods/{payment_method_id}", uriBuilderLocalVar.Path, companyId, paymentMethodId, modifyPaymentMethodRequest);
                Events.ExecuteOnErrorModifyPaymentMethod(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ModifyPaymentMethodApiResponse"/>
        /// </summary>
        public partial class ModifyPaymentMethodApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IModifyPaymentMethodApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ModifyPaymentMethodApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ModifyPaymentMethodApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyPaymentMethodApiResponse(ILogger<ModifyPaymentMethodApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ModifyPaymentMethodApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyPaymentMethodApiResponse(ILogger<ModifyPaymentMethodApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ModifyPaymentMethodResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ModifyPaymentMethodResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ModifyPaymentMethodResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatModifyVatType(ref int companyId, ref int vatTypeId, Option<ModifyVatTypeRequest> modifyVatTypeRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modifyVatTypeRequest"></param>
        /// <returns></returns>
        private void ValidateModifyVatType(Option<ModifyVatTypeRequest> modifyVatTypeRequest)
        {
            if (modifyVatTypeRequest.IsSet && modifyVatTypeRequest.Value == null)
                throw new ArgumentNullException(nameof(modifyVatTypeRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="vatTypeId"></param>
        /// <param name="modifyVatTypeRequest"></param>
        private void AfterModifyVatTypeDefaultImplementation(IModifyVatTypeApiResponse apiResponseLocalVar, int companyId, int vatTypeId, Option<ModifyVatTypeRequest> modifyVatTypeRequest)
        {
            bool suppressDefaultLog = false;
            AfterModifyVatType(ref suppressDefaultLog, apiResponseLocalVar, companyId, vatTypeId, modifyVatTypeRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="vatTypeId"></param>
        /// <param name="modifyVatTypeRequest"></param>
        partial void AfterModifyVatType(ref bool suppressDefaultLog, IModifyVatTypeApiResponse apiResponseLocalVar, int companyId, int vatTypeId, Option<ModifyVatTypeRequest> modifyVatTypeRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="vatTypeId"></param>
        /// <param name="modifyVatTypeRequest"></param>
        private void OnErrorModifyVatTypeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int vatTypeId, Option<ModifyVatTypeRequest> modifyVatTypeRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorModifyVatType(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, vatTypeId, modifyVatTypeRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="vatTypeId"></param>
        /// <param name="modifyVatTypeRequest"></param>
        partial void OnErrorModifyVatType(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int vatTypeId, Option<ModifyVatTypeRequest> modifyVatTypeRequest);

        /// <summary>
        /// Modify Vat Type Modifies the specified vat type.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="modifyVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyVatTypeApiResponse"/>&gt;</returns>
        public async Task<IModifyVatTypeApiResponse> ModifyVatTypeOrDefaultAsync(int companyId, int vatTypeId, Option<ModifyVatTypeRequest> modifyVatTypeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ModifyVatTypeAsync(companyId, vatTypeId, modifyVatTypeRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Modify Vat Type Modifies the specified vat type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="modifyVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyVatTypeApiResponse"/>&gt;</returns>
        public async Task<IModifyVatTypeApiResponse> ModifyVatTypeAsync(int companyId, int vatTypeId, Option<ModifyVatTypeRequest> modifyVatTypeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateModifyVatType(modifyVatTypeRequest);

                FormatModifyVatType(ref companyId, ref vatTypeId, modifyVatTypeRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/settings/vat_types/{vat_type_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/settings/vat_types/{vat_type_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bvat_type_id%7D", Uri.EscapeDataString(vatTypeId.ToString()));

                    if (modifyVatTypeRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (modifyVatTypeRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modifyVatTypeRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ModifyVatTypeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ModifyVatTypeApiResponse>();
                        ModifyVatTypeApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ModifyVatTypeApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/settings/vat_types/{vat_type_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterModifyVatTypeDefaultImplementation(apiResponseLocalVar, companyId, vatTypeId, modifyVatTypeRequest);

                        Events.ExecuteOnModifyVatType(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorModifyVatTypeDefaultImplementation(e, "/c/{company_id}/settings/vat_types/{vat_type_id}", uriBuilderLocalVar.Path, companyId, vatTypeId, modifyVatTypeRequest);
                Events.ExecuteOnErrorModifyVatType(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ModifyVatTypeApiResponse"/>
        /// </summary>
        public partial class ModifyVatTypeApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IModifyVatTypeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ModifyVatTypeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ModifyVatTypeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyVatTypeApiResponse(ILogger<ModifyVatTypeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ModifyVatTypeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyVatTypeApiResponse(ILogger<ModifyVatTypeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ModifyVatTypeResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ModifyVatTypeResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ModifyVatTypeResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
