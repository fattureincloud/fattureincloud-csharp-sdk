/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiSync : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///     Create Payment Account
        /// </summary>
        /// <remarks>
        ///     Creates a new payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <returns>CreatePaymentAccountResponse</returns>
        CreatePaymentAccountResponse CreatePaymentAccount(int companyId,
            CreatePaymentAccountRequest createPaymentAccountRequest = default);

        /// <summary>
        ///     Create Payment Account
        /// </summary>
        /// <remarks>
        ///     Creates a new payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <returns>ApiResponse of CreatePaymentAccountResponse</returns>
        ApiResponse<CreatePaymentAccountResponse> CreatePaymentAccountWithHttpInfo(int companyId,
            CreatePaymentAccountRequest createPaymentAccountRequest = default);

        /// <summary>
        ///     Create Payment Method
        /// </summary>
        /// <remarks>
        ///     Creates a new payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <returns>CreatePaymentMethodResponse</returns>
        CreatePaymentMethodResponse CreatePaymentMethod(int companyId,
            CreatePaymentMethodRequest createPaymentMethodRequest = default);

        /// <summary>
        ///     Create Payment Method
        /// </summary>
        /// <remarks>
        ///     Creates a new payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <returns>ApiResponse of CreatePaymentMethodResponse</returns>
        ApiResponse<CreatePaymentMethodResponse> CreatePaymentMethodWithHttpInfo(int companyId,
            CreatePaymentMethodRequest createPaymentMethodRequest = default);

        /// <summary>
        ///     Create Vat Type
        /// </summary>
        /// <remarks>
        ///     Creates a vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createVatTypeRequest"> (optional)</param>
        /// <returns>CreateVatTypeResponse</returns>
        CreateVatTypeResponse CreateVatType(int companyId, CreateVatTypeRequest createVatTypeRequest = default);

        /// <summary>
        ///     Create Vat Type
        /// </summary>
        /// <remarks>
        ///     Creates a vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createVatTypeRequest"> (optional)</param>
        /// <returns>ApiResponse of CreateVatTypeResponse</returns>
        ApiResponse<CreateVatTypeResponse> CreateVatTypeWithHttpInfo(int companyId,
            CreateVatTypeRequest createVatTypeRequest = default);

        /// <summary>
        ///     Delete Payment Account
        /// </summary>
        /// <remarks>
        ///     Deletes the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <returns></returns>
        void DeletePaymentAccount(int companyId, int paymentAccountId);

        /// <summary>
        ///     Delete Payment Account
        /// </summary>
        /// <remarks>
        ///     Deletes the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePaymentAccountWithHttpInfo(int companyId, int paymentAccountId);

        /// <summary>
        ///     Delete Payment Method
        /// </summary>
        /// <remarks>
        ///     Deletes the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <returns></returns>
        void DeletePaymentMethod(int companyId, int paymentMethodId);

        /// <summary>
        ///     Delete Payment Method
        /// </summary>
        /// <remarks>
        ///     Deletes the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePaymentMethodWithHttpInfo(int companyId, int paymentMethodId);

        /// <summary>
        ///     Delete Vat Type
        /// </summary>
        /// <remarks>
        ///     Deletes the specified vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <returns></returns>
        void DeleteVatType(int companyId, int vatTypeId);

        /// <summary>
        ///     Delete Vat Type
        /// </summary>
        /// <remarks>
        ///     Deletes the specified vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVatTypeWithHttpInfo(int companyId, int vatTypeId);

        /// <summary>
        ///     Get Payment Account
        /// </summary>
        /// <remarks>
        ///     Gets the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>GetPaymentAccountResponse</returns>
        GetPaymentAccountResponse GetPaymentAccount(int companyId, int paymentAccountId,
            string fields = default(string), string fieldset = default(string));

        /// <summary>
        ///     Get Payment Account
        /// </summary>
        /// <remarks>
        ///     Gets the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of GetPaymentAccountResponse</returns>
        ApiResponse<GetPaymentAccountResponse> GetPaymentAccountWithHttpInfo(int companyId, int paymentAccountId,
            string fields = default(string), string fieldset = default(string));

        /// <summary>
        ///     Get Payment Method
        /// </summary>
        /// <remarks>
        ///     Gets the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>GetPaymentMethodResponse</returns>
        GetPaymentMethodResponse GetPaymentMethod(int companyId, int paymentMethodId, string fields = default(string),
            string fieldset = default(string));

        /// <summary>
        ///     Get Payment Method
        /// </summary>
        /// <remarks>
        ///     Gets the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of GetPaymentMethodResponse</returns>
        ApiResponse<GetPaymentMethodResponse> GetPaymentMethodWithHttpInfo(int companyId, int paymentMethodId,
            string fields = default(string), string fieldset = default(string));

        /// <summary>
        ///     Get Vat Type
        /// </summary>
        /// <remarks>
        ///     Gets the specified vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <returns>GetVatTypeResponse</returns>
        GetVatTypeResponse GetVatType(int companyId, int vatTypeId);

        /// <summary>
        ///     Get Vat Type
        /// </summary>
        /// <remarks>
        ///     Gets the specified vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <returns>ApiResponse of GetVatTypeResponse</returns>
        ApiResponse<GetVatTypeResponse> GetVatTypeWithHttpInfo(int companyId, int vatTypeId);

        /// <summary>
        ///     Modify Payment Account
        /// </summary>
        /// <remarks>
        ///     Modifies the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <returns>ModifyPaymentAccountResponse</returns>
        ModifyPaymentAccountResponse ModifyPaymentAccount(int companyId, int paymentAccountId,
            ModifyPaymentAccountRequest modifyPaymentAccountRequest = default);

        /// <summary>
        ///     Modify Payment Account
        /// </summary>
        /// <remarks>
        ///     Modifies the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <returns>ApiResponse of ModifyPaymentAccountResponse</returns>
        ApiResponse<ModifyPaymentAccountResponse> ModifyPaymentAccountWithHttpInfo(int companyId, int paymentAccountId,
            ModifyPaymentAccountRequest modifyPaymentAccountRequest = default);

        /// <summary>
        ///     Modify Payment Method
        /// </summary>
        /// <remarks>
        ///     Modifies the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <returns>ModifyPaymentMethodResponse</returns>
        ModifyPaymentMethodResponse ModifyPaymentMethod(int companyId, int paymentMethodId,
            ModifyPaymentMethodRequest modifyPaymentMethodRequest = default);

        /// <summary>
        ///     Modify Payment Method
        /// </summary>
        /// <remarks>
        ///     Modifies the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <returns>ApiResponse of ModifyPaymentMethodResponse</returns>
        ApiResponse<ModifyPaymentMethodResponse> ModifyPaymentMethodWithHttpInfo(int companyId, int paymentMethodId,
            ModifyPaymentMethodRequest modifyPaymentMethodRequest = default);

        /// <summary>
        ///     Modify Vat Type
        /// </summary>
        /// <remarks>
        ///     Modifies the specified vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="modifyVatTypeRequest"> (optional)</param>
        /// <returns>ModifyVatTypeResponse</returns>
        ModifyVatTypeResponse ModifyVatType(int companyId, int vatTypeId,
            ModifyVatTypeRequest modifyVatTypeRequest = default);

        /// <summary>
        ///     Modify Vat Type
        /// </summary>
        /// <remarks>
        ///     Modifies the specified vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="modifyVatTypeRequest"> (optional)</param>
        /// <returns>ApiResponse of ModifyVatTypeResponse</returns>
        ApiResponse<ModifyVatTypeResponse> ModifyVatTypeWithHttpInfo(int companyId, int vatTypeId,
            ModifyVatTypeRequest modifyVatTypeRequest = default);

        #endregion Synchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        ///     Create Payment Account
        /// </summary>
        /// <remarks>
        ///     Creates a new payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePaymentAccountResponse</returns>
        System.Threading.Tasks.Task<CreatePaymentAccountResponse> CreatePaymentAccountAsync(int companyId,
            CreatePaymentAccountRequest createPaymentAccountRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Create Payment Account
        /// </summary>
        /// <remarks>
        ///     Creates a new payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePaymentAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePaymentAccountResponse>> CreatePaymentAccountWithHttpInfoAsync(
            int companyId, CreatePaymentAccountRequest createPaymentAccountRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Create Payment Method
        /// </summary>
        /// <remarks>
        ///     Creates a new payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePaymentMethodResponse</returns>
        System.Threading.Tasks.Task<CreatePaymentMethodResponse> CreatePaymentMethodAsync(int companyId,
            CreatePaymentMethodRequest createPaymentMethodRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Create Payment Method
        /// </summary>
        /// <remarks>
        ///     Creates a new payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePaymentMethodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePaymentMethodResponse>> CreatePaymentMethodWithHttpInfoAsync(
            int companyId, CreatePaymentMethodRequest createPaymentMethodRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Create Vat Type
        /// </summary>
        /// <remarks>
        ///     Creates a vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateVatTypeResponse</returns>
        System.Threading.Tasks.Task<CreateVatTypeResponse> CreateVatTypeAsync(int companyId,
            CreateVatTypeRequest createVatTypeRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Create Vat Type
        /// </summary>
        /// <remarks>
        ///     Creates a vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateVatTypeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateVatTypeResponse>> CreateVatTypeWithHttpInfoAsync(int companyId,
            CreateVatTypeRequest createVatTypeRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Delete Payment Account
        /// </summary>
        /// <remarks>
        ///     Deletes the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePaymentAccountAsync(int companyId, int paymentAccountId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Delete Payment Account
        /// </summary>
        /// <remarks>
        ///     Deletes the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaymentAccountWithHttpInfoAsync(int companyId,
            int paymentAccountId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Delete Payment Method
        /// </summary>
        /// <remarks>
        ///     Deletes the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePaymentMethodAsync(int companyId, int paymentMethodId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Delete Payment Method
        /// </summary>
        /// <remarks>
        ///     Deletes the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaymentMethodWithHttpInfoAsync(int companyId,
            int paymentMethodId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Delete Vat Type
        /// </summary>
        /// <remarks>
        ///     Deletes the specified vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVatTypeAsync(int companyId, int vatTypeId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Delete Vat Type
        /// </summary>
        /// <remarks>
        ///     Deletes the specified vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVatTypeWithHttpInfoAsync(int companyId, int vatTypeId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Payment Account
        /// </summary>
        /// <remarks>
        ///     Gets the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentAccountResponse</returns>
        System.Threading.Tasks.Task<GetPaymentAccountResponse> GetPaymentAccountAsync(int companyId,
            int paymentAccountId, string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Payment Account
        /// </summary>
        /// <remarks>
        ///     Gets the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPaymentAccountResponse>> GetPaymentAccountWithHttpInfoAsync(
            int companyId, int paymentAccountId, string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Payment Method
        /// </summary>
        /// <remarks>
        ///     Gets the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentMethodResponse</returns>
        System.Threading.Tasks.Task<GetPaymentMethodResponse> GetPaymentMethodAsync(int companyId, int paymentMethodId,
            string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Payment Method
        /// </summary>
        /// <remarks>
        ///     Gets the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentMethodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPaymentMethodResponse>> GetPaymentMethodWithHttpInfoAsync(
            int companyId, int paymentMethodId, string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Vat Type
        /// </summary>
        /// <remarks>
        ///     Gets the specified vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetVatTypeResponse</returns>
        System.Threading.Tasks.Task<GetVatTypeResponse> GetVatTypeAsync(int companyId, int vatTypeId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Vat Type
        /// </summary>
        /// <remarks>
        ///     Gets the specified vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetVatTypeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetVatTypeResponse>> GetVatTypeWithHttpInfoAsync(int companyId,
            int vatTypeId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Modify Payment Account
        /// </summary>
        /// <remarks>
        ///     Modifies the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyPaymentAccountResponse</returns>
        System.Threading.Tasks.Task<ModifyPaymentAccountResponse> ModifyPaymentAccountAsync(int companyId,
            int paymentAccountId, ModifyPaymentAccountRequest modifyPaymentAccountRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Modify Payment Account
        /// </summary>
        /// <remarks>
        ///     Modifies the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyPaymentAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyPaymentAccountResponse>> ModifyPaymentAccountWithHttpInfoAsync(
            int companyId, int paymentAccountId, ModifyPaymentAccountRequest modifyPaymentAccountRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Modify Payment Method
        /// </summary>
        /// <remarks>
        ///     Modifies the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyPaymentMethodResponse</returns>
        System.Threading.Tasks.Task<ModifyPaymentMethodResponse> ModifyPaymentMethodAsync(int companyId,
            int paymentMethodId, ModifyPaymentMethodRequest modifyPaymentMethodRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Modify Payment Method
        /// </summary>
        /// <remarks>
        ///     Modifies the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyPaymentMethodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyPaymentMethodResponse>> ModifyPaymentMethodWithHttpInfoAsync(
            int companyId, int paymentMethodId, ModifyPaymentMethodRequest modifyPaymentMethodRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Modify Vat Type
        /// </summary>
        /// <remarks>
        ///     Modifies the specified vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="modifyVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyVatTypeResponse</returns>
        System.Threading.Tasks.Task<ModifyVatTypeResponse> ModifyVatTypeAsync(int companyId, int vatTypeId,
            ModifyVatTypeRequest modifyVatTypeRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Modify Vat Type
        /// </summary>
        /// <remarks>
        ///     Modifies the specified vat type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="modifyVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyVatTypeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyVatTypeResponse>> ModifyVatTypeWithHttpInfoAsync(int companyId,
            int vatTypeId, ModifyVatTypeRequest modifyVatTypeRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApi : ISettingsApiSync, ISettingsApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SettingsApi : ISettingsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="SettingsApi" /> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SettingsApi" /> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi(string basePath)
        {
            Configuration = Sdk.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SettingsApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            Configuration = Sdk.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SettingsApi" /> class
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SettingsApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Create Payment Account Creates a new payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <returns>CreatePaymentAccountResponse</returns>
        public CreatePaymentAccountResponse CreatePaymentAccount(int companyId,
            CreatePaymentAccountRequest createPaymentAccountRequest = default)
        {
            var localVarResponse = CreatePaymentAccountWithHttpInfo(companyId, createPaymentAccountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create Payment Account Creates a new payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <returns>ApiResponse of CreatePaymentAccountResponse</returns>
        public ApiResponse<CreatePaymentAccountResponse> CreatePaymentAccountWithHttpInfo(int companyId,
            CreatePaymentAccountRequest createPaymentAccountRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createPaymentAccountRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CreatePaymentAccountResponse>("/c/{company_id}/settings/payment_accounts",
                    localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("CreatePaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Create Payment Account Creates a new payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePaymentAccountResponse</returns>
        public async System.Threading.Tasks.Task<CreatePaymentAccountResponse> CreatePaymentAccountAsync(int companyId,
            CreatePaymentAccountRequest createPaymentAccountRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<CreatePaymentAccountResponse> localVarResponse =
                await CreatePaymentAccountWithHttpInfoAsync(companyId, createPaymentAccountRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create Payment Account Creates a new payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePaymentAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatePaymentAccountResponse>>
            CreatePaymentAccountWithHttpInfoAsync(int companyId,
                CreatePaymentAccountRequest createPaymentAccountRequest = default,
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createPaymentAccountRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .PostAsync<CreatePaymentAccountResponse>("/c/{company_id}/settings/payment_accounts",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("CreatePaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Create Payment Method Creates a new payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <returns>CreatePaymentMethodResponse</returns>
        public CreatePaymentMethodResponse CreatePaymentMethod(int companyId,
            CreatePaymentMethodRequest createPaymentMethodRequest = default)
        {
            var localVarResponse = CreatePaymentMethodWithHttpInfo(companyId, createPaymentMethodRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create Payment Method Creates a new payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <returns>ApiResponse of CreatePaymentMethodResponse</returns>
        public ApiResponse<CreatePaymentMethodResponse> CreatePaymentMethodWithHttpInfo(int companyId,
            CreatePaymentMethodRequest createPaymentMethodRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createPaymentMethodRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Post<CreatePaymentMethodResponse>("/c/{company_id}/settings/payment_methods",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("CreatePaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Create Payment Method Creates a new payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePaymentMethodResponse</returns>
        public async System.Threading.Tasks.Task<CreatePaymentMethodResponse> CreatePaymentMethodAsync(int companyId,
            CreatePaymentMethodRequest createPaymentMethodRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<CreatePaymentMethodResponse> localVarResponse =
                await CreatePaymentMethodWithHttpInfoAsync(companyId, createPaymentMethodRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create Payment Method Creates a new payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePaymentMethodResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatePaymentMethodResponse>>
            CreatePaymentMethodWithHttpInfoAsync(int companyId,
                CreatePaymentMethodRequest createPaymentMethodRequest = default,
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createPaymentMethodRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .PostAsync<CreatePaymentMethodResponse>("/c/{company_id}/settings/payment_methods",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("CreatePaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Create Vat Type Creates a vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createVatTypeRequest"> (optional)</param>
        /// <returns>CreateVatTypeResponse</returns>
        public CreateVatTypeResponse CreateVatType(int companyId, CreateVatTypeRequest createVatTypeRequest = default)
        {
            var localVarResponse = CreateVatTypeWithHttpInfo(companyId, createVatTypeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create Vat Type Creates a vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createVatTypeRequest"> (optional)</param>
        /// <returns>ApiResponse of CreateVatTypeResponse</returns>
        public ApiResponse<CreateVatTypeResponse> CreateVatTypeWithHttpInfo(int companyId,
            CreateVatTypeRequest createVatTypeRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createVatTypeRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Post<CreateVatTypeResponse>("/c/{company_id}/settings/vat_types",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("CreateVatType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Create Vat Type Creates a vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateVatTypeResponse</returns>
        public async System.Threading.Tasks.Task<CreateVatTypeResponse> CreateVatTypeAsync(int companyId,
            CreateVatTypeRequest createVatTypeRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<CreateVatTypeResponse> localVarResponse =
                await CreateVatTypeWithHttpInfoAsync(companyId, createVatTypeRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create Vat Type Creates a vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateVatTypeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateVatTypeResponse>> CreateVatTypeWithHttpInfoAsync(
            int companyId, CreateVatTypeRequest createVatTypeRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createVatTypeRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .PostAsync<CreateVatTypeResponse>("/c/{company_id}/settings/vat_types", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("CreateVatType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Delete Payment Account Deletes the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <returns></returns>
        public void DeletePaymentAccount(int companyId, int paymentAccountId)
        {
            DeletePaymentAccountWithHttpInfo(companyId, paymentAccountId);
        }

        /// <summary>
        ///     Delete Payment Account Deletes the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePaymentAccountWithHttpInfo(int companyId, int paymentAccountId)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_account_id",
                ClientUtils.ParameterToString(paymentAccountId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Delete<Object>("/c/{company_id}/settings/payment_accounts/{payment_account_id}",
                    localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("DeletePaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Delete Payment Account Deletes the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePaymentAccountAsync(int companyId, int paymentAccountId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePaymentAccountWithHttpInfoAsync(companyId, paymentAccountId, cancellationToken)
                .ConfigureAwait(false);
        }

        /// <summary>
        ///     Delete Payment Account Deletes the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaymentAccountWithHttpInfoAsync(
            int companyId, int paymentAccountId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_account_id",
                ClientUtils.ParameterToString(paymentAccountId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .DeleteAsync<Object>("/c/{company_id}/settings/payment_accounts/{payment_account_id}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("DeletePaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Delete Payment Method Deletes the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <returns></returns>
        public void DeletePaymentMethod(int companyId, int paymentMethodId)
        {
            DeletePaymentMethodWithHttpInfo(companyId, paymentMethodId);
        }

        /// <summary>
        ///     Delete Payment Method Deletes the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePaymentMethodWithHttpInfo(int companyId, int paymentMethodId)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_method_id",
                ClientUtils.ParameterToString(paymentMethodId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Delete<Object>("/c/{company_id}/settings/payment_methods/{payment_method_id}",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("DeletePaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Delete Payment Method Deletes the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePaymentMethodAsync(int companyId, int paymentMethodId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePaymentMethodWithHttpInfoAsync(companyId, paymentMethodId, cancellationToken)
                .ConfigureAwait(false);
        }

        /// <summary>
        ///     Delete Payment Method Deletes the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaymentMethodWithHttpInfoAsync(
            int companyId, int paymentMethodId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_method_id",
                ClientUtils.ParameterToString(paymentMethodId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .DeleteAsync<Object>("/c/{company_id}/settings/payment_methods/{payment_method_id}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("DeletePaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Delete Vat Type Deletes the specified vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <returns></returns>
        public void DeleteVatType(int companyId, int vatTypeId)
        {
            DeleteVatTypeWithHttpInfo(companyId, vatTypeId);
        }

        /// <summary>
        ///     Delete Vat Type Deletes the specified vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteVatTypeWithHttpInfo(int companyId, int vatTypeId)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("vat_type_id",
                ClientUtils.ParameterToString(vatTypeId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Delete<Object>("/c/{company_id}/settings/vat_types/{vat_type_id}",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("DeleteVatType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Delete Vat Type Deletes the specified vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVatTypeAsync(int companyId, int vatTypeId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteVatTypeWithHttpInfoAsync(companyId, vatTypeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///     Delete Vat Type Deletes the specified vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVatTypeWithHttpInfoAsync(int companyId,
            int vatTypeId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("vat_type_id",
                ClientUtils.ParameterToString(vatTypeId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .DeleteAsync<Object>("/c/{company_id}/settings/vat_types/{vat_type_id}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("DeleteVatType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Payment Account Gets the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>GetPaymentAccountResponse</returns>
        public GetPaymentAccountResponse GetPaymentAccount(int companyId, int paymentAccountId,
            string fields = default(string), string fieldset = default(string))
        {
            var localVarResponse = GetPaymentAccountWithHttpInfo(companyId, paymentAccountId, fields, fieldset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Payment Account Gets the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of GetPaymentAccountResponse</returns>
        public ApiResponse<GetPaymentAccountResponse> GetPaymentAccountWithHttpInfo(int companyId, int paymentAccountId,
            string fields = default(string), string fieldset = default(string))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_account_id",
                ClientUtils.ParameterToString(paymentAccountId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<GetPaymentAccountResponse>(
                "/c/{company_id}/settings/payment_accounts/{payment_account_id}", localVarRequestOptions,
                Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetPaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Payment Account Gets the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentAccountResponse</returns>
        public async System.Threading.Tasks.Task<GetPaymentAccountResponse> GetPaymentAccountAsync(int companyId,
            int paymentAccountId, string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<GetPaymentAccountResponse> localVarResponse =
                await GetPaymentAccountWithHttpInfoAsync(companyId, paymentAccountId, fields, fieldset,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Payment Account Gets the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPaymentAccountResponse>>
            GetPaymentAccountWithHttpInfoAsync(int companyId, int paymentAccountId, string fields = default(string),
                string fieldset = default(string),
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_account_id",
                ClientUtils.ParameterToString(paymentAccountId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<GetPaymentAccountResponse>("/c/{company_id}/settings/payment_accounts/{payment_account_id}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetPaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Payment Method Gets the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>GetPaymentMethodResponse</returns>
        public GetPaymentMethodResponse GetPaymentMethod(int companyId, int paymentMethodId,
            string fields = default(string), string fieldset = default(string))
        {
            var localVarResponse = GetPaymentMethodWithHttpInfo(companyId, paymentMethodId, fields, fieldset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Payment Method Gets the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of GetPaymentMethodResponse</returns>
        public ApiResponse<GetPaymentMethodResponse> GetPaymentMethodWithHttpInfo(int companyId, int paymentMethodId,
            string fields = default(string), string fieldset = default(string))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_method_id",
                ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<GetPaymentMethodResponse>(
                "/c/{company_id}/settings/payment_methods/{payment_method_id}", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetPaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Payment Method Gets the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentMethodResponse</returns>
        public async System.Threading.Tasks.Task<GetPaymentMethodResponse> GetPaymentMethodAsync(int companyId,
            int paymentMethodId, string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<GetPaymentMethodResponse> localVarResponse =
                await GetPaymentMethodWithHttpInfoAsync(companyId, paymentMethodId, fields, fieldset, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Payment Method Gets the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentMethodResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPaymentMethodResponse>>
            GetPaymentMethodWithHttpInfoAsync(int companyId, int paymentMethodId, string fields = default(string),
                string fieldset = default(string),
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_method_id",
                ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<GetPaymentMethodResponse>("/c/{company_id}/settings/payment_methods/{payment_method_id}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetPaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Vat Type Gets the specified vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <returns>GetVatTypeResponse</returns>
        public GetVatTypeResponse GetVatType(int companyId, int vatTypeId)
        {
            var localVarResponse = GetVatTypeWithHttpInfo(companyId, vatTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Vat Type Gets the specified vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <returns>ApiResponse of GetVatTypeResponse</returns>
        public ApiResponse<GetVatTypeResponse> GetVatTypeWithHttpInfo(int companyId, int vatTypeId)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("vat_type_id",
                ClientUtils.ParameterToString(vatTypeId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<GetVatTypeResponse>("/c/{company_id}/settings/vat_types/{vat_type_id}",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetVatType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Vat Type Gets the specified vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetVatTypeResponse</returns>
        public async System.Threading.Tasks.Task<GetVatTypeResponse> GetVatTypeAsync(int companyId, int vatTypeId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<GetVatTypeResponse> localVarResponse =
                await GetVatTypeWithHttpInfoAsync(companyId, vatTypeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Vat Type Gets the specified vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetVatTypeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetVatTypeResponse>> GetVatTypeWithHttpInfoAsync(
            int companyId, int vatTypeId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("vat_type_id",
                ClientUtils.ParameterToString(vatTypeId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<GetVatTypeResponse>("/c/{company_id}/settings/vat_types/{vat_type_id}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetVatType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Modify Payment Account Modifies the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <returns>ModifyPaymentAccountResponse</returns>
        public ModifyPaymentAccountResponse ModifyPaymentAccount(int companyId, int paymentAccountId,
            ModifyPaymentAccountRequest modifyPaymentAccountRequest = default)
        {
            var localVarResponse =
                ModifyPaymentAccountWithHttpInfo(companyId, paymentAccountId, modifyPaymentAccountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Modify Payment Account Modifies the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <returns>ApiResponse of ModifyPaymentAccountResponse</returns>
        public ApiResponse<ModifyPaymentAccountResponse> ModifyPaymentAccountWithHttpInfo(int companyId,
            int paymentAccountId, ModifyPaymentAccountRequest modifyPaymentAccountRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_account_id",
                ClientUtils.ParameterToString(paymentAccountId)); // path parameter
            localVarRequestOptions.Data = modifyPaymentAccountRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Put<ModifyPaymentAccountResponse>(
                "/c/{company_id}/settings/payment_accounts/{payment_account_id}", localVarRequestOptions,
                Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ModifyPaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Modify Payment Account Modifies the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyPaymentAccountResponse</returns>
        public async System.Threading.Tasks.Task<ModifyPaymentAccountResponse> ModifyPaymentAccountAsync(int companyId,
            int paymentAccountId, ModifyPaymentAccountRequest modifyPaymentAccountRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ModifyPaymentAccountResponse> localVarResponse =
                await ModifyPaymentAccountWithHttpInfoAsync(companyId, paymentAccountId, modifyPaymentAccountRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Modify Payment Account Modifies the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyPaymentAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModifyPaymentAccountResponse>>
            ModifyPaymentAccountWithHttpInfoAsync(int companyId, int paymentAccountId,
                ModifyPaymentAccountRequest modifyPaymentAccountRequest = default,
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_account_id",
                ClientUtils.ParameterToString(paymentAccountId)); // path parameter
            localVarRequestOptions.Data = modifyPaymentAccountRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .PutAsync<ModifyPaymentAccountResponse>(
                    "/c/{company_id}/settings/payment_accounts/{payment_account_id}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ModifyPaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Modify Payment Method Modifies the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <returns>ModifyPaymentMethodResponse</returns>
        public ModifyPaymentMethodResponse ModifyPaymentMethod(int companyId, int paymentMethodId,
            ModifyPaymentMethodRequest modifyPaymentMethodRequest = default)
        {
            var localVarResponse =
                ModifyPaymentMethodWithHttpInfo(companyId, paymentMethodId, modifyPaymentMethodRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Modify Payment Method Modifies the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <returns>ApiResponse of ModifyPaymentMethodResponse</returns>
        public ApiResponse<ModifyPaymentMethodResponse> ModifyPaymentMethodWithHttpInfo(int companyId,
            int paymentMethodId, ModifyPaymentMethodRequest modifyPaymentMethodRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_method_id",
                ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            localVarRequestOptions.Data = modifyPaymentMethodRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Put<ModifyPaymentMethodResponse>(
                "/c/{company_id}/settings/payment_methods/{payment_method_id}", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ModifyPaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Modify Payment Method Modifies the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyPaymentMethodResponse</returns>
        public async System.Threading.Tasks.Task<ModifyPaymentMethodResponse> ModifyPaymentMethodAsync(int companyId,
            int paymentMethodId, ModifyPaymentMethodRequest modifyPaymentMethodRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ModifyPaymentMethodResponse> localVarResponse =
                await ModifyPaymentMethodWithHttpInfoAsync(companyId, paymentMethodId, modifyPaymentMethodRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Modify Payment Method Modifies the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyPaymentMethodResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModifyPaymentMethodResponse>>
            ModifyPaymentMethodWithHttpInfoAsync(int companyId, int paymentMethodId,
                ModifyPaymentMethodRequest modifyPaymentMethodRequest = default,
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("payment_method_id",
                ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            localVarRequestOptions.Data = modifyPaymentMethodRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .PutAsync<ModifyPaymentMethodResponse>("/c/{company_id}/settings/payment_methods/{payment_method_id}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ModifyPaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Modify Vat Type Modifies the specified vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="modifyVatTypeRequest"> (optional)</param>
        /// <returns>ModifyVatTypeResponse</returns>
        public ModifyVatTypeResponse ModifyVatType(int companyId, int vatTypeId,
            ModifyVatTypeRequest modifyVatTypeRequest = default)
        {
            var localVarResponse = ModifyVatTypeWithHttpInfo(companyId, vatTypeId, modifyVatTypeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Modify Vat Type Modifies the specified vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="modifyVatTypeRequest"> (optional)</param>
        /// <returns>ApiResponse of ModifyVatTypeResponse</returns>
        public ApiResponse<ModifyVatTypeResponse> ModifyVatTypeWithHttpInfo(int companyId, int vatTypeId,
            ModifyVatTypeRequest modifyVatTypeRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("vat_type_id",
                ClientUtils.ParameterToString(vatTypeId)); // path parameter
            localVarRequestOptions.Data = modifyVatTypeRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Put<ModifyVatTypeResponse>("/c/{company_id}/settings/vat_types/{vat_type_id}",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ModifyVatType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Modify Vat Type Modifies the specified vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="modifyVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyVatTypeResponse</returns>
        public async System.Threading.Tasks.Task<ModifyVatTypeResponse> ModifyVatTypeAsync(int companyId, int vatTypeId,
            ModifyVatTypeRequest modifyVatTypeRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ModifyVatTypeResponse> localVarResponse =
                await ModifyVatTypeWithHttpInfoAsync(companyId, vatTypeId, modifyVatTypeRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Modify Vat Type Modifies the specified vat type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="vatTypeId">The Referred Vat Type Id.</param>
        /// <param name="modifyVatTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyVatTypeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModifyVatTypeResponse>> ModifyVatTypeWithHttpInfoAsync(
            int companyId, int vatTypeId, ModifyVatTypeRequest modifyVatTypeRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("vat_type_id",
                ClientUtils.ParameterToString(vatTypeId)); // path parameter
            localVarRequestOptions.Data = modifyVatTypeRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .PutAsync<ModifyVatTypeResponse>("/c/{company_id}/settings/vat_types/{vat_type_id}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ModifyVatType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }
    }
}