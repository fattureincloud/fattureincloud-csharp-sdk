/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol. For more information, please visit https://www.fattureincloud.it.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Payment Account
        /// </summary>
        /// <remarks>
        /// Creates a new payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <returns>CreatePaymentAccountResponse</returns>
        CreatePaymentAccountResponse CreatePaymentAccount(int companyId, CreatePaymentAccountRequest createPaymentAccountRequest = default(CreatePaymentAccountRequest));

        /// <summary>
        /// Create Payment Account
        /// </summary>
        /// <remarks>
        /// Creates a new payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <returns>ApiResponse of CreatePaymentAccountResponse</returns>
        ApiResponse<CreatePaymentAccountResponse> CreatePaymentAccountWithHttpInfo(int companyId, CreatePaymentAccountRequest createPaymentAccountRequest = default(CreatePaymentAccountRequest));
        /// <summary>
        /// Create Payment Method
        /// </summary>
        /// <remarks>
        /// Creates a new payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <returns>CreatePaymentMethodResponse</returns>
        CreatePaymentMethodResponse CreatePaymentMethod(int companyId, CreatePaymentMethodRequest createPaymentMethodRequest = default(CreatePaymentMethodRequest));

        /// <summary>
        /// Create Payment Method
        /// </summary>
        /// <remarks>
        /// Creates a new payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <returns>ApiResponse of CreatePaymentMethodResponse</returns>
        ApiResponse<CreatePaymentMethodResponse> CreatePaymentMethodWithHttpInfo(int companyId, CreatePaymentMethodRequest createPaymentMethodRequest = default(CreatePaymentMethodRequest));
        /// <summary>
        /// Delete Payment Account
        /// </summary>
        /// <remarks>
        /// Deletes the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <returns></returns>
        void DeletePaymentAccount(int companyId, string paymentAccountId);

        /// <summary>
        /// Delete Payment Account
        /// </summary>
        /// <remarks>
        /// Deletes the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePaymentAccountWithHttpInfo(int companyId, string paymentAccountId);
        /// <summary>
        /// Delete Payment Method
        /// </summary>
        /// <remarks>
        /// Deletes the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <returns></returns>
        void DeletePaymentMethod(int companyId, int paymentMethodId);

        /// <summary>
        /// Delete Payment Method
        /// </summary>
        /// <remarks>
        /// Deletes the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePaymentMethodWithHttpInfo(int companyId, int paymentMethodId);
        /// <summary>
        /// Get Payment Account
        /// </summary>
        /// <remarks>
        /// Gets the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GetPaymentAccountResponse</returns>
        GetPaymentAccountResponse GetPaymentAccount(int companyId, string paymentAccountId, string fields = default(string), string fieldset = default(string), Object body = default(Object));

        /// <summary>
        /// Get Payment Account
        /// </summary>
        /// <remarks>
        /// Gets the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetPaymentAccountResponse</returns>
        ApiResponse<GetPaymentAccountResponse> GetPaymentAccountWithHttpInfo(int companyId, string paymentAccountId, string fields = default(string), string fieldset = default(string), Object body = default(Object));
        /// <summary>
        /// Get Payment Method
        /// </summary>
        /// <remarks>
        /// Gets the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>GetPaymentMethodResponse</returns>
        GetPaymentMethodResponse GetPaymentMethod(int companyId, int paymentMethodId, string fields = default(string), string fieldset = default(string));

        /// <summary>
        /// Get Payment Method
        /// </summary>
        /// <remarks>
        /// Gets the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of GetPaymentMethodResponse</returns>
        ApiResponse<GetPaymentMethodResponse> GetPaymentMethodWithHttpInfo(int companyId, int paymentMethodId, string fields = default(string), string fieldset = default(string));
        /// <summary>
        /// Modify Payment Account
        /// </summary>
        /// <remarks>
        /// Modifies the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <returns>ModifyPaymentAccountResponse</returns>
        ModifyPaymentAccountResponse ModifyPaymentAccount(int companyId, string paymentAccountId, ModifyPaymentAccountRequest modifyPaymentAccountRequest = default(ModifyPaymentAccountRequest));

        /// <summary>
        /// Modify Payment Account
        /// </summary>
        /// <remarks>
        /// Modifies the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <returns>ApiResponse of ModifyPaymentAccountResponse</returns>
        ApiResponse<ModifyPaymentAccountResponse> ModifyPaymentAccountWithHttpInfo(int companyId, string paymentAccountId, ModifyPaymentAccountRequest modifyPaymentAccountRequest = default(ModifyPaymentAccountRequest));
        /// <summary>
        /// Modify Payment Method
        /// </summary>
        /// <remarks>
        /// Modifies the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <returns>ModifyPaymentMethodResponse</returns>
        ModifyPaymentMethodResponse ModifyPaymentMethod(int companyId, int paymentMethodId, ModifyPaymentMethodRequest modifyPaymentMethodRequest = default(ModifyPaymentMethodRequest));

        /// <summary>
        /// Modify Payment Method
        /// </summary>
        /// <remarks>
        /// Modifies the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <returns>ApiResponse of ModifyPaymentMethodResponse</returns>
        ApiResponse<ModifyPaymentMethodResponse> ModifyPaymentMethodWithHttpInfo(int companyId, int paymentMethodId, ModifyPaymentMethodRequest modifyPaymentMethodRequest = default(ModifyPaymentMethodRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Payment Account
        /// </summary>
        /// <remarks>
        /// Creates a new payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePaymentAccountResponse</returns>
        System.Threading.Tasks.Task<CreatePaymentAccountResponse> CreatePaymentAccountAsync(int companyId, CreatePaymentAccountRequest createPaymentAccountRequest = default(CreatePaymentAccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Payment Account
        /// </summary>
        /// <remarks>
        /// Creates a new payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePaymentAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePaymentAccountResponse>> CreatePaymentAccountWithHttpInfoAsync(int companyId, CreatePaymentAccountRequest createPaymentAccountRequest = default(CreatePaymentAccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Payment Method
        /// </summary>
        /// <remarks>
        /// Creates a new payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePaymentMethodResponse</returns>
        System.Threading.Tasks.Task<CreatePaymentMethodResponse> CreatePaymentMethodAsync(int companyId, CreatePaymentMethodRequest createPaymentMethodRequest = default(CreatePaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Payment Method
        /// </summary>
        /// <remarks>
        /// Creates a new payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePaymentMethodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePaymentMethodResponse>> CreatePaymentMethodWithHttpInfoAsync(int companyId, CreatePaymentMethodRequest createPaymentMethodRequest = default(CreatePaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Payment Account
        /// </summary>
        /// <remarks>
        /// Deletes the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePaymentAccountAsync(int companyId, string paymentAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Payment Account
        /// </summary>
        /// <remarks>
        /// Deletes the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaymentAccountWithHttpInfoAsync(int companyId, string paymentAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Payment Method
        /// </summary>
        /// <remarks>
        /// Deletes the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePaymentMethodAsync(int companyId, int paymentMethodId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Payment Method
        /// </summary>
        /// <remarks>
        /// Deletes the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaymentMethodWithHttpInfoAsync(int companyId, int paymentMethodId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Payment Account
        /// </summary>
        /// <remarks>
        /// Gets the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentAccountResponse</returns>
        System.Threading.Tasks.Task<GetPaymentAccountResponse> GetPaymentAccountAsync(int companyId, string paymentAccountId, string fields = default(string), string fieldset = default(string), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Payment Account
        /// </summary>
        /// <remarks>
        /// Gets the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPaymentAccountResponse>> GetPaymentAccountWithHttpInfoAsync(int companyId, string paymentAccountId, string fields = default(string), string fieldset = default(string), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Payment Method
        /// </summary>
        /// <remarks>
        /// Gets the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentMethodResponse</returns>
        System.Threading.Tasks.Task<GetPaymentMethodResponse> GetPaymentMethodAsync(int companyId, int paymentMethodId, string fields = default(string), string fieldset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Payment Method
        /// </summary>
        /// <remarks>
        /// Gets the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentMethodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPaymentMethodResponse>> GetPaymentMethodWithHttpInfoAsync(int companyId, int paymentMethodId, string fields = default(string), string fieldset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Modify Payment Account
        /// </summary>
        /// <remarks>
        /// Modifies the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyPaymentAccountResponse</returns>
        System.Threading.Tasks.Task<ModifyPaymentAccountResponse> ModifyPaymentAccountAsync(int companyId, string paymentAccountId, ModifyPaymentAccountRequest modifyPaymentAccountRequest = default(ModifyPaymentAccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modify Payment Account
        /// </summary>
        /// <remarks>
        /// Modifies the specified payment account.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyPaymentAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyPaymentAccountResponse>> ModifyPaymentAccountWithHttpInfoAsync(int companyId, string paymentAccountId, ModifyPaymentAccountRequest modifyPaymentAccountRequest = default(ModifyPaymentAccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Modify Payment Method
        /// </summary>
        /// <remarks>
        /// Modifies the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyPaymentMethodResponse</returns>
        System.Threading.Tasks.Task<ModifyPaymentMethodResponse> ModifyPaymentMethodAsync(int companyId, int paymentMethodId, ModifyPaymentMethodRequest modifyPaymentMethodRequest = default(ModifyPaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modify Payment Method
        /// </summary>
        /// <remarks>
        /// Modifies the specified payment method.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyPaymentMethodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyPaymentMethodResponse>> ModifyPaymentMethodWithHttpInfoAsync(int companyId, int paymentMethodId, ModifyPaymentMethodRequest modifyPaymentMethodRequest = default(ModifyPaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApi : ISettingsApiSync, ISettingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsApi : ISettingsApi
    {
        private It.FattureInCloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi(string basePath)
        {
            this.Configuration = It.FattureInCloud.Sdk.Client.Configuration.MergeConfigurations(
                It.FattureInCloud.Sdk.Client.GlobalConfiguration.Instance,
                new It.FattureInCloud.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsApi(It.FattureInCloud.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = It.FattureInCloud.Sdk.Client.Configuration.MergeConfigurations(
                It.FattureInCloud.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SettingsApi(It.FattureInCloud.Sdk.Client.ISynchronousClient client, It.FattureInCloud.Sdk.Client.IAsynchronousClient asyncClient, It.FattureInCloud.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public It.FattureInCloud.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Payment Account Creates a new payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <returns>CreatePaymentAccountResponse</returns>
        public CreatePaymentAccountResponse CreatePaymentAccount(int companyId, CreatePaymentAccountRequest createPaymentAccountRequest = default(CreatePaymentAccountRequest))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<CreatePaymentAccountResponse> localVarResponse = CreatePaymentAccountWithHttpInfo(companyId, createPaymentAccountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Payment Account Creates a new payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <returns>ApiResponse of CreatePaymentAccountResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<CreatePaymentAccountResponse> CreatePaymentAccountWithHttpInfo(int companyId, CreatePaymentAccountRequest createPaymentAccountRequest = default(CreatePaymentAccountRequest))
        {
            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createPaymentAccountRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatePaymentAccountResponse>("/c/{companyId}/settings/payment_accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Payment Account Creates a new payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePaymentAccountResponse</returns>
        public async System.Threading.Tasks.Task<CreatePaymentAccountResponse> CreatePaymentAccountAsync(int companyId, CreatePaymentAccountRequest createPaymentAccountRequest = default(CreatePaymentAccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<CreatePaymentAccountResponse> localVarResponse = await CreatePaymentAccountWithHttpInfoAsync(companyId, createPaymentAccountRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Payment Account Creates a new payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePaymentAccountResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<CreatePaymentAccountResponse>> CreatePaymentAccountWithHttpInfoAsync(int companyId, CreatePaymentAccountRequest createPaymentAccountRequest = default(CreatePaymentAccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createPaymentAccountRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePaymentAccountResponse>("/c/{companyId}/settings/payment_accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Payment Method Creates a new payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <returns>CreatePaymentMethodResponse</returns>
        public CreatePaymentMethodResponse CreatePaymentMethod(int companyId, CreatePaymentMethodRequest createPaymentMethodRequest = default(CreatePaymentMethodRequest))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<CreatePaymentMethodResponse> localVarResponse = CreatePaymentMethodWithHttpInfo(companyId, createPaymentMethodRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Payment Method Creates a new payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <returns>ApiResponse of CreatePaymentMethodResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<CreatePaymentMethodResponse> CreatePaymentMethodWithHttpInfo(int companyId, CreatePaymentMethodRequest createPaymentMethodRequest = default(CreatePaymentMethodRequest))
        {
            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createPaymentMethodRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatePaymentMethodResponse>("/c/{companyId}/settings/payment_methods", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Payment Method Creates a new payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePaymentMethodResponse</returns>
        public async System.Threading.Tasks.Task<CreatePaymentMethodResponse> CreatePaymentMethodAsync(int companyId, CreatePaymentMethodRequest createPaymentMethodRequest = default(CreatePaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<CreatePaymentMethodResponse> localVarResponse = await CreatePaymentMethodWithHttpInfoAsync(companyId, createPaymentMethodRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Payment Method Creates a new payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePaymentMethodResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<CreatePaymentMethodResponse>> CreatePaymentMethodWithHttpInfoAsync(int companyId, CreatePaymentMethodRequest createPaymentMethodRequest = default(CreatePaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createPaymentMethodRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePaymentMethodResponse>("/c/{companyId}/settings/payment_methods", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Payment Account Deletes the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <returns></returns>
        public void DeletePaymentAccount(int companyId, string paymentAccountId)
        {
            DeletePaymentAccountWithHttpInfo(companyId, paymentAccountId);
        }

        /// <summary>
        /// Delete Payment Account Deletes the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<Object> DeletePaymentAccountWithHttpInfo(int companyId, string paymentAccountId)
        {
            // verify the required parameter 'paymentAccountId' is set
            if (paymentAccountId == null)
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'paymentAccountId' when calling SettingsApi->DeletePaymentAccount");

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("paymentAccountId", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(paymentAccountId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/c/{companyId}/settings/payment_accounts/{paymentAccountId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Payment Account Deletes the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePaymentAccountAsync(int companyId, string paymentAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePaymentAccountWithHttpInfoAsync(companyId, paymentAccountId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Payment Account Deletes the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<Object>> DeletePaymentAccountWithHttpInfoAsync(int companyId, string paymentAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentAccountId' is set
            if (paymentAccountId == null)
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'paymentAccountId' when calling SettingsApi->DeletePaymentAccount");


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("paymentAccountId", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(paymentAccountId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/c/{companyId}/settings/payment_accounts/{paymentAccountId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Payment Method Deletes the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <returns></returns>
        public void DeletePaymentMethod(int companyId, int paymentMethodId)
        {
            DeletePaymentMethodWithHttpInfo(companyId, paymentMethodId);
        }

        /// <summary>
        /// Delete Payment Method Deletes the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<Object> DeletePaymentMethodWithHttpInfo(int companyId, int paymentMethodId)
        {
            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("paymentMethodId", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/c/{companyId}/settings/payment_method/{paymentMethodId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Payment Method Deletes the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePaymentMethodAsync(int companyId, int paymentMethodId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePaymentMethodWithHttpInfoAsync(companyId, paymentMethodId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Payment Method Deletes the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<Object>> DeletePaymentMethodWithHttpInfoAsync(int companyId, int paymentMethodId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("paymentMethodId", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/c/{companyId}/settings/payment_method/{paymentMethodId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Account Gets the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GetPaymentAccountResponse</returns>
        public GetPaymentAccountResponse GetPaymentAccount(int companyId, string paymentAccountId, string fields = default(string), string fieldset = default(string), Object body = default(Object))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetPaymentAccountResponse> localVarResponse = GetPaymentAccountWithHttpInfo(companyId, paymentAccountId, fields, fieldset, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Account Gets the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetPaymentAccountResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetPaymentAccountResponse> GetPaymentAccountWithHttpInfo(int companyId, string paymentAccountId, string fields = default(string), string fieldset = default(string), Object body = default(Object))
        {
            // verify the required parameter 'paymentAccountId' is set
            if (paymentAccountId == null)
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'paymentAccountId' when calling SettingsApi->GetPaymentAccount");

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("paymentAccountId", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(paymentAccountId)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (fieldset != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            }
            localVarRequestOptions.Data = body;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPaymentAccountResponse>("/c/{companyId}/settings/payment_accounts/{paymentAccountId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Account Gets the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentAccountResponse</returns>
        public async System.Threading.Tasks.Task<GetPaymentAccountResponse> GetPaymentAccountAsync(int companyId, string paymentAccountId, string fields = default(string), string fieldset = default(string), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetPaymentAccountResponse> localVarResponse = await GetPaymentAccountWithHttpInfoAsync(companyId, paymentAccountId, fields, fieldset, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Account Gets the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentAccountResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetPaymentAccountResponse>> GetPaymentAccountWithHttpInfoAsync(int companyId, string paymentAccountId, string fields = default(string), string fieldset = default(string), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentAccountId' is set
            if (paymentAccountId == null)
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'paymentAccountId' when calling SettingsApi->GetPaymentAccount");


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("paymentAccountId", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(paymentAccountId)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (fieldset != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            }
            localVarRequestOptions.Data = body;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPaymentAccountResponse>("/c/{companyId}/settings/payment_accounts/{paymentAccountId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Method Gets the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>GetPaymentMethodResponse</returns>
        public GetPaymentMethodResponse GetPaymentMethod(int companyId, int paymentMethodId, string fields = default(string), string fieldset = default(string))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetPaymentMethodResponse> localVarResponse = GetPaymentMethodWithHttpInfo(companyId, paymentMethodId, fields, fieldset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Method Gets the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of GetPaymentMethodResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetPaymentMethodResponse> GetPaymentMethodWithHttpInfo(int companyId, int paymentMethodId, string fields = default(string), string fieldset = default(string))
        {
            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("paymentMethodId", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (fieldset != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            }

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPaymentMethodResponse>("/c/{companyId}/settings/payment_method/{paymentMethodId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Method Gets the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentMethodResponse</returns>
        public async System.Threading.Tasks.Task<GetPaymentMethodResponse> GetPaymentMethodAsync(int companyId, int paymentMethodId, string fields = default(string), string fieldset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetPaymentMethodResponse> localVarResponse = await GetPaymentMethodWithHttpInfoAsync(companyId, paymentMethodId, fields, fieldset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Method Gets the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentMethodResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetPaymentMethodResponse>> GetPaymentMethodWithHttpInfoAsync(int companyId, int paymentMethodId, string fields = default(string), string fieldset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("paymentMethodId", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (fieldset != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            }

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPaymentMethodResponse>("/c/{companyId}/settings/payment_method/{paymentMethodId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify Payment Account Modifies the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <returns>ModifyPaymentAccountResponse</returns>
        public ModifyPaymentAccountResponse ModifyPaymentAccount(int companyId, string paymentAccountId, ModifyPaymentAccountRequest modifyPaymentAccountRequest = default(ModifyPaymentAccountRequest))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ModifyPaymentAccountResponse> localVarResponse = ModifyPaymentAccountWithHttpInfo(companyId, paymentAccountId, modifyPaymentAccountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify Payment Account Modifies the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <returns>ApiResponse of ModifyPaymentAccountResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<ModifyPaymentAccountResponse> ModifyPaymentAccountWithHttpInfo(int companyId, string paymentAccountId, ModifyPaymentAccountRequest modifyPaymentAccountRequest = default(ModifyPaymentAccountRequest))
        {
            // verify the required parameter 'paymentAccountId' is set
            if (paymentAccountId == null)
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'paymentAccountId' when calling SettingsApi->ModifyPaymentAccount");

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("paymentAccountId", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(paymentAccountId)); // path parameter
            localVarRequestOptions.Data = modifyPaymentAccountRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ModifyPaymentAccountResponse>("/c/{companyId}/settings/payment_accounts/{paymentAccountId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyPaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify Payment Account Modifies the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyPaymentAccountResponse</returns>
        public async System.Threading.Tasks.Task<ModifyPaymentAccountResponse> ModifyPaymentAccountAsync(int companyId, string paymentAccountId, ModifyPaymentAccountRequest modifyPaymentAccountRequest = default(ModifyPaymentAccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ModifyPaymentAccountResponse> localVarResponse = await ModifyPaymentAccountWithHttpInfoAsync(companyId, paymentAccountId, modifyPaymentAccountRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify Payment Account Modifies the specified payment account.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentAccountId">The Referred Payment Account Id.</param>
        /// <param name="modifyPaymentAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyPaymentAccountResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<ModifyPaymentAccountResponse>> ModifyPaymentAccountWithHttpInfoAsync(int companyId, string paymentAccountId, ModifyPaymentAccountRequest modifyPaymentAccountRequest = default(ModifyPaymentAccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentAccountId' is set
            if (paymentAccountId == null)
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'paymentAccountId' when calling SettingsApi->ModifyPaymentAccount");


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("paymentAccountId", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(paymentAccountId)); // path parameter
            localVarRequestOptions.Data = modifyPaymentAccountRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ModifyPaymentAccountResponse>("/c/{companyId}/settings/payment_accounts/{paymentAccountId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyPaymentAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify Payment Method Modifies the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <returns>ModifyPaymentMethodResponse</returns>
        public ModifyPaymentMethodResponse ModifyPaymentMethod(int companyId, int paymentMethodId, ModifyPaymentMethodRequest modifyPaymentMethodRequest = default(ModifyPaymentMethodRequest))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ModifyPaymentMethodResponse> localVarResponse = ModifyPaymentMethodWithHttpInfo(companyId, paymentMethodId, modifyPaymentMethodRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify Payment Method Modifies the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <returns>ApiResponse of ModifyPaymentMethodResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<ModifyPaymentMethodResponse> ModifyPaymentMethodWithHttpInfo(int companyId, int paymentMethodId, ModifyPaymentMethodRequest modifyPaymentMethodRequest = default(ModifyPaymentMethodRequest))
        {
            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("paymentMethodId", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            localVarRequestOptions.Data = modifyPaymentMethodRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ModifyPaymentMethodResponse>("/c/{companyId}/settings/payment_method/{paymentMethodId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyPaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify Payment Method Modifies the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyPaymentMethodResponse</returns>
        public async System.Threading.Tasks.Task<ModifyPaymentMethodResponse> ModifyPaymentMethodAsync(int companyId, int paymentMethodId, ModifyPaymentMethodRequest modifyPaymentMethodRequest = default(ModifyPaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ModifyPaymentMethodResponse> localVarResponse = await ModifyPaymentMethodWithHttpInfoAsync(companyId, paymentMethodId, modifyPaymentMethodRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify Payment Method Modifies the specified payment method.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="paymentMethodId">The Referred Payment Method Id.</param>
        /// <param name="modifyPaymentMethodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyPaymentMethodResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<ModifyPaymentMethodResponse>> ModifyPaymentMethodWithHttpInfoAsync(int companyId, int paymentMethodId, ModifyPaymentMethodRequest modifyPaymentMethodRequest = default(ModifyPaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("paymentMethodId", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            localVarRequestOptions.Data = modifyPaymentMethodRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ModifyPaymentMethodResponse>("/c/{companyId}/settings/payment_method/{paymentMethodId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyPaymentMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
