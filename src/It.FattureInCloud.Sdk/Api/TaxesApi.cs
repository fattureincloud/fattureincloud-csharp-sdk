// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ITaxesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TaxesApiEvents Events { get; }

        /// <summary>
        /// Create F24
        /// </summary>
        /// <remarks>
        /// Creates a new F24.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createF24Request">The F24 to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateF24ApiResponse"/>&gt;</returns>
        Task<ICreateF24ApiResponse> CreateF24Async(int companyId, Option<CreateF24Request> createF24Request = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create F24
        /// </summary>
        /// <remarks>
        /// Creates a new F24.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createF24Request">The F24 to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateF24ApiResponse"/>&gt;</returns>
        Task<ICreateF24ApiResponse> CreateF24OrDefaultAsync(int companyId, Option<CreateF24Request> createF24Request = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete F24
        /// </summary>
        /// <remarks>
        /// Removes the specified F24.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteF24ApiResponse"/>&gt;</returns>
        Task<IDeleteF24ApiResponse> DeleteF24Async(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete F24
        /// </summary>
        /// <remarks>
        /// Removes the specified F24.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteF24ApiResponse"/>&gt;</returns>
        Task<IDeleteF24ApiResponse> DeleteF24OrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete F24 Attachment
        /// </summary>
        /// <remarks>
        /// Removes the attachment of the specified F24.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteF24AttachmentApiResponse"/>&gt;</returns>
        Task<IDeleteF24AttachmentApiResponse> DeleteF24AttachmentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete F24 Attachment
        /// </summary>
        /// <remarks>
        /// Removes the attachment of the specified F24.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteF24AttachmentApiResponse"/>&gt;</returns>
        Task<IDeleteF24AttachmentApiResponse> DeleteF24AttachmentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get F24
        /// </summary>
        /// <remarks>
        /// Gets the specified F24.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetF24ApiResponse"/>&gt;</returns>
        Task<IGetF24ApiResponse> GetF24Async(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get F24
        /// </summary>
        /// <remarks>
        /// Gets the specified F24.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetF24ApiResponse"/>&gt;</returns>
        Task<IGetF24ApiResponse> GetF24OrDefaultAsync(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List F24
        /// </summary>
        /// <remarks>
        /// Lists the F24s.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListF24ApiResponse"/>&gt;</returns>
        Task<IListF24ApiResponse> ListF24Async(int companyId, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List F24
        /// </summary>
        /// <remarks>
        /// Lists the F24s.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListF24ApiResponse"/>&gt;</returns>
        Task<IListF24ApiResponse> ListF24OrDefaultAsync(int companyId, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify F24
        /// </summary>
        /// <remarks>
        /// Modifies the specified F24.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyF24Request">The F24 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyF24ApiResponse"/>&gt;</returns>
        Task<IModifyF24ApiResponse> ModifyF24Async(int companyId, int documentId, Option<ModifyF24Request> modifyF24Request = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify F24
        /// </summary>
        /// <remarks>
        /// Modifies the specified F24.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyF24Request">The F24 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyF24ApiResponse"/>&gt;</returns>
        Task<IModifyF24ApiResponse> ModifyF24OrDefaultAsync(int companyId, int documentId, Option<ModifyF24Request> modifyF24Request = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload F24 Attachment
        /// </summary>
        /// <remarks>
        /// Uploads an attachment destined to a F24. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadF24AttachmentApiResponse"/>&gt;</returns>
        Task<IUploadF24AttachmentApiResponse> UploadF24AttachmentAsync(int companyId, Option<string> filename = default, Option<System.IO.Stream> attachment = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload F24 Attachment
        /// </summary>
        /// <remarks>
        /// Uploads an attachment destined to a F24. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadF24AttachmentApiResponse"/>&gt;</returns>
        Task<IUploadF24AttachmentApiResponse> UploadF24AttachmentOrDefaultAsync(int companyId, Option<string> filename = default, Option<System.IO.Stream> attachment = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateF24ApiResponse"/>
    /// </summary>
    public interface ICreateF24ApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.CreateF24Response>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteF24ApiResponse"/>
    /// </summary>
    public interface IDeleteF24ApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteF24AttachmentApiResponse"/>
    /// </summary>
    public interface IDeleteF24AttachmentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetF24ApiResponse"/>
    /// </summary>
    public interface IGetF24ApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetF24Response>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IListF24ApiResponse"/>
    /// </summary>
    public interface IListF24ApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ListF24Response>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IModifyF24ApiResponse"/>
    /// </summary>
    public interface IModifyF24ApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ModifyF24Response>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IUploadF24AttachmentApiResponse"/>
    /// </summary>
    public interface IUploadF24AttachmentApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.UploadF24AttachmentResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TaxesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateF24;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateF24;

        internal void ExecuteOnCreateF24(TaxesApi.CreateF24ApiResponse apiResponse)
        {
            OnCreateF24?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateF24(Exception exception)
        {
            OnErrorCreateF24?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteF24;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteF24;

        internal void ExecuteOnDeleteF24(TaxesApi.DeleteF24ApiResponse apiResponse)
        {
            OnDeleteF24?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteF24(Exception exception)
        {
            OnErrorDeleteF24?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteF24Attachment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteF24Attachment;

        internal void ExecuteOnDeleteF24Attachment(TaxesApi.DeleteF24AttachmentApiResponse apiResponse)
        {
            OnDeleteF24Attachment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteF24Attachment(Exception exception)
        {
            OnErrorDeleteF24Attachment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetF24;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetF24;

        internal void ExecuteOnGetF24(TaxesApi.GetF24ApiResponse apiResponse)
        {
            OnGetF24?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetF24(Exception exception)
        {
            OnErrorGetF24?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnListF24;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorListF24;

        internal void ExecuteOnListF24(TaxesApi.ListF24ApiResponse apiResponse)
        {
            OnListF24?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListF24(Exception exception)
        {
            OnErrorListF24?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnModifyF24;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorModifyF24;

        internal void ExecuteOnModifyF24(TaxesApi.ModifyF24ApiResponse apiResponse)
        {
            OnModifyF24?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorModifyF24(Exception exception)
        {
            OnErrorModifyF24?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUploadF24Attachment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUploadF24Attachment;

        internal void ExecuteOnUploadF24Attachment(TaxesApi.UploadF24AttachmentApiResponse apiResponse)
        {
            OnUploadF24Attachment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUploadF24Attachment(Exception exception)
        {
            OnErrorUploadF24Attachment?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class TaxesApi : ITaxesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<TaxesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public TaxesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaxesApi(ILogger<TaxesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, TaxesApiEvents taxesApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<TaxesApi>();
            HttpClient = httpClient;
            Events = taxesApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatCreateF24(ref int companyId, Option<CreateF24Request> createF24Request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createF24Request"></param>
        /// <returns></returns>
        private void ValidateCreateF24(Option<CreateF24Request> createF24Request)
        {
            if (createF24Request.IsSet && createF24Request.Value == null)
                throw new ArgumentNullException(nameof(createF24Request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createF24Request"></param>
        private void AfterCreateF24DefaultImplementation(ICreateF24ApiResponse apiResponseLocalVar, int companyId, Option<CreateF24Request> createF24Request)
        {
            bool suppressDefaultLog = false;
            AfterCreateF24(ref suppressDefaultLog, apiResponseLocalVar, companyId, createF24Request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createF24Request"></param>
        partial void AfterCreateF24(ref bool suppressDefaultLog, ICreateF24ApiResponse apiResponseLocalVar, int companyId, Option<CreateF24Request> createF24Request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createF24Request"></param>
        private void OnErrorCreateF24DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreateF24Request> createF24Request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateF24(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, createF24Request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createF24Request"></param>
        partial void OnErrorCreateF24(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreateF24Request> createF24Request);

        /// <summary>
        /// Create F24 Creates a new F24.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createF24Request">The F24 to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateF24ApiResponse"/>&gt;</returns>
        public async Task<ICreateF24ApiResponse> CreateF24OrDefaultAsync(int companyId, Option<CreateF24Request> createF24Request = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateF24Async(companyId, createF24Request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create F24 Creates a new F24.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createF24Request">The F24 to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateF24ApiResponse"/>&gt;</returns>
        public async Task<ICreateF24ApiResponse> CreateF24Async(int companyId, Option<CreateF24Request> createF24Request = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateF24(createF24Request);

                FormatCreateF24(ref companyId, createF24Request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/taxes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/taxes");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    if (createF24Request.IsSet)
                        httpRequestMessageLocalVar.Content = (createF24Request.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createF24Request.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreateF24ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateF24ApiResponse>();
                        CreateF24ApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new CreateF24ApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/taxes", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreateF24DefaultImplementation(apiResponseLocalVar, companyId, createF24Request);

                        Events.ExecuteOnCreateF24(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateF24DefaultImplementation(e, "/c/{company_id}/taxes", uriBuilderLocalVar.Path, companyId, createF24Request);
                Events.ExecuteOnErrorCreateF24(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateF24ApiResponse"/>
        /// </summary>
        public partial class CreateF24ApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, ICreateF24ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateF24ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateF24ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateF24ApiResponse(ILogger<CreateF24ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreateF24ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateF24ApiResponse(ILogger<CreateF24ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.CreateF24Response Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.CreateF24Response>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.CreateF24Response result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteF24(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterDeleteF24DefaultImplementation(IDeleteF24ApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteF24(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterDeleteF24(ref bool suppressDefaultLog, IDeleteF24ApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorDeleteF24DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteF24(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorDeleteF24(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Delete F24 Removes the specified F24.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteF24ApiResponse"/>&gt;</returns>
        public async Task<IDeleteF24ApiResponse> DeleteF24OrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteF24Async(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete F24 Removes the specified F24.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteF24ApiResponse"/>&gt;</returns>
        public async Task<IDeleteF24ApiResponse> DeleteF24Async(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteF24(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/taxes/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/taxes/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteF24ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteF24ApiResponse>();
                        DeleteF24ApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteF24ApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/taxes/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteF24DefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnDeleteF24(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteF24DefaultImplementation(e, "/c/{company_id}/taxes/{document_id}", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorDeleteF24(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteF24ApiResponse"/>
        /// </summary>
        public partial class DeleteF24ApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IDeleteF24ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteF24ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteF24ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteF24ApiResponse(ILogger<DeleteF24ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteF24ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteF24ApiResponse(ILogger<DeleteF24ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteF24Attachment(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterDeleteF24AttachmentDefaultImplementation(IDeleteF24AttachmentApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteF24Attachment(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterDeleteF24Attachment(ref bool suppressDefaultLog, IDeleteF24AttachmentApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorDeleteF24AttachmentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteF24Attachment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorDeleteF24Attachment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Delete F24 Attachment Removes the attachment of the specified F24.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteF24AttachmentApiResponse"/>&gt;</returns>
        public async Task<IDeleteF24AttachmentApiResponse> DeleteF24AttachmentOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteF24AttachmentAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete F24 Attachment Removes the attachment of the specified F24.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteF24AttachmentApiResponse"/>&gt;</returns>
        public async Task<IDeleteF24AttachmentApiResponse> DeleteF24AttachmentAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteF24Attachment(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/taxes/{document_id}/attachment"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/taxes/{document_id}/attachment");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteF24AttachmentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteF24AttachmentApiResponse>();
                        DeleteF24AttachmentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteF24AttachmentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/taxes/{document_id}/attachment", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteF24AttachmentDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnDeleteF24Attachment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteF24AttachmentDefaultImplementation(e, "/c/{company_id}/taxes/{document_id}/attachment", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorDeleteF24Attachment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteF24AttachmentApiResponse"/>
        /// </summary>
        public partial class DeleteF24AttachmentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IDeleteF24AttachmentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteF24AttachmentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteF24AttachmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteF24AttachmentApiResponse(ILogger<DeleteF24AttachmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteF24AttachmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteF24AttachmentApiResponse(ILogger<DeleteF24AttachmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetF24(ref int companyId, ref int documentId, ref Option<string> fields, ref Option<string> fieldset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <returns></returns>
        private void ValidateGetF24(Option<string> fields, Option<string> fieldset)
        {
            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields));

            if (fieldset.IsSet && fieldset.Value == null)
                throw new ArgumentNullException(nameof(fieldset));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        private void AfterGetF24DefaultImplementation(IGetF24ApiResponse apiResponseLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset)
        {
            bool suppressDefaultLog = false;
            AfterGetF24(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId, fields, fieldset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        partial void AfterGetF24(ref bool suppressDefaultLog, IGetF24ApiResponse apiResponseLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        private void OnErrorGetF24DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetF24(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId, fields, fieldset);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        partial void OnErrorGetF24(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset);

        /// <summary>
        /// Get F24 Gets the specified F24.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetF24ApiResponse"/>&gt;</returns>
        public async Task<IGetF24ApiResponse> GetF24OrDefaultAsync(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetF24Async(companyId, documentId, fields, fieldset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get F24 Gets the specified F24.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetF24ApiResponse"/>&gt;</returns>
        public async Task<IGetF24ApiResponse> GetF24Async(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetF24(fields, fieldset);

                FormatGetF24(ref companyId, ref documentId, ref fields, ref fieldset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/taxes/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/taxes/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (fields.IsSet)
                        parseQueryStringLocalVar["fields"] = ClientUtils.ParameterToString(fields.Value);

                    if (fieldset.IsSet)
                        parseQueryStringLocalVar["fieldset"] = ClientUtils.ParameterToString(fieldset.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetF24ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetF24ApiResponse>();
                        GetF24ApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetF24ApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/taxes/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetF24DefaultImplementation(apiResponseLocalVar, companyId, documentId, fields, fieldset);

                        Events.ExecuteOnGetF24(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetF24DefaultImplementation(e, "/c/{company_id}/taxes/{document_id}", uriBuilderLocalVar.Path, companyId, documentId, fields, fieldset);
                Events.ExecuteOnErrorGetF24(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetF24ApiResponse"/>
        /// </summary>
        public partial class GetF24ApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetF24ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetF24ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetF24ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetF24ApiResponse(ILogger<GetF24ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetF24ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetF24ApiResponse(ILogger<GetF24ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetF24Response Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetF24Response>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetF24Response result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListF24(ref int companyId, ref Option<string> fields, ref Option<string> fieldset, ref Option<string> sort, ref Option<int> page, ref Option<int> perPage, ref Option<string> q);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="q"></param>
        /// <returns></returns>
        private void ValidateListF24(Option<string> fields, Option<string> fieldset, Option<string> sort, Option<string> q)
        {
            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields));

            if (fieldset.IsSet && fieldset.Value == null)
                throw new ArgumentNullException(nameof(fieldset));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (q.IsSet && q.Value == null)
                throw new ArgumentNullException(nameof(q));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        private void AfterListF24DefaultImplementation(IListF24ApiResponse apiResponseLocalVar, int companyId, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q)
        {
            bool suppressDefaultLog = false;
            AfterListF24(ref suppressDefaultLog, apiResponseLocalVar, companyId, fields, fieldset, sort, page, perPage, q);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        partial void AfterListF24(ref bool suppressDefaultLog, IListF24ApiResponse apiResponseLocalVar, int companyId, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        private void OnErrorListF24DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListF24(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, fields, fieldset, sort, page, perPage, q);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        partial void OnErrorListF24(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q);

        /// <summary>
        /// List F24 Lists the F24s.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListF24ApiResponse"/>&gt;</returns>
        public async Task<IListF24ApiResponse> ListF24OrDefaultAsync(int companyId, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListF24Async(companyId, fields, fieldset, sort, page, perPage, q, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List F24 Lists the F24s.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListF24ApiResponse"/>&gt;</returns>
        public async Task<IListF24ApiResponse> ListF24Async(int companyId, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListF24(fields, fieldset, sort, q);

                FormatListF24(ref companyId, ref fields, ref fieldset, ref sort, ref page, ref perPage, ref q);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/taxes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/taxes");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (fields.IsSet)
                        parseQueryStringLocalVar["fields"] = ClientUtils.ParameterToString(fields.Value);

                    if (fieldset.IsSet)
                        parseQueryStringLocalVar["fieldset"] = ClientUtils.ParameterToString(fieldset.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (perPage.IsSet)
                        parseQueryStringLocalVar["per_page"] = ClientUtils.ParameterToString(perPage.Value);

                    if (q.IsSet)
                        parseQueryStringLocalVar["q"] = ClientUtils.ParameterToString(q.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ListF24ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListF24ApiResponse>();
                        ListF24ApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ListF24ApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/taxes", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterListF24DefaultImplementation(apiResponseLocalVar, companyId, fields, fieldset, sort, page, perPage, q);

                        Events.ExecuteOnListF24(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListF24DefaultImplementation(e, "/c/{company_id}/taxes", uriBuilderLocalVar.Path, companyId, fields, fieldset, sort, page, perPage, q);
                Events.ExecuteOnErrorListF24(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListF24ApiResponse"/>
        /// </summary>
        public partial class ListF24ApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IListF24ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListF24ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListF24ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListF24ApiResponse(ILogger<ListF24ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ListF24ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListF24ApiResponse(ILogger<ListF24ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ListF24Response Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ListF24Response>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ListF24Response result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatModifyF24(ref int companyId, ref int documentId, Option<ModifyF24Request> modifyF24Request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modifyF24Request"></param>
        /// <returns></returns>
        private void ValidateModifyF24(Option<ModifyF24Request> modifyF24Request)
        {
            if (modifyF24Request.IsSet && modifyF24Request.Value == null)
                throw new ArgumentNullException(nameof(modifyF24Request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyF24Request"></param>
        private void AfterModifyF24DefaultImplementation(IModifyF24ApiResponse apiResponseLocalVar, int companyId, int documentId, Option<ModifyF24Request> modifyF24Request)
        {
            bool suppressDefaultLog = false;
            AfterModifyF24(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId, modifyF24Request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyF24Request"></param>
        partial void AfterModifyF24(ref bool suppressDefaultLog, IModifyF24ApiResponse apiResponseLocalVar, int companyId, int documentId, Option<ModifyF24Request> modifyF24Request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyF24Request"></param>
        private void OnErrorModifyF24DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<ModifyF24Request> modifyF24Request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorModifyF24(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId, modifyF24Request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyF24Request"></param>
        partial void OnErrorModifyF24(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<ModifyF24Request> modifyF24Request);

        /// <summary>
        /// Modify F24 Modifies the specified F24.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyF24Request">The F24 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyF24ApiResponse"/>&gt;</returns>
        public async Task<IModifyF24ApiResponse> ModifyF24OrDefaultAsync(int companyId, int documentId, Option<ModifyF24Request> modifyF24Request = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ModifyF24Async(companyId, documentId, modifyF24Request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Modify F24 Modifies the specified F24.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyF24Request">The F24 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyF24ApiResponse"/>&gt;</returns>
        public async Task<IModifyF24ApiResponse> ModifyF24Async(int companyId, int documentId, Option<ModifyF24Request> modifyF24Request = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateModifyF24(modifyF24Request);

                FormatModifyF24(ref companyId, ref documentId, modifyF24Request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/taxes/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/taxes/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    if (modifyF24Request.IsSet)
                        httpRequestMessageLocalVar.Content = (modifyF24Request.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modifyF24Request.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ModifyF24ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ModifyF24ApiResponse>();
                        ModifyF24ApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ModifyF24ApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/taxes/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterModifyF24DefaultImplementation(apiResponseLocalVar, companyId, documentId, modifyF24Request);

                        Events.ExecuteOnModifyF24(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorModifyF24DefaultImplementation(e, "/c/{company_id}/taxes/{document_id}", uriBuilderLocalVar.Path, companyId, documentId, modifyF24Request);
                Events.ExecuteOnErrorModifyF24(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ModifyF24ApiResponse"/>
        /// </summary>
        public partial class ModifyF24ApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IModifyF24ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ModifyF24ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ModifyF24ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyF24ApiResponse(ILogger<ModifyF24ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ModifyF24ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyF24ApiResponse(ILogger<ModifyF24ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ModifyF24Response Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ModifyF24Response>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ModifyF24Response result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUploadF24Attachment(ref int companyId, ref Option<string> filename, ref Option<System.IO.Stream> attachment);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="attachment"></param>
        /// <returns></returns>
        private void ValidateUploadF24Attachment(Option<System.IO.Stream> attachment)
        {
            if (attachment.IsSet && attachment.Value == null)
                throw new ArgumentNullException(nameof(attachment));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="filename"></param>
        /// <param name="attachment"></param>
        private void AfterUploadF24AttachmentDefaultImplementation(IUploadF24AttachmentApiResponse apiResponseLocalVar, int companyId, Option<string> filename, Option<System.IO.Stream> attachment)
        {
            bool suppressDefaultLog = false;
            AfterUploadF24Attachment(ref suppressDefaultLog, apiResponseLocalVar, companyId, filename, attachment);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="filename"></param>
        /// <param name="attachment"></param>
        partial void AfterUploadF24Attachment(ref bool suppressDefaultLog, IUploadF24AttachmentApiResponse apiResponseLocalVar, int companyId, Option<string> filename, Option<System.IO.Stream> attachment);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="filename"></param>
        /// <param name="attachment"></param>
        private void OnErrorUploadF24AttachmentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<string> filename, Option<System.IO.Stream> attachment)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUploadF24Attachment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, filename, attachment);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="filename"></param>
        /// <param name="attachment"></param>
        partial void OnErrorUploadF24Attachment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<string> filename, Option<System.IO.Stream> attachment);

        /// <summary>
        /// Upload F24 Attachment Uploads an attachment destined to a F24. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadF24AttachmentApiResponse"/>&gt;</returns>
        public async Task<IUploadF24AttachmentApiResponse> UploadF24AttachmentOrDefaultAsync(int companyId, Option<string> filename = default, Option<System.IO.Stream> attachment = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UploadF24AttachmentAsync(companyId, filename, attachment, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Upload F24 Attachment Uploads an attachment destined to a F24. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadF24AttachmentApiResponse"/>&gt;</returns>
        public async Task<IUploadF24AttachmentApiResponse> UploadF24AttachmentAsync(int companyId, Option<string> filename = default, Option<System.IO.Stream> attachment = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUploadF24Attachment(attachment);

                FormatUploadF24Attachment(ref companyId, ref filename, ref attachment);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/taxes/attachment"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/taxes/attachment");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string, string>> formParameterLocalVars = new List<KeyValuePair<string, string>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (filename.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string, string>("filename", ClientUtils.ParameterToString(filename.Value)));

                    if (attachment.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(attachment.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<UploadF24AttachmentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UploadF24AttachmentApiResponse>();
                        UploadF24AttachmentApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new UploadF24AttachmentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/taxes/attachment", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterUploadF24AttachmentDefaultImplementation(apiResponseLocalVar, companyId, filename, attachment);

                        Events.ExecuteOnUploadF24Attachment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUploadF24AttachmentDefaultImplementation(e, "/c/{company_id}/taxes/attachment", uriBuilderLocalVar.Path, companyId, filename, attachment);
                Events.ExecuteOnErrorUploadF24Attachment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UploadF24AttachmentApiResponse"/>
        /// </summary>
        public partial class UploadF24AttachmentApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IUploadF24AttachmentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UploadF24AttachmentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UploadF24AttachmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadF24AttachmentApiResponse(ILogger<UploadF24AttachmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="UploadF24AttachmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadF24AttachmentApiResponse(ILogger<UploadF24AttachmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.UploadF24AttachmentResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.UploadF24AttachmentResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.UploadF24AttachmentResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
