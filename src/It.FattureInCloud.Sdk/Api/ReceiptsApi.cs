// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IReceiptsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ReceiptsApiEvents Events { get; }

        /// <summary>
        /// Create Receipt
        /// </summary>
        /// <remarks>
        /// Creates a new receipt.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceiptRequest">The Receipt to create. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateReceiptApiResponse"/>&gt;</returns>
        Task<ICreateReceiptApiResponse> CreateReceiptAsync(int companyId, Option<CreateReceiptRequest> createReceiptRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Receipt
        /// </summary>
        /// <remarks>
        /// Creates a new receipt.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceiptRequest">The Receipt to create. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateReceiptApiResponse"/>&gt;</returns>
        Task<ICreateReceiptApiResponse> CreateReceiptOrDefaultAsync(int companyId, Option<CreateReceiptRequest> createReceiptRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Receipt
        /// </summary>
        /// <remarks>
        /// Deletes the specified receipt.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReceiptApiResponse"/>&gt;</returns>
        Task<IDeleteReceiptApiResponse> DeleteReceiptAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Receipt
        /// </summary>
        /// <remarks>
        /// Deletes the specified receipt.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReceiptApiResponse"/>&gt;</returns>
        Task<IDeleteReceiptApiResponse> DeleteReceiptOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Receipt
        /// </summary>
        /// <remarks>
        /// Gets the specified receipt.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceiptApiResponse"/>&gt;</returns>
        Task<IGetReceiptApiResponse> GetReceiptAsync(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Receipt
        /// </summary>
        /// <remarks>
        /// Gets the specified receipt.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceiptApiResponse"/>&gt;</returns>
        Task<IGetReceiptApiResponse> GetReceiptOrDefaultAsync(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Receipt Pre-Create Info
        /// </summary>
        /// <remarks>
        /// Retrieves the information useful while creating a new receipt.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceiptPreCreateInfoApiResponse"/>&gt;</returns>
        Task<IGetReceiptPreCreateInfoApiResponse> GetReceiptPreCreateInfoAsync(int companyId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Receipt Pre-Create Info
        /// </summary>
        /// <remarks>
        /// Retrieves the information useful while creating a new receipt.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceiptPreCreateInfoApiResponse"/>&gt;</returns>
        Task<IGetReceiptPreCreateInfoApiResponse> GetReceiptPreCreateInfoOrDefaultAsync(int companyId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Receipts Monthly Totals
        /// </summary>
        /// <remarks>
        /// Returns the monthly totals by year and receipt type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">Receipt Type</param>
        /// <param name="year">Year for which you want monthly totals</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceiptsMonthlyTotalsApiResponse"/>&gt;</returns>
        Task<IGetReceiptsMonthlyTotalsApiResponse> GetReceiptsMonthlyTotalsAsync(int companyId, string type, string year, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Receipts Monthly Totals
        /// </summary>
        /// <remarks>
        /// Returns the monthly totals by year and receipt type.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">Receipt Type</param>
        /// <param name="year">Year for which you want monthly totals</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceiptsMonthlyTotalsApiResponse"/>&gt;</returns>
        Task<IGetReceiptsMonthlyTotalsApiResponse> GetReceiptsMonthlyTotalsOrDefaultAsync(int companyId, string type, string year, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Receipts
        /// </summary>
        /// <remarks>
        /// Lists the receipts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListReceiptsApiResponse"/>&gt;</returns>
        Task<IListReceiptsApiResponse> ListReceiptsAsync(int companyId, Option<string> fields = default, Option<string> fieldset = default, Option<int> page = default, Option<int> perPage = default, Option<string> sort = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Receipts
        /// </summary>
        /// <remarks>
        /// Lists the receipts.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListReceiptsApiResponse"/>&gt;</returns>
        Task<IListReceiptsApiResponse> ListReceiptsOrDefaultAsync(int companyId, Option<string> fields = default, Option<string> fieldset = default, Option<int> page = default, Option<int> perPage = default, Option<string> sort = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Receipt
        /// </summary>
        /// <remarks>
        /// Modifies the specified receipt.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceiptRequest">Modified receipt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyReceiptApiResponse"/>&gt;</returns>
        Task<IModifyReceiptApiResponse> ModifyReceiptAsync(int companyId, int documentId, Option<ModifyReceiptRequest> modifyReceiptRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Receipt
        /// </summary>
        /// <remarks>
        /// Modifies the specified receipt.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceiptRequest">Modified receipt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyReceiptApiResponse"/>&gt;</returns>
        Task<IModifyReceiptApiResponse> ModifyReceiptOrDefaultAsync(int companyId, int documentId, Option<ModifyReceiptRequest> modifyReceiptRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateReceiptApiResponse"/>
    /// </summary>
    public interface ICreateReceiptApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.CreateReceiptResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteReceiptApiResponse"/>
    /// </summary>
    public interface IDeleteReceiptApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetReceiptApiResponse"/>
    /// </summary>
    public interface IGetReceiptApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetReceiptResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetReceiptPreCreateInfoApiResponse"/>
    /// </summary>
    public interface IGetReceiptPreCreateInfoApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetReceiptPreCreateInfoResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetReceiptsMonthlyTotalsApiResponse"/>
    /// </summary>
    public interface IGetReceiptsMonthlyTotalsApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetReceiptsMonthlyTotalsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IListReceiptsApiResponse"/>
    /// </summary>
    public interface IListReceiptsApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ListReceiptsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IModifyReceiptApiResponse"/>
    /// </summary>
    public interface IModifyReceiptApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ModifyReceiptResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ReceiptsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateReceipt;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateReceipt;

        internal void ExecuteOnCreateReceipt(ReceiptsApi.CreateReceiptApiResponse apiResponse)
        {
            OnCreateReceipt?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateReceipt(Exception exception)
        {
            OnErrorCreateReceipt?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteReceipt;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteReceipt;

        internal void ExecuteOnDeleteReceipt(ReceiptsApi.DeleteReceiptApiResponse apiResponse)
        {
            OnDeleteReceipt?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteReceipt(Exception exception)
        {
            OnErrorDeleteReceipt?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetReceipt;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetReceipt;

        internal void ExecuteOnGetReceipt(ReceiptsApi.GetReceiptApiResponse apiResponse)
        {
            OnGetReceipt?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetReceipt(Exception exception)
        {
            OnErrorGetReceipt?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetReceiptPreCreateInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetReceiptPreCreateInfo;

        internal void ExecuteOnGetReceiptPreCreateInfo(ReceiptsApi.GetReceiptPreCreateInfoApiResponse apiResponse)
        {
            OnGetReceiptPreCreateInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetReceiptPreCreateInfo(Exception exception)
        {
            OnErrorGetReceiptPreCreateInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetReceiptsMonthlyTotals;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetReceiptsMonthlyTotals;

        internal void ExecuteOnGetReceiptsMonthlyTotals(ReceiptsApi.GetReceiptsMonthlyTotalsApiResponse apiResponse)
        {
            OnGetReceiptsMonthlyTotals?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetReceiptsMonthlyTotals(Exception exception)
        {
            OnErrorGetReceiptsMonthlyTotals?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnListReceipts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorListReceipts;

        internal void ExecuteOnListReceipts(ReceiptsApi.ListReceiptsApiResponse apiResponse)
        {
            OnListReceipts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListReceipts(Exception exception)
        {
            OnErrorListReceipts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnModifyReceipt;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorModifyReceipt;

        internal void ExecuteOnModifyReceipt(ReceiptsApi.ModifyReceiptApiResponse apiResponse)
        {
            OnModifyReceipt?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorModifyReceipt(Exception exception)
        {
            OnErrorModifyReceipt?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ReceiptsApi : IReceiptsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ReceiptsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ReceiptsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReceiptsApi(ILogger<ReceiptsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ReceiptsApiEvents receiptsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ReceiptsApi>();
            HttpClient = httpClient;
            Events = receiptsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatCreateReceipt(ref int companyId, Option<CreateReceiptRequest> createReceiptRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createReceiptRequest"></param>
        /// <returns></returns>
        private void ValidateCreateReceipt(Option<CreateReceiptRequest> createReceiptRequest)
        {
            if (createReceiptRequest.IsSet && createReceiptRequest.Value == null)
                throw new ArgumentNullException(nameof(createReceiptRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createReceiptRequest"></param>
        private void AfterCreateReceiptDefaultImplementation(ICreateReceiptApiResponse apiResponseLocalVar, int companyId, Option<CreateReceiptRequest> createReceiptRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateReceipt(ref suppressDefaultLog, apiResponseLocalVar, companyId, createReceiptRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createReceiptRequest"></param>
        partial void AfterCreateReceipt(ref bool suppressDefaultLog, ICreateReceiptApiResponse apiResponseLocalVar, int companyId, Option<CreateReceiptRequest> createReceiptRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createReceiptRequest"></param>
        private void OnErrorCreateReceiptDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreateReceiptRequest> createReceiptRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateReceipt(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, createReceiptRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createReceiptRequest"></param>
        partial void OnErrorCreateReceipt(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreateReceiptRequest> createReceiptRequest);

        /// <summary>
        /// Create Receipt Creates a new receipt.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceiptRequest">The Receipt to create. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateReceiptApiResponse"/>&gt;</returns>
        public async Task<ICreateReceiptApiResponse> CreateReceiptOrDefaultAsync(int companyId, Option<CreateReceiptRequest> createReceiptRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateReceiptAsync(companyId, createReceiptRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Receipt Creates a new receipt.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceiptRequest">The Receipt to create. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateReceiptApiResponse"/>&gt;</returns>
        public async Task<ICreateReceiptApiResponse> CreateReceiptAsync(int companyId, Option<CreateReceiptRequest> createReceiptRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateReceipt(createReceiptRequest);

                FormatCreateReceipt(ref companyId, createReceiptRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/receipts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/receipts");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    if (createReceiptRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createReceiptRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createReceiptRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreateReceiptApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateReceiptApiResponse>();
                        CreateReceiptApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new CreateReceiptApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/receipts", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreateReceiptDefaultImplementation(apiResponseLocalVar, companyId, createReceiptRequest);

                        Events.ExecuteOnCreateReceipt(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateReceiptDefaultImplementation(e, "/c/{company_id}/receipts", uriBuilderLocalVar.Path, companyId, createReceiptRequest);
                Events.ExecuteOnErrorCreateReceipt(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateReceiptApiResponse"/>
        /// </summary>
        public partial class CreateReceiptApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, ICreateReceiptApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateReceiptApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateReceiptApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateReceiptApiResponse(ILogger<CreateReceiptApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreateReceiptApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateReceiptApiResponse(ILogger<CreateReceiptApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.CreateReceiptResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.CreateReceiptResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.CreateReceiptResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteReceipt(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterDeleteReceiptDefaultImplementation(IDeleteReceiptApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteReceipt(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterDeleteReceipt(ref bool suppressDefaultLog, IDeleteReceiptApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorDeleteReceiptDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteReceipt(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorDeleteReceipt(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Delete Receipt Deletes the specified receipt.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReceiptApiResponse"/>&gt;</returns>
        public async Task<IDeleteReceiptApiResponse> DeleteReceiptOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteReceiptAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Receipt Deletes the specified receipt.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReceiptApiResponse"/>&gt;</returns>
        public async Task<IDeleteReceiptApiResponse> DeleteReceiptAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteReceipt(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/receipts/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/receipts/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteReceiptApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteReceiptApiResponse>();
                        DeleteReceiptApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteReceiptApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/receipts/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteReceiptDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnDeleteReceipt(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteReceiptDefaultImplementation(e, "/c/{company_id}/receipts/{document_id}", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorDeleteReceipt(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteReceiptApiResponse"/>
        /// </summary>
        public partial class DeleteReceiptApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IDeleteReceiptApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteReceiptApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteReceiptApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteReceiptApiResponse(ILogger<DeleteReceiptApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteReceiptApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteReceiptApiResponse(ILogger<DeleteReceiptApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetReceipt(ref int companyId, ref int documentId, ref Option<string> fields, ref Option<string> fieldset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <returns></returns>
        private void ValidateGetReceipt(Option<string> fields, Option<string> fieldset)
        {
            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields));

            if (fieldset.IsSet && fieldset.Value == null)
                throw new ArgumentNullException(nameof(fieldset));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        private void AfterGetReceiptDefaultImplementation(IGetReceiptApiResponse apiResponseLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset)
        {
            bool suppressDefaultLog = false;
            AfterGetReceipt(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId, fields, fieldset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        partial void AfterGetReceipt(ref bool suppressDefaultLog, IGetReceiptApiResponse apiResponseLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        private void OnErrorGetReceiptDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetReceipt(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId, fields, fieldset);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        partial void OnErrorGetReceipt(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<string> fields, Option<string> fieldset);

        /// <summary>
        /// Get Receipt Gets the specified receipt.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceiptApiResponse"/>&gt;</returns>
        public async Task<IGetReceiptApiResponse> GetReceiptOrDefaultAsync(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetReceiptAsync(companyId, documentId, fields, fieldset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Receipt Gets the specified receipt.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceiptApiResponse"/>&gt;</returns>
        public async Task<IGetReceiptApiResponse> GetReceiptAsync(int companyId, int documentId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetReceipt(fields, fieldset);

                FormatGetReceipt(ref companyId, ref documentId, ref fields, ref fieldset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/receipts/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/receipts/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (fields.IsSet)
                        parseQueryStringLocalVar["fields"] = ClientUtils.ParameterToString(fields.Value);

                    if (fieldset.IsSet)
                        parseQueryStringLocalVar["fieldset"] = ClientUtils.ParameterToString(fieldset.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetReceiptApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetReceiptApiResponse>();
                        GetReceiptApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetReceiptApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/receipts/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetReceiptDefaultImplementation(apiResponseLocalVar, companyId, documentId, fields, fieldset);

                        Events.ExecuteOnGetReceipt(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetReceiptDefaultImplementation(e, "/c/{company_id}/receipts/{document_id}", uriBuilderLocalVar.Path, companyId, documentId, fields, fieldset);
                Events.ExecuteOnErrorGetReceipt(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetReceiptApiResponse"/>
        /// </summary>
        public partial class GetReceiptApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetReceiptApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetReceiptApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetReceiptApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetReceiptApiResponse(ILogger<GetReceiptApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetReceiptApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetReceiptApiResponse(ILogger<GetReceiptApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetReceiptResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetReceiptResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetReceiptResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetReceiptPreCreateInfo(ref int companyId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        private void AfterGetReceiptPreCreateInfoDefaultImplementation(IGetReceiptPreCreateInfoApiResponse apiResponseLocalVar, int companyId)
        {
            bool suppressDefaultLog = false;
            AfterGetReceiptPreCreateInfo(ref suppressDefaultLog, apiResponseLocalVar, companyId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        partial void AfterGetReceiptPreCreateInfo(ref bool suppressDefaultLog, IGetReceiptPreCreateInfoApiResponse apiResponseLocalVar, int companyId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        private void OnErrorGetReceiptPreCreateInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetReceiptPreCreateInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        partial void OnErrorGetReceiptPreCreateInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId);

        /// <summary>
        /// Get Receipt Pre-Create Info Retrieves the information useful while creating a new receipt.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceiptPreCreateInfoApiResponse"/>&gt;</returns>
        public async Task<IGetReceiptPreCreateInfoApiResponse> GetReceiptPreCreateInfoOrDefaultAsync(int companyId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetReceiptPreCreateInfoAsync(companyId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Receipt Pre-Create Info Retrieves the information useful while creating a new receipt.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceiptPreCreateInfoApiResponse"/>&gt;</returns>
        public async Task<IGetReceiptPreCreateInfoApiResponse> GetReceiptPreCreateInfoAsync(int companyId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetReceiptPreCreateInfo(ref companyId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/receipts/info"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/receipts/info");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetReceiptPreCreateInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetReceiptPreCreateInfoApiResponse>();
                        GetReceiptPreCreateInfoApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetReceiptPreCreateInfoApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/receipts/info", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetReceiptPreCreateInfoDefaultImplementation(apiResponseLocalVar, companyId);

                        Events.ExecuteOnGetReceiptPreCreateInfo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetReceiptPreCreateInfoDefaultImplementation(e, "/c/{company_id}/receipts/info", uriBuilderLocalVar.Path, companyId);
                Events.ExecuteOnErrorGetReceiptPreCreateInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetReceiptPreCreateInfoApiResponse"/>
        /// </summary>
        public partial class GetReceiptPreCreateInfoApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetReceiptPreCreateInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetReceiptPreCreateInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetReceiptPreCreateInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetReceiptPreCreateInfoApiResponse(ILogger<GetReceiptPreCreateInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetReceiptPreCreateInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetReceiptPreCreateInfoApiResponse(ILogger<GetReceiptPreCreateInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetReceiptPreCreateInfoResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetReceiptPreCreateInfoResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetReceiptPreCreateInfoResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetReceiptsMonthlyTotals(ref int companyId, ref string type, ref string year);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="type"></param>
        /// <param name="year"></param>
        /// <returns></returns>
        private void ValidateGetReceiptsMonthlyTotals(string type, string year)
        {
            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (year == null)
                throw new ArgumentNullException(nameof(year));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        /// <param name="year"></param>
        private void AfterGetReceiptsMonthlyTotalsDefaultImplementation(IGetReceiptsMonthlyTotalsApiResponse apiResponseLocalVar, int companyId, string type, string year)
        {
            bool suppressDefaultLog = false;
            AfterGetReceiptsMonthlyTotals(ref suppressDefaultLog, apiResponseLocalVar, companyId, type, year);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        /// <param name="year"></param>
        partial void AfterGetReceiptsMonthlyTotals(ref bool suppressDefaultLog, IGetReceiptsMonthlyTotalsApiResponse apiResponseLocalVar, int companyId, string type, string year);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        /// <param name="year"></param>
        private void OnErrorGetReceiptsMonthlyTotalsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string type, string year)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetReceiptsMonthlyTotals(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, type, year);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        /// <param name="year"></param>
        partial void OnErrorGetReceiptsMonthlyTotals(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, string type, string year);

        /// <summary>
        /// Get Receipts Monthly Totals Returns the monthly totals by year and receipt type.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">Receipt Type</param>
        /// <param name="year">Year for which you want monthly totals</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceiptsMonthlyTotalsApiResponse"/>&gt;</returns>
        public async Task<IGetReceiptsMonthlyTotalsApiResponse> GetReceiptsMonthlyTotalsOrDefaultAsync(int companyId, string type, string year, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetReceiptsMonthlyTotalsAsync(companyId, type, year, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Receipts Monthly Totals Returns the monthly totals by year and receipt type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">Receipt Type</param>
        /// <param name="year">Year for which you want monthly totals</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReceiptsMonthlyTotalsApiResponse"/>&gt;</returns>
        public async Task<IGetReceiptsMonthlyTotalsApiResponse> GetReceiptsMonthlyTotalsAsync(int companyId, string type, string year, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetReceiptsMonthlyTotals(type, year);

                FormatGetReceiptsMonthlyTotals(ref companyId, ref type, ref year);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/receipts/monthly_totals"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/receipts/monthly_totals");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type);
                    parseQueryStringLocalVar["year"] = ClientUtils.ParameterToString(year);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetReceiptsMonthlyTotalsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetReceiptsMonthlyTotalsApiResponse>();
                        GetReceiptsMonthlyTotalsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetReceiptsMonthlyTotalsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/receipts/monthly_totals", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetReceiptsMonthlyTotalsDefaultImplementation(apiResponseLocalVar, companyId, type, year);

                        Events.ExecuteOnGetReceiptsMonthlyTotals(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetReceiptsMonthlyTotalsDefaultImplementation(e, "/c/{company_id}/receipts/monthly_totals", uriBuilderLocalVar.Path, companyId, type, year);
                Events.ExecuteOnErrorGetReceiptsMonthlyTotals(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetReceiptsMonthlyTotalsApiResponse"/>
        /// </summary>
        public partial class GetReceiptsMonthlyTotalsApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetReceiptsMonthlyTotalsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetReceiptsMonthlyTotalsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetReceiptsMonthlyTotalsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetReceiptsMonthlyTotalsApiResponse(ILogger<GetReceiptsMonthlyTotalsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetReceiptsMonthlyTotalsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetReceiptsMonthlyTotalsApiResponse(ILogger<GetReceiptsMonthlyTotalsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetReceiptsMonthlyTotalsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetReceiptsMonthlyTotalsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetReceiptsMonthlyTotalsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListReceipts(ref int companyId, ref Option<string> fields, ref Option<string> fieldset, ref Option<int> page, ref Option<int> perPage, ref Option<string> sort, ref Option<string> q);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="q"></param>
        /// <returns></returns>
        private void ValidateListReceipts(Option<string> fields, Option<string> fieldset, Option<string> sort, Option<string> q)
        {
            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields));

            if (fieldset.IsSet && fieldset.Value == null)
                throw new ArgumentNullException(nameof(fieldset));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (q.IsSet && q.Value == null)
                throw new ArgumentNullException(nameof(q));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="sort"></param>
        /// <param name="q"></param>
        private void AfterListReceiptsDefaultImplementation(IListReceiptsApiResponse apiResponseLocalVar, int companyId, Option<string> fields, Option<string> fieldset, Option<int> page, Option<int> perPage, Option<string> sort, Option<string> q)
        {
            bool suppressDefaultLog = false;
            AfterListReceipts(ref suppressDefaultLog, apiResponseLocalVar, companyId, fields, fieldset, page, perPage, sort, q);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="sort"></param>
        /// <param name="q"></param>
        partial void AfterListReceipts(ref bool suppressDefaultLog, IListReceiptsApiResponse apiResponseLocalVar, int companyId, Option<string> fields, Option<string> fieldset, Option<int> page, Option<int> perPage, Option<string> sort, Option<string> q);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="sort"></param>
        /// <param name="q"></param>
        private void OnErrorListReceiptsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<string> fields, Option<string> fieldset, Option<int> page, Option<int> perPage, Option<string> sort, Option<string> q)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListReceipts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, fields, fieldset, page, perPage, sort, q);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="sort"></param>
        /// <param name="q"></param>
        partial void OnErrorListReceipts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<string> fields, Option<string> fieldset, Option<int> page, Option<int> perPage, Option<string> sort, Option<string> q);

        /// <summary>
        /// List Receipts Lists the receipts.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListReceiptsApiResponse"/>&gt;</returns>
        public async Task<IListReceiptsApiResponse> ListReceiptsOrDefaultAsync(int companyId, Option<string> fields = default, Option<string> fieldset = default, Option<int> page = default, Option<int> perPage = default, Option<string> sort = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListReceiptsAsync(companyId, fields, fieldset, page, perPage, sort, q, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Receipts Lists the receipts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListReceiptsApiResponse"/>&gt;</returns>
        public async Task<IListReceiptsApiResponse> ListReceiptsAsync(int companyId, Option<string> fields = default, Option<string> fieldset = default, Option<int> page = default, Option<int> perPage = default, Option<string> sort = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListReceipts(fields, fieldset, sort, q);

                FormatListReceipts(ref companyId, ref fields, ref fieldset, ref page, ref perPage, ref sort, ref q);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/receipts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/receipts");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (fields.IsSet)
                        parseQueryStringLocalVar["fields"] = ClientUtils.ParameterToString(fields.Value);

                    if (fieldset.IsSet)
                        parseQueryStringLocalVar["fieldset"] = ClientUtils.ParameterToString(fieldset.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (perPage.IsSet)
                        parseQueryStringLocalVar["per_page"] = ClientUtils.ParameterToString(perPage.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (q.IsSet)
                        parseQueryStringLocalVar["q"] = ClientUtils.ParameterToString(q.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ListReceiptsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListReceiptsApiResponse>();
                        ListReceiptsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ListReceiptsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/receipts", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterListReceiptsDefaultImplementation(apiResponseLocalVar, companyId, fields, fieldset, page, perPage, sort, q);

                        Events.ExecuteOnListReceipts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListReceiptsDefaultImplementation(e, "/c/{company_id}/receipts", uriBuilderLocalVar.Path, companyId, fields, fieldset, page, perPage, sort, q);
                Events.ExecuteOnErrorListReceipts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListReceiptsApiResponse"/>
        /// </summary>
        public partial class ListReceiptsApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IListReceiptsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListReceiptsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListReceiptsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListReceiptsApiResponse(ILogger<ListReceiptsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ListReceiptsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListReceiptsApiResponse(ILogger<ListReceiptsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ListReceiptsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ListReceiptsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ListReceiptsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatModifyReceipt(ref int companyId, ref int documentId, Option<ModifyReceiptRequest> modifyReceiptRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modifyReceiptRequest"></param>
        /// <returns></returns>
        private void ValidateModifyReceipt(Option<ModifyReceiptRequest> modifyReceiptRequest)
        {
            if (modifyReceiptRequest.IsSet && modifyReceiptRequest.Value == null)
                throw new ArgumentNullException(nameof(modifyReceiptRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyReceiptRequest"></param>
        private void AfterModifyReceiptDefaultImplementation(IModifyReceiptApiResponse apiResponseLocalVar, int companyId, int documentId, Option<ModifyReceiptRequest> modifyReceiptRequest)
        {
            bool suppressDefaultLog = false;
            AfterModifyReceipt(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId, modifyReceiptRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyReceiptRequest"></param>
        partial void AfterModifyReceipt(ref bool suppressDefaultLog, IModifyReceiptApiResponse apiResponseLocalVar, int companyId, int documentId, Option<ModifyReceiptRequest> modifyReceiptRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyReceiptRequest"></param>
        private void OnErrorModifyReceiptDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<ModifyReceiptRequest> modifyReceiptRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorModifyReceipt(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId, modifyReceiptRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="modifyReceiptRequest"></param>
        partial void OnErrorModifyReceipt(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<ModifyReceiptRequest> modifyReceiptRequest);

        /// <summary>
        /// Modify Receipt Modifies the specified receipt.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceiptRequest">Modified receipt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyReceiptApiResponse"/>&gt;</returns>
        public async Task<IModifyReceiptApiResponse> ModifyReceiptOrDefaultAsync(int companyId, int documentId, Option<ModifyReceiptRequest> modifyReceiptRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ModifyReceiptAsync(companyId, documentId, modifyReceiptRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Modify Receipt Modifies the specified receipt.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceiptRequest">Modified receipt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyReceiptApiResponse"/>&gt;</returns>
        public async Task<IModifyReceiptApiResponse> ModifyReceiptAsync(int companyId, int documentId, Option<ModifyReceiptRequest> modifyReceiptRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateModifyReceipt(modifyReceiptRequest);

                FormatModifyReceipt(ref companyId, ref documentId, modifyReceiptRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/receipts/{document_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/receipts/{document_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    if (modifyReceiptRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (modifyReceiptRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modifyReceiptRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ModifyReceiptApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ModifyReceiptApiResponse>();
                        ModifyReceiptApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ModifyReceiptApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/receipts/{document_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterModifyReceiptDefaultImplementation(apiResponseLocalVar, companyId, documentId, modifyReceiptRequest);

                        Events.ExecuteOnModifyReceipt(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorModifyReceiptDefaultImplementation(e, "/c/{company_id}/receipts/{document_id}", uriBuilderLocalVar.Path, companyId, documentId, modifyReceiptRequest);
                Events.ExecuteOnErrorModifyReceipt(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ModifyReceiptApiResponse"/>
        /// </summary>
        public partial class ModifyReceiptApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IModifyReceiptApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ModifyReceiptApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ModifyReceiptApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyReceiptApiResponse(ILogger<ModifyReceiptApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ModifyReceiptApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyReceiptApiResponse(ILogger<ModifyReceiptApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ModifyReceiptResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ModifyReceiptResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ModifyReceiptResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
