/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiptsApiSync : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///     Create Receipt
        /// </summary>
        /// <remarks>
        ///     Creates a new receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceiptRequest">The Receipt to create. (optional)</param>
        /// <returns>CreateReceiptResponse</returns>
        CreateReceiptResponse CreateReceipt(int companyId, CreateReceiptRequest createReceiptRequest = default);

        /// <summary>
        ///     Create Receipt
        /// </summary>
        /// <remarks>
        ///     Creates a new receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceiptRequest">The Receipt to create. (optional)</param>
        /// <returns>ApiResponse of CreateReceiptResponse</returns>
        ApiResponse<CreateReceiptResponse> CreateReceiptWithHttpInfo(int companyId,
            CreateReceiptRequest createReceiptRequest = default);

        /// <summary>
        ///     Delete Receipt
        /// </summary>
        /// <remarks>
        ///     Deletes the specified receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <returns></returns>
        void DeleteReceipt(int companyId, int documentId);

        /// <summary>
        ///     Delete Receipt
        /// </summary>
        /// <remarks>
        ///     Deletes the specified receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReceiptWithHttpInfo(int companyId, int documentId);

        /// <summary>
        ///     Get Receipt
        /// </summary>
        /// <remarks>
        ///     Gets the specified receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>GetReceiptResponse</returns>
        GetReceiptResponse GetReceipt(int companyId, int documentId, string fields = default(string),
            string fieldset = default(string));

        /// <summary>
        ///     Get Receipt
        /// </summary>
        /// <remarks>
        ///     Gets the specified receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of GetReceiptResponse</returns>
        ApiResponse<GetReceiptResponse> GetReceiptWithHttpInfo(int companyId, int documentId,
            string fields = default(string), string fieldset = default(string));

        /// <summary>
        ///     Get Receipt Pre-Create Info
        /// </summary>
        /// <remarks>
        ///     Retrieves the information useful while creating a new receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>GetReceiptPreCreateInfoResponse</returns>
        GetReceiptPreCreateInfoResponse GetReceiptPreCreateInfo(int companyId);

        /// <summary>
        ///     Get Receipt Pre-Create Info
        /// </summary>
        /// <remarks>
        ///     Retrieves the information useful while creating a new receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ApiResponse of GetReceiptPreCreateInfoResponse</returns>
        ApiResponse<GetReceiptPreCreateInfoResponse> GetReceiptPreCreateInfoWithHttpInfo(int companyId);

        /// <summary>
        ///     Get Receipts Monthly Totals
        /// </summary>
        /// <remarks>
        ///     Returns the monthly totals by year and receipt type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">Receipt Type</param>
        /// <param name="year">Year for which you want monthly totals</param>
        /// <returns>GetReceiptsMonthlyTotalsResponse</returns>
        GetReceiptsMonthlyTotalsResponse GetReceiptsMonthlyTotals(int companyId, string type, string year);

        /// <summary>
        ///     Get Receipts Monthly Totals
        /// </summary>
        /// <remarks>
        ///     Returns the monthly totals by year and receipt type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">Receipt Type</param>
        /// <param name="year">Year for which you want monthly totals</param>
        /// <returns>ApiResponse of GetReceiptsMonthlyTotalsResponse</returns>
        ApiResponse<GetReceiptsMonthlyTotalsResponse> GetReceiptsMonthlyTotalsWithHttpInfo(int companyId, string type,
            string year);

        /// <summary>
        ///     List Receipts
        /// </summary>
        /// <remarks>
        ///     Lists the receipts.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <returns>ListReceiptsResponse</returns>
        ListReceiptsResponse ListReceipts(int companyId, string fields = default(string),
            string fieldset = default(string), int? page = default(int?), int? perPage = default(int?),
            string sort = default(string), string q = default(string));

        /// <summary>
        ///     List Receipts
        /// </summary>
        /// <remarks>
        ///     Lists the receipts.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <returns>ApiResponse of ListReceiptsResponse</returns>
        ApiResponse<ListReceiptsResponse> ListReceiptsWithHttpInfo(int companyId, string fields = default(string),
            string fieldset = default(string), int? page = default(int?), int? perPage = default(int?),
            string sort = default(string), string q = default(string));

        /// <summary>
        ///     Modify Receipt
        /// </summary>
        /// <remarks>
        ///     Modifies the specified receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceiptRequest">Modified receipt. (optional)</param>
        /// <returns>ModifyReceiptResponse</returns>
        ModifyReceiptResponse ModifyReceipt(int companyId, int documentId,
            ModifyReceiptRequest modifyReceiptRequest = default);

        /// <summary>
        ///     Modify Receipt
        /// </summary>
        /// <remarks>
        ///     Modifies the specified receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceiptRequest">Modified receipt. (optional)</param>
        /// <returns>ApiResponse of ModifyReceiptResponse</returns>
        ApiResponse<ModifyReceiptResponse> ModifyReceiptWithHttpInfo(int companyId, int documentId,
            ModifyReceiptRequest modifyReceiptRequest = default);

        #endregion Synchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiptsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        ///     Create Receipt
        /// </summary>
        /// <remarks>
        ///     Creates a new receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceiptRequest">The Receipt to create. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateReceiptResponse</returns>
        System.Threading.Tasks.Task<CreateReceiptResponse> CreateReceiptAsync(int companyId,
            CreateReceiptRequest createReceiptRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Create Receipt
        /// </summary>
        /// <remarks>
        ///     Creates a new receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceiptRequest">The Receipt to create. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateReceiptResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateReceiptResponse>> CreateReceiptWithHttpInfoAsync(int companyId,
            CreateReceiptRequest createReceiptRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Delete Receipt
        /// </summary>
        /// <remarks>
        ///     Deletes the specified receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReceiptAsync(int companyId, int documentId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Delete Receipt
        /// </summary>
        /// <remarks>
        ///     Deletes the specified receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReceiptWithHttpInfoAsync(int companyId, int documentId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Receipt
        /// </summary>
        /// <remarks>
        ///     Gets the specified receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReceiptResponse</returns>
        System.Threading.Tasks.Task<GetReceiptResponse> GetReceiptAsync(int companyId, int documentId,
            string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Receipt
        /// </summary>
        /// <remarks>
        ///     Gets the specified receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReceiptResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetReceiptResponse>> GetReceiptWithHttpInfoAsync(int companyId,
            int documentId, string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Receipt Pre-Create Info
        /// </summary>
        /// <remarks>
        ///     Retrieves the information useful while creating a new receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReceiptPreCreateInfoResponse</returns>
        System.Threading.Tasks.Task<GetReceiptPreCreateInfoResponse> GetReceiptPreCreateInfoAsync(int companyId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Receipt Pre-Create Info
        /// </summary>
        /// <remarks>
        ///     Retrieves the information useful while creating a new receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReceiptPreCreateInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetReceiptPreCreateInfoResponse>>
            GetReceiptPreCreateInfoWithHttpInfoAsync(int companyId,
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Receipts Monthly Totals
        /// </summary>
        /// <remarks>
        ///     Returns the monthly totals by year and receipt type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">Receipt Type</param>
        /// <param name="year">Year for which you want monthly totals</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReceiptsMonthlyTotalsResponse</returns>
        System.Threading.Tasks.Task<GetReceiptsMonthlyTotalsResponse> GetReceiptsMonthlyTotalsAsync(int companyId,
            string type, string year,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Receipts Monthly Totals
        /// </summary>
        /// <remarks>
        ///     Returns the monthly totals by year and receipt type.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">Receipt Type</param>
        /// <param name="year">Year for which you want monthly totals</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReceiptsMonthlyTotalsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetReceiptsMonthlyTotalsResponse>>
            GetReceiptsMonthlyTotalsWithHttpInfoAsync(int companyId, string type, string year,
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Receipts
        /// </summary>
        /// <remarks>
        ///     Lists the receipts.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListReceiptsResponse</returns>
        System.Threading.Tasks.Task<ListReceiptsResponse> ListReceiptsAsync(int companyId,
            string fields = default(string), string fieldset = default(string), int? page = default(int?),
            int? perPage = default(int?), string sort = default(string), string q = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Receipts
        /// </summary>
        /// <remarks>
        ///     Lists the receipts.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListReceiptsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListReceiptsResponse>> ListReceiptsWithHttpInfoAsync(int companyId,
            string fields = default(string), string fieldset = default(string), int? page = default(int?),
            int? perPage = default(int?), string sort = default(string), string q = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Modify Receipt
        /// </summary>
        /// <remarks>
        ///     Modifies the specified receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceiptRequest">Modified receipt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyReceiptResponse</returns>
        System.Threading.Tasks.Task<ModifyReceiptResponse> ModifyReceiptAsync(int companyId, int documentId,
            ModifyReceiptRequest modifyReceiptRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Modify Receipt
        /// </summary>
        /// <remarks>
        ///     Modifies the specified receipt.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceiptRequest">Modified receipt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyReceiptResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyReceiptResponse>> ModifyReceiptWithHttpInfoAsync(int companyId,
            int documentId, ModifyReceiptRequest modifyReceiptRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiptsApi : IReceiptsApiSync, IReceiptsApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ReceiptsApi : IReceiptsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ReceiptsApi" /> class.
        /// </summary>
        /// <returns></returns>
        public ReceiptsApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ReceiptsApi" /> class.
        /// </summary>
        /// <returns></returns>
        public ReceiptsApi(string basePath)
        {
            Configuration = Sdk.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ReceiptsApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReceiptsApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            Configuration = Sdk.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ReceiptsApi" /> class
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReceiptsApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Create Receipt Creates a new receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceiptRequest">The Receipt to create. (optional)</param>
        /// <returns>CreateReceiptResponse</returns>
        public CreateReceiptResponse CreateReceipt(int companyId, CreateReceiptRequest createReceiptRequest = default)
        {
            var localVarResponse = CreateReceiptWithHttpInfo(companyId, createReceiptRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create Receipt Creates a new receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceiptRequest">The Receipt to create. (optional)</param>
        /// <returns>ApiResponse of CreateReceiptResponse</returns>
        public ApiResponse<CreateReceiptResponse> CreateReceiptWithHttpInfo(int companyId,
            CreateReceiptRequest createReceiptRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createReceiptRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CreateReceiptResponse>("/c/{company_id}/receipts", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("CreateReceipt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Create Receipt Creates a new receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceiptRequest">The Receipt to create. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateReceiptResponse</returns>
        public async System.Threading.Tasks.Task<CreateReceiptResponse> CreateReceiptAsync(int companyId,
            CreateReceiptRequest createReceiptRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<CreateReceiptResponse> localVarResponse =
                await CreateReceiptWithHttpInfoAsync(companyId, createReceiptRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create Receipt Creates a new receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceiptRequest">The Receipt to create. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateReceiptResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateReceiptResponse>> CreateReceiptWithHttpInfoAsync(
            int companyId, CreateReceiptRequest createReceiptRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createReceiptRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .PostAsync<CreateReceiptResponse>("/c/{company_id}/receipts", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("CreateReceipt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Delete Receipt Deletes the specified receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <returns></returns>
        public void DeleteReceipt(int companyId, int documentId)
        {
            DeleteReceiptWithHttpInfo(companyId, documentId);
        }

        /// <summary>
        ///     Delete Receipt Deletes the specified receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteReceiptWithHttpInfo(int companyId, int documentId)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id",
                ClientUtils.ParameterToString(documentId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Delete<Object>("/c/{company_id}/receipts/{document_id}",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("DeleteReceipt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Delete Receipt Deletes the specified receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReceiptAsync(int companyId, int documentId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteReceiptWithHttpInfoAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///     Delete Receipt Deletes the specified receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReceiptWithHttpInfoAsync(int companyId,
            int documentId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id",
                ClientUtils.ParameterToString(documentId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .DeleteAsync<Object>("/c/{company_id}/receipts/{document_id}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("DeleteReceipt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Receipt Gets the specified receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>GetReceiptResponse</returns>
        public GetReceiptResponse GetReceipt(int companyId, int documentId, string fields = default(string),
            string fieldset = default(string))
        {
            var localVarResponse = GetReceiptWithHttpInfo(companyId, documentId, fields, fieldset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Receipt Gets the specified receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of GetReceiptResponse</returns>
        public ApiResponse<GetReceiptResponse> GetReceiptWithHttpInfo(int companyId, int documentId,
            string fields = default(string), string fieldset = default(string))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id",
                ClientUtils.ParameterToString(documentId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<GetReceiptResponse>("/c/{company_id}/receipts/{document_id}",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetReceipt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Receipt Gets the specified receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReceiptResponse</returns>
        public async System.Threading.Tasks.Task<GetReceiptResponse> GetReceiptAsync(int companyId, int documentId,
            string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<GetReceiptResponse> localVarResponse =
                await GetReceiptWithHttpInfoAsync(companyId, documentId, fields, fieldset, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Receipt Gets the specified receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReceiptResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetReceiptResponse>> GetReceiptWithHttpInfoAsync(
            int companyId, int documentId, string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id",
                ClientUtils.ParameterToString(documentId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<GetReceiptResponse>("/c/{company_id}/receipts/{document_id}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetReceipt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Receipt Pre-Create Info Retrieves the information useful while creating a new receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>GetReceiptPreCreateInfoResponse</returns>
        public GetReceiptPreCreateInfoResponse GetReceiptPreCreateInfo(int companyId)
        {
            var localVarResponse = GetReceiptPreCreateInfoWithHttpInfo(companyId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Receipt Pre-Create Info Retrieves the information useful while creating a new receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <returns>ApiResponse of GetReceiptPreCreateInfoResponse</returns>
        public ApiResponse<GetReceiptPreCreateInfoResponse> GetReceiptPreCreateInfoWithHttpInfo(int companyId)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<GetReceiptPreCreateInfoResponse>("/c/{company_id}/receipts/info",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetReceiptPreCreateInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Receipt Pre-Create Info Retrieves the information useful while creating a new receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReceiptPreCreateInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetReceiptPreCreateInfoResponse> GetReceiptPreCreateInfoAsync(
            int companyId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<GetReceiptPreCreateInfoResponse> localVarResponse =
                await GetReceiptPreCreateInfoWithHttpInfoAsync(companyId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Receipt Pre-Create Info Retrieves the information useful while creating a new receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReceiptPreCreateInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetReceiptPreCreateInfoResponse>>
            GetReceiptPreCreateInfoWithHttpInfoAsync(int companyId,
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<GetReceiptPreCreateInfoResponse>("/c/{company_id}/receipts/info", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetReceiptPreCreateInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Receipts Monthly Totals Returns the monthly totals by year and receipt type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">Receipt Type</param>
        /// <param name="year">Year for which you want monthly totals</param>
        /// <returns>GetReceiptsMonthlyTotalsResponse</returns>
        public GetReceiptsMonthlyTotalsResponse GetReceiptsMonthlyTotals(int companyId, string type, string year)
        {
            var localVarResponse = GetReceiptsMonthlyTotalsWithHttpInfo(companyId, type, year);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Receipts Monthly Totals Returns the monthly totals by year and receipt type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">Receipt Type</param>
        /// <param name="year">Year for which you want monthly totals</param>
        /// <returns>ApiResponse of GetReceiptsMonthlyTotalsResponse</returns>
        public ApiResponse<GetReceiptsMonthlyTotalsResponse> GetReceiptsMonthlyTotalsWithHttpInfo(int companyId,
            string type, string year)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400,
                    "Missing required parameter 'type' when calling ReceiptsApi->GetReceiptsMonthlyTotals");

            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400,
                    "Missing required parameter 'year' when calling ReceiptsApi->GetReceiptsMonthlyTotals");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "year", year));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<GetReceiptsMonthlyTotalsResponse>("/c/{company_id}/receipts/monthly_totals",
                    localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetReceiptsMonthlyTotals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Receipts Monthly Totals Returns the monthly totals by year and receipt type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">Receipt Type</param>
        /// <param name="year">Year for which you want monthly totals</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReceiptsMonthlyTotalsResponse</returns>
        public async System.Threading.Tasks.Task<GetReceiptsMonthlyTotalsResponse> GetReceiptsMonthlyTotalsAsync(
            int companyId, string type, string year,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<GetReceiptsMonthlyTotalsResponse> localVarResponse =
                await GetReceiptsMonthlyTotalsWithHttpInfoAsync(companyId, type, year, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Receipts Monthly Totals Returns the monthly totals by year and receipt type.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">Receipt Type</param>
        /// <param name="year">Year for which you want monthly totals</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReceiptsMonthlyTotalsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetReceiptsMonthlyTotalsResponse>>
            GetReceiptsMonthlyTotalsWithHttpInfoAsync(int companyId, string type, string year,
                System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400,
                    "Missing required parameter 'type' when calling ReceiptsApi->GetReceiptsMonthlyTotals");

            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400,
                    "Missing required parameter 'year' when calling ReceiptsApi->GetReceiptsMonthlyTotals");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "year", year));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<GetReceiptsMonthlyTotalsResponse>("/c/{company_id}/receipts/monthly_totals",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetReceiptsMonthlyTotals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Receipts Lists the receipts.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <returns>ListReceiptsResponse</returns>
        public ListReceiptsResponse ListReceipts(int companyId, string fields = default(string),
            string fieldset = default(string), int? page = default(int?), int? perPage = default(int?),
            string sort = default(string), string q = default(string))
        {
            var localVarResponse = ListReceiptsWithHttpInfo(companyId, fields, fieldset, page, perPage, sort, q);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Receipts Lists the receipts.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <returns>ApiResponse of ListReceiptsResponse</returns>
        public ApiResponse<ListReceiptsResponse> ListReceiptsWithHttpInfo(int companyId,
            string fields = default(string), string fieldset = default(string), int? page = default(int?),
            int? perPage = default(int?), string sort = default(string), string q = default(string))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (perPage != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            if (sort != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));
            if (q != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Get<ListReceiptsResponse>("/c/{company_id}/receipts", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListReceipts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Receipts Lists the receipts.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListReceiptsResponse</returns>
        public async System.Threading.Tasks.Task<ListReceiptsResponse> ListReceiptsAsync(int companyId,
            string fields = default(string), string fieldset = default(string), int? page = default(int?),
            int? perPage = default(int?), string sort = default(string), string q = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListReceiptsResponse> localVarResponse =
                await ListReceiptsWithHttpInfoAsync(companyId, fields, fieldset, page, perPage, sort, q,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Receipts Lists the receipts.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListReceiptsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListReceiptsResponse>> ListReceiptsWithHttpInfoAsync(
            int companyId, string fields = default(string), string fieldset = default(string),
            int? page = default(int?), int? perPage = default(int?), string sort = default(string),
            string q = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (perPage != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            if (sort != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));
            if (q != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListReceiptsResponse>("/c/{company_id}/receipts", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListReceipts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Modify Receipt Modifies the specified receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceiptRequest">Modified receipt. (optional)</param>
        /// <returns>ModifyReceiptResponse</returns>
        public ModifyReceiptResponse ModifyReceipt(int companyId, int documentId,
            ModifyReceiptRequest modifyReceiptRequest = default)
        {
            var localVarResponse = ModifyReceiptWithHttpInfo(companyId, documentId, modifyReceiptRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Modify Receipt Modifies the specified receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceiptRequest">Modified receipt. (optional)</param>
        /// <returns>ApiResponse of ModifyReceiptResponse</returns>
        public ApiResponse<ModifyReceiptResponse> ModifyReceiptWithHttpInfo(int companyId, int documentId,
            ModifyReceiptRequest modifyReceiptRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id",
                ClientUtils.ParameterToString(documentId)); // path parameter
            localVarRequestOptions.Data = modifyReceiptRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Put<ModifyReceiptResponse>("/c/{company_id}/receipts/{document_id}",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ModifyReceipt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Modify Receipt Modifies the specified receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceiptRequest">Modified receipt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyReceiptResponse</returns>
        public async System.Threading.Tasks.Task<ModifyReceiptResponse> ModifyReceiptAsync(int companyId,
            int documentId, ModifyReceiptRequest modifyReceiptRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ModifyReceiptResponse> localVarResponse =
                await ModifyReceiptWithHttpInfoAsync(companyId, documentId, modifyReceiptRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Modify Receipt Modifies the specified receipt.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceiptRequest">Modified receipt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyReceiptResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModifyReceiptResponse>> ModifyReceiptWithHttpInfoAsync(
            int companyId, int documentId, ModifyReceiptRequest modifyReceiptRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id",
                ClientUtils.ParameterToString(documentId)); // path parameter
            localVarRequestOptions.Data = modifyReceiptRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .PutAsync<ModifyReceiptResponse>("/c/{company_id}/receipts/{document_id}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ModifyReceipt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }
    }
}