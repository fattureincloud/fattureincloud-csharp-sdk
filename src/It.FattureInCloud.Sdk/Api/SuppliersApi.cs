/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISuppliersApiSync : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///     Create Supplier
        /// </summary>
        /// <remarks>
        ///     Creates a new supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createSupplierRequest">The supplier to create (optional)</param>
        /// <returns>CreateSupplierResponse</returns>
        CreateSupplierResponse CreateSupplier(int companyId, CreateSupplierRequest createSupplierRequest = default);

        /// <summary>
        ///     Create Supplier
        /// </summary>
        /// <remarks>
        ///     Creates a new supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createSupplierRequest">The supplier to create (optional)</param>
        /// <returns>ApiResponse of CreateSupplierResponse</returns>
        ApiResponse<CreateSupplierResponse> CreateSupplierWithHttpInfo(int companyId,
            CreateSupplierRequest createSupplierRequest = default);

        /// <summary>
        ///     Delete Supplier
        /// </summary>
        /// <remarks>
        ///     Deletes the specified supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <returns></returns>
        void DeleteSupplier(int companyId, int supplierId);

        /// <summary>
        ///     Delete Supplier
        /// </summary>
        /// <remarks>
        ///     Deletes the specified supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSupplierWithHttpInfo(int companyId, int supplierId);

        /// <summary>
        ///     Get Supplier
        /// </summary>
        /// <remarks>
        ///     Gets the specified supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>GetSupplierResponse</returns>
        GetSupplierResponse GetSupplier(int companyId, int supplierId, string fields = default(string),
            string fieldset = default(string));

        /// <summary>
        ///     Get Supplier
        /// </summary>
        /// <remarks>
        ///     Gets the specified supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of GetSupplierResponse</returns>
        ApiResponse<GetSupplierResponse> GetSupplierWithHttpInfo(int companyId, int supplierId,
            string fields = default(string), string fieldset = default(string));

        /// <summary>
        ///     List Suppliers
        /// </summary>
        /// <remarks>
        ///     Lists the suppliers.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <returns>ListSuppliersResponse</returns>
        ListSuppliersResponse ListSuppliers(int companyId, string fields = default(string),
            string fieldset = default(string), string sort = default(string), int? page = default(int?),
            int? perPage = default(int?), string q = default(string));

        /// <summary>
        ///     List Suppliers
        /// </summary>
        /// <remarks>
        ///     Lists the suppliers.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <returns>ApiResponse of ListSuppliersResponse</returns>
        ApiResponse<ListSuppliersResponse> ListSuppliersWithHttpInfo(int companyId, string fields = default(string),
            string fieldset = default(string), string sort = default(string), int? page = default(int?),
            int? perPage = default(int?), string q = default(string));

        /// <summary>
        ///     Modify Supplier
        /// </summary>
        /// <remarks>
        ///     Modifies the specified supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="modifySupplierRequest">The modified Supplier. First level parameters are managed in delta mode. (optional)</param>
        /// <returns>ModifySupplierResponse</returns>
        ModifySupplierResponse ModifySupplier(int companyId, int supplierId,
            ModifySupplierRequest modifySupplierRequest = default);

        /// <summary>
        ///     Modify Supplier
        /// </summary>
        /// <remarks>
        ///     Modifies the specified supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="modifySupplierRequest">The modified Supplier. First level parameters are managed in delta mode. (optional)</param>
        /// <returns>ApiResponse of ModifySupplierResponse</returns>
        ApiResponse<ModifySupplierResponse> ModifySupplierWithHttpInfo(int companyId, int supplierId,
            ModifySupplierRequest modifySupplierRequest = default);

        #endregion Synchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISuppliersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        ///     Create Supplier
        /// </summary>
        /// <remarks>
        ///     Creates a new supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createSupplierRequest">The supplier to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSupplierResponse</returns>
        System.Threading.Tasks.Task<CreateSupplierResponse> CreateSupplierAsync(int companyId,
            CreateSupplierRequest createSupplierRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Create Supplier
        /// </summary>
        /// <remarks>
        ///     Creates a new supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createSupplierRequest">The supplier to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSupplierResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSupplierResponse>> CreateSupplierWithHttpInfoAsync(int companyId,
            CreateSupplierRequest createSupplierRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Delete Supplier
        /// </summary>
        /// <remarks>
        ///     Deletes the specified supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSupplierAsync(int companyId, int supplierId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Delete Supplier
        /// </summary>
        /// <remarks>
        ///     Deletes the specified supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSupplierWithHttpInfoAsync(int companyId, int supplierId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Supplier
        /// </summary>
        /// <remarks>
        ///     Gets the specified supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupplierResponse</returns>
        System.Threading.Tasks.Task<GetSupplierResponse> GetSupplierAsync(int companyId, int supplierId,
            string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Supplier
        /// </summary>
        /// <remarks>
        ///     Gets the specified supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupplierResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupplierResponse>> GetSupplierWithHttpInfoAsync(int companyId,
            int supplierId, string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Suppliers
        /// </summary>
        /// <remarks>
        ///     Lists the suppliers.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSuppliersResponse</returns>
        System.Threading.Tasks.Task<ListSuppliersResponse> ListSuppliersAsync(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string),
            int? page = default(int?), int? perPage = default(int?), string q = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Suppliers
        /// </summary>
        /// <remarks>
        ///     Lists the suppliers.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSuppliersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSuppliersResponse>> ListSuppliersWithHttpInfoAsync(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string),
            int? page = default(int?), int? perPage = default(int?), string q = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Modify Supplier
        /// </summary>
        /// <remarks>
        ///     Modifies the specified supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="modifySupplierRequest">The modified Supplier. First level parameters are managed in delta mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifySupplierResponse</returns>
        System.Threading.Tasks.Task<ModifySupplierResponse> ModifySupplierAsync(int companyId, int supplierId,
            ModifySupplierRequest modifySupplierRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Modify Supplier
        /// </summary>
        /// <remarks>
        ///     Modifies the specified supplier.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="modifySupplierRequest">The modified Supplier. First level parameters are managed in delta mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifySupplierResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifySupplierResponse>> ModifySupplierWithHttpInfoAsync(int companyId,
            int supplierId, ModifySupplierRequest modifySupplierRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISuppliersApi : ISuppliersApiSync, ISuppliersApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SuppliersApi : ISuppliersApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="SuppliersApi" /> class.
        /// </summary>
        /// <returns></returns>
        public SuppliersApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SuppliersApi" /> class.
        /// </summary>
        /// <returns></returns>
        public SuppliersApi(string basePath)
        {
            Configuration = Sdk.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SuppliersApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SuppliersApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            Configuration = Sdk.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SuppliersApi" /> class
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SuppliersApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Create Supplier Creates a new supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createSupplierRequest">The supplier to create (optional)</param>
        /// <returns>CreateSupplierResponse</returns>
        public CreateSupplierResponse CreateSupplier(int companyId,
            CreateSupplierRequest createSupplierRequest = default)
        {
            var localVarResponse = CreateSupplierWithHttpInfo(companyId, createSupplierRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create Supplier Creates a new supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createSupplierRequest">The supplier to create (optional)</param>
        /// <returns>ApiResponse of CreateSupplierResponse</returns>
        public ApiResponse<CreateSupplierResponse> CreateSupplierWithHttpInfo(int companyId,
            CreateSupplierRequest createSupplierRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createSupplierRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Post<CreateSupplierResponse>("/c/{company_id}/entities/suppliers",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("CreateSupplier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Create Supplier Creates a new supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createSupplierRequest">The supplier to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSupplierResponse</returns>
        public async System.Threading.Tasks.Task<CreateSupplierResponse> CreateSupplierAsync(int companyId,
            CreateSupplierRequest createSupplierRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<CreateSupplierResponse> localVarResponse =
                await CreateSupplierWithHttpInfoAsync(companyId, createSupplierRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create Supplier Creates a new supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createSupplierRequest">The supplier to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSupplierResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSupplierResponse>> CreateSupplierWithHttpInfoAsync(
            int companyId, CreateSupplierRequest createSupplierRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createSupplierRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .PostAsync<CreateSupplierResponse>("/c/{company_id}/entities/suppliers", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("CreateSupplier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Delete Supplier Deletes the specified supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <returns></returns>
        public void DeleteSupplier(int companyId, int supplierId)
        {
            DeleteSupplierWithHttpInfo(companyId, supplierId);
        }

        /// <summary>
        ///     Delete Supplier Deletes the specified supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSupplierWithHttpInfo(int companyId, int supplierId)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("supplier_id",
                ClientUtils.ParameterToString(supplierId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Delete<Object>("/c/{company_id}/entities/suppliers/{supplier_id}",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("DeleteSupplier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Delete Supplier Deletes the specified supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSupplierAsync(int companyId, int supplierId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSupplierWithHttpInfoAsync(companyId, supplierId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///     Delete Supplier Deletes the specified supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSupplierWithHttpInfoAsync(int companyId,
            int supplierId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("supplier_id",
                ClientUtils.ParameterToString(supplierId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .DeleteAsync<Object>("/c/{company_id}/entities/suppliers/{supplier_id}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("DeleteSupplier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Supplier Gets the specified supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>GetSupplierResponse</returns>
        public GetSupplierResponse GetSupplier(int companyId, int supplierId, string fields = default(string),
            string fieldset = default(string))
        {
            var localVarResponse = GetSupplierWithHttpInfo(companyId, supplierId, fields, fieldset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Supplier Gets the specified supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of GetSupplierResponse</returns>
        public ApiResponse<GetSupplierResponse> GetSupplierWithHttpInfo(int companyId, int supplierId,
            string fields = default(string), string fieldset = default(string))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("supplier_id",
                ClientUtils.ParameterToString(supplierId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<GetSupplierResponse>("/c/{company_id}/entities/suppliers/{supplier_id}",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetSupplier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Supplier Gets the specified supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupplierResponse</returns>
        public async System.Threading.Tasks.Task<GetSupplierResponse> GetSupplierAsync(int companyId, int supplierId,
            string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<GetSupplierResponse> localVarResponse =
                await GetSupplierWithHttpInfoAsync(companyId, supplierId, fields, fieldset, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Supplier Gets the specified supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupplierResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSupplierResponse>> GetSupplierWithHttpInfoAsync(
            int companyId, int supplierId, string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("supplier_id",
                ClientUtils.ParameterToString(supplierId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<GetSupplierResponse>("/c/{company_id}/entities/suppliers/{supplier_id}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetSupplier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Suppliers Lists the suppliers.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <returns>ListSuppliersResponse</returns>
        public ListSuppliersResponse ListSuppliers(int companyId, string fields = default(string),
            string fieldset = default(string), string sort = default(string), int? page = default(int?),
            int? perPage = default(int?), string q = default(string))
        {
            var localVarResponse = ListSuppliersWithHttpInfo(companyId, fields, fieldset, sort, page, perPage, q);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Suppliers Lists the suppliers.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <returns>ApiResponse of ListSuppliersResponse</returns>
        public ApiResponse<ListSuppliersResponse> ListSuppliersWithHttpInfo(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string),
            int? page = default(int?), int? perPage = default(int?), string q = default(string))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            if (sort != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (perPage != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            if (q != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<ListSuppliersResponse>("/c/{company_id}/entities/suppliers",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListSuppliers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Suppliers Lists the suppliers.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSuppliersResponse</returns>
        public async System.Threading.Tasks.Task<ListSuppliersResponse> ListSuppliersAsync(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string),
            int? page = default(int?), int? perPage = default(int?), string q = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListSuppliersResponse> localVarResponse =
                await ListSuppliersWithHttpInfoAsync(companyId, fields, fieldset, sort, page, perPage, q,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Suppliers Lists the suppliers.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSuppliersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListSuppliersResponse>> ListSuppliersWithHttpInfoAsync(
            int companyId, string fields = default(string), string fieldset = default(string),
            string sort = default(string), int? page = default(int?), int? perPage = default(int?),
            string q = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            if (sort != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (perPage != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            if (q != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListSuppliersResponse>("/c/{company_id}/entities/suppliers", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListSuppliers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Modify Supplier Modifies the specified supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="modifySupplierRequest">The modified Supplier. First level parameters are managed in delta mode. (optional)</param>
        /// <returns>ModifySupplierResponse</returns>
        public ModifySupplierResponse ModifySupplier(int companyId, int supplierId,
            ModifySupplierRequest modifySupplierRequest = default)
        {
            var localVarResponse = ModifySupplierWithHttpInfo(companyId, supplierId, modifySupplierRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Modify Supplier Modifies the specified supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="modifySupplierRequest">The modified Supplier. First level parameters are managed in delta mode. (optional)</param>
        /// <returns>ApiResponse of ModifySupplierResponse</returns>
        public ApiResponse<ModifySupplierResponse> ModifySupplierWithHttpInfo(int companyId, int supplierId,
            ModifySupplierRequest modifySupplierRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("supplier_id",
                ClientUtils.ParameterToString(supplierId)); // path parameter
            localVarRequestOptions.Data = modifySupplierRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse =
                Client.Put<ModifySupplierResponse>("/c/{company_id}/entities/suppliers/{supplier_id}",
                    localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ModifySupplier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Modify Supplier Modifies the specified supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="modifySupplierRequest">The modified Supplier. First level parameters are managed in delta mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifySupplierResponse</returns>
        public async System.Threading.Tasks.Task<ModifySupplierResponse> ModifySupplierAsync(int companyId,
            int supplierId, ModifySupplierRequest modifySupplierRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ModifySupplierResponse> localVarResponse =
                await ModifySupplierWithHttpInfoAsync(companyId, supplierId, modifySupplierRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Modify Supplier Modifies the specified supplier.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="modifySupplierRequest">The modified Supplier. First level parameters are managed in delta mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifySupplierResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModifySupplierResponse>> ModifySupplierWithHttpInfoAsync(
            int companyId, int supplierId, ModifySupplierRequest modifySupplierRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("supplier_id",
                ClientUtils.ParameterToString(supplierId)); // path parameter
            localVarRequestOptions.Data = modifySupplierRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .PutAsync<ModifySupplierResponse>("/c/{company_id}/entities/suppliers/{supplier_id}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ModifySupplier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }
    }
}