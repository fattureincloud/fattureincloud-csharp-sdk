// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISuppliersApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SuppliersApiEvents Events { get; }

        /// <summary>
        /// Create Supplier
        /// </summary>
        /// <remarks>
        /// Creates a new supplier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createSupplierRequest">The supplier to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSupplierApiResponse"/>&gt;</returns>
        Task<ICreateSupplierApiResponse> CreateSupplierAsync(int companyId, Option<CreateSupplierRequest> createSupplierRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Supplier
        /// </summary>
        /// <remarks>
        /// Creates a new supplier.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createSupplierRequest">The supplier to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSupplierApiResponse"/>&gt;</returns>
        Task<ICreateSupplierApiResponse> CreateSupplierOrDefaultAsync(int companyId, Option<CreateSupplierRequest> createSupplierRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Supplier
        /// </summary>
        /// <remarks>
        /// Deletes the specified supplier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSupplierApiResponse"/>&gt;</returns>
        Task<IDeleteSupplierApiResponse> DeleteSupplierAsync(int companyId, int supplierId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Supplier
        /// </summary>
        /// <remarks>
        /// Deletes the specified supplier.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSupplierApiResponse"/>&gt;</returns>
        Task<IDeleteSupplierApiResponse> DeleteSupplierOrDefaultAsync(int companyId, int supplierId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Supplier
        /// </summary>
        /// <remarks>
        /// Gets the specified supplier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSupplierApiResponse"/>&gt;</returns>
        Task<IGetSupplierApiResponse> GetSupplierAsync(int companyId, int supplierId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Supplier
        /// </summary>
        /// <remarks>
        /// Gets the specified supplier.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSupplierApiResponse"/>&gt;</returns>
        Task<IGetSupplierApiResponse> GetSupplierOrDefaultAsync(int companyId, int supplierId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Suppliers
        /// </summary>
        /// <remarks>
        /// Lists the suppliers.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSuppliersApiResponse"/>&gt;</returns>
        Task<IListSuppliersApiResponse> ListSuppliersAsync(int companyId, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Suppliers
        /// </summary>
        /// <remarks>
        /// Lists the suppliers.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSuppliersApiResponse"/>&gt;</returns>
        Task<IListSuppliersApiResponse> ListSuppliersOrDefaultAsync(int companyId, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Supplier
        /// </summary>
        /// <remarks>
        /// Modifies the specified supplier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="modifySupplierRequest">The modified Supplier. First level parameters are managed in delta mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifySupplierApiResponse"/>&gt;</returns>
        Task<IModifySupplierApiResponse> ModifySupplierAsync(int companyId, int supplierId, Option<ModifySupplierRequest> modifySupplierRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Supplier
        /// </summary>
        /// <remarks>
        /// Modifies the specified supplier.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="modifySupplierRequest">The modified Supplier. First level parameters are managed in delta mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifySupplierApiResponse"/>&gt;</returns>
        Task<IModifySupplierApiResponse> ModifySupplierOrDefaultAsync(int companyId, int supplierId, Option<ModifySupplierRequest> modifySupplierRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateSupplierApiResponse"/>
    /// </summary>
    public interface ICreateSupplierApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.CreateSupplierResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteSupplierApiResponse"/>
    /// </summary>
    public interface IDeleteSupplierApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetSupplierApiResponse"/>
    /// </summary>
    public interface IGetSupplierApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetSupplierResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IListSuppliersApiResponse"/>
    /// </summary>
    public interface IListSuppliersApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ListSuppliersResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IModifySupplierApiResponse"/>
    /// </summary>
    public interface IModifySupplierApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.ModifySupplierResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SuppliersApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateSupplier;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateSupplier;

        internal void ExecuteOnCreateSupplier(SuppliersApi.CreateSupplierApiResponse apiResponse)
        {
            OnCreateSupplier?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateSupplier(Exception exception)
        {
            OnErrorCreateSupplier?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteSupplier;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteSupplier;

        internal void ExecuteOnDeleteSupplier(SuppliersApi.DeleteSupplierApiResponse apiResponse)
        {
            OnDeleteSupplier?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSupplier(Exception exception)
        {
            OnErrorDeleteSupplier?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetSupplier;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetSupplier;

        internal void ExecuteOnGetSupplier(SuppliersApi.GetSupplierApiResponse apiResponse)
        {
            OnGetSupplier?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSupplier(Exception exception)
        {
            OnErrorGetSupplier?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnListSuppliers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorListSuppliers;

        internal void ExecuteOnListSuppliers(SuppliersApi.ListSuppliersApiResponse apiResponse)
        {
            OnListSuppliers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListSuppliers(Exception exception)
        {
            OnErrorListSuppliers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnModifySupplier;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorModifySupplier;

        internal void ExecuteOnModifySupplier(SuppliersApi.ModifySupplierApiResponse apiResponse)
        {
            OnModifySupplier?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorModifySupplier(Exception exception)
        {
            OnErrorModifySupplier?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SuppliersApi : ISuppliersApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SuppliersApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SuppliersApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SuppliersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SuppliersApi(ILogger<SuppliersApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SuppliersApiEvents suppliersApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SuppliersApi>();
            HttpClient = httpClient;
            Events = suppliersApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatCreateSupplier(ref int companyId, Option<CreateSupplierRequest> createSupplierRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createSupplierRequest"></param>
        /// <returns></returns>
        private void ValidateCreateSupplier(Option<CreateSupplierRequest> createSupplierRequest)
        {
            if (createSupplierRequest.IsSet && createSupplierRequest.Value == null)
                throw new ArgumentNullException(nameof(createSupplierRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createSupplierRequest"></param>
        private void AfterCreateSupplierDefaultImplementation(ICreateSupplierApiResponse apiResponseLocalVar, int companyId, Option<CreateSupplierRequest> createSupplierRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateSupplier(ref suppressDefaultLog, apiResponseLocalVar, companyId, createSupplierRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createSupplierRequest"></param>
        partial void AfterCreateSupplier(ref bool suppressDefaultLog, ICreateSupplierApiResponse apiResponseLocalVar, int companyId, Option<CreateSupplierRequest> createSupplierRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createSupplierRequest"></param>
        private void OnErrorCreateSupplierDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreateSupplierRequest> createSupplierRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateSupplier(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, createSupplierRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="createSupplierRequest"></param>
        partial void OnErrorCreateSupplier(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<CreateSupplierRequest> createSupplierRequest);

        /// <summary>
        /// Create Supplier Creates a new supplier.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createSupplierRequest">The supplier to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSupplierApiResponse"/>&gt;</returns>
        public async Task<ICreateSupplierApiResponse> CreateSupplierOrDefaultAsync(int companyId, Option<CreateSupplierRequest> createSupplierRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateSupplierAsync(companyId, createSupplierRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Supplier Creates a new supplier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createSupplierRequest">The supplier to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSupplierApiResponse"/>&gt;</returns>
        public async Task<ICreateSupplierApiResponse> CreateSupplierAsync(int companyId, Option<CreateSupplierRequest> createSupplierRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateSupplier(createSupplierRequest);

                FormatCreateSupplier(ref companyId, createSupplierRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/entities/suppliers"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/entities/suppliers");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    if (createSupplierRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createSupplierRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createSupplierRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreateSupplierApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateSupplierApiResponse>();
                        CreateSupplierApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new CreateSupplierApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/entities/suppliers", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreateSupplierDefaultImplementation(apiResponseLocalVar, companyId, createSupplierRequest);

                        Events.ExecuteOnCreateSupplier(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateSupplierDefaultImplementation(e, "/c/{company_id}/entities/suppliers", uriBuilderLocalVar.Path, companyId, createSupplierRequest);
                Events.ExecuteOnErrorCreateSupplier(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateSupplierApiResponse"/>
        /// </summary>
        public partial class CreateSupplierApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, ICreateSupplierApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateSupplierApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateSupplierApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateSupplierApiResponse(ILogger<CreateSupplierApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreateSupplierApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateSupplierApiResponse(ILogger<CreateSupplierApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.CreateSupplierResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.CreateSupplierResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.CreateSupplierResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteSupplier(ref int companyId, ref int supplierId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="supplierId"></param>
        private void AfterDeleteSupplierDefaultImplementation(IDeleteSupplierApiResponse apiResponseLocalVar, int companyId, int supplierId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSupplier(ref suppressDefaultLog, apiResponseLocalVar, companyId, supplierId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="supplierId"></param>
        partial void AfterDeleteSupplier(ref bool suppressDefaultLog, IDeleteSupplierApiResponse apiResponseLocalVar, int companyId, int supplierId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="supplierId"></param>
        private void OnErrorDeleteSupplierDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int supplierId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSupplier(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, supplierId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="supplierId"></param>
        partial void OnErrorDeleteSupplier(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int supplierId);

        /// <summary>
        /// Delete Supplier Deletes the specified supplier.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSupplierApiResponse"/>&gt;</returns>
        public async Task<IDeleteSupplierApiResponse> DeleteSupplierOrDefaultAsync(int companyId, int supplierId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSupplierAsync(companyId, supplierId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Supplier Deletes the specified supplier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSupplierApiResponse"/>&gt;</returns>
        public async Task<IDeleteSupplierApiResponse> DeleteSupplierAsync(int companyId, int supplierId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteSupplier(ref companyId, ref supplierId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/entities/suppliers/{supplier_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/entities/suppliers/{supplier_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsupplier_id%7D", Uri.EscapeDataString(supplierId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteSupplierApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSupplierApiResponse>();
                        DeleteSupplierApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteSupplierApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/entities/suppliers/{supplier_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteSupplierDefaultImplementation(apiResponseLocalVar, companyId, supplierId);

                        Events.ExecuteOnDeleteSupplier(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSupplierDefaultImplementation(e, "/c/{company_id}/entities/suppliers/{supplier_id}", uriBuilderLocalVar.Path, companyId, supplierId);
                Events.ExecuteOnErrorDeleteSupplier(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSupplierApiResponse"/>
        /// </summary>
        public partial class DeleteSupplierApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IDeleteSupplierApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSupplierApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSupplierApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSupplierApiResponse(ILogger<DeleteSupplierApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteSupplierApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSupplierApiResponse(ILogger<DeleteSupplierApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSupplier(ref int companyId, ref int supplierId, ref Option<string> fields, ref Option<string> fieldset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <returns></returns>
        private void ValidateGetSupplier(Option<string> fields, Option<string> fieldset)
        {
            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields));

            if (fieldset.IsSet && fieldset.Value == null)
                throw new ArgumentNullException(nameof(fieldset));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="supplierId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        private void AfterGetSupplierDefaultImplementation(IGetSupplierApiResponse apiResponseLocalVar, int companyId, int supplierId, Option<string> fields, Option<string> fieldset)
        {
            bool suppressDefaultLog = false;
            AfterGetSupplier(ref suppressDefaultLog, apiResponseLocalVar, companyId, supplierId, fields, fieldset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="supplierId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        partial void AfterGetSupplier(ref bool suppressDefaultLog, IGetSupplierApiResponse apiResponseLocalVar, int companyId, int supplierId, Option<string> fields, Option<string> fieldset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="supplierId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        private void OnErrorGetSupplierDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int supplierId, Option<string> fields, Option<string> fieldset)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSupplier(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, supplierId, fields, fieldset);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="supplierId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        partial void OnErrorGetSupplier(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int supplierId, Option<string> fields, Option<string> fieldset);

        /// <summary>
        /// Get Supplier Gets the specified supplier.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSupplierApiResponse"/>&gt;</returns>
        public async Task<IGetSupplierApiResponse> GetSupplierOrDefaultAsync(int companyId, int supplierId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSupplierAsync(companyId, supplierId, fields, fieldset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Supplier Gets the specified supplier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSupplierApiResponse"/>&gt;</returns>
        public async Task<IGetSupplierApiResponse> GetSupplierAsync(int companyId, int supplierId, Option<string> fields = default, Option<string> fieldset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSupplier(fields, fieldset);

                FormatGetSupplier(ref companyId, ref supplierId, ref fields, ref fieldset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/entities/suppliers/{supplier_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/entities/suppliers/{supplier_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsupplier_id%7D", Uri.EscapeDataString(supplierId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (fields.IsSet)
                        parseQueryStringLocalVar["fields"] = ClientUtils.ParameterToString(fields.Value);

                    if (fieldset.IsSet)
                        parseQueryStringLocalVar["fieldset"] = ClientUtils.ParameterToString(fieldset.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetSupplierApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSupplierApiResponse>();
                        GetSupplierApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetSupplierApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/entities/suppliers/{supplier_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetSupplierDefaultImplementation(apiResponseLocalVar, companyId, supplierId, fields, fieldset);

                        Events.ExecuteOnGetSupplier(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSupplierDefaultImplementation(e, "/c/{company_id}/entities/suppliers/{supplier_id}", uriBuilderLocalVar.Path, companyId, supplierId, fields, fieldset);
                Events.ExecuteOnErrorGetSupplier(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSupplierApiResponse"/>
        /// </summary>
        public partial class GetSupplierApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetSupplierApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSupplierApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSupplierApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSupplierApiResponse(ILogger<GetSupplierApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetSupplierApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSupplierApiResponse(ILogger<GetSupplierApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetSupplierResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetSupplierResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetSupplierResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListSuppliers(ref int companyId, ref Option<string> fields, ref Option<string> fieldset, ref Option<string> sort, ref Option<int> page, ref Option<int> perPage, ref Option<string> q);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="q"></param>
        /// <returns></returns>
        private void ValidateListSuppliers(Option<string> fields, Option<string> fieldset, Option<string> sort, Option<string> q)
        {
            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields));

            if (fieldset.IsSet && fieldset.Value == null)
                throw new ArgumentNullException(nameof(fieldset));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (q.IsSet && q.Value == null)
                throw new ArgumentNullException(nameof(q));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        private void AfterListSuppliersDefaultImplementation(IListSuppliersApiResponse apiResponseLocalVar, int companyId, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q)
        {
            bool suppressDefaultLog = false;
            AfterListSuppliers(ref suppressDefaultLog, apiResponseLocalVar, companyId, fields, fieldset, sort, page, perPage, q);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        partial void AfterListSuppliers(ref bool suppressDefaultLog, IListSuppliersApiResponse apiResponseLocalVar, int companyId, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        private void OnErrorListSuppliersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListSuppliers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, fields, fieldset, sort, page, perPage, q);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="fields"></param>
        /// <param name="fieldset"></param>
        /// <param name="sort"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <param name="q"></param>
        partial void OnErrorListSuppliers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, Option<string> fields, Option<string> fieldset, Option<string> sort, Option<int> page, Option<int> perPage, Option<string> q);

        /// <summary>
        /// List Suppliers Lists the suppliers.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSuppliersApiResponse"/>&gt;</returns>
        public async Task<IListSuppliersApiResponse> ListSuppliersOrDefaultAsync(int companyId, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListSuppliersAsync(companyId, fields, fieldset, sort, page, perPage, q, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Suppliers Lists the suppliers.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSuppliersApiResponse"/>&gt;</returns>
        public async Task<IListSuppliersApiResponse> ListSuppliersAsync(int companyId, Option<string> fields = default, Option<string> fieldset = default, Option<string> sort = default, Option<int> page = default, Option<int> perPage = default, Option<string> q = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListSuppliers(fields, fieldset, sort, q);

                FormatListSuppliers(ref companyId, ref fields, ref fieldset, ref sort, ref page, ref perPage, ref q);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/entities/suppliers"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/entities/suppliers");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (fields.IsSet)
                        parseQueryStringLocalVar["fields"] = ClientUtils.ParameterToString(fields.Value);

                    if (fieldset.IsSet)
                        parseQueryStringLocalVar["fieldset"] = ClientUtils.ParameterToString(fieldset.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (perPage.IsSet)
                        parseQueryStringLocalVar["per_page"] = ClientUtils.ParameterToString(perPage.Value);

                    if (q.IsSet)
                        parseQueryStringLocalVar["q"] = ClientUtils.ParameterToString(q.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ListSuppliersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListSuppliersApiResponse>();
                        ListSuppliersApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ListSuppliersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/entities/suppliers", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterListSuppliersDefaultImplementation(apiResponseLocalVar, companyId, fields, fieldset, sort, page, perPage, q);

                        Events.ExecuteOnListSuppliers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListSuppliersDefaultImplementation(e, "/c/{company_id}/entities/suppliers", uriBuilderLocalVar.Path, companyId, fields, fieldset, sort, page, perPage, q);
                Events.ExecuteOnErrorListSuppliers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListSuppliersApiResponse"/>
        /// </summary>
        public partial class ListSuppliersApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IListSuppliersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListSuppliersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListSuppliersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListSuppliersApiResponse(ILogger<ListSuppliersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ListSuppliersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListSuppliersApiResponse(ILogger<ListSuppliersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ListSuppliersResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ListSuppliersResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ListSuppliersResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatModifySupplier(ref int companyId, ref int supplierId, Option<ModifySupplierRequest> modifySupplierRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modifySupplierRequest"></param>
        /// <returns></returns>
        private void ValidateModifySupplier(Option<ModifySupplierRequest> modifySupplierRequest)
        {
            if (modifySupplierRequest.IsSet && modifySupplierRequest.Value == null)
                throw new ArgumentNullException(nameof(modifySupplierRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="supplierId"></param>
        /// <param name="modifySupplierRequest"></param>
        private void AfterModifySupplierDefaultImplementation(IModifySupplierApiResponse apiResponseLocalVar, int companyId, int supplierId, Option<ModifySupplierRequest> modifySupplierRequest)
        {
            bool suppressDefaultLog = false;
            AfterModifySupplier(ref suppressDefaultLog, apiResponseLocalVar, companyId, supplierId, modifySupplierRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="supplierId"></param>
        /// <param name="modifySupplierRequest"></param>
        partial void AfterModifySupplier(ref bool suppressDefaultLog, IModifySupplierApiResponse apiResponseLocalVar, int companyId, int supplierId, Option<ModifySupplierRequest> modifySupplierRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="supplierId"></param>
        /// <param name="modifySupplierRequest"></param>
        private void OnErrorModifySupplierDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int supplierId, Option<ModifySupplierRequest> modifySupplierRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorModifySupplier(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, supplierId, modifySupplierRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="supplierId"></param>
        /// <param name="modifySupplierRequest"></param>
        partial void OnErrorModifySupplier(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int supplierId, Option<ModifySupplierRequest> modifySupplierRequest);

        /// <summary>
        /// Modify Supplier Modifies the specified supplier.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="modifySupplierRequest">The modified Supplier. First level parameters are managed in delta mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifySupplierApiResponse"/>&gt;</returns>
        public async Task<IModifySupplierApiResponse> ModifySupplierOrDefaultAsync(int companyId, int supplierId, Option<ModifySupplierRequest> modifySupplierRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ModifySupplierAsync(companyId, supplierId, modifySupplierRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Modify Supplier Modifies the specified supplier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="supplierId">The ID of the supplier.</param>
        /// <param name="modifySupplierRequest">The modified Supplier. First level parameters are managed in delta mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifySupplierApiResponse"/>&gt;</returns>
        public async Task<IModifySupplierApiResponse> ModifySupplierAsync(int companyId, int supplierId, Option<ModifySupplierRequest> modifySupplierRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateModifySupplier(modifySupplierRequest);

                FormatModifySupplier(ref companyId, ref supplierId, modifySupplierRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/entities/suppliers/{supplier_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/entities/suppliers/{supplier_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsupplier_id%7D", Uri.EscapeDataString(supplierId.ToString()));

                    if (modifySupplierRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (modifySupplierRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modifySupplierRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ModifySupplierApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ModifySupplierApiResponse>();
                        ModifySupplierApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ModifySupplierApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/entities/suppliers/{supplier_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterModifySupplierDefaultImplementation(apiResponseLocalVar, companyId, supplierId, modifySupplierRequest);

                        Events.ExecuteOnModifySupplier(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorModifySupplierDefaultImplementation(e, "/c/{company_id}/entities/suppliers/{supplier_id}", uriBuilderLocalVar.Path, companyId, supplierId, modifySupplierRequest);
                Events.ExecuteOnErrorModifySupplier(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ModifySupplierApiResponse"/>
        /// </summary>
        public partial class ModifySupplierApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IModifySupplierApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ModifySupplierApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ModifySupplierApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifySupplierApiResponse(ILogger<ModifySupplierApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ModifySupplierApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifySupplierApiResponse(ILogger<ModifySupplierApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.ModifySupplierResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.ModifySupplierResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.ModifySupplierResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
