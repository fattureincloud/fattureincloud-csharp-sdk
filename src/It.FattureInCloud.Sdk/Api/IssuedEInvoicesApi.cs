// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IIssuedEInvoicesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        IssuedEInvoicesApiEvents Events { get; }

        /// <summary>
        /// Get E-Invoice Rejection Reason
        /// </summary>
        /// <remarks>
        /// Get e-invoice rejection reason
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEInvoiceRejectionReasonApiResponse"/>&gt;</returns>
        Task<IGetEInvoiceRejectionReasonApiResponse> GetEInvoiceRejectionReasonAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get E-Invoice Rejection Reason
        /// </summary>
        /// <remarks>
        /// Get e-invoice rejection reason
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEInvoiceRejectionReasonApiResponse"/>&gt;</returns>
        Task<IGetEInvoiceRejectionReasonApiResponse> GetEInvoiceRejectionReasonOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get E-Invoice XML
        /// </summary>
        /// <remarks>
        /// Downloads the e-invoice in XML format.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="includeAttachment">Include the attachment to the XML e-invoice. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEInvoiceXmlApiResponse"/>&gt;</returns>
        Task<IGetEInvoiceXmlApiResponse> GetEInvoiceXmlAsync(int companyId, int documentId, Option<bool> includeAttachment = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get E-Invoice XML
        /// </summary>
        /// <remarks>
        /// Downloads the e-invoice in XML format.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="includeAttachment">Include the attachment to the XML e-invoice. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEInvoiceXmlApiResponse"/>&gt;</returns>
        Task<IGetEInvoiceXmlApiResponse> GetEInvoiceXmlOrDefaultAsync(int companyId, int documentId, Option<bool> includeAttachment = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send E-Invoice
        /// </summary>
        /// <remarks>
        /// Sends the e-invoice to SDI.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="sendEInvoiceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendEInvoiceApiResponse"/>&gt;</returns>
        Task<ISendEInvoiceApiResponse> SendEInvoiceAsync(int companyId, int documentId, Option<SendEInvoiceRequest> sendEInvoiceRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send E-Invoice
        /// </summary>
        /// <remarks>
        /// Sends the e-invoice to SDI.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="sendEInvoiceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendEInvoiceApiResponse"/>&gt;</returns>
        Task<ISendEInvoiceApiResponse> SendEInvoiceOrDefaultAsync(int companyId, int documentId, Option<SendEInvoiceRequest> sendEInvoiceRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify E-Invoice XML
        /// </summary>
        /// <remarks>
        /// Verifies the e-invoice XML format. Checks if all of the mandatory fields are filled and compliant to the right format.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyEInvoiceXmlApiResponse"/>&gt;</returns>
        Task<IVerifyEInvoiceXmlApiResponse> VerifyEInvoiceXmlAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify E-Invoice XML
        /// </summary>
        /// <remarks>
        /// Verifies the e-invoice XML format. Checks if all of the mandatory fields are filled and compliant to the right format.
        /// </remarks>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyEInvoiceXmlApiResponse"/>&gt;</returns>
        Task<IVerifyEInvoiceXmlApiResponse> VerifyEInvoiceXmlOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetEInvoiceRejectionReasonApiResponse"/>
    /// </summary>
    public interface IGetEInvoiceRejectionReasonApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.GetEInvoiceRejectionReasonResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetEInvoiceXmlApiResponse"/>
    /// </summary>
    public interface IGetEInvoiceXmlApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<string>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="ISendEInvoiceApiResponse"/>
    /// </summary>
    public interface ISendEInvoiceApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.SendEInvoiceResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IVerifyEInvoiceXmlApiResponse"/>
    /// </summary>
    public interface IVerifyEInvoiceXmlApiResponse : It.FattureInCloud.Sdk.Client.IApiResponse, IOk<It.FattureInCloud.Sdk.Model.VerifyEInvoiceXmlResponse>, IUnprocessableContent<It.FattureInCloud.Sdk.Model.VerifyEInvoiceXmlErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class IssuedEInvoicesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetEInvoiceRejectionReason;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetEInvoiceRejectionReason;

        internal void ExecuteOnGetEInvoiceRejectionReason(IssuedEInvoicesApi.GetEInvoiceRejectionReasonApiResponse apiResponse)
        {
            OnGetEInvoiceRejectionReason?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEInvoiceRejectionReason(Exception exception)
        {
            OnErrorGetEInvoiceRejectionReason?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetEInvoiceXml;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetEInvoiceXml;

        internal void ExecuteOnGetEInvoiceXml(IssuedEInvoicesApi.GetEInvoiceXmlApiResponse apiResponse)
        {
            OnGetEInvoiceXml?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEInvoiceXml(Exception exception)
        {
            OnErrorGetEInvoiceXml?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendEInvoice;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendEInvoice;

        internal void ExecuteOnSendEInvoice(IssuedEInvoicesApi.SendEInvoiceApiResponse apiResponse)
        {
            OnSendEInvoice?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendEInvoice(Exception exception)
        {
            OnErrorSendEInvoice?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnVerifyEInvoiceXml;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorVerifyEInvoiceXml;

        internal void ExecuteOnVerifyEInvoiceXml(IssuedEInvoicesApi.VerifyEInvoiceXmlApiResponse apiResponse)
        {
            OnVerifyEInvoiceXml?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorVerifyEInvoiceXml(Exception exception)
        {
            OnErrorVerifyEInvoiceXml?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class IssuedEInvoicesApi : IIssuedEInvoicesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<IssuedEInvoicesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public IssuedEInvoicesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedEInvoicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssuedEInvoicesApi(ILogger<IssuedEInvoicesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, IssuedEInvoicesApiEvents issuedEInvoicesApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<IssuedEInvoicesApi>();
            HttpClient = httpClient;
            Events = issuedEInvoicesApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatGetEInvoiceRejectionReason(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterGetEInvoiceRejectionReasonDefaultImplementation(IGetEInvoiceRejectionReasonApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterGetEInvoiceRejectionReason(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterGetEInvoiceRejectionReason(ref bool suppressDefaultLog, IGetEInvoiceRejectionReasonApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorGetEInvoiceRejectionReasonDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEInvoiceRejectionReason(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorGetEInvoiceRejectionReason(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Get E-Invoice Rejection Reason Get e-invoice rejection reason
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEInvoiceRejectionReasonApiResponse"/>&gt;</returns>
        public async Task<IGetEInvoiceRejectionReasonApiResponse> GetEInvoiceRejectionReasonOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEInvoiceRejectionReasonAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get E-Invoice Rejection Reason Get e-invoice rejection reason
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEInvoiceRejectionReasonApiResponse"/>&gt;</returns>
        public async Task<IGetEInvoiceRejectionReasonApiResponse> GetEInvoiceRejectionReasonAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetEInvoiceRejectionReason(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/{document_id}/e_invoice/error_reason"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/{document_id}/e_invoice/error_reason");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetEInvoiceRejectionReasonApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEInvoiceRejectionReasonApiResponse>();
                        GetEInvoiceRejectionReasonApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetEInvoiceRejectionReasonApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/{document_id}/e_invoice/error_reason", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetEInvoiceRejectionReasonDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnGetEInvoiceRejectionReason(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEInvoiceRejectionReasonDefaultImplementation(e, "/c/{company_id}/issued_documents/{document_id}/e_invoice/error_reason", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorGetEInvoiceRejectionReason(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEInvoiceRejectionReasonApiResponse"/>
        /// </summary>
        public partial class GetEInvoiceRejectionReasonApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetEInvoiceRejectionReasonApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEInvoiceRejectionReasonApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEInvoiceRejectionReasonApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEInvoiceRejectionReasonApiResponse(ILogger<GetEInvoiceRejectionReasonApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetEInvoiceRejectionReasonApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEInvoiceRejectionReasonApiResponse(ILogger<GetEInvoiceRejectionReasonApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.GetEInvoiceRejectionReasonResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.GetEInvoiceRejectionReasonResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.GetEInvoiceRejectionReasonResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEInvoiceXml(ref int companyId, ref int documentId, ref Option<bool> includeAttachment);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="includeAttachment"></param>
        private void AfterGetEInvoiceXmlDefaultImplementation(IGetEInvoiceXmlApiResponse apiResponseLocalVar, int companyId, int documentId, Option<bool> includeAttachment)
        {
            bool suppressDefaultLog = false;
            AfterGetEInvoiceXml(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId, includeAttachment);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="includeAttachment"></param>
        partial void AfterGetEInvoiceXml(ref bool suppressDefaultLog, IGetEInvoiceXmlApiResponse apiResponseLocalVar, int companyId, int documentId, Option<bool> includeAttachment);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="includeAttachment"></param>
        private void OnErrorGetEInvoiceXmlDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<bool> includeAttachment)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEInvoiceXml(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId, includeAttachment);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="includeAttachment"></param>
        partial void OnErrorGetEInvoiceXml(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<bool> includeAttachment);

        /// <summary>
        /// Get E-Invoice XML Downloads the e-invoice in XML format.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="includeAttachment">Include the attachment to the XML e-invoice. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEInvoiceXmlApiResponse"/>&gt;</returns>
        public async Task<IGetEInvoiceXmlApiResponse> GetEInvoiceXmlOrDefaultAsync(int companyId, int documentId, Option<bool> includeAttachment = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEInvoiceXmlAsync(companyId, documentId, includeAttachment, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get E-Invoice XML Downloads the e-invoice in XML format.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="includeAttachment">Include the attachment to the XML e-invoice. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEInvoiceXmlApiResponse"/>&gt;</returns>
        public async Task<IGetEInvoiceXmlApiResponse> GetEInvoiceXmlAsync(int companyId, int documentId, Option<bool> includeAttachment = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetEInvoiceXml(ref companyId, ref documentId, ref includeAttachment);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/{document_id}/e_invoice/xml"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/{document_id}/e_invoice/xml");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (includeAttachment.IsSet)
                        parseQueryStringLocalVar["include_attachment"] = ClientUtils.ParameterToString(includeAttachment.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/xml"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetEInvoiceXmlApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEInvoiceXmlApiResponse>();
                        GetEInvoiceXmlApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetEInvoiceXmlApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/{document_id}/e_invoice/xml", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetEInvoiceXmlDefaultImplementation(apiResponseLocalVar, companyId, documentId, includeAttachment);

                        Events.ExecuteOnGetEInvoiceXml(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEInvoiceXmlDefaultImplementation(e, "/c/{company_id}/issued_documents/{document_id}/e_invoice/xml", uriBuilderLocalVar.Path, companyId, documentId, includeAttachment);
                Events.ExecuteOnErrorGetEInvoiceXml(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEInvoiceXmlApiResponse"/>
        /// </summary>
        public partial class GetEInvoiceXmlApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IGetEInvoiceXmlApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEInvoiceXmlApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEInvoiceXmlApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEInvoiceXmlApiResponse(ILogger<GetEInvoiceXmlApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetEInvoiceXmlApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEInvoiceXmlApiResponse(ILogger<GetEInvoiceXmlApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out string result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendEInvoice(ref int companyId, ref int documentId, Option<SendEInvoiceRequest> sendEInvoiceRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sendEInvoiceRequest"></param>
        /// <returns></returns>
        private void ValidateSendEInvoice(Option<SendEInvoiceRequest> sendEInvoiceRequest)
        {
            if (sendEInvoiceRequest.IsSet && sendEInvoiceRequest.Value == null)
                throw new ArgumentNullException(nameof(sendEInvoiceRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="sendEInvoiceRequest"></param>
        private void AfterSendEInvoiceDefaultImplementation(ISendEInvoiceApiResponse apiResponseLocalVar, int companyId, int documentId, Option<SendEInvoiceRequest> sendEInvoiceRequest)
        {
            bool suppressDefaultLog = false;
            AfterSendEInvoice(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId, sendEInvoiceRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="sendEInvoiceRequest"></param>
        partial void AfterSendEInvoice(ref bool suppressDefaultLog, ISendEInvoiceApiResponse apiResponseLocalVar, int companyId, int documentId, Option<SendEInvoiceRequest> sendEInvoiceRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="sendEInvoiceRequest"></param>
        private void OnErrorSendEInvoiceDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<SendEInvoiceRequest> sendEInvoiceRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendEInvoice(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId, sendEInvoiceRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        /// <param name="sendEInvoiceRequest"></param>
        partial void OnErrorSendEInvoice(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId, Option<SendEInvoiceRequest> sendEInvoiceRequest);

        /// <summary>
        /// Send E-Invoice Sends the e-invoice to SDI.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="sendEInvoiceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendEInvoiceApiResponse"/>&gt;</returns>
        public async Task<ISendEInvoiceApiResponse> SendEInvoiceOrDefaultAsync(int companyId, int documentId, Option<SendEInvoiceRequest> sendEInvoiceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendEInvoiceAsync(companyId, documentId, sendEInvoiceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Send E-Invoice Sends the e-invoice to SDI.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="sendEInvoiceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendEInvoiceApiResponse"/>&gt;</returns>
        public async Task<ISendEInvoiceApiResponse> SendEInvoiceAsync(int companyId, int documentId, Option<SendEInvoiceRequest> sendEInvoiceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendEInvoice(sendEInvoiceRequest);

                FormatSendEInvoice(ref companyId, ref documentId, sendEInvoiceRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/{document_id}/e_invoice/send"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/{document_id}/e_invoice/send");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    if (sendEInvoiceRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (sendEInvoiceRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(sendEInvoiceRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<SendEInvoiceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendEInvoiceApiResponse>();
                        SendEInvoiceApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new SendEInvoiceApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/{document_id}/e_invoice/send", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterSendEInvoiceDefaultImplementation(apiResponseLocalVar, companyId, documentId, sendEInvoiceRequest);

                        Events.ExecuteOnSendEInvoice(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendEInvoiceDefaultImplementation(e, "/c/{company_id}/issued_documents/{document_id}/e_invoice/send", uriBuilderLocalVar.Path, companyId, documentId, sendEInvoiceRequest);
                Events.ExecuteOnErrorSendEInvoice(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendEInvoiceApiResponse"/>
        /// </summary>
        public partial class SendEInvoiceApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, ISendEInvoiceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendEInvoiceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendEInvoiceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendEInvoiceApiResponse(ILogger<SendEInvoiceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="SendEInvoiceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendEInvoiceApiResponse(ILogger<SendEInvoiceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.SendEInvoiceResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.SendEInvoiceResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.SendEInvoiceResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatVerifyEInvoiceXml(ref int companyId, ref int documentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void AfterVerifyEInvoiceXmlDefaultImplementation(IVerifyEInvoiceXmlApiResponse apiResponseLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLog = false;
            AfterVerifyEInvoiceXml(ref suppressDefaultLog, apiResponseLocalVar, companyId, documentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);

        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void AfterVerifyEInvoiceXml(ref bool suppressDefaultLog, IVerifyEInvoiceXmlApiResponse apiResponseLocalVar, int companyId, int documentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        private void OnErrorVerifyEInvoiceXmlDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorVerifyEInvoiceXml(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, documentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");

        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="documentId"></param>
        partial void OnErrorVerifyEInvoiceXml(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int companyId, int documentId);

        /// <summary>
        /// Verify E-Invoice XML Verifies the e-invoice XML format. Checks if all of the mandatory fields are filled and compliant to the right format.
        /// </summary>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyEInvoiceXmlApiResponse"/>&gt;</returns>
        public async Task<IVerifyEInvoiceXmlApiResponse> VerifyEInvoiceXmlOrDefaultAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await VerifyEInvoiceXmlAsync(companyId, documentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Verify E-Invoice XML Verifies the e-invoice XML format. Checks if all of the mandatory fields are filled and compliant to the right format.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyEInvoiceXmlApiResponse"/>&gt;</returns>
        public async Task<IVerifyEInvoiceXmlApiResponse> VerifyEInvoiceXmlAsync(int companyId, int documentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatVerifyEInvoiceXml(ref companyId, ref documentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/c/{company_id}/issued_documents/{document_id}/e_invoice/xml_verify"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/c/{company_id}/issued_documents/{document_id}/e_invoice/xml_verify");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcompany_id%7D", Uri.EscapeDataString(companyId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdocument_id%7D", Uri.EscapeDataString(documentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<VerifyEInvoiceXmlApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<VerifyEInvoiceXmlApiResponse>();
                        VerifyEInvoiceXmlApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new VerifyEInvoiceXmlApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/c/{company_id}/issued_documents/{document_id}/e_invoice/xml_verify", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterVerifyEInvoiceXmlDefaultImplementation(apiResponseLocalVar, companyId, documentId);

                        Events.ExecuteOnVerifyEInvoiceXml(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorVerifyEInvoiceXmlDefaultImplementation(e, "/c/{company_id}/issued_documents/{document_id}/e_invoice/xml_verify", uriBuilderLocalVar.Path, companyId, documentId);
                Events.ExecuteOnErrorVerifyEInvoiceXml(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="VerifyEInvoiceXmlApiResponse"/>
        /// </summary>
        public partial class VerifyEInvoiceXmlApiResponse : It.FattureInCloud.Sdk.Client.ApiResponse, IVerifyEInvoiceXmlApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<VerifyEInvoiceXmlApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="VerifyEInvoiceXmlApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public VerifyEInvoiceXmlApiResponse(ILogger<VerifyEInvoiceXmlApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="VerifyEInvoiceXmlApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public VerifyEInvoiceXmlApiResponse(ILogger<VerifyEInvoiceXmlApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.VerifyEInvoiceXmlResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.VerifyEInvoiceXmlResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out It.FattureInCloud.Sdk.Model.VerifyEInvoiceXmlResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public It.FattureInCloud.Sdk.Model.VerifyEInvoiceXmlErrorResponse UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<It.FattureInCloud.Sdk.Model.VerifyEInvoiceXmlErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out It.FattureInCloud.Sdk.Model.VerifyEInvoiceXmlErrorResponse result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
