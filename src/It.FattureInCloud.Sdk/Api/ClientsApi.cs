/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientsApiSync : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///     Create Client
        /// </summary>
        /// <remarks>
        ///     Creates a new client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createClientRequest">The client to create (optional)</param>
        /// <returns>CreateClientResponse</returns>
        CreateClientResponse CreateClient(int companyId, CreateClientRequest createClientRequest = default);

        /// <summary>
        ///     Create Client
        /// </summary>
        /// <remarks>
        ///     Creates a new client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createClientRequest">The client to create (optional)</param>
        /// <returns>ApiResponse of CreateClientResponse</returns>
        ApiResponse<CreateClientResponse> CreateClientWithHttpInfo(int companyId,
            CreateClientRequest createClientRequest = default);

        /// <summary>
        ///     Delete Client
        /// </summary>
        /// <remarks>
        ///     Deletes the specified client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <returns></returns>
        void DeleteClient(int companyId, int clientId);

        /// <summary>
        ///     Delete Client
        /// </summary>
        /// <remarks>
        ///     Deletes the specified client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteClientWithHttpInfo(int companyId, int clientId);

        /// <summary>
        ///     Get Client
        /// </summary>
        /// <remarks>
        ///     Gets the specified client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>GetClientResponse</returns>
        GetClientResponse GetClient(int companyId, int clientId, string fields = default(string),
            string fieldset = default(string));

        /// <summary>
        ///     Get Client
        /// </summary>
        /// <remarks>
        ///     Gets the specified client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of GetClientResponse</returns>
        ApiResponse<GetClientResponse> GetClientWithHttpInfo(int companyId, int clientId,
            string fields = default(string), string fieldset = default(string));

        /// <summary>
        ///     List Clients
        /// </summary>
        /// <remarks>
        ///     Lists the clients.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <returns>ListClientsResponse</returns>
        ListClientsResponse ListClients(int companyId, string fields = default(string),
            string fieldset = default(string), string sort = default(string), int? page = default(int?),
            int? perPage = default(int?), string q = default(string));

        /// <summary>
        ///     List Clients
        /// </summary>
        /// <remarks>
        ///     Lists the clients.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <returns>ApiResponse of ListClientsResponse</returns>
        ApiResponse<ListClientsResponse> ListClientsWithHttpInfo(int companyId, string fields = default(string),
            string fieldset = default(string), string sort = default(string), int? page = default(int?),
            int? perPage = default(int?), string q = default(string));

        /// <summary>
        ///     Modify Client
        /// </summary>
        /// <remarks>
        ///     Modifies the specified client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="modifyClientRequest">The modified Client. First level parameters are managed in delta mode. (optional)</param>
        /// <returns>ModifyClientResponse</returns>
        ModifyClientResponse ModifyClient(int companyId, int clientId,
            ModifyClientRequest modifyClientRequest = default);

        /// <summary>
        ///     Modify Client
        /// </summary>
        /// <remarks>
        ///     Modifies the specified client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="modifyClientRequest">The modified Client. First level parameters are managed in delta mode. (optional)</param>
        /// <returns>ApiResponse of ModifyClientResponse</returns>
        ApiResponse<ModifyClientResponse> ModifyClientWithHttpInfo(int companyId, int clientId,
            ModifyClientRequest modifyClientRequest = default);

        #endregion Synchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        ///     Create Client
        /// </summary>
        /// <remarks>
        ///     Creates a new client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createClientRequest">The client to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientResponse</returns>
        System.Threading.Tasks.Task<CreateClientResponse> CreateClientAsync(int companyId,
            CreateClientRequest createClientRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Create Client
        /// </summary>
        /// <remarks>
        ///     Creates a new client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createClientRequest">The client to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateClientResponse>> CreateClientWithHttpInfoAsync(int companyId,
            CreateClientRequest createClientRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Delete Client
        /// </summary>
        /// <remarks>
        ///     Deletes the specified client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteClientAsync(int companyId, int clientId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Delete Client
        /// </summary>
        /// <remarks>
        ///     Deletes the specified client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClientWithHttpInfoAsync(int companyId, int clientId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Client
        /// </summary>
        /// <remarks>
        ///     Gets the specified client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetClientResponse</returns>
        System.Threading.Tasks.Task<GetClientResponse> GetClientAsync(int companyId, int clientId,
            string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Get Client
        /// </summary>
        /// <remarks>
        ///     Gets the specified client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetClientResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetClientResponse>> GetClientWithHttpInfoAsync(int companyId,
            int clientId, string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Clients
        /// </summary>
        /// <remarks>
        ///     Lists the clients.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListClientsResponse</returns>
        System.Threading.Tasks.Task<ListClientsResponse> ListClientsAsync(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string),
            int? page = default(int?), int? perPage = default(int?), string q = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     List Clients
        /// </summary>
        /// <remarks>
        ///     Lists the clients.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListClientsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListClientsResponse>> ListClientsWithHttpInfoAsync(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string),
            int? page = default(int?), int? perPage = default(int?), string q = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Modify Client
        /// </summary>
        /// <remarks>
        ///     Modifies the specified client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="modifyClientRequest">The modified Client. First level parameters are managed in delta mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyClientResponse</returns>
        System.Threading.Tasks.Task<ModifyClientResponse> ModifyClientAsync(int companyId, int clientId,
            ModifyClientRequest modifyClientRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///     Modify Client
        /// </summary>
        /// <remarks>
        ///     Modifies the specified client.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="modifyClientRequest">The modified Client. First level parameters are managed in delta mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyClientResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyClientResponse>> ModifyClientWithHttpInfoAsync(int companyId,
            int clientId, ModifyClientRequest modifyClientRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientsApi : IClientsApiSync, IClientsApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ClientsApi : IClientsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ClientsApi" /> class.
        /// </summary>
        /// <returns></returns>
        public ClientsApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ClientsApi" /> class.
        /// </summary>
        /// <returns></returns>
        public ClientsApi(string basePath)
        {
            Configuration = Sdk.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ClientsApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientsApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            Configuration = Sdk.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ClientsApi" /> class
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ClientsApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Create Client Creates a new client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createClientRequest">The client to create (optional)</param>
        /// <returns>CreateClientResponse</returns>
        public CreateClientResponse CreateClient(int companyId, CreateClientRequest createClientRequest = default)
        {
            var localVarResponse = CreateClientWithHttpInfo(companyId, createClientRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create Client Creates a new client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createClientRequest">The client to create (optional)</param>
        /// <returns>ApiResponse of CreateClientResponse</returns>
        public ApiResponse<CreateClientResponse> CreateClientWithHttpInfo(int companyId,
            CreateClientRequest createClientRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createClientRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Post<CreateClientResponse>("/c/{company_id}/entities/clients",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("CreateClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Create Client Creates a new client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createClientRequest">The client to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientResponse</returns>
        public async System.Threading.Tasks.Task<CreateClientResponse> CreateClientAsync(int companyId,
            CreateClientRequest createClientRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<CreateClientResponse> localVarResponse =
                await CreateClientWithHttpInfoAsync(companyId, createClientRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create Client Creates a new client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createClientRequest">The client to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateClientResponse>> CreateClientWithHttpInfoAsync(
            int companyId, CreateClientRequest createClientRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createClientRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .PostAsync<CreateClientResponse>("/c/{company_id}/entities/clients", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("CreateClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Delete Client Deletes the specified client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <returns></returns>
        public void DeleteClient(int companyId, int clientId)
        {
            DeleteClientWithHttpInfo(companyId, clientId);
        }

        /// <summary>
        ///     Delete Client Deletes the specified client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteClientWithHttpInfo(int companyId, int clientId)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("client_id",
                ClientUtils.ParameterToString(clientId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Delete<Object>("/c/{company_id}/entities/clients/{client_id}",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("DeleteClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Delete Client Deletes the specified client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteClientAsync(int companyId, int clientId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteClientWithHttpInfoAsync(companyId, clientId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///     Delete Client Deletes the specified client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClientWithHttpInfoAsync(int companyId,
            int clientId,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("client_id",
                ClientUtils.ParameterToString(clientId)); // path parameter

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .DeleteAsync<Object>("/c/{company_id}/entities/clients/{client_id}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("DeleteClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Client Gets the specified client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>GetClientResponse</returns>
        public GetClientResponse GetClient(int companyId, int clientId, string fields = default(string),
            string fieldset = default(string))
        {
            var localVarResponse = GetClientWithHttpInfo(companyId, clientId, fields, fieldset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Client Gets the specified client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <returns>ApiResponse of GetClientResponse</returns>
        public ApiResponse<GetClientResponse> GetClientWithHttpInfo(int companyId, int clientId,
            string fields = default(string), string fieldset = default(string))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("client_id",
                ClientUtils.ParameterToString(clientId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<GetClientResponse>("/c/{company_id}/entities/clients/{client_id}",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Get Client Gets the specified client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetClientResponse</returns>
        public async System.Threading.Tasks.Task<GetClientResponse> GetClientAsync(int companyId, int clientId,
            string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<GetClientResponse> localVarResponse =
                await GetClientWithHttpInfoAsync(companyId, clientId, fields, fieldset, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Client Gets the specified client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetClientResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetClientResponse>> GetClientWithHttpInfoAsync(
            int companyId, int clientId, string fields = default(string), string fieldset = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("client_id",
                ClientUtils.ParameterToString(clientId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<GetClientResponse>("/c/{company_id}/entities/clients/{client_id}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Clients Lists the clients.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <returns>ListClientsResponse</returns>
        public ListClientsResponse ListClients(int companyId, string fields = default(string),
            string fieldset = default(string), string sort = default(string), int? page = default(int?),
            int? perPage = default(int?), string q = default(string))
        {
            var localVarResponse = ListClientsWithHttpInfo(companyId, fields, fieldset, sort, page, perPage, q);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Clients Lists the clients.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <returns>ApiResponse of ListClientsResponse</returns>
        public ApiResponse<ListClientsResponse> ListClientsWithHttpInfo(int companyId, string fields = default(string),
            string fieldset = default(string), string sort = default(string), int? page = default(int?),
            int? perPage = default(int?), string q = default(string))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            if (sort != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (perPage != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            if (q != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Get<ListClientsResponse>("/c/{company_id}/entities/clients",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListClients", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     List Clients Lists the clients.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListClientsResponse</returns>
        public async System.Threading.Tasks.Task<ListClientsResponse> ListClientsAsync(int companyId,
            string fields = default(string), string fieldset = default(string), string sort = default(string),
            int? page = default(int?), int? perPage = default(int?), string q = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ListClientsResponse> localVarResponse =
                await ListClientsWithHttpInfoAsync(companyId, fields, fieldset, sort, page, perPage, q,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List Clients Lists the clients.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListClientsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListClientsResponse>> ListClientsWithHttpInfoAsync(
            int companyId, string fields = default(string), string fieldset = default(string),
            string sort = default(string), int? page = default(int?), int? perPage = default(int?),
            string q = default(string),
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            if (fields != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            if (fieldset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            if (sort != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort", sort));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (perPage != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            if (q != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .GetAsync<ListClientsResponse>("/c/{company_id}/entities/clients", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ListClients", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Modify Client Modifies the specified client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="modifyClientRequest">The modified Client. First level parameters are managed in delta mode. (optional)</param>
        /// <returns>ModifyClientResponse</returns>
        public ModifyClientResponse ModifyClient(int companyId, int clientId,
            ModifyClientRequest modifyClientRequest = default)
        {
            var localVarResponse = ModifyClientWithHttpInfo(companyId, clientId, modifyClientRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Modify Client Modifies the specified client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="modifyClientRequest">The modified Client. First level parameters are managed in delta mode. (optional)</param>
        /// <returns>ApiResponse of ModifyClientResponse</returns>
        public ApiResponse<ModifyClientResponse> ModifyClientWithHttpInfo(int companyId, int clientId,
            ModifyClientRequest modifyClientRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("client_id",
                ClientUtils.ParameterToString(clientId)); // path parameter
            localVarRequestOptions.Data = modifyClientRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = Client.Put<ModifyClientResponse>("/c/{company_id}/entities/clients/{client_id}",
                localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ModifyClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Modify Client Modifies the specified client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="modifyClientRequest">The modified Client. First level parameters are managed in delta mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyClientResponse</returns>
        public async System.Threading.Tasks.Task<ModifyClientResponse> ModifyClientAsync(int companyId, int clientId,
            ModifyClientRequest modifyClientRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ModifyClientResponse> localVarResponse =
                await ModifyClientWithHttpInfoAsync(companyId, clientId, modifyClientRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Modify Client Modifies the specified client.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="clientId">The ID of the client.</param>
        /// <param name="modifyClientRequest">The modified Client. First level parameters are managed in delta mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyClientResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModifyClientResponse>> ModifyClientWithHttpInfoAsync(
            int companyId, int clientId, ModifyClientRequest modifyClientRequest = default,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("company_id",
                ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("client_id",
                ClientUtils.ParameterToString(clientId)); // path parameter
            localVarRequestOptions.Data = modifyClientRequest;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!string.IsNullOrEmpty(Configuration.AccessToken) &&
                !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .PutAsync<ModifyClientResponse>("/c/{company_id}/entities/clients/{client_id}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("ModifyClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }
    }
}