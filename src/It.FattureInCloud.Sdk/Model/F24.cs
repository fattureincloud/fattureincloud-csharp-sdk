// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// F24
    /// </summary>
    public partial class F24 : IEquatable<F24>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="F24" /> class.
        /// </summary>
        /// <param name="id">F24 id</param>
        /// <param name="dueDate">F24 due date</param>
        /// <param name="status">status</param>
        /// <param name="paymentAccount">paymentAccount</param>
        /// <param name="amount">F24 amount</param>
        /// <param name="attachmentUrl">[Temporary] [Read Only] F24 url of the attached file</param>
        /// <param name="attachmentToken">[Write Only]  F24 attachment token returned by POST /taxes/attachment</param>
        /// <param name="description">F24 description</param>
        [JsonConstructor]
        public F24(Option<int?> id = default, Option<DateTimeOffset?> dueDate = default, Option<F24Status?> status = default, Option<PaymentAccount> paymentAccount = default, Option<decimal?> amount = default, Option<string> attachmentUrl = default, Option<string> attachmentToken = default, Option<string> description = default)
        {
            IdOption = id;
            DueDateOption = dueDate;
            StatusOption = status;
            PaymentAccountOption = paymentAccount;
            AmountOption = amount;
            AttachmentUrlOption = attachmentUrl;
            AttachmentTokenOption = attachmentToken;
            DescriptionOption = description;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<F24Status?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public F24Status? Status { get { return this.StatusOption; } set { this.StatusOption = new Option<F24Status?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// F24 id
        /// </summary>
        /// <value>F24 id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of DueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> DueDateOption { get; private set; }

        /// <summary>
        /// F24 due date
        /// </summary>
        /// <value>F24 due date</value>
        /* <example>Mon Feb 12 00:00:00 UTC 2018</example> */
        [JsonPropertyName("due_date")]
        public DateTimeOffset? DueDate { get { return this.DueDateOption; } set { this.DueDateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of PaymentAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentAccount> PaymentAccountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentAccount
        /// </summary>
        [JsonPropertyName("payment_account")]
        public PaymentAccount PaymentAccount { get { return this.PaymentAccountOption; } set { this.PaymentAccountOption = new Option<PaymentAccount>(value); } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountOption { get; private set; }

        /// <summary>
        /// F24 amount
        /// </summary>
        /// <value>F24 amount</value>
        /* <example>300</example> */
        [JsonPropertyName("amount")]
        public decimal? Amount { get { return this.AmountOption; } set { this.AmountOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AttachmentUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AttachmentUrlOption { get; }

        /// <summary>
        /// [Temporary] [Read Only] F24 url of the attached file
        /// </summary>
        /// <value>[Temporary] [Read Only] F24 url of the attached file</value>
        [JsonPropertyName("attachment_url")]
        public string AttachmentUrl { get { return this.AttachmentUrlOption; } }

        /// <summary>
        /// Used to track the state of AttachmentToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AttachmentTokenOption { get; private set; }

        /// <summary>
        /// [Write Only]  F24 attachment token returned by POST /taxes/attachment
        /// </summary>
        /// <value>[Write Only]  F24 attachment token returned by POST /taxes/attachment</value>
        [JsonPropertyName("attachment_token")]
        public string AttachmentToken { get { return this.AttachmentTokenOption; } set { this.AttachmentTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// F24 description
        /// </summary>
        /// <value>F24 description</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class F24 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PaymentAccount: ").Append(PaymentAccount).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("  AttachmentToken: ").Append(AttachmentToken).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as F24);
        }

        /// <summary>
        /// Returns true if F24 instances are equal
        /// </summary>
        /// <param name="input">Instance of F24 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(F24 input)
        {
            if (input == null)
                return false;

            return 
                (
                    AttachmentUrl == input.AttachmentUrl ||
                    (AttachmentUrl != null &&
                    AttachmentUrl.Equals(input.AttachmentUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (AttachmentUrl != null)
                    hashCode = (hashCode * 59) + AttachmentUrl.GetHashCode();


                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="F24" />
    /// </summary>
    public class F24JsonConverter : JsonConverter<F24>
    {
        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="F24" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override F24 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<DateTimeOffset?> dueDate = default;
            Option<F24Status?> status = default;
            Option<PaymentAccount> paymentAccount = default;
            Option<decimal?> amount = default;
            Option<string> attachmentUrl = default;
            Option<string> attachmentToken = default;
            Option<string> description = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "due_date":
                            dueDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<F24Status?>(F24StatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "payment_account":
                            paymentAccount = new Option<PaymentAccount>(JsonSerializer.Deserialize<PaymentAccount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "amount":
                            amount = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "attachment_url":
                            attachmentUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "attachment_token":
                            attachmentToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class F24.");

            return new F24(id, dueDate, status, paymentAccount, amount, attachmentUrl, attachmentToken, description);
        }

        /// <summary>
        /// Serializes a <see cref="F24" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="f24"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, F24 f24, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, f24, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="F24" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="f24"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, F24 f24, JsonSerializerOptions jsonSerializerOptions)
        {
            if (f24.IdOption.IsSet)
                if (f24.IdOption.Value != null)
                    writer.WriteNumber("id", f24.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (f24.DueDateOption.IsSet)
                if (f24.DueDateOption.Value != null)
                    writer.WriteString("due_date", f24.DueDateOption.Value.Value.ToString(DueDateFormat));
                else
                    writer.WriteNull("due_date");

            if (f24.StatusOption.IsSet)
            {
                var statusRawValue = F24StatusValueConverter.ToJsonValue(f24.Status.Value);
                writer.WriteString("status", statusRawValue);
            }
            if (f24.PaymentAccountOption.IsSet)
                if (f24.PaymentAccountOption.Value != null)
                {
                    writer.WritePropertyName("payment_account");
                    JsonSerializer.Serialize(writer, f24.PaymentAccount, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_account");
            if (f24.AmountOption.IsSet)
                if (f24.AmountOption.Value != null)
                    writer.WriteNumber("amount", f24.AmountOption.Value.Value);
                else
                    writer.WriteNull("amount");

            if (f24.AttachmentUrlOption.IsSet)
                if (f24.AttachmentUrlOption.Value != null)
                    writer.WriteString("attachment_url", f24.AttachmentUrl);
                else
                    writer.WriteNull("attachment_url");

            if (f24.AttachmentTokenOption.IsSet)
                if (f24.AttachmentTokenOption.Value != null)
                    writer.WriteString("attachment_token", f24.AttachmentToken);
                else
                    writer.WriteNull("attachment_token");

            if (f24.DescriptionOption.IsSet)
                if (f24.DescriptionOption.Value != null)
                    writer.WriteString("description", f24.Description);
                else
                    writer.WriteNull("description");
        }
    }
}
