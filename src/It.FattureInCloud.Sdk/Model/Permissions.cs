// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Permissions
    /// </summary>
    public partial class Permissions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Permissions" /> class.
        /// </summary>
        /// <param name="ficSituation">ficSituation</param>
        /// <param name="ficClients">ficClients</param>
        /// <param name="ficSuppliers">ficSuppliers</param>
        /// <param name="ficProducts">ficProducts</param>
        /// <param name="ficIssuedDocuments">ficIssuedDocuments</param>
        /// <param name="ficReceivedDocuments">ficReceivedDocuments</param>
        /// <param name="ficReceipts">ficReceipts</param>
        /// <param name="ficCalendar">ficCalendar</param>
        /// <param name="ficArchive">ficArchive</param>
        /// <param name="ficTaxes">ficTaxes</param>
        /// <param name="ficStock">ficStock</param>
        /// <param name="ficCashbook">ficCashbook</param>
        /// <param name="ficSettings">ficSettings</param>
        /// <param name="ficEmails">ficEmails</param>
        /// <param name="ficExport">ficExport</param>
        /// <param name="ficImportBankstatements">ficImportBankstatements</param>
        /// <param name="ficImportClientsSuppliers">ficImportClientsSuppliers</param>
        /// <param name="ficImportIssuedDocuments">ficImportIssuedDocuments</param>
        /// <param name="ficImportProducts">ficImportProducts</param>
        /// <param name="ficRecurring">ficRecurring</param>
        /// <param name="ficRiba">ficRiba</param>
        /// <param name="dicEmployees">dicEmployees</param>
        /// <param name="dicSettings">dicSettings</param>
        /// <param name="dicTimesheet">dicTimesheet</param>
        /// <param name="ficIssuedDocumentsDetailed">ficIssuedDocumentsDetailed</param>
        [JsonConstructor]
        public Permissions(Option<PermissionLevel?> ficSituation = default, Option<PermissionLevel?> ficClients = default, Option<PermissionLevel?> ficSuppliers = default, Option<PermissionLevel?> ficProducts = default, Option<PermissionLevel?> ficIssuedDocuments = default, Option<PermissionLevel?> ficReceivedDocuments = default, Option<PermissionLevel?> ficReceipts = default, Option<PermissionLevel?> ficCalendar = default, Option<PermissionLevel?> ficArchive = default, Option<PermissionLevel?> ficTaxes = default, Option<PermissionLevel?> ficStock = default, Option<PermissionLevel?> ficCashbook = default, Option<PermissionLevel?> ficSettings = default, Option<PermissionLevel?> ficEmails = default, Option<PermissionLevel?> ficExport = default, Option<PermissionLevel?> ficImportBankstatements = default, Option<PermissionLevel?> ficImportClientsSuppliers = default, Option<PermissionLevel?> ficImportIssuedDocuments = default, Option<PermissionLevel?> ficImportProducts = default, Option<PermissionLevel?> ficRecurring = default, Option<PermissionLevel?> ficRiba = default, Option<PermissionLevel?> dicEmployees = default, Option<PermissionLevel?> dicSettings = default, Option<PermissionLevel?> dicTimesheet = default, Option<PermissionsFicIssuedDocumentsDetailed> ficIssuedDocumentsDetailed = default)
        {
            FicSituationOption = ficSituation;
            FicClientsOption = ficClients;
            FicSuppliersOption = ficSuppliers;
            FicProductsOption = ficProducts;
            FicIssuedDocumentsOption = ficIssuedDocuments;
            FicReceivedDocumentsOption = ficReceivedDocuments;
            FicReceiptsOption = ficReceipts;
            FicCalendarOption = ficCalendar;
            FicArchiveOption = ficArchive;
            FicTaxesOption = ficTaxes;
            FicStockOption = ficStock;
            FicCashbookOption = ficCashbook;
            FicSettingsOption = ficSettings;
            FicEmailsOption = ficEmails;
            FicExportOption = ficExport;
            FicImportBankstatementsOption = ficImportBankstatements;
            FicImportClientsSuppliersOption = ficImportClientsSuppliers;
            FicImportIssuedDocumentsOption = ficImportIssuedDocuments;
            FicImportProductsOption = ficImportProducts;
            FicRecurringOption = ficRecurring;
            FicRibaOption = ficRiba;
            DicEmployeesOption = dicEmployees;
            DicSettingsOption = dicSettings;
            DicTimesheetOption = dicTimesheet;
            FicIssuedDocumentsDetailedOption = ficIssuedDocumentsDetailed;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FicSituation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicSituationOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicSituation
        /// </summary>
        [JsonPropertyName("fic_situation")]
        public PermissionLevel? FicSituation { get { return this.FicSituationOption; } set { this.FicSituationOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicClients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicClientsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicClients
        /// </summary>
        [JsonPropertyName("fic_clients")]
        public PermissionLevel? FicClients { get { return this.FicClientsOption; } set { this.FicClientsOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicSuppliers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicSuppliersOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicSuppliers
        /// </summary>
        [JsonPropertyName("fic_suppliers")]
        public PermissionLevel? FicSuppliers { get { return this.FicSuppliersOption; } set { this.FicSuppliersOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicProducts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicProductsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicProducts
        /// </summary>
        [JsonPropertyName("fic_products")]
        public PermissionLevel? FicProducts { get { return this.FicProductsOption; } set { this.FicProductsOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicIssuedDocuments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicIssuedDocumentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicIssuedDocuments
        /// </summary>
        [JsonPropertyName("fic_issued_documents")]
        public PermissionLevel? FicIssuedDocuments { get { return this.FicIssuedDocumentsOption; } set { this.FicIssuedDocumentsOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicReceivedDocuments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicReceivedDocumentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicReceivedDocuments
        /// </summary>
        [JsonPropertyName("fic_received_documents")]
        public PermissionLevel? FicReceivedDocuments { get { return this.FicReceivedDocumentsOption; } set { this.FicReceivedDocumentsOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicReceipts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicReceiptsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicReceipts
        /// </summary>
        [JsonPropertyName("fic_receipts")]
        public PermissionLevel? FicReceipts { get { return this.FicReceiptsOption; } set { this.FicReceiptsOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicCalendar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicCalendarOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicCalendar
        /// </summary>
        [JsonPropertyName("fic_calendar")]
        public PermissionLevel? FicCalendar { get { return this.FicCalendarOption; } set { this.FicCalendarOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicArchive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicArchiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicArchive
        /// </summary>
        [JsonPropertyName("fic_archive")]
        public PermissionLevel? FicArchive { get { return this.FicArchiveOption; } set { this.FicArchiveOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicTaxes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicTaxesOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicTaxes
        /// </summary>
        [JsonPropertyName("fic_taxes")]
        public PermissionLevel? FicTaxes { get { return this.FicTaxesOption; } set { this.FicTaxesOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicStock
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicStockOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicStock
        /// </summary>
        [JsonPropertyName("fic_stock")]
        public PermissionLevel? FicStock { get { return this.FicStockOption; } set { this.FicStockOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicCashbook
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicCashbookOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicCashbook
        /// </summary>
        [JsonPropertyName("fic_cashbook")]
        public PermissionLevel? FicCashbook { get { return this.FicCashbookOption; } set { this.FicCashbookOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicSettings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicSettingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicSettings
        /// </summary>
        [JsonPropertyName("fic_settings")]
        public PermissionLevel? FicSettings { get { return this.FicSettingsOption; } set { this.FicSettingsOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicEmails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicEmailsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicEmails
        /// </summary>
        [JsonPropertyName("fic_emails")]
        public PermissionLevel? FicEmails { get { return this.FicEmailsOption; } set { this.FicEmailsOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicExport
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicExportOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicExport
        /// </summary>
        [JsonPropertyName("fic_export")]
        public PermissionLevel? FicExport { get { return this.FicExportOption; } set { this.FicExportOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicImportBankstatements
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicImportBankstatementsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicImportBankstatements
        /// </summary>
        [JsonPropertyName("fic_import_bankstatements")]
        public PermissionLevel? FicImportBankstatements { get { return this.FicImportBankstatementsOption; } set { this.FicImportBankstatementsOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicImportClientsSuppliers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicImportClientsSuppliersOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicImportClientsSuppliers
        /// </summary>
        [JsonPropertyName("fic_import_clients_suppliers")]
        public PermissionLevel? FicImportClientsSuppliers { get { return this.FicImportClientsSuppliersOption; } set { this.FicImportClientsSuppliersOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicImportIssuedDocuments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicImportIssuedDocumentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicImportIssuedDocuments
        /// </summary>
        [JsonPropertyName("fic_import_issued_documents")]
        public PermissionLevel? FicImportIssuedDocuments { get { return this.FicImportIssuedDocumentsOption; } set { this.FicImportIssuedDocumentsOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicImportProducts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicImportProductsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicImportProducts
        /// </summary>
        [JsonPropertyName("fic_import_products")]
        public PermissionLevel? FicImportProducts { get { return this.FicImportProductsOption; } set { this.FicImportProductsOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicRecurring
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicRecurringOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicRecurring
        /// </summary>
        [JsonPropertyName("fic_recurring")]
        public PermissionLevel? FicRecurring { get { return this.FicRecurringOption; } set { this.FicRecurringOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicRiba
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> FicRibaOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicRiba
        /// </summary>
        [JsonPropertyName("fic_riba")]
        public PermissionLevel? FicRiba { get { return this.FicRibaOption; } set { this.FicRibaOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of DicEmployees
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> DicEmployeesOption { get; private set; }

        /// <summary>
        /// Gets or Sets DicEmployees
        /// </summary>
        [JsonPropertyName("dic_employees")]
        public PermissionLevel? DicEmployees { get { return this.DicEmployeesOption; } set { this.DicEmployeesOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of DicSettings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> DicSettingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets DicSettings
        /// </summary>
        [JsonPropertyName("dic_settings")]
        public PermissionLevel? DicSettings { get { return this.DicSettingsOption; } set { this.DicSettingsOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of DicTimesheet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> DicTimesheetOption { get; private set; }

        /// <summary>
        /// Gets or Sets DicTimesheet
        /// </summary>
        [JsonPropertyName("dic_timesheet")]
        public PermissionLevel? DicTimesheet { get { return this.DicTimesheetOption; } set { this.DicTimesheetOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of FicIssuedDocumentsDetailed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionsFicIssuedDocumentsDetailed> FicIssuedDocumentsDetailedOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicIssuedDocumentsDetailed
        /// </summary>
        [JsonPropertyName("fic_issued_documents_detailed")]
        public PermissionsFicIssuedDocumentsDetailed FicIssuedDocumentsDetailed { get { return this.FicIssuedDocumentsDetailedOption; } set { this.FicIssuedDocumentsDetailedOption = new Option<PermissionsFicIssuedDocumentsDetailed>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Permissions {\n");
            sb.Append("  FicSituation: ").Append(FicSituation).Append("\n");
            sb.Append("  FicClients: ").Append(FicClients).Append("\n");
            sb.Append("  FicSuppliers: ").Append(FicSuppliers).Append("\n");
            sb.Append("  FicProducts: ").Append(FicProducts).Append("\n");
            sb.Append("  FicIssuedDocuments: ").Append(FicIssuedDocuments).Append("\n");
            sb.Append("  FicReceivedDocuments: ").Append(FicReceivedDocuments).Append("\n");
            sb.Append("  FicReceipts: ").Append(FicReceipts).Append("\n");
            sb.Append("  FicCalendar: ").Append(FicCalendar).Append("\n");
            sb.Append("  FicArchive: ").Append(FicArchive).Append("\n");
            sb.Append("  FicTaxes: ").Append(FicTaxes).Append("\n");
            sb.Append("  FicStock: ").Append(FicStock).Append("\n");
            sb.Append("  FicCashbook: ").Append(FicCashbook).Append("\n");
            sb.Append("  FicSettings: ").Append(FicSettings).Append("\n");
            sb.Append("  FicEmails: ").Append(FicEmails).Append("\n");
            sb.Append("  FicExport: ").Append(FicExport).Append("\n");
            sb.Append("  FicImportBankstatements: ").Append(FicImportBankstatements).Append("\n");
            sb.Append("  FicImportClientsSuppliers: ").Append(FicImportClientsSuppliers).Append("\n");
            sb.Append("  FicImportIssuedDocuments: ").Append(FicImportIssuedDocuments).Append("\n");
            sb.Append("  FicImportProducts: ").Append(FicImportProducts).Append("\n");
            sb.Append("  FicRecurring: ").Append(FicRecurring).Append("\n");
            sb.Append("  FicRiba: ").Append(FicRiba).Append("\n");
            sb.Append("  DicEmployees: ").Append(DicEmployees).Append("\n");
            sb.Append("  DicSettings: ").Append(DicSettings).Append("\n");
            sb.Append("  DicTimesheet: ").Append(DicTimesheet).Append("\n");
            sb.Append("  FicIssuedDocumentsDetailed: ").Append(FicIssuedDocumentsDetailed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="Permissions" />
    /// </summary>
    public class PermissionsJsonConverter : JsonConverter<Permissions>
    {
        /// <summary>
        /// Deserializes json to <see cref="Permissions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Permissions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<PermissionLevel?> ficSituation = default;
            Option<PermissionLevel?> ficClients = default;
            Option<PermissionLevel?> ficSuppliers = default;
            Option<PermissionLevel?> ficProducts = default;
            Option<PermissionLevel?> ficIssuedDocuments = default;
            Option<PermissionLevel?> ficReceivedDocuments = default;
            Option<PermissionLevel?> ficReceipts = default;
            Option<PermissionLevel?> ficCalendar = default;
            Option<PermissionLevel?> ficArchive = default;
            Option<PermissionLevel?> ficTaxes = default;
            Option<PermissionLevel?> ficStock = default;
            Option<PermissionLevel?> ficCashbook = default;
            Option<PermissionLevel?> ficSettings = default;
            Option<PermissionLevel?> ficEmails = default;
            Option<PermissionLevel?> ficExport = default;
            Option<PermissionLevel?> ficImportBankstatements = default;
            Option<PermissionLevel?> ficImportClientsSuppliers = default;
            Option<PermissionLevel?> ficImportIssuedDocuments = default;
            Option<PermissionLevel?> ficImportProducts = default;
            Option<PermissionLevel?> ficRecurring = default;
            Option<PermissionLevel?> ficRiba = default;
            Option<PermissionLevel?> dicEmployees = default;
            Option<PermissionLevel?> dicSettings = default;
            Option<PermissionLevel?> dicTimesheet = default;
            Option<PermissionsFicIssuedDocumentsDetailed> ficIssuedDocumentsDetailed = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "fic_situation":
                            string ficSituationRawValue = utf8JsonReader.GetString();
                            if (ficSituationRawValue != null)
                                ficSituation = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficSituationRawValue));
                            break;
                        case "fic_clients":
                            string ficClientsRawValue = utf8JsonReader.GetString();
                            if (ficClientsRawValue != null)
                                ficClients = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficClientsRawValue));
                            break;
                        case "fic_suppliers":
                            string ficSuppliersRawValue = utf8JsonReader.GetString();
                            if (ficSuppliersRawValue != null)
                                ficSuppliers = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficSuppliersRawValue));
                            break;
                        case "fic_products":
                            string ficProductsRawValue = utf8JsonReader.GetString();
                            if (ficProductsRawValue != null)
                                ficProducts = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficProductsRawValue));
                            break;
                        case "fic_issued_documents":
                            string ficIssuedDocumentsRawValue = utf8JsonReader.GetString();
                            if (ficIssuedDocumentsRawValue != null)
                                ficIssuedDocuments = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficIssuedDocumentsRawValue));
                            break;
                        case "fic_received_documents":
                            string ficReceivedDocumentsRawValue = utf8JsonReader.GetString();
                            if (ficReceivedDocumentsRawValue != null)
                                ficReceivedDocuments = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficReceivedDocumentsRawValue));
                            break;
                        case "fic_receipts":
                            string ficReceiptsRawValue = utf8JsonReader.GetString();
                            if (ficReceiptsRawValue != null)
                                ficReceipts = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficReceiptsRawValue));
                            break;
                        case "fic_calendar":
                            string ficCalendarRawValue = utf8JsonReader.GetString();
                            if (ficCalendarRawValue != null)
                                ficCalendar = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficCalendarRawValue));
                            break;
                        case "fic_archive":
                            string ficArchiveRawValue = utf8JsonReader.GetString();
                            if (ficArchiveRawValue != null)
                                ficArchive = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficArchiveRawValue));
                            break;
                        case "fic_taxes":
                            string ficTaxesRawValue = utf8JsonReader.GetString();
                            if (ficTaxesRawValue != null)
                                ficTaxes = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficTaxesRawValue));
                            break;
                        case "fic_stock":
                            string ficStockRawValue = utf8JsonReader.GetString();
                            if (ficStockRawValue != null)
                                ficStock = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficStockRawValue));
                            break;
                        case "fic_cashbook":
                            string ficCashbookRawValue = utf8JsonReader.GetString();
                            if (ficCashbookRawValue != null)
                                ficCashbook = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficCashbookRawValue));
                            break;
                        case "fic_settings":
                            string ficSettingsRawValue = utf8JsonReader.GetString();
                            if (ficSettingsRawValue != null)
                                ficSettings = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficSettingsRawValue));
                            break;
                        case "fic_emails":
                            string ficEmailsRawValue = utf8JsonReader.GetString();
                            if (ficEmailsRawValue != null)
                                ficEmails = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficEmailsRawValue));
                            break;
                        case "fic_export":
                            string ficExportRawValue = utf8JsonReader.GetString();
                            if (ficExportRawValue != null)
                                ficExport = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficExportRawValue));
                            break;
                        case "fic_import_bankstatements":
                            string ficImportBankstatementsRawValue = utf8JsonReader.GetString();
                            if (ficImportBankstatementsRawValue != null)
                                ficImportBankstatements = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficImportBankstatementsRawValue));
                            break;
                        case "fic_import_clients_suppliers":
                            string ficImportClientsSuppliersRawValue = utf8JsonReader.GetString();
                            if (ficImportClientsSuppliersRawValue != null)
                                ficImportClientsSuppliers = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficImportClientsSuppliersRawValue));
                            break;
                        case "fic_import_issued_documents":
                            string ficImportIssuedDocumentsRawValue = utf8JsonReader.GetString();
                            if (ficImportIssuedDocumentsRawValue != null)
                                ficImportIssuedDocuments = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficImportIssuedDocumentsRawValue));
                            break;
                        case "fic_import_products":
                            string ficImportProductsRawValue = utf8JsonReader.GetString();
                            if (ficImportProductsRawValue != null)
                                ficImportProducts = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficImportProductsRawValue));
                            break;
                        case "fic_recurring":
                            string ficRecurringRawValue = utf8JsonReader.GetString();
                            if (ficRecurringRawValue != null)
                                ficRecurring = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficRecurringRawValue));
                            break;
                        case "fic_riba":
                            string ficRibaRawValue = utf8JsonReader.GetString();
                            if (ficRibaRawValue != null)
                                ficRiba = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ficRibaRawValue));
                            break;
                        case "dic_employees":
                            string dicEmployeesRawValue = utf8JsonReader.GetString();
                            if (dicEmployeesRawValue != null)
                                dicEmployees = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(dicEmployeesRawValue));
                            break;
                        case "dic_settings":
                            string dicSettingsRawValue = utf8JsonReader.GetString();
                            if (dicSettingsRawValue != null)
                                dicSettings = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(dicSettingsRawValue));
                            break;
                        case "dic_timesheet":
                            string dicTimesheetRawValue = utf8JsonReader.GetString();
                            if (dicTimesheetRawValue != null)
                                dicTimesheet = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(dicTimesheetRawValue));
                            break;
                        case "fic_issued_documents_detailed":
                            ficIssuedDocumentsDetailed = new Option<PermissionsFicIssuedDocumentsDetailed>(JsonSerializer.Deserialize<PermissionsFicIssuedDocumentsDetailed>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (ficSituation.IsSet && ficSituation.Value == null)
                throw new ArgumentNullException(nameof(ficSituation), "Property is not nullable for class Permissions.");

            if (ficClients.IsSet && ficClients.Value == null)
                throw new ArgumentNullException(nameof(ficClients), "Property is not nullable for class Permissions.");

            if (ficSuppliers.IsSet && ficSuppliers.Value == null)
                throw new ArgumentNullException(nameof(ficSuppliers), "Property is not nullable for class Permissions.");

            if (ficProducts.IsSet && ficProducts.Value == null)
                throw new ArgumentNullException(nameof(ficProducts), "Property is not nullable for class Permissions.");

            if (ficIssuedDocuments.IsSet && ficIssuedDocuments.Value == null)
                throw new ArgumentNullException(nameof(ficIssuedDocuments), "Property is not nullable for class Permissions.");

            if (ficReceivedDocuments.IsSet && ficReceivedDocuments.Value == null)
                throw new ArgumentNullException(nameof(ficReceivedDocuments), "Property is not nullable for class Permissions.");

            if (ficReceipts.IsSet && ficReceipts.Value == null)
                throw new ArgumentNullException(nameof(ficReceipts), "Property is not nullable for class Permissions.");

            if (ficCalendar.IsSet && ficCalendar.Value == null)
                throw new ArgumentNullException(nameof(ficCalendar), "Property is not nullable for class Permissions.");

            if (ficArchive.IsSet && ficArchive.Value == null)
                throw new ArgumentNullException(nameof(ficArchive), "Property is not nullable for class Permissions.");

            if (ficTaxes.IsSet && ficTaxes.Value == null)
                throw new ArgumentNullException(nameof(ficTaxes), "Property is not nullable for class Permissions.");

            if (ficStock.IsSet && ficStock.Value == null)
                throw new ArgumentNullException(nameof(ficStock), "Property is not nullable for class Permissions.");

            if (ficCashbook.IsSet && ficCashbook.Value == null)
                throw new ArgumentNullException(nameof(ficCashbook), "Property is not nullable for class Permissions.");

            if (ficSettings.IsSet && ficSettings.Value == null)
                throw new ArgumentNullException(nameof(ficSettings), "Property is not nullable for class Permissions.");

            if (ficEmails.IsSet && ficEmails.Value == null)
                throw new ArgumentNullException(nameof(ficEmails), "Property is not nullable for class Permissions.");

            if (ficExport.IsSet && ficExport.Value == null)
                throw new ArgumentNullException(nameof(ficExport), "Property is not nullable for class Permissions.");

            if (ficImportBankstatements.IsSet && ficImportBankstatements.Value == null)
                throw new ArgumentNullException(nameof(ficImportBankstatements), "Property is not nullable for class Permissions.");

            if (ficImportClientsSuppliers.IsSet && ficImportClientsSuppliers.Value == null)
                throw new ArgumentNullException(nameof(ficImportClientsSuppliers), "Property is not nullable for class Permissions.");

            if (ficImportIssuedDocuments.IsSet && ficImportIssuedDocuments.Value == null)
                throw new ArgumentNullException(nameof(ficImportIssuedDocuments), "Property is not nullable for class Permissions.");

            if (ficImportProducts.IsSet && ficImportProducts.Value == null)
                throw new ArgumentNullException(nameof(ficImportProducts), "Property is not nullable for class Permissions.");

            if (ficRecurring.IsSet && ficRecurring.Value == null)
                throw new ArgumentNullException(nameof(ficRecurring), "Property is not nullable for class Permissions.");

            if (ficRiba.IsSet && ficRiba.Value == null)
                throw new ArgumentNullException(nameof(ficRiba), "Property is not nullable for class Permissions.");

            if (dicEmployees.IsSet && dicEmployees.Value == null)
                throw new ArgumentNullException(nameof(dicEmployees), "Property is not nullable for class Permissions.");

            if (dicSettings.IsSet && dicSettings.Value == null)
                throw new ArgumentNullException(nameof(dicSettings), "Property is not nullable for class Permissions.");

            if (dicTimesheet.IsSet && dicTimesheet.Value == null)
                throw new ArgumentNullException(nameof(dicTimesheet), "Property is not nullable for class Permissions.");

            return new Permissions(ficSituation, ficClients, ficSuppliers, ficProducts, ficIssuedDocuments, ficReceivedDocuments, ficReceipts, ficCalendar, ficArchive, ficTaxes, ficStock, ficCashbook, ficSettings, ficEmails, ficExport, ficImportBankstatements, ficImportClientsSuppliers, ficImportIssuedDocuments, ficImportProducts, ficRecurring, ficRiba, dicEmployees, dicSettings, dicTimesheet, ficIssuedDocumentsDetailed);
        }

        /// <summary>
        /// Serializes a <see cref="Permissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="permissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Permissions permissions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, permissions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Permissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="permissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Permissions permissions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (permissions.FicSituationOption.IsSet)
            {
                var ficSituationRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicSituation.Value);
                writer.WriteString("fic_situation", ficSituationRawValue);
            }
            if (permissions.FicClientsOption.IsSet)
            {
                var ficClientsRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicClients.Value);
                writer.WriteString("fic_clients", ficClientsRawValue);
            }
            if (permissions.FicSuppliersOption.IsSet)
            {
                var ficSuppliersRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicSuppliers.Value);
                writer.WriteString("fic_suppliers", ficSuppliersRawValue);
            }
            if (permissions.FicProductsOption.IsSet)
            {
                var ficProductsRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicProducts.Value);
                writer.WriteString("fic_products", ficProductsRawValue);
            }
            if (permissions.FicIssuedDocumentsOption.IsSet)
            {
                var ficIssuedDocumentsRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicIssuedDocuments.Value);
                writer.WriteString("fic_issued_documents", ficIssuedDocumentsRawValue);
            }
            if (permissions.FicReceivedDocumentsOption.IsSet)
            {
                var ficReceivedDocumentsRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicReceivedDocuments.Value);
                writer.WriteString("fic_received_documents", ficReceivedDocumentsRawValue);
            }
            if (permissions.FicReceiptsOption.IsSet)
            {
                var ficReceiptsRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicReceipts.Value);
                writer.WriteString("fic_receipts", ficReceiptsRawValue);
            }
            if (permissions.FicCalendarOption.IsSet)
            {
                var ficCalendarRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicCalendar.Value);
                writer.WriteString("fic_calendar", ficCalendarRawValue);
            }
            if (permissions.FicArchiveOption.IsSet)
            {
                var ficArchiveRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicArchive.Value);
                writer.WriteString("fic_archive", ficArchiveRawValue);
            }
            if (permissions.FicTaxesOption.IsSet)
            {
                var ficTaxesRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicTaxes.Value);
                writer.WriteString("fic_taxes", ficTaxesRawValue);
            }
            if (permissions.FicStockOption.IsSet)
            {
                var ficStockRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicStock.Value);
                writer.WriteString("fic_stock", ficStockRawValue);
            }
            if (permissions.FicCashbookOption.IsSet)
            {
                var ficCashbookRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicCashbook.Value);
                writer.WriteString("fic_cashbook", ficCashbookRawValue);
            }
            if (permissions.FicSettingsOption.IsSet)
            {
                var ficSettingsRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicSettings.Value);
                writer.WriteString("fic_settings", ficSettingsRawValue);
            }
            if (permissions.FicEmailsOption.IsSet)
            {
                var ficEmailsRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicEmails.Value);
                writer.WriteString("fic_emails", ficEmailsRawValue);
            }
            if (permissions.FicExportOption.IsSet)
            {
                var ficExportRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicExport.Value);
                writer.WriteString("fic_export", ficExportRawValue);
            }
            if (permissions.FicImportBankstatementsOption.IsSet)
            {
                var ficImportBankstatementsRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicImportBankstatements.Value);
                writer.WriteString("fic_import_bankstatements", ficImportBankstatementsRawValue);
            }
            if (permissions.FicImportClientsSuppliersOption.IsSet)
            {
                var ficImportClientsSuppliersRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicImportClientsSuppliers.Value);
                writer.WriteString("fic_import_clients_suppliers", ficImportClientsSuppliersRawValue);
            }
            if (permissions.FicImportIssuedDocumentsOption.IsSet)
            {
                var ficImportIssuedDocumentsRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicImportIssuedDocuments.Value);
                writer.WriteString("fic_import_issued_documents", ficImportIssuedDocumentsRawValue);
            }
            if (permissions.FicImportProductsOption.IsSet)
            {
                var ficImportProductsRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicImportProducts.Value);
                writer.WriteString("fic_import_products", ficImportProductsRawValue);
            }
            if (permissions.FicRecurringOption.IsSet)
            {
                var ficRecurringRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicRecurring.Value);
                writer.WriteString("fic_recurring", ficRecurringRawValue);
            }
            if (permissions.FicRibaOption.IsSet)
            {
                var ficRibaRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.FicRiba.Value);
                writer.WriteString("fic_riba", ficRibaRawValue);
            }
            if (permissions.DicEmployeesOption.IsSet)
            {
                var dicEmployeesRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.DicEmployees.Value);
                writer.WriteString("dic_employees", dicEmployeesRawValue);
            }
            if (permissions.DicSettingsOption.IsSet)
            {
                var dicSettingsRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.DicSettings.Value);
                writer.WriteString("dic_settings", dicSettingsRawValue);
            }
            if (permissions.DicTimesheetOption.IsSet)
            {
                var dicTimesheetRawValue = PermissionLevelValueConverter.ToJsonValue(permissions.DicTimesheet.Value);
                writer.WriteString("dic_timesheet", dicTimesheetRawValue);
            }
            if (permissions.FicIssuedDocumentsDetailedOption.IsSet)
                if (permissions.FicIssuedDocumentsDetailedOption.Value != null)
                {
                    writer.WritePropertyName("fic_issued_documents_detailed");
                    JsonSerializer.Serialize(writer, permissions.FicIssuedDocumentsDetailed, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("fic_issued_documents_detailed");
        }
    }
}
