/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     Permissions
    /// </summary>
    [DataContract(Name = "Permissions")]
    public class Permissions : IEquatable<Permissions>, IValidatableObject
    {
        private PermissionLevel? _DicEmployees;
        private PermissionLevel? _DicSettings;
        private PermissionLevel? _DicTimesheet;
        private PermissionLevel? _FicArchive;
        private PermissionLevel? _FicCalendar;
        private PermissionLevel? _FicCashbook;
        private PermissionLevel? _FicClients;
        private PermissionLevel? _FicEmails;
        private PermissionLevel? _FicExport;
        private PermissionLevel? _FicImportBankstatements;
        private PermissionLevel? _FicImportClientsSuppliers;
        private PermissionLevel? _FicImportIssuedDocuments;
        private PermissionLevel? _FicImportProducts;
        private PermissionLevel? _FicIssuedDocuments;
        private PermissionsFicIssuedDocumentsDetailed _FicIssuedDocumentsDetailed;
        private PermissionLevel? _FicProducts;
        private PermissionLevel? _FicReceipts;
        private PermissionLevel? _FicReceivedDocuments;
        private PermissionLevel? _FicRecurring;
        private PermissionLevel? _FicRiba;
        private PermissionLevel? _FicSettings;
        private PermissionLevel? _FicSituation;
        private PermissionLevel? _FicStock;
        private PermissionLevel? _FicSuppliers;
        private PermissionLevel? _FicTaxes;
        private bool _flagDicEmployees;
        private bool _flagDicSettings;
        private bool _flagDicTimesheet;
        private bool _flagFicArchive;
        private bool _flagFicCalendar;
        private bool _flagFicCashbook;
        private bool _flagFicClients;
        private bool _flagFicEmails;
        private bool _flagFicExport;
        private bool _flagFicImportBankstatements;
        private bool _flagFicImportClientsSuppliers;
        private bool _flagFicImportIssuedDocuments;
        private bool _flagFicImportProducts;
        private bool _flagFicIssuedDocuments;
        private bool _flagFicIssuedDocumentsDetailed;
        private bool _flagFicProducts;
        private bool _flagFicReceipts;
        private bool _flagFicReceivedDocuments;
        private bool _flagFicRecurring;
        private bool _flagFicRiba;
        private bool _flagFicSettings;
        private bool _flagFicSituation;
        private bool _flagFicStock;
        private bool _flagFicSuppliers;
        private bool _flagFicTaxes;

        /// <summary>
        ///     Initializes a new instance of the <see cref="Permissions" /> class.
        /// </summary>
        /// <param name="ficSituation">ficSituation.</param>
        /// <param name="ficClients">ficClients.</param>
        /// <param name="ficSuppliers">ficSuppliers.</param>
        /// <param name="ficProducts">ficProducts.</param>
        /// <param name="ficIssuedDocuments">ficIssuedDocuments.</param>
        /// <param name="ficReceivedDocuments">ficReceivedDocuments.</param>
        /// <param name="ficReceipts">ficReceipts.</param>
        /// <param name="ficCalendar">ficCalendar.</param>
        /// <param name="ficArchive">ficArchive.</param>
        /// <param name="ficTaxes">ficTaxes.</param>
        /// <param name="ficStock">ficStock.</param>
        /// <param name="ficCashbook">ficCashbook.</param>
        /// <param name="ficSettings">ficSettings.</param>
        /// <param name="ficEmails">ficEmails.</param>
        /// <param name="ficExport">ficExport.</param>
        /// <param name="ficImportBankstatements">ficImportBankstatements.</param>
        /// <param name="ficImportClientsSuppliers">ficImportClientsSuppliers.</param>
        /// <param name="ficImportIssuedDocuments">ficImportIssuedDocuments.</param>
        /// <param name="ficImportProducts">ficImportProducts.</param>
        /// <param name="ficRecurring">ficRecurring.</param>
        /// <param name="ficRiba">ficRiba.</param>
        /// <param name="dicEmployees">dicEmployees.</param>
        /// <param name="dicSettings">dicSettings.</param>
        /// <param name="dicTimesheet">dicTimesheet.</param>
        /// <param name="ficIssuedDocumentsDetailed">ficIssuedDocumentsDetailed.</param>
        public Permissions(PermissionLevel? ficSituation = default(PermissionLevel?),
            PermissionLevel? ficClients = default(PermissionLevel?),
            PermissionLevel? ficSuppliers = default(PermissionLevel?),
            PermissionLevel? ficProducts = default(PermissionLevel?),
            PermissionLevel? ficIssuedDocuments = default(PermissionLevel?),
            PermissionLevel? ficReceivedDocuments = default(PermissionLevel?),
            PermissionLevel? ficReceipts = default(PermissionLevel?),
            PermissionLevel? ficCalendar = default(PermissionLevel?),
            PermissionLevel? ficArchive = default(PermissionLevel?),
            PermissionLevel? ficTaxes = default(PermissionLevel?),
            PermissionLevel? ficStock = default(PermissionLevel?),
            PermissionLevel? ficCashbook = default(PermissionLevel?),
            PermissionLevel? ficSettings = default(PermissionLevel?),
            PermissionLevel? ficEmails = default(PermissionLevel?),
            PermissionLevel? ficExport = default(PermissionLevel?),
            PermissionLevel? ficImportBankstatements = default(PermissionLevel?),
            PermissionLevel? ficImportClientsSuppliers = default(PermissionLevel?),
            PermissionLevel? ficImportIssuedDocuments = default(PermissionLevel?),
            PermissionLevel? ficImportProducts = default(PermissionLevel?),
            PermissionLevel? ficRecurring = default(PermissionLevel?),
            PermissionLevel? ficRiba = default(PermissionLevel?),
            PermissionLevel? dicEmployees = default(PermissionLevel?),
            PermissionLevel? dicSettings = default(PermissionLevel?),
            PermissionLevel? dicTimesheet = default(PermissionLevel?),
            PermissionsFicIssuedDocumentsDetailed ficIssuedDocumentsDetailed = default)
        {
            _FicSituation = ficSituation;
            if (FicSituation != null) _flagFicSituation = true;
            _FicClients = ficClients;
            if (FicClients != null) _flagFicClients = true;
            _FicSuppliers = ficSuppliers;
            if (FicSuppliers != null) _flagFicSuppliers = true;
            _FicProducts = ficProducts;
            if (FicProducts != null) _flagFicProducts = true;
            _FicIssuedDocuments = ficIssuedDocuments;
            if (FicIssuedDocuments != null) _flagFicIssuedDocuments = true;
            _FicReceivedDocuments = ficReceivedDocuments;
            if (FicReceivedDocuments != null) _flagFicReceivedDocuments = true;
            _FicReceipts = ficReceipts;
            if (FicReceipts != null) _flagFicReceipts = true;
            _FicCalendar = ficCalendar;
            if (FicCalendar != null) _flagFicCalendar = true;
            _FicArchive = ficArchive;
            if (FicArchive != null) _flagFicArchive = true;
            _FicTaxes = ficTaxes;
            if (FicTaxes != null) _flagFicTaxes = true;
            _FicStock = ficStock;
            if (FicStock != null) _flagFicStock = true;
            _FicCashbook = ficCashbook;
            if (FicCashbook != null) _flagFicCashbook = true;
            _FicSettings = ficSettings;
            if (FicSettings != null) _flagFicSettings = true;
            _FicEmails = ficEmails;
            if (FicEmails != null) _flagFicEmails = true;
            _FicExport = ficExport;
            if (FicExport != null) _flagFicExport = true;
            _FicImportBankstatements = ficImportBankstatements;
            if (FicImportBankstatements != null) _flagFicImportBankstatements = true;
            _FicImportClientsSuppliers = ficImportClientsSuppliers;
            if (FicImportClientsSuppliers != null) _flagFicImportClientsSuppliers = true;
            _FicImportIssuedDocuments = ficImportIssuedDocuments;
            if (FicImportIssuedDocuments != null) _flagFicImportIssuedDocuments = true;
            _FicImportProducts = ficImportProducts;
            if (FicImportProducts != null) _flagFicImportProducts = true;
            _FicRecurring = ficRecurring;
            if (FicRecurring != null) _flagFicRecurring = true;
            _FicRiba = ficRiba;
            if (FicRiba != null) _flagFicRiba = true;
            _DicEmployees = dicEmployees;
            if (DicEmployees != null) _flagDicEmployees = true;
            _DicSettings = dicSettings;
            if (DicSettings != null) _flagDicSettings = true;
            _DicTimesheet = dicTimesheet;
            if (DicTimesheet != null) _flagDicTimesheet = true;
            _FicIssuedDocumentsDetailed = ficIssuedDocumentsDetailed;
            if (FicIssuedDocumentsDetailed != null) _flagFicIssuedDocumentsDetailed = true;
        }

        /// <summary>
        ///     Gets or Sets FicSituation
        /// </summary>

        [DataMember(Name = "fic_situation", EmitDefaultValue = false)]
        public PermissionLevel? FicSituation
        {
            get => _FicSituation;
            set
            {
                _FicSituation = value;
                _flagFicSituation = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicClients
        /// </summary>

        [DataMember(Name = "fic_clients", EmitDefaultValue = false)]
        public PermissionLevel? FicClients
        {
            get => _FicClients;
            set
            {
                _FicClients = value;
                _flagFicClients = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicSuppliers
        /// </summary>

        [DataMember(Name = "fic_suppliers", EmitDefaultValue = false)]
        public PermissionLevel? FicSuppliers
        {
            get => _FicSuppliers;
            set
            {
                _FicSuppliers = value;
                _flagFicSuppliers = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicProducts
        /// </summary>

        [DataMember(Name = "fic_products", EmitDefaultValue = false)]
        public PermissionLevel? FicProducts
        {
            get => _FicProducts;
            set
            {
                _FicProducts = value;
                _flagFicProducts = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicIssuedDocuments
        /// </summary>

        [DataMember(Name = "fic_issued_documents", EmitDefaultValue = false)]
        public PermissionLevel? FicIssuedDocuments
        {
            get => _FicIssuedDocuments;
            set
            {
                _FicIssuedDocuments = value;
                _flagFicIssuedDocuments = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicReceivedDocuments
        /// </summary>

        [DataMember(Name = "fic_received_documents", EmitDefaultValue = false)]
        public PermissionLevel? FicReceivedDocuments
        {
            get => _FicReceivedDocuments;
            set
            {
                _FicReceivedDocuments = value;
                _flagFicReceivedDocuments = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicReceipts
        /// </summary>

        [DataMember(Name = "fic_receipts", EmitDefaultValue = false)]
        public PermissionLevel? FicReceipts
        {
            get => _FicReceipts;
            set
            {
                _FicReceipts = value;
                _flagFicReceipts = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicCalendar
        /// </summary>

        [DataMember(Name = "fic_calendar", EmitDefaultValue = false)]
        public PermissionLevel? FicCalendar
        {
            get => _FicCalendar;
            set
            {
                _FicCalendar = value;
                _flagFicCalendar = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicArchive
        /// </summary>

        [DataMember(Name = "fic_archive", EmitDefaultValue = false)]
        public PermissionLevel? FicArchive
        {
            get => _FicArchive;
            set
            {
                _FicArchive = value;
                _flagFicArchive = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicTaxes
        /// </summary>

        [DataMember(Name = "fic_taxes", EmitDefaultValue = false)]
        public PermissionLevel? FicTaxes
        {
            get => _FicTaxes;
            set
            {
                _FicTaxes = value;
                _flagFicTaxes = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicStock
        /// </summary>

        [DataMember(Name = "fic_stock", EmitDefaultValue = false)]
        public PermissionLevel? FicStock
        {
            get => _FicStock;
            set
            {
                _FicStock = value;
                _flagFicStock = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicCashbook
        /// </summary>

        [DataMember(Name = "fic_cashbook", EmitDefaultValue = false)]
        public PermissionLevel? FicCashbook
        {
            get => _FicCashbook;
            set
            {
                _FicCashbook = value;
                _flagFicCashbook = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicSettings
        /// </summary>

        [DataMember(Name = "fic_settings", EmitDefaultValue = false)]
        public PermissionLevel? FicSettings
        {
            get => _FicSettings;
            set
            {
                _FicSettings = value;
                _flagFicSettings = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicEmails
        /// </summary>

        [DataMember(Name = "fic_emails", EmitDefaultValue = false)]
        public PermissionLevel? FicEmails
        {
            get => _FicEmails;
            set
            {
                _FicEmails = value;
                _flagFicEmails = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicExport
        /// </summary>

        [DataMember(Name = "fic_export", EmitDefaultValue = false)]
        public PermissionLevel? FicExport
        {
            get => _FicExport;
            set
            {
                _FicExport = value;
                _flagFicExport = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicImportBankstatements
        /// </summary>

        [DataMember(Name = "fic_import_bankstatements", EmitDefaultValue = false)]
        public PermissionLevel? FicImportBankstatements
        {
            get => _FicImportBankstatements;
            set
            {
                _FicImportBankstatements = value;
                _flagFicImportBankstatements = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicImportClientsSuppliers
        /// </summary>

        [DataMember(Name = "fic_import_clients_suppliers", EmitDefaultValue = false)]
        public PermissionLevel? FicImportClientsSuppliers
        {
            get => _FicImportClientsSuppliers;
            set
            {
                _FicImportClientsSuppliers = value;
                _flagFicImportClientsSuppliers = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicImportIssuedDocuments
        /// </summary>

        [DataMember(Name = "fic_import_issued_documents", EmitDefaultValue = false)]
        public PermissionLevel? FicImportIssuedDocuments
        {
            get => _FicImportIssuedDocuments;
            set
            {
                _FicImportIssuedDocuments = value;
                _flagFicImportIssuedDocuments = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicImportProducts
        /// </summary>

        [DataMember(Name = "fic_import_products", EmitDefaultValue = false)]
        public PermissionLevel? FicImportProducts
        {
            get => _FicImportProducts;
            set
            {
                _FicImportProducts = value;
                _flagFicImportProducts = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicRecurring
        /// </summary>

        [DataMember(Name = "fic_recurring", EmitDefaultValue = false)]
        public PermissionLevel? FicRecurring
        {
            get => _FicRecurring;
            set
            {
                _FicRecurring = value;
                _flagFicRecurring = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicRiba
        /// </summary>

        [DataMember(Name = "fic_riba", EmitDefaultValue = false)]
        public PermissionLevel? FicRiba
        {
            get => _FicRiba;
            set
            {
                _FicRiba = value;
                _flagFicRiba = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DicEmployees
        /// </summary>

        [DataMember(Name = "dic_employees", EmitDefaultValue = false)]
        public PermissionLevel? DicEmployees
        {
            get => _DicEmployees;
            set
            {
                _DicEmployees = value;
                _flagDicEmployees = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DicSettings
        /// </summary>

        [DataMember(Name = "dic_settings", EmitDefaultValue = false)]
        public PermissionLevel? DicSettings
        {
            get => _DicSettings;
            set
            {
                _DicSettings = value;
                _flagDicSettings = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DicTimesheet
        /// </summary>

        [DataMember(Name = "dic_timesheet", EmitDefaultValue = false)]
        public PermissionLevel? DicTimesheet
        {
            get => _DicTimesheet;
            set
            {
                _DicTimesheet = value;
                _flagDicTimesheet = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FicIssuedDocumentsDetailed
        /// </summary>
        [DataMember(Name = "fic_issued_documents_detailed", EmitDefaultValue = true)]
        public PermissionsFicIssuedDocumentsDetailed FicIssuedDocumentsDetailed
        {
            get => _FicIssuedDocumentsDetailed;
            set
            {
                _FicIssuedDocumentsDetailed = value;
                _flagFicIssuedDocumentsDetailed = true;
            }
        }

        /// <summary>
        ///     Returns false as FicSituation should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicSituation()
        {
            return _flagFicSituation;
        }

        /// <summary>
        ///     Returns false as FicClients should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicClients()
        {
            return _flagFicClients;
        }

        /// <summary>
        ///     Returns false as FicSuppliers should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicSuppliers()
        {
            return _flagFicSuppliers;
        }

        /// <summary>
        ///     Returns false as FicProducts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicProducts()
        {
            return _flagFicProducts;
        }

        /// <summary>
        ///     Returns false as FicIssuedDocuments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicIssuedDocuments()
        {
            return _flagFicIssuedDocuments;
        }

        /// <summary>
        ///     Returns false as FicReceivedDocuments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicReceivedDocuments()
        {
            return _flagFicReceivedDocuments;
        }

        /// <summary>
        ///     Returns false as FicReceipts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicReceipts()
        {
            return _flagFicReceipts;
        }

        /// <summary>
        ///     Returns false as FicCalendar should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicCalendar()
        {
            return _flagFicCalendar;
        }

        /// <summary>
        ///     Returns false as FicArchive should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicArchive()
        {
            return _flagFicArchive;
        }

        /// <summary>
        ///     Returns false as FicTaxes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicTaxes()
        {
            return _flagFicTaxes;
        }

        /// <summary>
        ///     Returns false as FicStock should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicStock()
        {
            return _flagFicStock;
        }

        /// <summary>
        ///     Returns false as FicCashbook should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicCashbook()
        {
            return _flagFicCashbook;
        }

        /// <summary>
        ///     Returns false as FicSettings should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicSettings()
        {
            return _flagFicSettings;
        }

        /// <summary>
        ///     Returns false as FicEmails should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicEmails()
        {
            return _flagFicEmails;
        }

        /// <summary>
        ///     Returns false as FicExport should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicExport()
        {
            return _flagFicExport;
        }

        /// <summary>
        ///     Returns false as FicImportBankstatements should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicImportBankstatements()
        {
            return _flagFicImportBankstatements;
        }

        /// <summary>
        ///     Returns false as FicImportClientsSuppliers should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicImportClientsSuppliers()
        {
            return _flagFicImportClientsSuppliers;
        }

        /// <summary>
        ///     Returns false as FicImportIssuedDocuments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicImportIssuedDocuments()
        {
            return _flagFicImportIssuedDocuments;
        }

        /// <summary>
        ///     Returns false as FicImportProducts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicImportProducts()
        {
            return _flagFicImportProducts;
        }

        /// <summary>
        ///     Returns false as FicRecurring should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicRecurring()
        {
            return _flagFicRecurring;
        }

        /// <summary>
        ///     Returns false as FicRiba should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicRiba()
        {
            return _flagFicRiba;
        }

        /// <summary>
        ///     Returns false as DicEmployees should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDicEmployees()
        {
            return _flagDicEmployees;
        }

        /// <summary>
        ///     Returns false as DicSettings should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDicSettings()
        {
            return _flagDicSettings;
        }

        /// <summary>
        ///     Returns false as DicTimesheet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDicTimesheet()
        {
            return _flagDicTimesheet;
        }

        /// <summary>
        ///     Returns false as FicIssuedDocumentsDetailed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicIssuedDocumentsDetailed()
        {
            return _flagFicIssuedDocumentsDetailed;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Permissions {\n");
            sb.Append("  FicSituation: ").Append(FicSituation).Append("\n");
            sb.Append("  FicClients: ").Append(FicClients).Append("\n");
            sb.Append("  FicSuppliers: ").Append(FicSuppliers).Append("\n");
            sb.Append("  FicProducts: ").Append(FicProducts).Append("\n");
            sb.Append("  FicIssuedDocuments: ").Append(FicIssuedDocuments).Append("\n");
            sb.Append("  FicReceivedDocuments: ").Append(FicReceivedDocuments).Append("\n");
            sb.Append("  FicReceipts: ").Append(FicReceipts).Append("\n");
            sb.Append("  FicCalendar: ").Append(FicCalendar).Append("\n");
            sb.Append("  FicArchive: ").Append(FicArchive).Append("\n");
            sb.Append("  FicTaxes: ").Append(FicTaxes).Append("\n");
            sb.Append("  FicStock: ").Append(FicStock).Append("\n");
            sb.Append("  FicCashbook: ").Append(FicCashbook).Append("\n");
            sb.Append("  FicSettings: ").Append(FicSettings).Append("\n");
            sb.Append("  FicEmails: ").Append(FicEmails).Append("\n");
            sb.Append("  FicExport: ").Append(FicExport).Append("\n");
            sb.Append("  FicImportBankstatements: ").Append(FicImportBankstatements).Append("\n");
            sb.Append("  FicImportClientsSuppliers: ").Append(FicImportClientsSuppliers).Append("\n");
            sb.Append("  FicImportIssuedDocuments: ").Append(FicImportIssuedDocuments).Append("\n");
            sb.Append("  FicImportProducts: ").Append(FicImportProducts).Append("\n");
            sb.Append("  FicRecurring: ").Append(FicRecurring).Append("\n");
            sb.Append("  FicRiba: ").Append(FicRiba).Append("\n");
            sb.Append("  DicEmployees: ").Append(DicEmployees).Append("\n");
            sb.Append("  DicSettings: ").Append(DicSettings).Append("\n");
            sb.Append("  DicTimesheet: ").Append(DicTimesheet).Append("\n");
            sb.Append("  FicIssuedDocumentsDetailed: ").Append(FicIssuedDocumentsDetailed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Permissions);
        }

        /// <summary>
        ///     Returns true if Permissions instances are equal
        /// </summary>
        /// <param name="input">Instance of Permissions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Permissions input)
        {
            if (input == null) return false;
            return
                (
                    FicSituation == input.FicSituation ||
                    FicSituation.Equals(input.FicSituation)
                ) &&
                (
                    FicClients == input.FicClients ||
                    FicClients.Equals(input.FicClients)
                ) &&
                (
                    FicSuppliers == input.FicSuppliers ||
                    FicSuppliers.Equals(input.FicSuppliers)
                ) &&
                (
                    FicProducts == input.FicProducts ||
                    FicProducts.Equals(input.FicProducts)
                ) &&
                (
                    FicIssuedDocuments == input.FicIssuedDocuments ||
                    FicIssuedDocuments.Equals(input.FicIssuedDocuments)
                ) &&
                (
                    FicReceivedDocuments == input.FicReceivedDocuments ||
                    FicReceivedDocuments.Equals(input.FicReceivedDocuments)
                ) &&
                (
                    FicReceipts == input.FicReceipts ||
                    FicReceipts.Equals(input.FicReceipts)
                ) &&
                (
                    FicCalendar == input.FicCalendar ||
                    FicCalendar.Equals(input.FicCalendar)
                ) &&
                (
                    FicArchive == input.FicArchive ||
                    FicArchive.Equals(input.FicArchive)
                ) &&
                (
                    FicTaxes == input.FicTaxes ||
                    FicTaxes.Equals(input.FicTaxes)
                ) &&
                (
                    FicStock == input.FicStock ||
                    FicStock.Equals(input.FicStock)
                ) &&
                (
                    FicCashbook == input.FicCashbook ||
                    FicCashbook.Equals(input.FicCashbook)
                ) &&
                (
                    FicSettings == input.FicSettings ||
                    FicSettings.Equals(input.FicSettings)
                ) &&
                (
                    FicEmails == input.FicEmails ||
                    FicEmails.Equals(input.FicEmails)
                ) &&
                (
                    FicExport == input.FicExport ||
                    FicExport.Equals(input.FicExport)
                ) &&
                (
                    FicImportBankstatements == input.FicImportBankstatements ||
                    FicImportBankstatements.Equals(input.FicImportBankstatements)
                ) &&
                (
                    FicImportClientsSuppliers == input.FicImportClientsSuppliers ||
                    FicImportClientsSuppliers.Equals(input.FicImportClientsSuppliers)
                ) &&
                (
                    FicImportIssuedDocuments == input.FicImportIssuedDocuments ||
                    FicImportIssuedDocuments.Equals(input.FicImportIssuedDocuments)
                ) &&
                (
                    FicImportProducts == input.FicImportProducts ||
                    FicImportProducts.Equals(input.FicImportProducts)
                ) &&
                (
                    FicRecurring == input.FicRecurring ||
                    FicRecurring.Equals(input.FicRecurring)
                ) &&
                (
                    FicRiba == input.FicRiba ||
                    FicRiba.Equals(input.FicRiba)
                ) &&
                (
                    DicEmployees == input.DicEmployees ||
                    DicEmployees.Equals(input.DicEmployees)
                ) &&
                (
                    DicSettings == input.DicSettings ||
                    DicSettings.Equals(input.DicSettings)
                ) &&
                (
                    DicTimesheet == input.DicTimesheet ||
                    DicTimesheet.Equals(input.DicTimesheet)
                ) &&
                (
                    FicIssuedDocumentsDetailed == input.FicIssuedDocumentsDetailed ||
                    (FicIssuedDocumentsDetailed != null &&
                     FicIssuedDocumentsDetailed.Equals(input.FicIssuedDocumentsDetailed))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + FicSituation.GetHashCode();
                hashCode = hashCode * 59 + FicClients.GetHashCode();
                hashCode = hashCode * 59 + FicSuppliers.GetHashCode();
                hashCode = hashCode * 59 + FicProducts.GetHashCode();
                hashCode = hashCode * 59 + FicIssuedDocuments.GetHashCode();
                hashCode = hashCode * 59 + FicReceivedDocuments.GetHashCode();
                hashCode = hashCode * 59 + FicReceipts.GetHashCode();
                hashCode = hashCode * 59 + FicCalendar.GetHashCode();
                hashCode = hashCode * 59 + FicArchive.GetHashCode();
                hashCode = hashCode * 59 + FicTaxes.GetHashCode();
                hashCode = hashCode * 59 + FicStock.GetHashCode();
                hashCode = hashCode * 59 + FicCashbook.GetHashCode();
                hashCode = hashCode * 59 + FicSettings.GetHashCode();
                hashCode = hashCode * 59 + FicEmails.GetHashCode();
                hashCode = hashCode * 59 + FicExport.GetHashCode();
                hashCode = hashCode * 59 + FicImportBankstatements.GetHashCode();
                hashCode = hashCode * 59 + FicImportClientsSuppliers.GetHashCode();
                hashCode = hashCode * 59 + FicImportIssuedDocuments.GetHashCode();
                hashCode = hashCode * 59 + FicImportProducts.GetHashCode();
                hashCode = hashCode * 59 + FicRecurring.GetHashCode();
                hashCode = hashCode * 59 + FicRiba.GetHashCode();
                hashCode = hashCode * 59 + DicEmployees.GetHashCode();
                hashCode = hashCode * 59 + DicSettings.GetHashCode();
                hashCode = hashCode * 59 + DicTimesheet.GetHashCode();
                if (FicIssuedDocumentsDetailed != null)
                    hashCode = hashCode * 59 + FicIssuedDocumentsDetailed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}