// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// EInvoiceRejectionReason
    /// </summary>
    public partial class EInvoiceRejectionReason : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EInvoiceRejectionReason" /> class.
        /// </summary>
        /// <param name="reason">E-invoice rejection reason</param>
        /// <param name="eiStatus">E-invoice status</param>
        /// <param name="solution">Error solution.</param>
        /// <param name="code">E-invoice rejection error code</param>
        /// <param name="date">E-invoice rejection date</param>
        [JsonConstructor]
        public EInvoiceRejectionReason(Option<string> reason = default, Option<string> eiStatus = default, Option<string> solution = default, Option<string> code = default, Option<DateTimeOffset?> date = default)
        {
            ReasonOption = reason;
            EiStatusOption = eiStatus;
            SolutionOption = solution;
            CodeOption = code;
            DateOption = date;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Reason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReasonOption { get; private set; }

        /// <summary>
        /// E-invoice rejection reason
        /// </summary>
        /// <value>E-invoice rejection reason</value>
        [JsonPropertyName("reason")]
        public string Reason { get { return this.ReasonOption; } set { this.ReasonOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EiStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EiStatusOption { get; private set; }

        /// <summary>
        /// E-invoice status
        /// </summary>
        /// <value>E-invoice status</value>
        [JsonPropertyName("ei_status")]
        public string EiStatus { get { return this.EiStatusOption; } set { this.EiStatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Solution
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SolutionOption { get; private set; }

        /// <summary>
        /// Error solution.
        /// </summary>
        /// <value>Error solution.</value>
        [JsonPropertyName("solution")]
        public string Solution { get { return this.SolutionOption; } set { this.SolutionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodeOption { get; private set; }

        /// <summary>
        /// E-invoice rejection error code
        /// </summary>
        /// <value>E-invoice rejection error code</value>
        [JsonPropertyName("code")]
        public string Code { get { return this.CodeOption; } set { this.CodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> DateOption { get; private set; }

        /// <summary>
        /// E-invoice rejection date
        /// </summary>
        /// <value>E-invoice rejection date</value>
        [JsonPropertyName("date")]
        public DateTimeOffset? Date { get { return this.DateOption; } set { this.DateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EInvoiceRejectionReason {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  EiStatus: ").Append(EiStatus).Append("\n");
            sb.Append("  Solution: ").Append(Solution).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="EInvoiceRejectionReason" />
    /// </summary>
    public class EInvoiceRejectionReasonJsonConverter : JsonConverter<EInvoiceRejectionReason>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EInvoiceRejectionReason" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EInvoiceRejectionReason Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> reason = default;
            Option<string> eiStatus = default;
            Option<string> solution = default;
            Option<string> code = default;
            Option<DateTimeOffset?> date = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "reason":
                            reason = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ei_status":
                            eiStatus = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "solution":
                            solution = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "code":
                            code = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "date":
                            date = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new EInvoiceRejectionReason(reason, eiStatus, solution, code, date);
        }

        /// <summary>
        /// Serializes a <see cref="EInvoiceRejectionReason" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="eInvoiceRejectionReason"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EInvoiceRejectionReason eInvoiceRejectionReason, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, eInvoiceRejectionReason, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EInvoiceRejectionReason" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="eInvoiceRejectionReason"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EInvoiceRejectionReason eInvoiceRejectionReason, JsonSerializerOptions jsonSerializerOptions)
        {
            if (eInvoiceRejectionReason.ReasonOption.IsSet)
                if (eInvoiceRejectionReason.ReasonOption.Value != null)
                    writer.WriteString("reason", eInvoiceRejectionReason.Reason);
                else
                    writer.WriteNull("reason");

            if (eInvoiceRejectionReason.EiStatusOption.IsSet)
                if (eInvoiceRejectionReason.EiStatusOption.Value != null)
                    writer.WriteString("ei_status", eInvoiceRejectionReason.EiStatus);
                else
                    writer.WriteNull("ei_status");

            if (eInvoiceRejectionReason.SolutionOption.IsSet)
                if (eInvoiceRejectionReason.SolutionOption.Value != null)
                    writer.WriteString("solution", eInvoiceRejectionReason.Solution);
                else
                    writer.WriteNull("solution");

            if (eInvoiceRejectionReason.CodeOption.IsSet)
                if (eInvoiceRejectionReason.CodeOption.Value != null)
                    writer.WriteString("code", eInvoiceRejectionReason.Code);
                else
                    writer.WriteNull("code");

            if (eInvoiceRejectionReason.DateOption.IsSet)
                if (eInvoiceRejectionReason.DateOption.Value != null)
                    writer.WriteString("date", eInvoiceRejectionReason.DateOption.Value.Value.ToString(DateFormat));
                else
                    writer.WriteNull("date");
        }
    }
}
