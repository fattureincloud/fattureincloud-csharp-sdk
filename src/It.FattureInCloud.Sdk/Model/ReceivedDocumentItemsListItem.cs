// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ReceivedDocumentItemsListItem
    /// </summary>
    public partial class ReceivedDocumentItemsListItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivedDocumentItemsListItem" /> class.
        /// </summary>
        /// <param name="id">Received document item id</param>
        /// <param name="productId">Received document product id</param>
        /// <param name="code">Received document item product code</param>
        /// <param name="name">Received document item product name</param>
        /// <param name="measure">Received document item measure</param>
        /// <param name="netPrice">Received document item product net price</param>
        /// <param name="category">Received document item product category</param>
        /// <param name="qty">Received document item quantity</param>
        /// <param name="vat">vat</param>
        /// <param name="stock">Received document item product number of items in stock</param>
        [JsonConstructor]
        public ReceivedDocumentItemsListItem(Option<int?> id = default, Option<int?> productId = default, Option<string> code = default, Option<string> name = default, Option<string> measure = default, Option<decimal?> netPrice = default, Option<string> category = default, Option<decimal?> qty = default, Option<VatType> vat = default, Option<decimal?> stock = default)
        {
            IdOption = id;
            ProductIdOption = productId;
            CodeOption = code;
            NameOption = name;
            MeasureOption = measure;
            NetPriceOption = netPrice;
            CategoryOption = category;
            QtyOption = qty;
            VatOption = vat;
            StockOption = stock;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Received document item id
        /// </summary>
        /// <value>Received document item id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ProductId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProductIdOption { get; private set; }

        /// <summary>
        /// Received document product id
        /// </summary>
        /// <value>Received document product id</value>
        [JsonPropertyName("product_id")]
        public int? ProductId { get { return this.ProductIdOption; } set { this.ProductIdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodeOption { get; private set; }

        /// <summary>
        /// Received document item product code
        /// </summary>
        /// <value>Received document item product code</value>
        [JsonPropertyName("code")]
        public string Code { get { return this.CodeOption; } set { this.CodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Received document item product name
        /// </summary>
        /// <value>Received document item product name</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Measure
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MeasureOption { get; private set; }

        /// <summary>
        /// Received document item measure
        /// </summary>
        /// <value>Received document item measure</value>
        [JsonPropertyName("measure")]
        public string Measure { get { return this.MeasureOption; } set { this.MeasureOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NetPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> NetPriceOption { get; private set; }

        /// <summary>
        /// Received document item product net price
        /// </summary>
        /// <value>Received document item product net price</value>
        [JsonPropertyName("net_price")]
        public decimal? NetPrice { get { return this.NetPriceOption; } set { this.NetPriceOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Category
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CategoryOption { get; private set; }

        /// <summary>
        /// Received document item product category
        /// </summary>
        /// <value>Received document item product category</value>
        [JsonPropertyName("category")]
        public string Category { get { return this.CategoryOption; } set { this.CategoryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Qty
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> QtyOption { get; private set; }

        /// <summary>
        /// Received document item quantity
        /// </summary>
        /// <value>Received document item quantity</value>
        [JsonPropertyName("qty")]
        public decimal? Qty { get { return this.QtyOption; } set { this.QtyOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Vat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatType> VatOption { get; private set; }

        /// <summary>
        /// Gets or Sets Vat
        /// </summary>
        [JsonPropertyName("vat")]
        public VatType Vat { get { return this.VatOption; } set { this.VatOption = new Option<VatType>(value); } }

        /// <summary>
        /// Used to track the state of Stock
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StockOption { get; private set; }

        /// <summary>
        /// Received document item product number of items in stock
        /// </summary>
        /// <value>Received document item product number of items in stock</value>
        [JsonPropertyName("stock")]
        public decimal? Stock { get { return this.StockOption; } set { this.StockOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceivedDocumentItemsListItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Measure: ").Append(Measure).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="ReceivedDocumentItemsListItem" />
    /// </summary>
    public class ReceivedDocumentItemsListItemJsonConverter : JsonConverter<ReceivedDocumentItemsListItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReceivedDocumentItemsListItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReceivedDocumentItemsListItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<int?> productId = default;
            Option<string> code = default;
            Option<string> name = default;
            Option<string> measure = default;
            Option<decimal?> netPrice = default;
            Option<string> category = default;
            Option<decimal?> qty = default;
            Option<VatType> vat = default;
            Option<decimal?> stock = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "product_id":
                            productId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "code":
                            code = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "measure":
                            measure = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "net_price":
                            netPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "category":
                            category = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "qty":
                            qty = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "vat":
                            vat = new Option<VatType>(JsonSerializer.Deserialize<VatType>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "stock":
                            stock = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ReceivedDocumentItemsListItem(id, productId, code, name, measure, netPrice, category, qty, vat, stock);
        }

        /// <summary>
        /// Serializes a <see cref="ReceivedDocumentItemsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentItemsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReceivedDocumentItemsListItem receivedDocumentItemsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, receivedDocumentItemsListItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReceivedDocumentItemsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentItemsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReceivedDocumentItemsListItem receivedDocumentItemsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (receivedDocumentItemsListItem.IdOption.IsSet)
                if (receivedDocumentItemsListItem.IdOption.Value != null)
                    writer.WriteNumber("id", receivedDocumentItemsListItem.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (receivedDocumentItemsListItem.ProductIdOption.IsSet)
                if (receivedDocumentItemsListItem.ProductIdOption.Value != null)
                    writer.WriteNumber("product_id", receivedDocumentItemsListItem.ProductIdOption.Value.Value);
                else
                    writer.WriteNull("product_id");

            if (receivedDocumentItemsListItem.CodeOption.IsSet)
                if (receivedDocumentItemsListItem.CodeOption.Value != null)
                    writer.WriteString("code", receivedDocumentItemsListItem.Code);
                else
                    writer.WriteNull("code");

            if (receivedDocumentItemsListItem.NameOption.IsSet)
                if (receivedDocumentItemsListItem.NameOption.Value != null)
                    writer.WriteString("name", receivedDocumentItemsListItem.Name);
                else
                    writer.WriteNull("name");

            if (receivedDocumentItemsListItem.MeasureOption.IsSet)
                if (receivedDocumentItemsListItem.MeasureOption.Value != null)
                    writer.WriteString("measure", receivedDocumentItemsListItem.Measure);
                else
                    writer.WriteNull("measure");

            if (receivedDocumentItemsListItem.NetPriceOption.IsSet)
                if (receivedDocumentItemsListItem.NetPriceOption.Value != null)
                    writer.WriteNumber("net_price", receivedDocumentItemsListItem.NetPriceOption.Value.Value);
                else
                    writer.WriteNull("net_price");

            if (receivedDocumentItemsListItem.CategoryOption.IsSet)
                if (receivedDocumentItemsListItem.CategoryOption.Value != null)
                    writer.WriteString("category", receivedDocumentItemsListItem.Category);
                else
                    writer.WriteNull("category");

            if (receivedDocumentItemsListItem.QtyOption.IsSet)
                if (receivedDocumentItemsListItem.QtyOption.Value != null)
                    writer.WriteNumber("qty", receivedDocumentItemsListItem.QtyOption.Value.Value);
                else
                    writer.WriteNull("qty");

            if (receivedDocumentItemsListItem.VatOption.IsSet)
                if (receivedDocumentItemsListItem.VatOption.Value != null)
                {
                    writer.WritePropertyName("vat");
                    JsonSerializer.Serialize(writer, receivedDocumentItemsListItem.Vat, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("vat");
            if (receivedDocumentItemsListItem.StockOption.IsSet)
                if (receivedDocumentItemsListItem.StockOption.Value != null)
                    writer.WriteNumber("stock", receivedDocumentItemsListItem.StockOption.Value.Value);
                else
                    writer.WriteNull("stock");
        }
    }
}
