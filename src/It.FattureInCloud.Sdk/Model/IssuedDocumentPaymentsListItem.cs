// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// IssuedDocumentPaymentsListItem
    /// </summary>
    public partial class IssuedDocumentPaymentsListItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentPaymentsListItem" /> class.
        /// </summary>
        /// <param name="id">Issued document payment item id</param>
        /// <param name="dueDate">Issued document payment due date</param>
        /// <param name="amount">Issued document payment amount</param>
        /// <param name="status">status</param>
        /// <param name="paymentAccount">paymentAccount</param>
        /// <param name="paidDate">Issued document payment date [Only if status is paid]</param>
        /// <param name="eiRaw">Issued document payment advanced raw attributes for e-invoices</param>
        /// <param name="paymentTerms">paymentTerms</param>
        [JsonConstructor]
        public IssuedDocumentPaymentsListItem(Option<int?> id = default, Option<DateTimeOffset?> dueDate = default, Option<decimal?> amount = default, Option<IssuedDocumentStatus?> status = default, Option<PaymentAccount> paymentAccount = default, Option<DateTimeOffset?> paidDate = default, Option<Object> eiRaw = default, Option<IssuedDocumentPaymentsListItemPaymentTerms> paymentTerms = default)
        {
            IdOption = id;
            DueDateOption = dueDate;
            AmountOption = amount;
            StatusOption = status;
            PaymentAccountOption = paymentAccount;
            PaidDateOption = paidDate;
            EiRawOption = eiRaw;
            PaymentTermsOption = paymentTerms;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IssuedDocumentStatus?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public IssuedDocumentStatus? Status { get { return this.StatusOption; } set { this.StatusOption = new Option<IssuedDocumentStatus?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Issued document payment item id
        /// </summary>
        /// <value>Issued document payment item id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of DueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> DueDateOption { get; private set; }

        /// <summary>
        /// Issued document payment due date
        /// </summary>
        /// <value>Issued document payment due date</value>
        /* <example>Tue Apr 03 00:00:00 UTC 2018</example> */
        [JsonPropertyName("due_date")]
        public DateTimeOffset? DueDate { get { return this.DueDateOption; } set { this.DueDateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountOption { get; private set; }

        /// <summary>
        /// Issued document payment amount
        /// </summary>
        /// <value>Issued document payment amount</value>
        /* <example>1.45</example> */
        [JsonPropertyName("amount")]
        public decimal? Amount { get { return this.AmountOption; } set { this.AmountOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of PaymentAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentAccount> PaymentAccountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentAccount
        /// </summary>
        [JsonPropertyName("payment_account")]
        public PaymentAccount PaymentAccount { get { return this.PaymentAccountOption; } set { this.PaymentAccountOption = new Option<PaymentAccount>(value); } }

        /// <summary>
        /// Used to track the state of PaidDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> PaidDateOption { get; private set; }

        /// <summary>
        /// Issued document payment date [Only if status is paid]
        /// </summary>
        /// <value>Issued document payment date [Only if status is paid]</value>
        /* <example>Tue Apr 03 00:00:00 UTC 2018</example> */
        [JsonPropertyName("paid_date")]
        public DateTimeOffset? PaidDate { get { return this.PaidDateOption; } set { this.PaidDateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of EiRaw
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object> EiRawOption { get; private set; }

        /// <summary>
        /// Issued document payment advanced raw attributes for e-invoices
        /// </summary>
        /// <value>Issued document payment advanced raw attributes for e-invoices</value>
        [JsonPropertyName("ei_raw")]
        public Object EiRaw { get { return this.EiRawOption; } set { this.EiRawOption = new Option<Object>(value); } }

        /// <summary>
        /// Used to track the state of PaymentTerms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IssuedDocumentPaymentsListItemPaymentTerms> PaymentTermsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentTerms
        /// </summary>
        [JsonPropertyName("payment_terms")]
        public IssuedDocumentPaymentsListItemPaymentTerms PaymentTerms { get { return this.PaymentTermsOption; } set { this.PaymentTermsOption = new Option<IssuedDocumentPaymentsListItemPaymentTerms>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentPaymentsListItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PaymentAccount: ").Append(PaymentAccount).Append("\n");
            sb.Append("  PaidDate: ").Append(PaidDate).Append("\n");
            sb.Append("  EiRaw: ").Append(EiRaw).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentPaymentsListItem" />
    /// </summary>
    public class IssuedDocumentPaymentsListItemJsonConverter : JsonConverter<IssuedDocumentPaymentsListItem>
    {
        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize PaidDate
        /// </summary>
        public static string PaidDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="IssuedDocumentPaymentsListItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocumentPaymentsListItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<DateTimeOffset?> dueDate = default;
            Option<decimal?> amount = default;
            Option<IssuedDocumentStatus?> status = default;
            Option<PaymentAccount> paymentAccount = default;
            Option<DateTimeOffset?> paidDate = default;
            Option<Object> eiRaw = default;
            Option<IssuedDocumentPaymentsListItemPaymentTerms> paymentTerms = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "due_date":
                            dueDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "amount":
                            amount = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<IssuedDocumentStatus?>(IssuedDocumentStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "payment_account":
                            paymentAccount = new Option<PaymentAccount>(JsonSerializer.Deserialize<PaymentAccount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "paid_date":
                            paidDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ei_raw":
                            eiRaw = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payment_terms":
                            paymentTerms = new Option<IssuedDocumentPaymentsListItemPaymentTerms>(JsonSerializer.Deserialize<IssuedDocumentPaymentsListItemPaymentTerms>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class IssuedDocumentPaymentsListItem.");

            if (paymentTerms.IsSet && paymentTerms.Value == null)
                throw new ArgumentNullException(nameof(paymentTerms), "Property is not nullable for class IssuedDocumentPaymentsListItem.");

            return new IssuedDocumentPaymentsListItem(id, dueDate, amount, status, paymentAccount, paidDate, eiRaw, paymentTerms);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocumentPaymentsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentPaymentsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentPaymentsListItem issuedDocumentPaymentsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocumentPaymentsListItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocumentPaymentsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentPaymentsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocumentPaymentsListItem issuedDocumentPaymentsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocumentPaymentsListItem.PaymentTermsOption.IsSet && issuedDocumentPaymentsListItem.PaymentTerms == null)
                throw new ArgumentNullException(nameof(issuedDocumentPaymentsListItem.PaymentTerms), "Property is required for class IssuedDocumentPaymentsListItem.");

            if (issuedDocumentPaymentsListItem.IdOption.IsSet)
                if (issuedDocumentPaymentsListItem.IdOption.Value != null)
                    writer.WriteNumber("id", issuedDocumentPaymentsListItem.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (issuedDocumentPaymentsListItem.DueDateOption.IsSet)
                if (issuedDocumentPaymentsListItem.DueDateOption.Value != null)
                    writer.WriteString("due_date", issuedDocumentPaymentsListItem.DueDateOption.Value.Value.ToString(DueDateFormat));
                else
                    writer.WriteNull("due_date");

            if (issuedDocumentPaymentsListItem.AmountOption.IsSet)
                if (issuedDocumentPaymentsListItem.AmountOption.Value != null)
                    writer.WriteNumber("amount", issuedDocumentPaymentsListItem.AmountOption.Value.Value);
                else
                    writer.WriteNull("amount");

            if (issuedDocumentPaymentsListItem.StatusOption.IsSet)
            {
                var statusRawValue = IssuedDocumentStatusValueConverter.ToJsonValue(issuedDocumentPaymentsListItem.Status.Value);
                writer.WriteString("status", statusRawValue);
            }
            if (issuedDocumentPaymentsListItem.PaymentAccountOption.IsSet)
                if (issuedDocumentPaymentsListItem.PaymentAccountOption.Value != null)
                {
                    writer.WritePropertyName("payment_account");
                    JsonSerializer.Serialize(writer, issuedDocumentPaymentsListItem.PaymentAccount, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_account");
            if (issuedDocumentPaymentsListItem.PaidDateOption.IsSet)
                if (issuedDocumentPaymentsListItem.PaidDateOption.Value != null)
                    writer.WriteString("paid_date", issuedDocumentPaymentsListItem.PaidDateOption.Value.Value.ToString(PaidDateFormat));
                else
                    writer.WriteNull("paid_date");

            if (issuedDocumentPaymentsListItem.EiRawOption.IsSet)
                if (issuedDocumentPaymentsListItem.EiRawOption.Value != null)
                {
                    writer.WritePropertyName("ei_raw");
                    JsonSerializer.Serialize(writer, issuedDocumentPaymentsListItem.EiRaw, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ei_raw");
            if (issuedDocumentPaymentsListItem.PaymentTermsOption.IsSet)
            {
                writer.WritePropertyName("payment_terms");
                JsonSerializer.Serialize(writer, issuedDocumentPaymentsListItem.PaymentTerms, jsonSerializerOptions);
            }
        }
    }
}
