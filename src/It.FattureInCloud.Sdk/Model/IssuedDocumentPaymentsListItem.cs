/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     IssuedDocumentPaymentsListItem
    /// </summary>
    [DataContract(Name = "IssuedDocumentPaymentsListItem")]
    public class IssuedDocumentPaymentsListItem : IEquatable<IssuedDocumentPaymentsListItem>, IValidatableObject
    {
        private decimal? _Amount;
        private DateTime? _DueDate;
        private Object _EiRaw;
        private bool _flagAmount;
        private bool _flagDueDate;
        private bool _flagEiRaw;
        private bool _flagId;
        private bool _flagPaidDate;
        private bool _flagPaymentAccount;
        private bool _flagStatus;
        private int? _Id;
        private DateTime? _PaidDate;
        private PaymentAccount _PaymentAccount;
        private IssuedDocumentStatus? _Status;

        /// <summary>
        ///     Initializes a new instance of the <see cref="IssuedDocumentPaymentsListItem" /> class.
        /// </summary>
        /// <param name="id">Unique identifier..</param>
        /// <param name="dueDate">Due date..</param>
        /// <param name="amount">Payment amount..</param>
        /// <param name="status">status.</param>
        /// <param name="paymentAccount">paymentAccount.</param>
        /// <param name="paidDate">Payment date. [Only if status is paid].</param>
        /// <param name="eiRaw">Advanced raw attributes for e-invoices..</param>
        public IssuedDocumentPaymentsListItem(int? id = default(int?), DateTime? dueDate = default(DateTime?),
            decimal? amount = default(decimal?), IssuedDocumentStatus? status = default(IssuedDocumentStatus?),
            PaymentAccount paymentAccount = default, DateTime? paidDate = default(DateTime?),
            Object eiRaw = default(Object))
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _DueDate = dueDate;
            if (DueDate != null) _flagDueDate = true;
            _Amount = amount;
            if (Amount != null) _flagAmount = true;
            _Status = status;
            if (Status != null) _flagStatus = true;
            _PaymentAccount = paymentAccount;
            if (PaymentAccount != null) _flagPaymentAccount = true;
            _PaidDate = paidDate;
            if (PaidDate != null) _flagPaidDate = true;
            _EiRaw = eiRaw;
            if (EiRaw != null) _flagEiRaw = true;
        }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>

        [DataMember(Name = "status", EmitDefaultValue = false)]
        public IssuedDocumentStatus? Status
        {
            get => _Status;
            set
            {
                _Status = value;
                _flagStatus = true;
            }
        }

        /// <summary>
        ///     Unique identifier.
        /// </summary>
        /// <value>Unique identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Due date.
        /// </summary>
        /// <value>Due date.</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "due_date", EmitDefaultValue = true)]
        public DateTime? DueDate
        {
            get => _DueDate;
            set
            {
                _DueDate = value;
                _flagDueDate = true;
            }
        }

        /// <summary>
        ///     Payment amount.
        /// </summary>
        /// <value>Payment amount.</value>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public decimal? Amount
        {
            get => _Amount;
            set
            {
                _Amount = value;
                _flagAmount = true;
            }
        }

        /// <summary>
        ///     Gets or Sets PaymentAccount
        /// </summary>
        [DataMember(Name = "payment_account", EmitDefaultValue = true)]
        public PaymentAccount PaymentAccount
        {
            get => _PaymentAccount;
            set
            {
                _PaymentAccount = value;
                _flagPaymentAccount = true;
            }
        }

        /// <summary>
        ///     Payment date. [Only if status is paid]
        /// </summary>
        /// <value>Payment date. [Only if status is paid]</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "paid_date", EmitDefaultValue = true)]
        public DateTime? PaidDate
        {
            get => _PaidDate;
            set
            {
                _PaidDate = value;
                _flagPaidDate = true;
            }
        }

        /// <summary>
        ///     Advanced raw attributes for e-invoices.
        /// </summary>
        /// <value>Advanced raw attributes for e-invoices.</value>
        [DataMember(Name = "ei_raw", EmitDefaultValue = true)]
        public Object EiRaw
        {
            get => _EiRaw;
            set
            {
                _EiRaw = value;
                _flagEiRaw = true;
            }
        }

        /// <summary>
        ///     Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return _flagStatus;
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as DueDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDueDate()
        {
            return _flagDueDate;
        }

        /// <summary>
        ///     Returns false as Amount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmount()
        {
            return _flagAmount;
        }

        /// <summary>
        ///     Returns false as PaymentAccount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccount()
        {
            return _flagPaymentAccount;
        }

        /// <summary>
        ///     Returns false as PaidDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaidDate()
        {
            return _flagPaidDate;
        }

        /// <summary>
        ///     Returns false as EiRaw should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiRaw()
        {
            return _flagEiRaw;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentPaymentsListItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PaymentAccount: ").Append(PaymentAccount).Append("\n");
            sb.Append("  PaidDate: ").Append(PaidDate).Append("\n");
            sb.Append("  EiRaw: ").Append(EiRaw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as IssuedDocumentPaymentsListItem);
        }

        /// <summary>
        ///     Returns true if IssuedDocumentPaymentsListItem instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentPaymentsListItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentPaymentsListItem input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    DueDate == input.DueDate ||
                    (DueDate != null &&
                     DueDate.Equals(input.DueDate))
                ) &&
                (
                    Amount == input.Amount ||
                    (Amount != null &&
                     Amount.Equals(input.Amount))
                ) &&
                (
                    Status == input.Status ||
                    Status.Equals(input.Status)
                ) &&
                (
                    PaymentAccount == input.PaymentAccount ||
                    (PaymentAccount != null &&
                     PaymentAccount.Equals(input.PaymentAccount))
                ) &&
                (
                    PaidDate == input.PaidDate ||
                    (PaidDate != null &&
                     PaidDate.Equals(input.PaidDate))
                ) &&
                (
                    EiRaw == input.EiRaw ||
                    (EiRaw != null &&
                     EiRaw.Equals(input.EiRaw))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (DueDate != null) hashCode = hashCode * 59 + DueDate.GetHashCode();
                if (Amount != null) hashCode = hashCode * 59 + Amount.GetHashCode();
                hashCode = hashCode * 59 + Status.GetHashCode();
                if (PaymentAccount != null) hashCode = hashCode * 59 + PaymentAccount.GetHashCode();
                if (PaidDate != null) hashCode = hashCode * 59 + PaidDate.GetHashCode();
                if (EiRaw != null) hashCode = hashCode * 59 + EiRaw.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}