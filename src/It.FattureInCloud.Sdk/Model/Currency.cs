// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Currency
    /// </summary>
    public partial class Currency : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Currency" /> class.
        /// </summary>
        /// <param name="id">Currency code</param>
        /// <param name="symbol">Currency symbol</param>
        /// <param name="exchangeRate">Currency exchange rate (EUR to this)</param>
        /// <param name="htmlSymbol">Currency html code</param>
        [JsonConstructor]
        public Currency(Option<string> id = default, Option<string> symbol = default, Option<string> exchangeRate = default, Option<string> htmlSymbol = default)
        {
            IdOption = id;
            SymbolOption = symbol;
            ExchangeRateOption = exchangeRate;
            HtmlSymbolOption = htmlSymbol;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// Currency code
        /// </summary>
        /// <value>Currency code</value>
        /* <example>EUR</example> */
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Symbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SymbolOption { get; private set; }

        /// <summary>
        /// Currency symbol
        /// </summary>
        /// <value>Currency symbol</value>
        /* <example>â‚¬</example> */
        [JsonPropertyName("symbol")]
        public string Symbol { get { return this.SymbolOption; } set { this.SymbolOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExchangeRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExchangeRateOption { get; private set; }

        /// <summary>
        /// Currency exchange rate (EUR to this)
        /// </summary>
        /// <value>Currency exchange rate (EUR to this)</value>
        /* <example>1</example> */
        [JsonPropertyName("exchange_rate")]
        public string ExchangeRate { get { return this.ExchangeRateOption; } set { this.ExchangeRateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of HtmlSymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> HtmlSymbolOption { get; private set; }

        /// <summary>
        /// Currency html code
        /// </summary>
        /// <value>Currency html code</value>
        /* <example>EUR</example> */
        [JsonPropertyName("html_symbol")]
        public string HtmlSymbol { get { return this.HtmlSymbolOption; } set { this.HtmlSymbolOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Currency {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  HtmlSymbol: ").Append(HtmlSymbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="Currency" />
    /// </summary>
    public class CurrencyJsonConverter : JsonConverter<Currency>
    {
        /// <summary>
        /// Deserializes json to <see cref="Currency" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Currency Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> id = default;
            Option<string> symbol = default;
            Option<string> exchangeRate = default;
            Option<string> htmlSymbol = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "symbol":
                            symbol = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "exchange_rate":
                            exchangeRate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "html_symbol":
                            htmlSymbol = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new Currency(id, symbol, exchangeRate, htmlSymbol);
        }

        /// <summary>
        /// Serializes a <see cref="Currency" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currency"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Currency currency, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, currency, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Currency" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currency"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Currency currency, JsonSerializerOptions jsonSerializerOptions)
        {
            if (currency.IdOption.IsSet)
                if (currency.IdOption.Value != null)
                    writer.WriteString("id", currency.Id);
                else
                    writer.WriteNull("id");

            if (currency.SymbolOption.IsSet)
                if (currency.SymbolOption.Value != null)
                    writer.WriteString("symbol", currency.Symbol);
                else
                    writer.WriteNull("symbol");

            if (currency.ExchangeRateOption.IsSet)
                if (currency.ExchangeRateOption.Value != null)
                    writer.WriteString("exchange_rate", currency.ExchangeRate);
                else
                    writer.WriteNull("exchange_rate");

            if (currency.HtmlSymbolOption.IsSet)
                if (currency.HtmlSymbolOption.Value != null)
                    writer.WriteString("html_symbol", currency.HtmlSymbol);
                else
                    writer.WriteNull("html_symbol");
        }
    }
}
