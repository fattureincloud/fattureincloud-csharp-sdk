/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     Currency
    /// </summary>
    [DataContract(Name = "Currency")]
    public class Currency : IEquatable<Currency>, IValidatableObject
    {
        private string _ExchangeRate;
        private bool _flagExchangeRate;
        private bool _flagHtmlSymbol;
        private bool _flagId;
        private bool _flagSymbol;
        private string _HtmlSymbol;
        private string _Id;
        private string _Symbol;

        /// <summary>
        ///     Initializes a new instance of the <see cref="Currency" /> class.
        /// </summary>
        /// <param name="id">Currency code..</param>
        /// <param name="symbol">Currency symbol..</param>
        /// <param name="exchangeRate">Currency exchange rate (EUR to this)..</param>
        /// <param name="htmlSymbol">Currency html code..</param>
        public Currency(string id = default(string), string symbol = default(string),
            string exchangeRate = default(string), string htmlSymbol = default(string))
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _Symbol = symbol;
            if (Symbol != null) _flagSymbol = true;
            _ExchangeRate = exchangeRate;
            if (ExchangeRate != null) _flagExchangeRate = true;
            _HtmlSymbol = htmlSymbol;
            if (HtmlSymbol != null) _flagHtmlSymbol = true;
        }

        /// <summary>
        ///     Currency code.
        /// </summary>
        /// <value>Currency code.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Currency symbol.
        /// </summary>
        /// <value>Currency symbol.</value>
        [DataMember(Name = "symbol", EmitDefaultValue = true)]
        public string Symbol
        {
            get => _Symbol;
            set
            {
                _Symbol = value;
                _flagSymbol = true;
            }
        }

        /// <summary>
        ///     Currency exchange rate (EUR to this).
        /// </summary>
        /// <value>Currency exchange rate (EUR to this).</value>
        [DataMember(Name = "exchange_rate", EmitDefaultValue = true)]
        public string ExchangeRate
        {
            get => _ExchangeRate;
            set
            {
                _ExchangeRate = value;
                _flagExchangeRate = true;
            }
        }

        /// <summary>
        ///     Currency html code.
        /// </summary>
        /// <value>Currency html code.</value>
        [DataMember(Name = "html_symbol", EmitDefaultValue = true)]
        public string HtmlSymbol
        {
            get => _HtmlSymbol;
            set
            {
                _HtmlSymbol = value;
                _flagHtmlSymbol = true;
            }
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as Symbol should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSymbol()
        {
            return _flagSymbol;
        }

        /// <summary>
        ///     Returns false as ExchangeRate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExchangeRate()
        {
            return _flagExchangeRate;
        }

        /// <summary>
        ///     Returns false as HtmlSymbol should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHtmlSymbol()
        {
            return _flagHtmlSymbol;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Currency {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  HtmlSymbol: ").Append(HtmlSymbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Currency);
        }

        /// <summary>
        ///     Returns true if Currency instances are equal
        /// </summary>
        /// <param name="input">Instance of Currency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Currency input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Symbol == input.Symbol ||
                    (Symbol != null &&
                     Symbol.Equals(input.Symbol))
                ) &&
                (
                    ExchangeRate == input.ExchangeRate ||
                    (ExchangeRate != null &&
                     ExchangeRate.Equals(input.ExchangeRate))
                ) &&
                (
                    HtmlSymbol == input.HtmlSymbol ||
                    (HtmlSymbol != null &&
                     HtmlSymbol.Equals(input.HtmlSymbol))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (Symbol != null) hashCode = hashCode * 59 + Symbol.GetHashCode();
                if (ExchangeRate != null) hashCode = hashCode * 59 + ExchangeRate.GetHashCode();
                if (HtmlSymbol != null) hashCode = hashCode * 59 + HtmlSymbol.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}