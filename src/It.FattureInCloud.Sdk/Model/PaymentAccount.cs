// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// PaymentAccount
    /// </summary>
    public partial class PaymentAccount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentAccount" /> class.
        /// </summary>
        /// <param name="id">Payment account id</param>
        /// <param name="name">Payment account name</param>
        /// <param name="type">type</param>
        /// <param name="iban">Payment account iban</param>
        /// <param name="sia">Payment account sia</param>
        /// <param name="cuc">Payment account cuc</param>
        /// <param name="virtual">Payment method is virtual</param>
        [JsonConstructor]
        public PaymentAccount(Option<int?> id = default, Option<string> name = default, Option<PaymentAccountType?> type = default, Option<string> iban = default, Option<string> sia = default, Option<string> cuc = default, Option<bool?> @virtual = default)
        {
            IdOption = id;
            NameOption = name;
            TypeOption = type;
            IbanOption = iban;
            SiaOption = sia;
            CucOption = cuc;
            VirtualOption = @virtual;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentAccountType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public PaymentAccountType? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<PaymentAccountType?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Payment account id
        /// </summary>
        /// <value>Payment account id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Payment account name
        /// </summary>
        /// <value>Payment account name</value>
        /* <example>Conto Banca Intesa</example> */
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Iban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IbanOption { get; private set; }

        /// <summary>
        /// Payment account iban
        /// </summary>
        /// <value>Payment account iban</value>
        [JsonPropertyName("iban")]
        public string Iban { get { return this.IbanOption; } set { this.IbanOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Sia
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SiaOption { get; private set; }

        /// <summary>
        /// Payment account sia
        /// </summary>
        /// <value>Payment account sia</value>
        [JsonPropertyName("sia")]
        public string Sia { get { return this.SiaOption; } set { this.SiaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Cuc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CucOption { get; private set; }

        /// <summary>
        /// Payment account cuc
        /// </summary>
        /// <value>Payment account cuc</value>
        [JsonPropertyName("cuc")]
        public string Cuc { get { return this.CucOption; } set { this.CucOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Virtual
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> VirtualOption { get; private set; }

        /// <summary>
        /// Payment method is virtual
        /// </summary>
        /// <value>Payment method is virtual</value>
        [JsonPropertyName("virtual")]
        public bool? Virtual { get { return this.VirtualOption; } set { this.VirtualOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentAccount {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Sia: ").Append(Sia).Append("\n");
            sb.Append("  Cuc: ").Append(Cuc).Append("\n");
            sb.Append("  Virtual: ").Append(Virtual).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="PaymentAccount" />
    /// </summary>
    public class PaymentAccountJsonConverter : JsonConverter<PaymentAccount>
    {
        /// <summary>
        /// Deserializes json to <see cref="PaymentAccount" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentAccount Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string> name = default;
            Option<PaymentAccountType?> type = default;
            Option<string> iban = default;
            Option<string> sia = default;
            Option<string> cuc = default;
            Option<bool?> varVirtual = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<PaymentAccountType?>(PaymentAccountTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "iban":
                            iban = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sia":
                            sia = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cuc":
                            cuc = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "virtual":
                            varVirtual = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PaymentAccount.");

            return new PaymentAccount(id, name, type, iban, sia, cuc, varVirtual);
        }

        /// <summary>
        /// Serializes a <see cref="PaymentAccount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentAccount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentAccount paymentAccount, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentAccount, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentAccount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentAccount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentAccount paymentAccount, JsonSerializerOptions jsonSerializerOptions)
        {
            if (paymentAccount.IdOption.IsSet)
                if (paymentAccount.IdOption.Value != null)
                    writer.WriteNumber("id", paymentAccount.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (paymentAccount.NameOption.IsSet)
                if (paymentAccount.NameOption.Value != null)
                    writer.WriteString("name", paymentAccount.Name);
                else
                    writer.WriteNull("name");

            if (paymentAccount.TypeOption.IsSet)
            {
                var typeRawValue = PaymentAccountTypeValueConverter.ToJsonValue(paymentAccount.Type.Value);
                writer.WriteString("type", typeRawValue);
            }
            if (paymentAccount.IbanOption.IsSet)
                if (paymentAccount.IbanOption.Value != null)
                    writer.WriteString("iban", paymentAccount.Iban);
                else
                    writer.WriteNull("iban");

            if (paymentAccount.SiaOption.IsSet)
                if (paymentAccount.SiaOption.Value != null)
                    writer.WriteString("sia", paymentAccount.Sia);
                else
                    writer.WriteNull("sia");

            if (paymentAccount.CucOption.IsSet)
                if (paymentAccount.CucOption.Value != null)
                    writer.WriteString("cuc", paymentAccount.Cuc);
                else
                    writer.WriteNull("cuc");

            if (paymentAccount.VirtualOption.IsSet)
                if (paymentAccount.VirtualOption.Value != null)
                    writer.WriteBoolean("virtual", paymentAccount.VirtualOption.Value.Value);
                else
                    writer.WriteNull("virtual");
        }
    }
}
