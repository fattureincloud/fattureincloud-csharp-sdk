/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol. For more information, please visit https://www.fattureincloud.it.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Description of a company.
    /// </summary>
    [DataContract(Name = "Company")]
    public partial class Company : IEquatable<Company>, IValidatableObject
    {
        /// <summary>
        /// Company type.
        /// </summary>
        /// <value>Company type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Company for value: company
            /// </summary>
            [EnumMember(Value = "company")]
            Company = 1,

            /// <summary>
            /// Enum Accountant for value: accountant
            /// </summary>
            [EnumMember(Value = "accountant")]
            Accountant = 2

        }


        /// <summary>
        /// Company type.
        /// </summary>
        /// <value>Company type.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Company" /> class.
        /// </summary>
        /// <param name="id">Company unique identifier..</param>
        /// <param name="name">Company name..</param>
        /// <param name="type">Company type..</param>
        /// <param name="accessToken">CompanyAuthentication token for this company. [Only if type&#x3D;company].</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="controlledCompanies">List of controlled companies. [Only if type&#x3D;accountant].</param>
        /// <param name="connectionId">Company connection id..</param>
        /// <param name="dic">Determine if the company has a DIC account..</param>
        /// <param name="fic">Determine if the company has a FIC account..</param>
        /// <param name="ficLicenseExpire">Company FIC license expiration date..</param>
        /// <param name="ficPlan">Company FIC account plan..</param>
        /// <param name="taxCode">Tax code..</param>
        public Company(int id = default(int), string name = default(string), TypeEnum? type = default(TypeEnum?), string accessToken = default(string), Permissions permissions = default(Permissions), List<Company> controlledCompanies = default(List<Company>), decimal connectionId = default(decimal), bool dic = default(bool), bool fic = default(bool), DateTimeOffset ficLicenseExpire = default(DateTimeOffset), string ficPlan = default(string), string taxCode = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.AccessToken = accessToken;
            this.Permissions = permissions;
            this.ControlledCompanies = controlledCompanies;
            this.ConnectionId = connectionId;
            this.Dic = dic;
            this.Fic = fic;
            this.FicLicenseExpire = ficLicenseExpire;
            this.FicPlan = ficPlan;
            this.TaxCode = taxCode;
        }

        /// <summary>
        /// Company unique identifier.
        /// </summary>
        /// <value>Company unique identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Company name.
        /// </summary>
        /// <value>Company name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// CompanyAuthentication token for this company. [Only if type&#x3D;company]
        /// </summary>
        /// <value>CompanyAuthentication token for this company. [Only if type&#x3D;company]</value>
        [DataMember(Name = "access_token", EmitDefaultValue = false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name = "permissions", EmitDefaultValue = false)]
        public Permissions Permissions { get; set; }

        /// <summary>
        /// List of controlled companies. [Only if type&#x3D;accountant]
        /// </summary>
        /// <value>List of controlled companies. [Only if type&#x3D;accountant]</value>
        [DataMember(Name = "controlled_companies", EmitDefaultValue = false)]
        public List<Company> ControlledCompanies { get; set; }

        /// <summary>
        /// Company connection id.
        /// </summary>
        /// <value>Company connection id.</value>
        [DataMember(Name = "connection_id", EmitDefaultValue = false)]
        public decimal ConnectionId { get; set; }

        /// <summary>
        /// Determine if the company has a DIC account.
        /// </summary>
        /// <value>Determine if the company has a DIC account.</value>
        [DataMember(Name = "dic", EmitDefaultValue = true)]
        public bool Dic { get; set; }

        /// <summary>
        /// Determine if the company has a FIC account.
        /// </summary>
        /// <value>Determine if the company has a FIC account.</value>
        [DataMember(Name = "fic", EmitDefaultValue = true)]
        public bool Fic { get; set; }

        /// <summary>
        /// Company FIC license expiration date.
        /// </summary>
        /// <value>Company FIC license expiration date.</value>
        [DataMember(Name = "fic_license_expire", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset FicLicenseExpire { get; set; }

        /// <summary>
        /// Company FIC account plan.
        /// </summary>
        /// <value>Company FIC account plan.</value>
        [DataMember(Name = "fic_plan", EmitDefaultValue = false)]
        public string FicPlan { get; set; }

        /// <summary>
        /// Tax code.
        /// </summary>
        /// <value>Tax code.</value>
        [DataMember(Name = "tax_code", EmitDefaultValue = false)]
        public string TaxCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Company {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  ControlledCompanies: ").Append(ControlledCompanies).Append("\n");
            sb.Append("  ConnectionId: ").Append(ConnectionId).Append("\n");
            sb.Append("  Dic: ").Append(Dic).Append("\n");
            sb.Append("  Fic: ").Append(Fic).Append("\n");
            sb.Append("  FicLicenseExpire: ").Append(FicLicenseExpire).Append("\n");
            sb.Append("  FicPlan: ").Append(FicPlan).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Company);
        }

        /// <summary>
        /// Returns true if Company instances are equal
        /// </summary>
        /// <param name="input">Instance of Company to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Company input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    (this.Permissions != null &&
                    this.Permissions.Equals(input.Permissions))
                ) && 
                (
                    this.ControlledCompanies == input.ControlledCompanies ||
                    this.ControlledCompanies != null &&
                    input.ControlledCompanies != null &&
                    this.ControlledCompanies.SequenceEqual(input.ControlledCompanies)
                ) && 
                (
                    this.ConnectionId == input.ConnectionId ||
                    this.ConnectionId.Equals(input.ConnectionId)
                ) && 
                (
                    this.Dic == input.Dic ||
                    this.Dic.Equals(input.Dic)
                ) && 
                (
                    this.Fic == input.Fic ||
                    this.Fic.Equals(input.Fic)
                ) && 
                (
                    this.FicLicenseExpire == input.FicLicenseExpire ||
                    (this.FicLicenseExpire != null &&
                    this.FicLicenseExpire.Equals(input.FicLicenseExpire))
                ) && 
                (
                    this.FicPlan == input.FicPlan ||
                    (this.FicPlan != null &&
                    this.FicPlan.Equals(input.FicPlan))
                ) && 
                (
                    this.TaxCode == input.TaxCode ||
                    (this.TaxCode != null &&
                    this.TaxCode.Equals(input.TaxCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.ControlledCompanies != null)
                    hashCode = hashCode * 59 + this.ControlledCompanies.GetHashCode();
                hashCode = hashCode * 59 + this.ConnectionId.GetHashCode();
                hashCode = hashCode * 59 + this.Dic.GetHashCode();
                hashCode = hashCode * 59 + this.Fic.GetHashCode();
                if (this.FicLicenseExpire != null)
                    hashCode = hashCode * 59 + this.FicLicenseExpire.GetHashCode();
                if (this.FicPlan != null)
                    hashCode = hashCode * 59 + this.FicPlan.GetHashCode();
                if (this.TaxCode != null)
                    hashCode = hashCode * 59 + this.TaxCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
