// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Company
    /// </summary>
    public partial class Company : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Company" /> class.
        /// </summary>
        /// <param name="id">Company id</param>
        /// <param name="name">Company name</param>
        /// <param name="type">type</param>
        /// <param name="accessToken">Company authentication token for this company. [Only if type&#x3D;company]</param>
        /// <param name="controlledCompanies">Company list of controlled companies [Only if type&#x3D;accountant]</param>
        /// <param name="ficLicenseExpire">ficLicenseExpire</param>
        /// <param name="ficPlan">ficPlan</param>
        /// <param name="connectionId">Company connection id</param>
        /// <param name="taxCode">Company tax code</param>
        /// <param name="vatNumber">Company vat number</param>
        [JsonConstructor]
        public Company(Option<int?> id = default, Option<string> name = default, Option<CompanyType?> type = default, Option<string> accessToken = default, Option<List<ControlledCompany>> controlledCompanies = default, Option<DateTimeOffset?> ficLicenseExpire = default, Option<FattureInCloudPlanType?> ficPlan = default, Option<int?> connectionId = default, Option<string> taxCode = default, Option<string> vatNumber = default)
        {
            IdOption = id;
            NameOption = name;
            TypeOption = type;
            AccessTokenOption = accessToken;
            ControlledCompaniesOption = controlledCompanies;
            FicLicenseExpireOption = ficLicenseExpire;
            FicPlanOption = ficPlan;
            ConnectionIdOption = connectionId;
            TaxCodeOption = taxCode;
            VatNumberOption = vatNumber;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CompanyType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public CompanyType? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<CompanyType?>(value); } }

        /// <summary>
        /// Used to track the state of FicPlan
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FattureInCloudPlanType?> FicPlanOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicPlan
        /// </summary>
        [JsonPropertyName("fic_plan")]
        public FattureInCloudPlanType? FicPlan { get { return this.FicPlanOption; } set { this.FicPlanOption = new Option<FattureInCloudPlanType?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Company id
        /// </summary>
        /// <value>Company id</value>
        /* <example>12345</example> */
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Company name
        /// </summary>
        /// <value>Company name</value>
        /* <example>Rossi S.r.l.</example> */
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AccessToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AccessTokenOption { get; private set; }

        /// <summary>
        /// Company authentication token for this company. [Only if type&#x3D;company]
        /// </summary>
        /// <value>Company authentication token for this company. [Only if type&#x3D;company]</value>
        /* <example>fd015011d2dbf8a9d38e810b325b11b56d02e51688e5261a245933b8e677b8b44ff5f0fe5ccaaf1d7157fa13ca72ab62b6183db0667a576a0e19164801c18c4fd81273fc1f95bf460b869015cf99acba</example> */
        [JsonPropertyName("access_token")]
        public string AccessToken { get { return this.AccessTokenOption; } set { this.AccessTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ControlledCompanies
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ControlledCompany>> ControlledCompaniesOption { get; private set; }

        /// <summary>
        /// Company list of controlled companies [Only if type&#x3D;accountant]
        /// </summary>
        /// <value>Company list of controlled companies [Only if type&#x3D;accountant]</value>
        [JsonPropertyName("controlled_companies")]
        public List<ControlledCompany> ControlledCompanies { get { return this.ControlledCompaniesOption; } set { this.ControlledCompaniesOption = new Option<List<ControlledCompany>>(value); } }

        /// <summary>
        /// Used to track the state of FicLicenseExpire
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> FicLicenseExpireOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicLicenseExpire
        /// </summary>
        [JsonPropertyName("fic_license_expire")]
        public DateTimeOffset? FicLicenseExpire { get { return this.FicLicenseExpireOption; } set { this.FicLicenseExpireOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of ConnectionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ConnectionIdOption { get; private set; }

        /// <summary>
        /// Company connection id
        /// </summary>
        /// <value>Company connection id</value>
        [JsonPropertyName("connection_id")]
        public int? ConnectionId { get { return this.ConnectionIdOption; } set { this.ConnectionIdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of TaxCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TaxCodeOption { get; private set; }

        /// <summary>
        /// Company tax code
        /// </summary>
        /// <value>Company tax code</value>
        [JsonPropertyName("tax_code")]
        public string TaxCode { get { return this.TaxCodeOption; } set { this.TaxCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VatNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> VatNumberOption { get; private set; }

        /// <summary>
        /// Company vat number
        /// </summary>
        /// <value>Company vat number</value>
        [JsonPropertyName("vat_number")]
        public string VatNumber { get { return this.VatNumberOption; } set { this.VatNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Company {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  ControlledCompanies: ").Append(ControlledCompanies).Append("\n");
            sb.Append("  FicLicenseExpire: ").Append(FicLicenseExpire).Append("\n");
            sb.Append("  FicPlan: ").Append(FicPlan).Append("\n");
            sb.Append("  ConnectionId: ").Append(ConnectionId).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="Company" />
    /// </summary>
    public class CompanyJsonConverter : JsonConverter<Company>
    {
        /// <summary>
        /// The format to use to serialize FicLicenseExpire
        /// </summary>
        public static string FicLicenseExpireFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="Company" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Company Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string> name = default;
            Option<CompanyType?> type = default;
            Option<string> accessToken = default;
            Option<List<ControlledCompany>> controlledCompanies = default;
            Option<DateTimeOffset?> ficLicenseExpire = default;
            Option<FattureInCloudPlanType?> ficPlan = default;
            Option<int?> connectionId = default;
            Option<string> taxCode = default;
            Option<string> vatNumber = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CompanyType?>(CompanyTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "access_token":
                            accessToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "controlled_companies":
                            controlledCompanies = new Option<List<ControlledCompany>>(JsonSerializer.Deserialize<List<ControlledCompany>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fic_license_expire":
                            ficLicenseExpire = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fic_plan":
                            string ficPlanRawValue = utf8JsonReader.GetString();
                            if (ficPlanRawValue != null)
                                ficPlan = new Option<FattureInCloudPlanType?>(FattureInCloudPlanTypeValueConverter.FromStringOrDefault(ficPlanRawValue));
                            break;
                        case "connection_id":
                            connectionId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "tax_code":
                            taxCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vat_number":
                            vatNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Company.");

            if (ficPlan.IsSet && ficPlan.Value == null)
                throw new ArgumentNullException(nameof(ficPlan), "Property is not nullable for class Company.");

            return new Company(id, name, type, accessToken, controlledCompanies, ficLicenseExpire, ficPlan, connectionId, taxCode, vatNumber);
        }

        /// <summary>
        /// Serializes a <see cref="Company" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="company"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Company company, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, company, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Company" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="company"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Company company, JsonSerializerOptions jsonSerializerOptions)
        {
            if (company.IdOption.IsSet)
                if (company.IdOption.Value != null)
                    writer.WriteNumber("id", company.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (company.NameOption.IsSet)
                if (company.NameOption.Value != null)
                    writer.WriteString("name", company.Name);
                else
                    writer.WriteNull("name");

            if (company.TypeOption.IsSet)
            {
                var typeRawValue = CompanyTypeValueConverter.ToJsonValue(company.Type.Value);
                writer.WriteString("type", typeRawValue);
            }
            if (company.AccessTokenOption.IsSet)
                if (company.AccessTokenOption.Value != null)
                    writer.WriteString("access_token", company.AccessToken);
                else
                    writer.WriteNull("access_token");

            if (company.ControlledCompaniesOption.IsSet)
                if (company.ControlledCompaniesOption.Value != null)
                {
                    writer.WritePropertyName("controlled_companies");
                    JsonSerializer.Serialize(writer, company.ControlledCompanies, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("controlled_companies");
            if (company.FicLicenseExpireOption.IsSet)
                if (company.FicLicenseExpireOption.Value != null)
                    writer.WriteString("fic_license_expire", company.FicLicenseExpireOption.Value.Value.ToString(FicLicenseExpireFormat));
                else
                    writer.WriteNull("fic_license_expire");

            if (company.FicPlanOption.IsSet)
            {
                var ficPlanRawValue = FattureInCloudPlanTypeValueConverter.ToJsonValue(company.FicPlan.Value);
                writer.WriteString("fic_plan", ficPlanRawValue);
            }
            if (company.ConnectionIdOption.IsSet)
                if (company.ConnectionIdOption.Value != null)
                    writer.WriteNumber("connection_id", company.ConnectionIdOption.Value.Value);
                else
                    writer.WriteNull("connection_id");

            if (company.TaxCodeOption.IsSet)
                if (company.TaxCodeOption.Value != null)
                    writer.WriteString("tax_code", company.TaxCode);
                else
                    writer.WriteNull("tax_code");

            if (company.VatNumberOption.IsSet)
                if (company.VatNumberOption.Value != null)
                    writer.WriteString("vat_number", company.VatNumber);
                else
                    writer.WriteNull("vat_number");
        }
    }
}
