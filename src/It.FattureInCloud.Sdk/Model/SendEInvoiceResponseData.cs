/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     SendEInvoiceResponseData
    /// </summary>
    [DataContract(Name = "SendEInvoiceResponse_data")]
    public class SendEInvoiceResponseData : IEquatable<SendEInvoiceResponseData>, IValidatableObject
    {
        private string _Date;
        private bool _flagDate;
        private bool _flagName;
        private string _Name;

        /// <summary>
        ///     Initializes a new instance of the <see cref="SendEInvoiceResponseData" /> class.
        /// </summary>
        /// <param name="name">Response message..</param>
        /// <param name="date">E-invoice sent date..</param>
        public SendEInvoiceResponseData(string name = default(string), string date = default(string))
        {
            _Name = name;
            if (Name != null) _flagName = true;
            _Date = date;
            if (Date != null) _flagDate = true;
        }

        /// <summary>
        ///     Response message.
        /// </summary>
        /// <value>Response message.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get => _Name;
            set
            {
                _Name = value;
                _flagName = true;
            }
        }

        /// <summary>
        ///     E-invoice sent date.
        /// </summary>
        /// <value>E-invoice sent date.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public string Date
        {
            get => _Date;
            set
            {
                _Date = value;
                _flagDate = true;
            }
        }

        /// <summary>
        ///     Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }

        /// <summary>
        ///     Returns false as Date should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDate()
        {
            return _flagDate;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendEInvoiceResponseData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SendEInvoiceResponseData);
        }

        /// <summary>
        ///     Returns true if SendEInvoiceResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of SendEInvoiceResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendEInvoiceResponseData input)
        {
            if (input == null) return false;
            return
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Date == input.Date ||
                    (Date != null &&
                     Date.Equals(input.Date))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
                if (Date != null) hashCode = hashCode * 59 + Date.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}