/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     CashbookEntry
    /// </summary>
    [DataContract(Name = "CashbookEntry")]
    public class CashbookEntry : IEquatable<CashbookEntry>, IValidatableObject
    {
        private decimal? _AmountIn;
        private decimal? _AmountOut;
        private DateTime? _Date;
        private string _Description;
        private CashbookEntryDocument _Document;
        private string _EntityName;
        private bool _flagAmountIn;
        private bool _flagAmountOut;
        private bool _flagDate;
        private bool _flagDescription;
        private bool _flagDocument;
        private bool _flagEntityName;
        private bool _flagId;
        private bool _flagKind;
        private bool _flagPaymentAccountIn;
        private bool _flagPaymentAccountOut;
        private bool _flagType;
        private string _Id;
        private CashbookEntryKind? _Kind;
        private PaymentAccount _PaymentAccountIn;
        private PaymentAccount _PaymentAccountOut;
        private CashbookEntryType? _Type;

        /// <summary>
        ///     Initializes a new instance of the <see cref="CashbookEntry" /> class.
        /// </summary>
        /// <param name="id">Cashbook unique identifier..</param>
        /// <param name="date">Cashbook date..</param>
        /// <param name="description">Cashbook description..</param>
        /// <param name="kind">kind.</param>
        /// <param name="type">type.</param>
        /// <param name="entityName">Entity name..</param>
        /// <param name="document">document.</param>
        /// <param name="amountIn">[Only for cashbook entry in] Total amount in..</param>
        /// <param name="paymentAccountIn">paymentAccountIn.</param>
        /// <param name="amountOut">[Only for cashbook entry out] Total amount out..</param>
        /// <param name="paymentAccountOut">paymentAccountOut.</param>
        public CashbookEntry(string id = default(string), DateTime? date = default(DateTime?),
            string description = default(string), CashbookEntryKind? kind = default(CashbookEntryKind?),
            CashbookEntryType? type = default(CashbookEntryType?), string entityName = default(string),
            CashbookEntryDocument document = default, decimal? amountIn = default(decimal?),
            PaymentAccount paymentAccountIn = default, decimal? amountOut = default(decimal?),
            PaymentAccount paymentAccountOut = default)
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _Date = date;
            if (Date != null) _flagDate = true;
            _Description = description;
            if (Description != null) _flagDescription = true;
            _Kind = kind;
            if (Kind != null) _flagKind = true;
            _Type = type;
            if (Type != null) _flagType = true;
            _EntityName = entityName;
            if (EntityName != null) _flagEntityName = true;
            _Document = document;
            if (Document != null) _flagDocument = true;
            _AmountIn = amountIn;
            if (AmountIn != null) _flagAmountIn = true;
            _PaymentAccountIn = paymentAccountIn;
            if (PaymentAccountIn != null) _flagPaymentAccountIn = true;
            _AmountOut = amountOut;
            if (AmountOut != null) _flagAmountOut = true;
            _PaymentAccountOut = paymentAccountOut;
            if (PaymentAccountOut != null) _flagPaymentAccountOut = true;
        }

        /// <summary>
        ///     Gets or Sets Kind
        /// </summary>

        [DataMember(Name = "kind", EmitDefaultValue = false)]
        public CashbookEntryKind? Kind
        {
            get => _Kind;
            set
            {
                _Kind = value;
                _flagKind = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public CashbookEntryType? Type
        {
            get => _Type;
            set
            {
                _Type = value;
                _flagType = true;
            }
        }

        /// <summary>
        ///     Cashbook unique identifier.
        /// </summary>
        /// <value>Cashbook unique identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Cashbook date.
        /// </summary>
        /// <value>Cashbook date.</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateTime? Date
        {
            get => _Date;
            set
            {
                _Date = value;
                _flagDate = true;
            }
        }

        /// <summary>
        ///     Cashbook description.
        /// </summary>
        /// <value>Cashbook description.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get => _Description;
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }

        /// <summary>
        ///     Entity name.
        /// </summary>
        /// <value>Entity name.</value>
        [DataMember(Name = "entity_name", EmitDefaultValue = true)]
        public string EntityName
        {
            get => _EntityName;
            set
            {
                _EntityName = value;
                _flagEntityName = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Document
        /// </summary>
        [DataMember(Name = "document", EmitDefaultValue = true)]
        public CashbookEntryDocument Document
        {
            get => _Document;
            set
            {
                _Document = value;
                _flagDocument = true;
            }
        }

        /// <summary>
        ///     [Only for cashbook entry in] Total amount in.
        /// </summary>
        /// <value>[Only for cashbook entry in] Total amount in.</value>
        [DataMember(Name = "amount_in", EmitDefaultValue = true)]
        public decimal? AmountIn
        {
            get => _AmountIn;
            set
            {
                _AmountIn = value;
                _flagAmountIn = true;
            }
        }

        /// <summary>
        ///     Gets or Sets PaymentAccountIn
        /// </summary>
        [DataMember(Name = "payment_account_in", EmitDefaultValue = true)]
        public PaymentAccount PaymentAccountIn
        {
            get => _PaymentAccountIn;
            set
            {
                _PaymentAccountIn = value;
                _flagPaymentAccountIn = true;
            }
        }

        /// <summary>
        ///     [Only for cashbook entry out] Total amount out.
        /// </summary>
        /// <value>[Only for cashbook entry out] Total amount out.</value>
        [DataMember(Name = "amount_out", EmitDefaultValue = true)]
        public decimal? AmountOut
        {
            get => _AmountOut;
            set
            {
                _AmountOut = value;
                _flagAmountOut = true;
            }
        }

        /// <summary>
        ///     Gets or Sets PaymentAccountOut
        /// </summary>
        [DataMember(Name = "payment_account_out", EmitDefaultValue = true)]
        public PaymentAccount PaymentAccountOut
        {
            get => _PaymentAccountOut;
            set
            {
                _PaymentAccountOut = value;
                _flagPaymentAccountOut = true;
            }
        }

        /// <summary>
        ///     Returns false as Kind should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKind()
        {
            return _flagKind;
        }

        /// <summary>
        ///     Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as Date should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDate()
        {
            return _flagDate;
        }

        /// <summary>
        ///     Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }

        /// <summary>
        ///     Returns false as EntityName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntityName()
        {
            return _flagEntityName;
        }

        /// <summary>
        ///     Returns false as Document should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDocument()
        {
            return _flagDocument;
        }

        /// <summary>
        ///     Returns false as AmountIn should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountIn()
        {
            return _flagAmountIn;
        }

        /// <summary>
        ///     Returns false as PaymentAccountIn should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccountIn()
        {
            return _flagPaymentAccountIn;
        }

        /// <summary>
        ///     Returns false as AmountOut should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOut()
        {
            return _flagAmountOut;
        }

        /// <summary>
        ///     Returns false as PaymentAccountOut should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccountOut()
        {
            return _flagPaymentAccountOut;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CashbookEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EntityName: ").Append(EntityName).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  AmountIn: ").Append(AmountIn).Append("\n");
            sb.Append("  PaymentAccountIn: ").Append(PaymentAccountIn).Append("\n");
            sb.Append("  AmountOut: ").Append(AmountOut).Append("\n");
            sb.Append("  PaymentAccountOut: ").Append(PaymentAccountOut).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CashbookEntry);
        }

        /// <summary>
        ///     Returns true if CashbookEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of CashbookEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashbookEntry input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Date == input.Date ||
                    (Date != null &&
                     Date.Equals(input.Date))
                ) &&
                (
                    Description == input.Description ||
                    (Description != null &&
                     Description.Equals(input.Description))
                ) &&
                (
                    Kind == input.Kind ||
                    Kind.Equals(input.Kind)
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    EntityName == input.EntityName ||
                    (EntityName != null &&
                     EntityName.Equals(input.EntityName))
                ) &&
                (
                    Document == input.Document ||
                    (Document != null &&
                     Document.Equals(input.Document))
                ) &&
                (
                    AmountIn == input.AmountIn ||
                    (AmountIn != null &&
                     AmountIn.Equals(input.AmountIn))
                ) &&
                (
                    PaymentAccountIn == input.PaymentAccountIn ||
                    (PaymentAccountIn != null &&
                     PaymentAccountIn.Equals(input.PaymentAccountIn))
                ) &&
                (
                    AmountOut == input.AmountOut ||
                    (AmountOut != null &&
                     AmountOut.Equals(input.AmountOut))
                ) &&
                (
                    PaymentAccountOut == input.PaymentAccountOut ||
                    (PaymentAccountOut != null &&
                     PaymentAccountOut.Equals(input.PaymentAccountOut))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (Date != null) hashCode = hashCode * 59 + Date.GetHashCode();
                if (Description != null) hashCode = hashCode * 59 + Description.GetHashCode();
                hashCode = hashCode * 59 + Kind.GetHashCode();
                hashCode = hashCode * 59 + Type.GetHashCode();
                if (EntityName != null) hashCode = hashCode * 59 + EntityName.GetHashCode();
                if (Document != null) hashCode = hashCode * 59 + Document.GetHashCode();
                if (AmountIn != null) hashCode = hashCode * 59 + AmountIn.GetHashCode();
                if (PaymentAccountIn != null) hashCode = hashCode * 59 + PaymentAccountIn.GetHashCode();
                if (AmountOut != null) hashCode = hashCode * 59 + AmountOut.GetHashCode();
                if (PaymentAccountOut != null) hashCode = hashCode * 59 + PaymentAccountOut.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}