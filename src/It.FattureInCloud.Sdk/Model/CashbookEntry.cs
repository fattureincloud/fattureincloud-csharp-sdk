/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;
using System.Reflection;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// CashbookEntry
    /// </summary>
    [JsonConverter(typeof(CashbookEntryJsonConverter))]
    [DataContract(Name = "CashbookEntry")]
    public partial class CashbookEntry : AbstractOpenAPISchema, IEquatable<CashbookEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CashbookEntry" /> class
        /// with the <see cref="CashbookEntryIn" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CashbookEntryIn.</param>
        public CashbookEntry(CashbookEntryIn actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CashbookEntry" /> class
        /// with the <see cref="CashbookEntryOut" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CashbookEntryOut.</param>
        public CashbookEntry(CashbookEntryOut actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(CashbookEntryIn))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CashbookEntryOut))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: CashbookEntryIn, CashbookEntryOut");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `CashbookEntryIn`. If the actual instance is not `CashbookEntryIn`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CashbookEntryIn</returns>
        public CashbookEntryIn GetCashbookEntryIn()
        {
            return (CashbookEntryIn)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CashbookEntryOut`. If the actual instance is not `CashbookEntryOut`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CashbookEntryOut</returns>
        public CashbookEntryOut GetCashbookEntryOut()
        {
            return (CashbookEntryOut)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CashbookEntry {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, CashbookEntry.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of CashbookEntry
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of CashbookEntry</returns>
        public static CashbookEntry FromJson(string jsonString)
        {
            CashbookEntry newCashbookEntry = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newCashbookEntry;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CashbookEntryIn).GetProperty("AdditionalProperties") == null)
                {
                    newCashbookEntry = new CashbookEntry(JsonConvert.DeserializeObject<CashbookEntryIn>(jsonString, CashbookEntry.SerializerSettings));
                }
                else
                {
                    newCashbookEntry = new CashbookEntry(JsonConvert.DeserializeObject<CashbookEntryIn>(jsonString, CashbookEntry.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CashbookEntryIn");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CashbookEntryIn: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CashbookEntryOut).GetProperty("AdditionalProperties") == null)
                {
                    newCashbookEntry = new CashbookEntry(JsonConvert.DeserializeObject<CashbookEntryOut>(jsonString, CashbookEntry.SerializerSettings));
                }
                else
                {
                    newCashbookEntry = new CashbookEntry(JsonConvert.DeserializeObject<CashbookEntryOut>(jsonString, CashbookEntry.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CashbookEntryOut");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CashbookEntryOut: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newCashbookEntry;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashbookEntry);
        }

        /// <summary>
        /// Returns true if CashbookEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of CashbookEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashbookEntry input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for CashbookEntry
    /// </summary>
    public class CashbookEntryJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(CashbookEntry).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return CashbookEntry.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
