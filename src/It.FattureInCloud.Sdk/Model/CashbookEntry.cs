// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// CashbookEntry
    /// </summary>
    public partial class CashbookEntry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CashbookEntry" /> class.
        /// </summary>
        /// <param name="id">Cashbook id</param>
        /// <param name="date">Cashbook date</param>
        /// <param name="description">Cashbook description</param>
        /// <param name="kind">kind</param>
        /// <param name="type">type</param>
        /// <param name="entityName">Cashbook entity name</param>
        /// <param name="document">document</param>
        /// <param name="amountIn">[Only for cashbook entry in] Cashbook total amount in</param>
        /// <param name="paymentAccountIn">paymentAccountIn</param>
        /// <param name="amountOut">[Only for cashbook entry out] Cashbook total amount out</param>
        /// <param name="paymentAccountOut">paymentAccountOut</param>
        [JsonConstructor]
        public CashbookEntry(Option<string> id = default, Option<DateTimeOffset?> date = default, Option<string> description = default, Option<CashbookEntryKind?> kind = default, Option<CashbookEntryType?> type = default, Option<string> entityName = default, Option<CashbookEntryDocument> document = default, Option<decimal?> amountIn = default, Option<PaymentAccount> paymentAccountIn = default, Option<decimal?> amountOut = default, Option<PaymentAccount> paymentAccountOut = default)
        {
            IdOption = id;
            DateOption = date;
            DescriptionOption = description;
            KindOption = kind;
            TypeOption = type;
            EntityNameOption = entityName;
            DocumentOption = document;
            AmountInOption = amountIn;
            PaymentAccountInOption = paymentAccountIn;
            AmountOutOption = amountOut;
            PaymentAccountOutOption = paymentAccountOut;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Kind
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CashbookEntryKind?> KindOption { get; private set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [JsonPropertyName("kind")]
        public CashbookEntryKind? Kind { get { return this.KindOption; } set { this.KindOption = new Option<CashbookEntryKind?>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CashbookEntryType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public CashbookEntryType? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<CashbookEntryType?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// Cashbook id
        /// </summary>
        /// <value>Cashbook id</value>
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> DateOption { get; private set; }

        /// <summary>
        /// Cashbook date
        /// </summary>
        /// <value>Cashbook date</value>
        [JsonPropertyName("date")]
        public DateTimeOffset? Date { get { return this.DateOption; } set { this.DateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Cashbook description
        /// </summary>
        /// <value>Cashbook description</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EntityName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EntityNameOption { get; private set; }

        /// <summary>
        /// Cashbook entity name
        /// </summary>
        /// <value>Cashbook entity name</value>
        [JsonPropertyName("entity_name")]
        public string EntityName { get { return this.EntityNameOption; } set { this.EntityNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Document
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CashbookEntryDocument> DocumentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [JsonPropertyName("document")]
        public CashbookEntryDocument Document { get { return this.DocumentOption; } set { this.DocumentOption = new Option<CashbookEntryDocument>(value); } }

        /// <summary>
        /// Used to track the state of AmountIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountInOption { get; private set; }

        /// <summary>
        /// [Only for cashbook entry in] Cashbook total amount in
        /// </summary>
        /// <value>[Only for cashbook entry in] Cashbook total amount in</value>
        [JsonPropertyName("amount_in")]
        public decimal? AmountIn { get { return this.AmountInOption; } set { this.AmountInOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of PaymentAccountIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentAccount> PaymentAccountInOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentAccountIn
        /// </summary>
        [JsonPropertyName("payment_account_in")]
        public PaymentAccount PaymentAccountIn { get { return this.PaymentAccountInOption; } set { this.PaymentAccountInOption = new Option<PaymentAccount>(value); } }

        /// <summary>
        /// Used to track the state of AmountOut
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountOutOption { get; private set; }

        /// <summary>
        /// [Only for cashbook entry out] Cashbook total amount out
        /// </summary>
        /// <value>[Only for cashbook entry out] Cashbook total amount out</value>
        [JsonPropertyName("amount_out")]
        public decimal? AmountOut { get { return this.AmountOutOption; } set { this.AmountOutOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of PaymentAccountOut
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentAccount> PaymentAccountOutOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentAccountOut
        /// </summary>
        [JsonPropertyName("payment_account_out")]
        public PaymentAccount PaymentAccountOut { get { return this.PaymentAccountOutOption; } set { this.PaymentAccountOutOption = new Option<PaymentAccount>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CashbookEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EntityName: ").Append(EntityName).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  AmountIn: ").Append(AmountIn).Append("\n");
            sb.Append("  PaymentAccountIn: ").Append(PaymentAccountIn).Append("\n");
            sb.Append("  AmountOut: ").Append(AmountOut).Append("\n");
            sb.Append("  PaymentAccountOut: ").Append(PaymentAccountOut).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="CashbookEntry" />
    /// </summary>
    public class CashbookEntryJsonConverter : JsonConverter<CashbookEntry>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="CashbookEntry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CashbookEntry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> id = default;
            Option<DateTimeOffset?> date = default;
            Option<string> description = default;
            Option<CashbookEntryKind?> kind = default;
            Option<CashbookEntryType?> type = default;
            Option<string> entityName = default;
            Option<CashbookEntryDocument> document = default;
            Option<decimal?> amountIn = default;
            Option<PaymentAccount> paymentAccountIn = default;
            Option<decimal?> amountOut = default;
            Option<PaymentAccount> paymentAccountOut = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "date":
                            date = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "kind":
                            string kindRawValue = utf8JsonReader.GetString();
                            if (kindRawValue != null)
                                kind = new Option<CashbookEntryKind?>(CashbookEntryKindValueConverter.FromStringOrDefault(kindRawValue));
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CashbookEntryType?>(CashbookEntryTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "entity_name":
                            entityName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "document":
                            document = new Option<CashbookEntryDocument>(JsonSerializer.Deserialize<CashbookEntryDocument>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "amount_in":
                            amountIn = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "payment_account_in":
                            paymentAccountIn = new Option<PaymentAccount>(JsonSerializer.Deserialize<PaymentAccount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "amount_out":
                            amountOut = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "payment_account_out":
                            paymentAccountOut = new Option<PaymentAccount>(JsonSerializer.Deserialize<PaymentAccount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (kind.IsSet && kind.Value == null)
                throw new ArgumentNullException(nameof(kind), "Property is not nullable for class CashbookEntry.");

            return new CashbookEntry(id, date, description, kind, type, entityName, document, amountIn, paymentAccountIn, amountOut, paymentAccountOut);
        }

        /// <summary>
        /// Serializes a <see cref="CashbookEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cashbookEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CashbookEntry cashbookEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cashbookEntry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CashbookEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cashbookEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CashbookEntry cashbookEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cashbookEntry.IdOption.IsSet)
                if (cashbookEntry.IdOption.Value != null)
                    writer.WriteString("id", cashbookEntry.Id);
                else
                    writer.WriteNull("id");

            if (cashbookEntry.DateOption.IsSet)
                if (cashbookEntry.DateOption.Value != null)
                    writer.WriteString("date", cashbookEntry.DateOption.Value.Value.ToString(DateFormat));
                else
                    writer.WriteNull("date");

            if (cashbookEntry.DescriptionOption.IsSet)
                if (cashbookEntry.DescriptionOption.Value != null)
                    writer.WriteString("description", cashbookEntry.Description);
                else
                    writer.WriteNull("description");

            if (cashbookEntry.KindOption.IsSet)
            {
                var kindRawValue = CashbookEntryKindValueConverter.ToJsonValue(cashbookEntry.Kind.Value);
                writer.WriteString("kind", kindRawValue);
            }
            if (cashbookEntry.TypeOption.IsSet)
                if (cashbookEntry.TypeOption.Value != null)
                {
                    var typeRawValue = CashbookEntryTypeValueConverter.ToJsonValue(cashbookEntry.TypeOption.Value.Value);
                    writer.WriteString("type", typeRawValue);
                }
                else
                    writer.WriteNull("type");
            if (cashbookEntry.EntityNameOption.IsSet)
                if (cashbookEntry.EntityNameOption.Value != null)
                    writer.WriteString("entity_name", cashbookEntry.EntityName);
                else
                    writer.WriteNull("entity_name");

            if (cashbookEntry.DocumentOption.IsSet)
                if (cashbookEntry.DocumentOption.Value != null)
                {
                    writer.WritePropertyName("document");
                    JsonSerializer.Serialize(writer, cashbookEntry.Document, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("document");
            if (cashbookEntry.AmountInOption.IsSet)
                if (cashbookEntry.AmountInOption.Value != null)
                    writer.WriteNumber("amount_in", cashbookEntry.AmountInOption.Value.Value);
                else
                    writer.WriteNull("amount_in");

            if (cashbookEntry.PaymentAccountInOption.IsSet)
                if (cashbookEntry.PaymentAccountInOption.Value != null)
                {
                    writer.WritePropertyName("payment_account_in");
                    JsonSerializer.Serialize(writer, cashbookEntry.PaymentAccountIn, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_account_in");
            if (cashbookEntry.AmountOutOption.IsSet)
                if (cashbookEntry.AmountOutOption.Value != null)
                    writer.WriteNumber("amount_out", cashbookEntry.AmountOutOption.Value.Value);
                else
                    writer.WriteNull("amount_out");

            if (cashbookEntry.PaymentAccountOutOption.IsSet)
                if (cashbookEntry.PaymentAccountOutOption.Value != null)
                {
                    writer.WritePropertyName("payment_account_out");
                    JsonSerializer.Serialize(writer, cashbookEntry.PaymentAccountOut, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_account_out");
        }
    }
}
