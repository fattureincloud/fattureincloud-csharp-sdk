// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// City
    /// </summary>
    public partial class City : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="City" /> class.
        /// </summary>
        /// <param name="postalCode">City postal code</param>
        /// <param name="varCity">City name</param>
        /// <param name="province">City province</param>
        [JsonConstructor]
        public City(Option<string> postalCode = default, Option<string> varCity = default, Option<string> province = default)
        {
            PostalCodeOption = postalCode;
            VarCityOption = varCity;
            ProvinceOption = province;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PostalCodeOption { get; private set; }

        /// <summary>
        /// City postal code
        /// </summary>
        /// <value>City postal code</value>
        [JsonPropertyName("postal_code")]
        public string PostalCode { get { return this.PostalCodeOption; } set { this.PostalCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VarCity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> VarCityOption { get; private set; }

        /// <summary>
        /// City name
        /// </summary>
        /// <value>City name</value>
        [JsonPropertyName("city")]
        public string VarCity { get { return this.VarCityOption; } set { this.VarCityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Province
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ProvinceOption { get; private set; }

        /// <summary>
        /// City province
        /// </summary>
        /// <value>City province</value>
        [JsonPropertyName("province")]
        public string Province { get { return this.ProvinceOption; } set { this.ProvinceOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class City {\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  VarCity: ").Append(VarCity).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="City" />
    /// </summary>
    public class CityJsonConverter : JsonConverter<City>
    {
        /// <summary>
        /// Deserializes json to <see cref="City" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override City Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> postalCode = default;
            Option<string> varCity = default;
            Option<string> province = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "postal_code":
                            postalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "city":
                            varCity = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "province":
                            province = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new City(postalCode, varCity, province);
        }

        /// <summary>
        /// Serializes a <see cref="City" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="city"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, City city, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, city, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="City" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="city"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, City city, JsonSerializerOptions jsonSerializerOptions)
        {
            if (city.PostalCodeOption.IsSet)
                if (city.PostalCodeOption.Value != null)
                    writer.WriteString("postal_code", city.PostalCode);
                else
                    writer.WriteNull("postal_code");

            if (city.VarCityOption.IsSet)
                if (city.VarCityOption.Value != null)
                    writer.WriteString("city", city.VarCity);
                else
                    writer.WriteNull("city");

            if (city.ProvinceOption.IsSet)
                if (city.ProvinceOption.Value != null)
                    writer.WriteString("province", city.Province);
                else
                    writer.WriteNull("province");
        }
    }
}
