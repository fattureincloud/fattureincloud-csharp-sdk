/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     CashbookEntryDocument
    /// </summary>
    [DataContract(Name = "CashbookEntry_document")]
    public class CashbookEntryDocument : IEquatable<CashbookEntryDocument>, IValidatableObject
    {
        private bool _flagId;
        private bool _flagPath;
        private bool _flagType;
        private int? _Id;
        private string _Path;
        private string _Type;

        /// <summary>
        ///     Initializes a new instance of the <see cref="CashbookEntryDocument" /> class.
        /// </summary>
        /// <param name="id">Document unique identifier..</param>
        /// <param name="type">Document type..</param>
        /// <param name="path">Document path..</param>
        public CashbookEntryDocument(int? id = default(int?), string type = default(string),
            string path = default(string))
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _Type = type;
            if (Type != null) _flagType = true;
            _Path = path;
            if (Path != null) _flagPath = true;
        }

        /// <summary>
        ///     Document unique identifier.
        /// </summary>
        /// <value>Document unique identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Document type.
        /// </summary>
        /// <value>Document type.</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type
        {
            get => _Type;
            set
            {
                _Type = value;
                _flagType = true;
            }
        }

        /// <summary>
        ///     Document path.
        /// </summary>
        /// <value>Document path.</value>
        [DataMember(Name = "path", EmitDefaultValue = true)]
        public string Path
        {
            get => _Path;
            set
            {
                _Path = value;
                _flagPath = true;
            }
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }

        /// <summary>
        ///     Returns false as Path should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePath()
        {
            return _flagPath;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CashbookEntryDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CashbookEntryDocument);
        }

        /// <summary>
        ///     Returns true if CashbookEntryDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of CashbookEntryDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashbookEntryDocument input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Type == input.Type ||
                    (Type != null &&
                     Type.Equals(input.Type))
                ) &&
                (
                    Path == input.Path ||
                    (Path != null &&
                     Path.Equals(input.Path))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (Type != null) hashCode = hashCode * 59 + Type.GetHashCode();
                if (Path != null) hashCode = hashCode * 59 + Path.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}