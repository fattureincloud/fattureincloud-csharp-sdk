// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// CashbookEntryDocument
    /// </summary>
    public partial class CashbookEntryDocument : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CashbookEntryDocument" /> class.
        /// </summary>
        /// <param name="id">Cashbook related document id</param>
        /// <param name="type">Cashbook related document type</param>
        /// <param name="path">Cashbook related document path</param>
        [JsonConstructor]
        public CashbookEntryDocument(Option<int?> id = default, Option<string> type = default, Option<string> path = default)
        {
            IdOption = id;
            TypeOption = type;
            PathOption = path;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Cashbook related document id
        /// </summary>
        /// <value>Cashbook related document id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// Cashbook related document type
        /// </summary>
        /// <value>Cashbook related document type</value>
        [JsonPropertyName("type")]
        public string Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PathOption { get; private set; }

        /// <summary>
        /// Cashbook related document path
        /// </summary>
        /// <value>Cashbook related document path</value>
        [JsonPropertyName("path")]
        public string Path { get { return this.PathOption; } set { this.PathOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CashbookEntryDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="CashbookEntryDocument" />
    /// </summary>
    public class CashbookEntryDocumentJsonConverter : JsonConverter<CashbookEntryDocument>
    {
        /// <summary>
        /// Deserializes json to <see cref="CashbookEntryDocument" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CashbookEntryDocument Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string> type = default;
            Option<string> path = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "path":
                            path = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new CashbookEntryDocument(id, type, path);
        }

        /// <summary>
        /// Serializes a <see cref="CashbookEntryDocument" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cashbookEntryDocument"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CashbookEntryDocument cashbookEntryDocument, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cashbookEntryDocument, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CashbookEntryDocument" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cashbookEntryDocument"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CashbookEntryDocument cashbookEntryDocument, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cashbookEntryDocument.IdOption.IsSet)
                if (cashbookEntryDocument.IdOption.Value != null)
                    writer.WriteNumber("id", cashbookEntryDocument.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (cashbookEntryDocument.TypeOption.IsSet)
                if (cashbookEntryDocument.TypeOption.Value != null)
                    writer.WriteString("type", cashbookEntryDocument.Type);
                else
                    writer.WriteNull("type");

            if (cashbookEntryDocument.PathOption.IsSet)
                if (cashbookEntryDocument.PathOption.Value != null)
                    writer.WriteString("path", cashbookEntryDocument.Path);
                else
                    writer.WriteNull("path");
        }
    }
}
