/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.12
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// EntityOptions
    /// </summary>
    [DataContract(Name = "EntityOptions")]
    public partial class EntityOptions : IEquatable<EntityOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityOptions" /> class.
        /// </summary>
        /// <param name="entitySearchFields">entitySearchFields.</param>
        /// <param name="entityAutocomplete">entityAutocomplete.</param>
        /// <param name="entityCreate">entityCreate.</param>
        /// <param name="entityUpdate">entityUpdate.</param>
        public EntityOptions(string entitySearchFields = default(string), bool? entityAutocomplete = default(bool?), bool? entityCreate = default(bool?), string entityUpdate = default(string))
        {
            this._EntitySearchFields = entitySearchFields;
            this._EntityAutocomplete = entityAutocomplete;
            this._EntityCreate = entityCreate;
            this._EntityUpdate = entityUpdate;
        }

        /// <summary>
        /// Gets or Sets EntitySearchFields
        /// </summary>
        [DataMember(Name = "entity_search_fields", EmitDefaultValue = true)]
        public string EntitySearchFields
        {
            get{ return _EntitySearchFields;}
            set
            {
                _EntitySearchFields = value;
                _flagEntitySearchFields = true;
            }
        }
        private string _EntitySearchFields;
        private bool _flagEntitySearchFields;

        /// <summary>
        /// Returns false as EntitySearchFields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntitySearchFields()
        {
            return _flagEntitySearchFields;
        }
        /// <summary>
        /// Gets or Sets EntityAutocomplete
        /// </summary>
        [DataMember(Name = "entity_autocomplete", EmitDefaultValue = true)]
        public bool? EntityAutocomplete
        {
            get{ return _EntityAutocomplete;}
            set
            {
                _EntityAutocomplete = value;
                _flagEntityAutocomplete = true;
            }
        }
        private bool? _EntityAutocomplete;
        private bool _flagEntityAutocomplete;

        /// <summary>
        /// Returns false as EntityAutocomplete should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntityAutocomplete()
        {
            return _flagEntityAutocomplete;
        }
        /// <summary>
        /// Gets or Sets EntityCreate
        /// </summary>
        [DataMember(Name = "entity_create", EmitDefaultValue = true)]
        public bool? EntityCreate
        {
            get{ return _EntityCreate;}
            set
            {
                _EntityCreate = value;
                _flagEntityCreate = true;
            }
        }
        private bool? _EntityCreate;
        private bool _flagEntityCreate;

        /// <summary>
        /// Returns false as EntityCreate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntityCreate()
        {
            return _flagEntityCreate;
        }
        /// <summary>
        /// Gets or Sets EntityUpdate
        /// </summary>
        [DataMember(Name = "entity_update", EmitDefaultValue = true)]
        public string EntityUpdate
        {
            get{ return _EntityUpdate;}
            set
            {
                _EntityUpdate = value;
                _flagEntityUpdate = true;
            }
        }
        private string _EntityUpdate;
        private bool _flagEntityUpdate;

        /// <summary>
        /// Returns false as EntityUpdate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntityUpdate()
        {
            return _flagEntityUpdate;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntityOptions {\n");
            sb.Append("  EntitySearchFields: ").Append(EntitySearchFields).Append("\n");
            sb.Append("  EntityAutocomplete: ").Append(EntityAutocomplete).Append("\n");
            sb.Append("  EntityCreate: ").Append(EntityCreate).Append("\n");
            sb.Append("  EntityUpdate: ").Append(EntityUpdate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityOptions);
        }

        /// <summary>
        /// Returns true if EntityOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntitySearchFields == input.EntitySearchFields ||
                    (this.EntitySearchFields != null &&
                    this.EntitySearchFields.Equals(input.EntitySearchFields))
                ) && 
                (
                    this.EntityAutocomplete == input.EntityAutocomplete ||
                    (this.EntityAutocomplete != null &&
                    this.EntityAutocomplete.Equals(input.EntityAutocomplete))
                ) && 
                (
                    this.EntityCreate == input.EntityCreate ||
                    (this.EntityCreate != null &&
                    this.EntityCreate.Equals(input.EntityCreate))
                ) && 
                (
                    this.EntityUpdate == input.EntityUpdate ||
                    (this.EntityUpdate != null &&
                    this.EntityUpdate.Equals(input.EntityUpdate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntitySearchFields != null)
                {
                    hashCode = (hashCode * 59) + this.EntitySearchFields.GetHashCode();
                }
                if (this.EntityAutocomplete != null)
                {
                    hashCode = (hashCode * 59) + this.EntityAutocomplete.GetHashCode();
                }
                if (this.EntityCreate != null)
                {
                    hashCode = (hashCode * 59) + this.EntityCreate.GetHashCode();
                }
                if (this.EntityUpdate != null)
                {
                    hashCode = (hashCode * 59) + this.EntityUpdate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
