// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Issued document default values
    /// </summary>
    public partial class IssuedDocumentPreCreateInfoDefaultValues : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentPreCreateInfoDefaultValues" /> class.
        /// </summary>
        /// <param name="defaultTemplate">defaultTemplate</param>
        /// <param name="dnTemplate">dnTemplate</param>
        /// <param name="aiTemplate">aiTemplate</param>
        /// <param name="notes">Default notes.</param>
        /// <param name="rivalsa">Default rivalsa percentage.</param>
        /// <param name="cassa">Default cassa percentage.</param>
        /// <param name="withholdingTax">Default withholding tax percentage.</param>
        /// <param name="withholdingTaxTaxable">Default withholding tax taxable percentage.</param>
        /// <param name="otherWithholdingTax">Default other withholding tax percentage.</param>
        /// <param name="useGrossPrices">Use gross price by default.</param>
        /// <param name="paymentMethod">paymentMethod</param>
        [JsonConstructor]
        public IssuedDocumentPreCreateInfoDefaultValues(Option<DocumentTemplate> defaultTemplate = default, Option<DocumentTemplate> dnTemplate = default, Option<DocumentTemplate> aiTemplate = default, Option<string> notes = default, Option<decimal?> rivalsa = default, Option<decimal?> cassa = default, Option<decimal?> withholdingTax = default, Option<decimal?> withholdingTaxTaxable = default, Option<decimal?> otherWithholdingTax = default, Option<bool?> useGrossPrices = default, Option<PaymentMethod> paymentMethod = default)
        {
            DefaultTemplateOption = defaultTemplate;
            DnTemplateOption = dnTemplate;
            AiTemplateOption = aiTemplate;
            NotesOption = notes;
            RivalsaOption = rivalsa;
            CassaOption = cassa;
            WithholdingTaxOption = withholdingTax;
            WithholdingTaxTaxableOption = withholdingTaxTaxable;
            OtherWithholdingTaxOption = otherWithholdingTax;
            UseGrossPricesOption = useGrossPrices;
            PaymentMethodOption = paymentMethod;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DefaultTemplate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocumentTemplate> DefaultTemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultTemplate
        /// </summary>
        [JsonPropertyName("default_template")]
        public DocumentTemplate DefaultTemplate { get { return this.DefaultTemplateOption; } set { this.DefaultTemplateOption = new Option<DocumentTemplate>(value); } }

        /// <summary>
        /// Used to track the state of DnTemplate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocumentTemplate> DnTemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DnTemplate
        /// </summary>
        [JsonPropertyName("dn_template")]
        public DocumentTemplate DnTemplate { get { return this.DnTemplateOption; } set { this.DnTemplateOption = new Option<DocumentTemplate>(value); } }

        /// <summary>
        /// Used to track the state of AiTemplate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocumentTemplate> AiTemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets AiTemplate
        /// </summary>
        [JsonPropertyName("ai_template")]
        public DocumentTemplate AiTemplate { get { return this.AiTemplateOption; } set { this.AiTemplateOption = new Option<DocumentTemplate>(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NotesOption { get; private set; }

        /// <summary>
        /// Default notes.
        /// </summary>
        /// <value>Default notes.</value>
        [JsonPropertyName("notes")]
        public string Notes { get { return this.NotesOption; } set { this.NotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Rivalsa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> RivalsaOption { get; private set; }

        /// <summary>
        /// Default rivalsa percentage.
        /// </summary>
        /// <value>Default rivalsa percentage.</value>
        [JsonPropertyName("rivalsa")]
        public decimal? Rivalsa { get { return this.RivalsaOption; } set { this.RivalsaOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Cassa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> CassaOption { get; private set; }

        /// <summary>
        /// Default cassa percentage.
        /// </summary>
        /// <value>Default cassa percentage.</value>
        [JsonPropertyName("cassa")]
        public decimal? Cassa { get { return this.CassaOption; } set { this.CassaOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of WithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> WithholdingTaxOption { get; private set; }

        /// <summary>
        /// Default withholding tax percentage.
        /// </summary>
        /// <value>Default withholding tax percentage.</value>
        [JsonPropertyName("withholding_tax")]
        public decimal? WithholdingTax { get { return this.WithholdingTaxOption; } set { this.WithholdingTaxOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of WithholdingTaxTaxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> WithholdingTaxTaxableOption { get; private set; }

        /// <summary>
        /// Default withholding tax taxable percentage.
        /// </summary>
        /// <value>Default withholding tax taxable percentage.</value>
        [JsonPropertyName("withholding_tax_taxable")]
        public decimal? WithholdingTaxTaxable { get { return this.WithholdingTaxTaxableOption; } set { this.WithholdingTaxTaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of OtherWithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> OtherWithholdingTaxOption { get; private set; }

        /// <summary>
        /// Default other withholding tax percentage.
        /// </summary>
        /// <value>Default other withholding tax percentage.</value>
        [JsonPropertyName("other_withholding_tax")]
        public decimal? OtherWithholdingTax { get { return this.OtherWithholdingTaxOption; } set { this.OtherWithholdingTaxOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of UseGrossPrices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseGrossPricesOption { get; private set; }

        /// <summary>
        /// Use gross price by default.
        /// </summary>
        /// <value>Use gross price by default.</value>
        [JsonPropertyName("use_gross_prices")]
        public bool? UseGrossPrices { get { return this.UseGrossPricesOption; } set { this.UseGrossPricesOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentMethod> PaymentMethodOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [JsonPropertyName("payment_method")]
        public PaymentMethod PaymentMethod { get { return this.PaymentMethodOption; } set { this.PaymentMethodOption = new Option<PaymentMethod>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentPreCreateInfoDefaultValues {\n");
            sb.Append("  DefaultTemplate: ").Append(DefaultTemplate).Append("\n");
            sb.Append("  DnTemplate: ").Append(DnTemplate).Append("\n");
            sb.Append("  AiTemplate: ").Append(AiTemplate).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Rivalsa: ").Append(Rivalsa).Append("\n");
            sb.Append("  Cassa: ").Append(Cassa).Append("\n");
            sb.Append("  WithholdingTax: ").Append(WithholdingTax).Append("\n");
            sb.Append("  WithholdingTaxTaxable: ").Append(WithholdingTaxTaxable).Append("\n");
            sb.Append("  OtherWithholdingTax: ").Append(OtherWithholdingTax).Append("\n");
            sb.Append("  UseGrossPrices: ").Append(UseGrossPrices).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentPreCreateInfoDefaultValues" />
    /// </summary>
    public class IssuedDocumentPreCreateInfoDefaultValuesJsonConverter : JsonConverter<IssuedDocumentPreCreateInfoDefaultValues>
    {
        /// <summary>
        /// Deserializes json to <see cref="IssuedDocumentPreCreateInfoDefaultValues" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocumentPreCreateInfoDefaultValues Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DocumentTemplate> defaultTemplate = default;
            Option<DocumentTemplate> dnTemplate = default;
            Option<DocumentTemplate> aiTemplate = default;
            Option<string> notes = default;
            Option<decimal?> rivalsa = default;
            Option<decimal?> cassa = default;
            Option<decimal?> withholdingTax = default;
            Option<decimal?> withholdingTaxTaxable = default;
            Option<decimal?> otherWithholdingTax = default;
            Option<bool?> useGrossPrices = default;
            Option<PaymentMethod> paymentMethod = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "default_template":
                            defaultTemplate = new Option<DocumentTemplate>(JsonSerializer.Deserialize<DocumentTemplate>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dn_template":
                            dnTemplate = new Option<DocumentTemplate>(JsonSerializer.Deserialize<DocumentTemplate>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ai_template":
                            aiTemplate = new Option<DocumentTemplate>(JsonSerializer.Deserialize<DocumentTemplate>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "notes":
                            notes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rivalsa":
                            rivalsa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "cassa":
                            cassa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "withholding_tax":
                            withholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "withholding_tax_taxable":
                            withholdingTaxTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "other_withholding_tax":
                            otherWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "use_gross_prices":
                            useGrossPrices = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "payment_method":
                            paymentMethod = new Option<PaymentMethod>(JsonSerializer.Deserialize<PaymentMethod>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (defaultTemplate.IsSet && defaultTemplate.Value == null)
                throw new ArgumentNullException(nameof(defaultTemplate), "Property is not nullable for class IssuedDocumentPreCreateInfoDefaultValues.");

            if (dnTemplate.IsSet && dnTemplate.Value == null)
                throw new ArgumentNullException(nameof(dnTemplate), "Property is not nullable for class IssuedDocumentPreCreateInfoDefaultValues.");

            if (aiTemplate.IsSet && aiTemplate.Value == null)
                throw new ArgumentNullException(nameof(aiTemplate), "Property is not nullable for class IssuedDocumentPreCreateInfoDefaultValues.");

            if (paymentMethod.IsSet && paymentMethod.Value == null)
                throw new ArgumentNullException(nameof(paymentMethod), "Property is not nullable for class IssuedDocumentPreCreateInfoDefaultValues.");

            return new IssuedDocumentPreCreateInfoDefaultValues(defaultTemplate, dnTemplate, aiTemplate, notes, rivalsa, cassa, withholdingTax, withholdingTaxTaxable, otherWithholdingTax, useGrossPrices, paymentMethod);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocumentPreCreateInfoDefaultValues" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentPreCreateInfoDefaultValues"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentPreCreateInfoDefaultValues issuedDocumentPreCreateInfoDefaultValues, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocumentPreCreateInfoDefaultValues, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocumentPreCreateInfoDefaultValues" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentPreCreateInfoDefaultValues"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocumentPreCreateInfoDefaultValues issuedDocumentPreCreateInfoDefaultValues, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocumentPreCreateInfoDefaultValues.DefaultTemplateOption.IsSet && issuedDocumentPreCreateInfoDefaultValues.DefaultTemplate == null)
                throw new ArgumentNullException(nameof(issuedDocumentPreCreateInfoDefaultValues.DefaultTemplate), "Property is required for class IssuedDocumentPreCreateInfoDefaultValues.");

            if (issuedDocumentPreCreateInfoDefaultValues.DnTemplateOption.IsSet && issuedDocumentPreCreateInfoDefaultValues.DnTemplate == null)
                throw new ArgumentNullException(nameof(issuedDocumentPreCreateInfoDefaultValues.DnTemplate), "Property is required for class IssuedDocumentPreCreateInfoDefaultValues.");

            if (issuedDocumentPreCreateInfoDefaultValues.AiTemplateOption.IsSet && issuedDocumentPreCreateInfoDefaultValues.AiTemplate == null)
                throw new ArgumentNullException(nameof(issuedDocumentPreCreateInfoDefaultValues.AiTemplate), "Property is required for class IssuedDocumentPreCreateInfoDefaultValues.");

            if (issuedDocumentPreCreateInfoDefaultValues.PaymentMethodOption.IsSet && issuedDocumentPreCreateInfoDefaultValues.PaymentMethod == null)
                throw new ArgumentNullException(nameof(issuedDocumentPreCreateInfoDefaultValues.PaymentMethod), "Property is required for class IssuedDocumentPreCreateInfoDefaultValues.");

            if (issuedDocumentPreCreateInfoDefaultValues.DefaultTemplateOption.IsSet)
            {
                writer.WritePropertyName("default_template");
                JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfoDefaultValues.DefaultTemplate, jsonSerializerOptions);
            }
            if (issuedDocumentPreCreateInfoDefaultValues.DnTemplateOption.IsSet)
            {
                writer.WritePropertyName("dn_template");
                JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfoDefaultValues.DnTemplate, jsonSerializerOptions);
            }
            if (issuedDocumentPreCreateInfoDefaultValues.AiTemplateOption.IsSet)
            {
                writer.WritePropertyName("ai_template");
                JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfoDefaultValues.AiTemplate, jsonSerializerOptions);
            }
            if (issuedDocumentPreCreateInfoDefaultValues.NotesOption.IsSet)
                if (issuedDocumentPreCreateInfoDefaultValues.NotesOption.Value != null)
                    writer.WriteString("notes", issuedDocumentPreCreateInfoDefaultValues.Notes);
                else
                    writer.WriteNull("notes");

            if (issuedDocumentPreCreateInfoDefaultValues.RivalsaOption.IsSet)
                if (issuedDocumentPreCreateInfoDefaultValues.RivalsaOption.Value != null)
                    writer.WriteNumber("rivalsa", issuedDocumentPreCreateInfoDefaultValues.RivalsaOption.Value.Value);
                else
                    writer.WriteNull("rivalsa");

            if (issuedDocumentPreCreateInfoDefaultValues.CassaOption.IsSet)
                if (issuedDocumentPreCreateInfoDefaultValues.CassaOption.Value != null)
                    writer.WriteNumber("cassa", issuedDocumentPreCreateInfoDefaultValues.CassaOption.Value.Value);
                else
                    writer.WriteNull("cassa");

            if (issuedDocumentPreCreateInfoDefaultValues.WithholdingTaxOption.IsSet)
                if (issuedDocumentPreCreateInfoDefaultValues.WithholdingTaxOption.Value != null)
                    writer.WriteNumber("withholding_tax", issuedDocumentPreCreateInfoDefaultValues.WithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("withholding_tax");

            if (issuedDocumentPreCreateInfoDefaultValues.WithholdingTaxTaxableOption.IsSet)
                if (issuedDocumentPreCreateInfoDefaultValues.WithholdingTaxTaxableOption.Value != null)
                    writer.WriteNumber("withholding_tax_taxable", issuedDocumentPreCreateInfoDefaultValues.WithholdingTaxTaxableOption.Value.Value);
                else
                    writer.WriteNull("withholding_tax_taxable");

            if (issuedDocumentPreCreateInfoDefaultValues.OtherWithholdingTaxOption.IsSet)
                if (issuedDocumentPreCreateInfoDefaultValues.OtherWithholdingTaxOption.Value != null)
                    writer.WriteNumber("other_withholding_tax", issuedDocumentPreCreateInfoDefaultValues.OtherWithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("other_withholding_tax");

            if (issuedDocumentPreCreateInfoDefaultValues.UseGrossPricesOption.IsSet)
                if (issuedDocumentPreCreateInfoDefaultValues.UseGrossPricesOption.Value != null)
                    writer.WriteBoolean("use_gross_prices", issuedDocumentPreCreateInfoDefaultValues.UseGrossPricesOption.Value.Value);
                else
                    writer.WriteNull("use_gross_prices");

            if (issuedDocumentPreCreateInfoDefaultValues.PaymentMethodOption.IsSet)
            {
                writer.WritePropertyName("payment_method");
                JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfoDefaultValues.PaymentMethod, jsonSerializerOptions);
            }
        }
    }
}
