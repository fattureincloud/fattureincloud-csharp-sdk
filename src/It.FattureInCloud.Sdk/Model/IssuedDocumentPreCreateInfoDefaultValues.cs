/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     Default values for the document.
    /// </summary>
    [DataContract(Name = "IssuedDocumentPreCreateInfo_default_values")]
    public class IssuedDocumentPreCreateInfoDefaultValues : IEquatable<IssuedDocumentPreCreateInfoDefaultValues>,
        IValidatableObject
    {
        private DocumentTemplate _AiTemplate;
        private decimal? _Cassa;
        private DocumentTemplate _DefaultTemplate;
        private DocumentTemplate _DnTemplate;
        private bool _flagAiTemplate;
        private bool _flagCassa;
        private bool _flagDefaultTemplate;
        private bool _flagDnTemplate;
        private bool _flagNotes;
        private bool _flagOtherWithholdingTax;
        private bool _flagPaymentMethod;
        private bool _flagRivalsa;
        private bool _flagUseGrossPrices;
        private bool _flagWithholdingTax;
        private bool _flagWithholdingTaxTaxable;
        private string _Notes;
        private decimal? _OtherWithholdingTax;
        private PaymentMethod _PaymentMethod;
        private decimal? _Rivalsa;
        private bool? _UseGrossPrices;
        private decimal? _WithholdingTax;
        private decimal? _WithholdingTaxTaxable;

        /// <summary>
        ///     Initializes a new instance of the <see cref="IssuedDocumentPreCreateInfoDefaultValues" /> class.
        /// </summary>
        /// <param name="defaultTemplate">defaultTemplate.</param>
        /// <param name="dnTemplate">dnTemplate.</param>
        /// <param name="aiTemplate">aiTemplate.</param>
        /// <param name="notes">Default notes..</param>
        /// <param name="rivalsa">Default rivalsa percentage..</param>
        /// <param name="cassa">Default cassa percentage..</param>
        /// <param name="withholdingTax">Default withholding tax percentage..</param>
        /// <param name="withholdingTaxTaxable">Default withholding tax taxable percentage..</param>
        /// <param name="otherWithholdingTax">Default other withholding tax percentage..</param>
        /// <param name="useGrossPrices">Use gross price by default..</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        public IssuedDocumentPreCreateInfoDefaultValues(DocumentTemplate defaultTemplate = default,
            DocumentTemplate dnTemplate = default, DocumentTemplate aiTemplate = default,
            string notes = default(string), decimal? rivalsa = default(decimal?), decimal? cassa = default(decimal?),
            decimal? withholdingTax = default(decimal?), decimal? withholdingTaxTaxable = default(decimal?),
            decimal? otherWithholdingTax = default(decimal?), bool? useGrossPrices = default(bool?),
            PaymentMethod paymentMethod = default)
        {
            _DefaultTemplate = defaultTemplate;
            if (DefaultTemplate != null) _flagDefaultTemplate = true;
            _DnTemplate = dnTemplate;
            if (DnTemplate != null) _flagDnTemplate = true;
            _AiTemplate = aiTemplate;
            if (AiTemplate != null) _flagAiTemplate = true;
            _Notes = notes;
            if (Notes != null) _flagNotes = true;
            _Rivalsa = rivalsa;
            if (Rivalsa != null) _flagRivalsa = true;
            _Cassa = cassa;
            if (Cassa != null) _flagCassa = true;
            _WithholdingTax = withholdingTax;
            if (WithholdingTax != null) _flagWithholdingTax = true;
            _WithholdingTaxTaxable = withholdingTaxTaxable;
            if (WithholdingTaxTaxable != null) _flagWithholdingTaxTaxable = true;
            _OtherWithholdingTax = otherWithholdingTax;
            if (OtherWithholdingTax != null) _flagOtherWithholdingTax = true;
            _UseGrossPrices = useGrossPrices;
            if (UseGrossPrices != null) _flagUseGrossPrices = true;
            _PaymentMethod = paymentMethod;
            if (PaymentMethod != null) _flagPaymentMethod = true;
        }

        /// <summary>
        ///     Gets or Sets DefaultTemplate
        /// </summary>
        [DataMember(Name = "default_template", EmitDefaultValue = false)]
        public DocumentTemplate DefaultTemplate
        {
            get => _DefaultTemplate;
            set
            {
                _DefaultTemplate = value;
                _flagDefaultTemplate = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DnTemplate
        /// </summary>
        [DataMember(Name = "dn_template", EmitDefaultValue = false)]
        public DocumentTemplate DnTemplate
        {
            get => _DnTemplate;
            set
            {
                _DnTemplate = value;
                _flagDnTemplate = true;
            }
        }

        /// <summary>
        ///     Gets or Sets AiTemplate
        /// </summary>
        [DataMember(Name = "ai_template", EmitDefaultValue = false)]
        public DocumentTemplate AiTemplate
        {
            get => _AiTemplate;
            set
            {
                _AiTemplate = value;
                _flagAiTemplate = true;
            }
        }

        /// <summary>
        ///     Default notes.
        /// </summary>
        /// <value>Default notes.</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes
        {
            get => _Notes;
            set
            {
                _Notes = value;
                _flagNotes = true;
            }
        }

        /// <summary>
        ///     Default rivalsa percentage.
        /// </summary>
        /// <value>Default rivalsa percentage.</value>
        [DataMember(Name = "rivalsa", EmitDefaultValue = true)]
        public decimal? Rivalsa
        {
            get => _Rivalsa;
            set
            {
                _Rivalsa = value;
                _flagRivalsa = true;
            }
        }

        /// <summary>
        ///     Default cassa percentage.
        /// </summary>
        /// <value>Default cassa percentage.</value>
        [DataMember(Name = "cassa", EmitDefaultValue = true)]
        public decimal? Cassa
        {
            get => _Cassa;
            set
            {
                _Cassa = value;
                _flagCassa = true;
            }
        }

        /// <summary>
        ///     Default withholding tax percentage.
        /// </summary>
        /// <value>Default withholding tax percentage.</value>
        [DataMember(Name = "withholding_tax", EmitDefaultValue = true)]
        public decimal? WithholdingTax
        {
            get => _WithholdingTax;
            set
            {
                _WithholdingTax = value;
                _flagWithholdingTax = true;
            }
        }

        /// <summary>
        ///     Default withholding tax taxable percentage.
        /// </summary>
        /// <value>Default withholding tax taxable percentage.</value>
        [DataMember(Name = "withholding_tax_taxable", EmitDefaultValue = true)]
        public decimal? WithholdingTaxTaxable
        {
            get => _WithholdingTaxTaxable;
            set
            {
                _WithholdingTaxTaxable = value;
                _flagWithholdingTaxTaxable = true;
            }
        }

        /// <summary>
        ///     Default other withholding tax percentage.
        /// </summary>
        /// <value>Default other withholding tax percentage.</value>
        [DataMember(Name = "other_withholding_tax", EmitDefaultValue = true)]
        public decimal? OtherWithholdingTax
        {
            get => _OtherWithholdingTax;
            set
            {
                _OtherWithholdingTax = value;
                _flagOtherWithholdingTax = true;
            }
        }

        /// <summary>
        ///     Use gross price by default.
        /// </summary>
        /// <value>Use gross price by default.</value>
        [DataMember(Name = "use_gross_prices", EmitDefaultValue = true)]
        public bool? UseGrossPrices
        {
            get => _UseGrossPrices;
            set
            {
                _UseGrossPrices = value;
                _flagUseGrossPrices = true;
            }
        }

        /// <summary>
        ///     Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "payment_method", EmitDefaultValue = false)]
        public PaymentMethod PaymentMethod
        {
            get => _PaymentMethod;
            set
            {
                _PaymentMethod = value;
                _flagPaymentMethod = true;
            }
        }

        /// <summary>
        ///     Returns false as DefaultTemplate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultTemplate()
        {
            return _flagDefaultTemplate;
        }

        /// <summary>
        ///     Returns false as DnTemplate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnTemplate()
        {
            return _flagDnTemplate;
        }

        /// <summary>
        ///     Returns false as AiTemplate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAiTemplate()
        {
            return _flagAiTemplate;
        }

        /// <summary>
        ///     Returns false as Notes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotes()
        {
            return _flagNotes;
        }

        /// <summary>
        ///     Returns false as Rivalsa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRivalsa()
        {
            return _flagRivalsa;
        }

        /// <summary>
        ///     Returns false as Cassa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassa()
        {
            return _flagCassa;
        }

        /// <summary>
        ///     Returns false as WithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWithholdingTax()
        {
            return _flagWithholdingTax;
        }

        /// <summary>
        ///     Returns false as WithholdingTaxTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWithholdingTaxTaxable()
        {
            return _flagWithholdingTaxTaxable;
        }

        /// <summary>
        ///     Returns false as OtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOtherWithholdingTax()
        {
            return _flagOtherWithholdingTax;
        }

        /// <summary>
        ///     Returns false as UseGrossPrices should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseGrossPrices()
        {
            return _flagUseGrossPrices;
        }

        /// <summary>
        ///     Returns false as PaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentMethod()
        {
            return _flagPaymentMethod;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentPreCreateInfoDefaultValues {\n");
            sb.Append("  DefaultTemplate: ").Append(DefaultTemplate).Append("\n");
            sb.Append("  DnTemplate: ").Append(DnTemplate).Append("\n");
            sb.Append("  AiTemplate: ").Append(AiTemplate).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Rivalsa: ").Append(Rivalsa).Append("\n");
            sb.Append("  Cassa: ").Append(Cassa).Append("\n");
            sb.Append("  WithholdingTax: ").Append(WithholdingTax).Append("\n");
            sb.Append("  WithholdingTaxTaxable: ").Append(WithholdingTaxTaxable).Append("\n");
            sb.Append("  OtherWithholdingTax: ").Append(OtherWithholdingTax).Append("\n");
            sb.Append("  UseGrossPrices: ").Append(UseGrossPrices).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as IssuedDocumentPreCreateInfoDefaultValues);
        }

        /// <summary>
        ///     Returns true if IssuedDocumentPreCreateInfoDefaultValues instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentPreCreateInfoDefaultValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentPreCreateInfoDefaultValues input)
        {
            if (input == null) return false;
            return
                (
                    DefaultTemplate == input.DefaultTemplate ||
                    (DefaultTemplate != null &&
                     DefaultTemplate.Equals(input.DefaultTemplate))
                ) &&
                (
                    DnTemplate == input.DnTemplate ||
                    (DnTemplate != null &&
                     DnTemplate.Equals(input.DnTemplate))
                ) &&
                (
                    AiTemplate == input.AiTemplate ||
                    (AiTemplate != null &&
                     AiTemplate.Equals(input.AiTemplate))
                ) &&
                (
                    Notes == input.Notes ||
                    (Notes != null &&
                     Notes.Equals(input.Notes))
                ) &&
                (
                    Rivalsa == input.Rivalsa ||
                    (Rivalsa != null &&
                     Rivalsa.Equals(input.Rivalsa))
                ) &&
                (
                    Cassa == input.Cassa ||
                    (Cassa != null &&
                     Cassa.Equals(input.Cassa))
                ) &&
                (
                    WithholdingTax == input.WithholdingTax ||
                    (WithholdingTax != null &&
                     WithholdingTax.Equals(input.WithholdingTax))
                ) &&
                (
                    WithholdingTaxTaxable == input.WithholdingTaxTaxable ||
                    (WithholdingTaxTaxable != null &&
                     WithholdingTaxTaxable.Equals(input.WithholdingTaxTaxable))
                ) &&
                (
                    OtherWithholdingTax == input.OtherWithholdingTax ||
                    (OtherWithholdingTax != null &&
                     OtherWithholdingTax.Equals(input.OtherWithholdingTax))
                ) &&
                (
                    UseGrossPrices == input.UseGrossPrices ||
                    (UseGrossPrices != null &&
                     UseGrossPrices.Equals(input.UseGrossPrices))
                ) &&
                (
                    PaymentMethod == input.PaymentMethod ||
                    (PaymentMethod != null &&
                     PaymentMethod.Equals(input.PaymentMethod))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (DefaultTemplate != null) hashCode = hashCode * 59 + DefaultTemplate.GetHashCode();
                if (DnTemplate != null) hashCode = hashCode * 59 + DnTemplate.GetHashCode();
                if (AiTemplate != null) hashCode = hashCode * 59 + AiTemplate.GetHashCode();
                if (Notes != null) hashCode = hashCode * 59 + Notes.GetHashCode();
                if (Rivalsa != null) hashCode = hashCode * 59 + Rivalsa.GetHashCode();
                if (Cassa != null) hashCode = hashCode * 59 + Cassa.GetHashCode();
                if (WithholdingTax != null) hashCode = hashCode * 59 + WithholdingTax.GetHashCode();
                if (WithholdingTaxTaxable != null) hashCode = hashCode * 59 + WithholdingTaxTaxable.GetHashCode();
                if (OtherWithholdingTax != null) hashCode = hashCode * 59 + OtherWithholdingTax.GetHashCode();
                if (UseGrossPrices != null) hashCode = hashCode * 59 + UseGrossPrices.GetHashCode();
                if (PaymentMethod != null) hashCode = hashCode * 59 + PaymentMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}