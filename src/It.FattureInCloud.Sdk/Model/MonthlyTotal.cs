// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// MonthlyTotal
    /// </summary>
    public partial class MonthlyTotal : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonthlyTotal" /> class.
        /// </summary>
        /// <param name="net">Monthly total net amount</param>
        /// <param name="gross">Monthly total gross amount</param>
        /// <param name="count">Monthly total receipt number</param>
        [JsonConstructor]
        public MonthlyTotal(Option<decimal?> net = default, Option<decimal?> gross = default, Option<decimal?> count = default)
        {
            NetOption = net;
            GrossOption = gross;
            CountOption = count;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Net
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> NetOption { get; private set; }

        /// <summary>
        /// Monthly total net amount
        /// </summary>
        /// <value>Monthly total net amount</value>
        [JsonPropertyName("net")]
        public decimal? Net { get { return this.NetOption; } set { this.NetOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Gross
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> GrossOption { get; private set; }

        /// <summary>
        /// Monthly total gross amount
        /// </summary>
        /// <value>Monthly total gross amount</value>
        [JsonPropertyName("gross")]
        public decimal? Gross { get { return this.GrossOption; } set { this.GrossOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Count
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> CountOption { get; private set; }

        /// <summary>
        /// Monthly total receipt number
        /// </summary>
        /// <value>Monthly total receipt number</value>
        [JsonPropertyName("count")]
        public decimal? Count { get { return this.CountOption; } set { this.CountOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MonthlyTotal {\n");
            sb.Append("  Net: ").Append(Net).Append("\n");
            sb.Append("  Gross: ").Append(Gross).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="MonthlyTotal" />
    /// </summary>
    public class MonthlyTotalJsonConverter : JsonConverter<MonthlyTotal>
    {
        /// <summary>
        /// Deserializes json to <see cref="MonthlyTotal" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MonthlyTotal Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> net = default;
            Option<decimal?> gross = default;
            Option<decimal?> count = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "net":
                            net = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "gross":
                            gross = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "count":
                            count = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new MonthlyTotal(net, gross, count);
        }

        /// <summary>
        /// Serializes a <see cref="MonthlyTotal" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="monthlyTotal"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MonthlyTotal monthlyTotal, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, monthlyTotal, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MonthlyTotal" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="monthlyTotal"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MonthlyTotal monthlyTotal, JsonSerializerOptions jsonSerializerOptions)
        {
            if (monthlyTotal.NetOption.IsSet)
                if (monthlyTotal.NetOption.Value != null)
                    writer.WriteNumber("net", monthlyTotal.NetOption.Value.Value);
                else
                    writer.WriteNull("net");

            if (monthlyTotal.GrossOption.IsSet)
                if (monthlyTotal.GrossOption.Value != null)
                    writer.WriteNumber("gross", monthlyTotal.GrossOption.Value.Value);
                else
                    writer.WriteNull("gross");

            if (monthlyTotal.CountOption.IsSet)
                if (monthlyTotal.CountOption.Value != null)
                    writer.WriteNumber("count", monthlyTotal.CountOption.Value.Value);
                else
                    writer.WriteNull("count");
        }
    }
}
