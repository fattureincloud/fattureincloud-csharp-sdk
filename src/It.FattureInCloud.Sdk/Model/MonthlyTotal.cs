/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     MonthlyTotal
    /// </summary>
    [DataContract(Name = "MonthlyTotal")]
    public class MonthlyTotal : IEquatable<MonthlyTotal>, IValidatableObject
    {
        private decimal? _Count;
        private bool _flagCount;
        private bool _flagGross;
        private bool _flagNet;
        private decimal? _Gross;
        private decimal? _Net;

        /// <summary>
        ///     Initializes a new instance of the <see cref="MonthlyTotal" /> class.
        /// </summary>
        /// <param name="net">Monthly total net amount..</param>
        /// <param name="gross">Monthly total gross amount..</param>
        /// <param name="count">Monthly total receipt number..</param>
        public MonthlyTotal(decimal? net = default(decimal?), decimal? gross = default(decimal?),
            decimal? count = default(decimal?))
        {
            _Net = net;
            if (Net != null) _flagNet = true;
            _Gross = gross;
            if (Gross != null) _flagGross = true;
            _Count = count;
            if (Count != null) _flagCount = true;
        }

        /// <summary>
        ///     Monthly total net amount.
        /// </summary>
        /// <value>Monthly total net amount.</value>
        [DataMember(Name = "net", EmitDefaultValue = true)]
        public decimal? Net
        {
            get => _Net;
            set
            {
                _Net = value;
                _flagNet = true;
            }
        }

        /// <summary>
        ///     Monthly total gross amount.
        /// </summary>
        /// <value>Monthly total gross amount.</value>
        [DataMember(Name = "gross", EmitDefaultValue = true)]
        public decimal? Gross
        {
            get => _Gross;
            set
            {
                _Gross = value;
                _flagGross = true;
            }
        }

        /// <summary>
        ///     Monthly total receipt number.
        /// </summary>
        /// <value>Monthly total receipt number.</value>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public decimal? Count
        {
            get => _Count;
            set
            {
                _Count = value;
                _flagCount = true;
            }
        }

        /// <summary>
        ///     Returns false as Net should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNet()
        {
            return _flagNet;
        }

        /// <summary>
        ///     Returns false as Gross should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGross()
        {
            return _flagGross;
        }

        /// <summary>
        ///     Returns false as Count should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCount()
        {
            return _flagCount;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MonthlyTotal {\n");
            sb.Append("  Net: ").Append(Net).Append("\n");
            sb.Append("  Gross: ").Append(Gross).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as MonthlyTotal);
        }

        /// <summary>
        ///     Returns true if MonthlyTotal instances are equal
        /// </summary>
        /// <param name="input">Instance of MonthlyTotal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MonthlyTotal input)
        {
            if (input == null) return false;
            return
                (
                    Net == input.Net ||
                    (Net != null &&
                     Net.Equals(input.Net))
                ) &&
                (
                    Gross == input.Gross ||
                    (Gross != null &&
                     Gross.Equals(input.Gross))
                ) &&
                (
                    Count == input.Count ||
                    (Count != null &&
                     Count.Equals(input.Count))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Net != null) hashCode = hashCode * 59 + Net.GetHashCode();
                if (Gross != null) hashCode = hashCode * 59 + Gross.GetHashCode();
                if (Count != null) hashCode = hashCode * 59 + Count.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}