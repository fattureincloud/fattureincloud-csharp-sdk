/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     Extra data. TS fields follow the technical specifications provided by \&quot;Sistema Tessera Sanitaria\&quot;.
    /// </summary>
    [DataContract(Name = "IssuedDocument_extra_data")]
    public class IssuedDocumentExtraData : IEquatable<IssuedDocumentExtraData>, IValidatableObject
    {
        private bool _flagImportedBy;
        private bool _flagMultifattureSent;
        private bool _flagShowSofortButton;
        private bool _flagTsCommunication;
        private bool _flagTsFileId;
        private bool _flagTsFlagTipoSpesa;
        private bool _flagTsFullAmount;
        private bool _flagTsOpposizione;
        private bool _flagTsPagamentoTracciato;
        private bool _flagTsSentDate;
        private bool _flagTsSingleSending;
        private bool _flagTsStatus;
        private bool _flagTsTipoSpesa;
        private string _ImportedBy;
        private int? _MultifattureSent;
        private bool? _ShowSofortButton;
        private bool? _TsCommunication;
        private string _TsFileId;
        private decimal? _TsFlagTipoSpesa;
        private bool? _TsFullAmount;
        private bool? _TsOpposizione;
        private bool? _TsPagamentoTracciato;
        private DateTime? _TsSentDate;
        private bool? _TsSingleSending;
        private int? _TsStatus;
        private string _TsTipoSpesa;

        /// <summary>
        ///     Initializes a new instance of the <see cref="IssuedDocumentExtraData" /> class.
        /// </summary>
        /// <param name="showSofortButton">showSofortButton.</param>
        /// <param name="multifattureSent">multifattureSent.</param>
        /// <param name="tsCommunication">tsCommunication.</param>
        /// <param name="tsFlagTipoSpesa">1 &#x3D;&gt; TK (Ticket di pronto soccorso); 2 &#x3D;&gt; SR (Visita in intramoenia).</param>
        /// <param name="tsPagamentoTracciato">tsPagamentoTracciato.</param>
        /// <param name="tsTipoSpesa">
        ///     Can be [ &#39;TK&#39;, &#39;FC&#39;, &#39;FV&#39;, &#39;SV&#39;, &#39;SP&#39;, &#39;AD&#39;,
        ///     &#39;AS&#39;, &#39;SR&#39;, &#39;CT&#39;, &#39;PI&#39;, &#39;IC&#39;, &#39;AA&#39; ]. Refer to the technical
        ///     specifications to learn more..
        /// </param>
        /// <param name="tsOpposizione">tsOpposizione.</param>
        /// <param name="tsStatus">tsStatus.</param>
        /// <param name="tsFileId">tsFileId.</param>
        /// <param name="tsSentDate">tsSentDate.</param>
        /// <param name="tsFullAmount">tsFullAmount.</param>
        /// <param name="importedBy">importedBy.</param>
        /// <param name="tsSingleSending">tsSingleSending.</param>
        public IssuedDocumentExtraData(bool? showSofortButton = default(bool?), int? multifattureSent = default(int?),
            bool? tsCommunication = default(bool?), decimal? tsFlagTipoSpesa = default(decimal?),
            bool? tsPagamentoTracciato = default(bool?), string tsTipoSpesa = default(string),
            bool? tsOpposizione = default(bool?), int? tsStatus = default(int?), string tsFileId = default(string),
            DateTime? tsSentDate = default(DateTime?), bool? tsFullAmount = default(bool?),
            string importedBy = default(string), bool? tsSingleSending = default(bool?))
        {
            _ShowSofortButton = showSofortButton;
            if (ShowSofortButton != null) _flagShowSofortButton = true;
            _MultifattureSent = multifattureSent;
            if (MultifattureSent != null) _flagMultifattureSent = true;
            _TsCommunication = tsCommunication;
            if (TsCommunication != null) _flagTsCommunication = true;
            _TsFlagTipoSpesa = tsFlagTipoSpesa;
            if (TsFlagTipoSpesa != null) _flagTsFlagTipoSpesa = true;
            _TsPagamentoTracciato = tsPagamentoTracciato;
            if (TsPagamentoTracciato != null) _flagTsPagamentoTracciato = true;
            _TsTipoSpesa = tsTipoSpesa;
            if (TsTipoSpesa != null) _flagTsTipoSpesa = true;
            _TsOpposizione = tsOpposizione;
            if (TsOpposizione != null) _flagTsOpposizione = true;
            _TsStatus = tsStatus;
            if (TsStatus != null) _flagTsStatus = true;
            _TsFileId = tsFileId;
            if (TsFileId != null) _flagTsFileId = true;
            _TsSentDate = tsSentDate;
            if (TsSentDate != null) _flagTsSentDate = true;
            _TsFullAmount = tsFullAmount;
            if (TsFullAmount != null) _flagTsFullAmount = true;
            _ImportedBy = importedBy;
            if (ImportedBy != null) _flagImportedBy = true;
            _TsSingleSending = tsSingleSending;
            if (TsSingleSending != null) _flagTsSingleSending = true;
        }

        /// <summary>
        ///     Gets or Sets ShowSofortButton
        /// </summary>
        [DataMember(Name = "show_sofort_button", EmitDefaultValue = true)]
        public bool? ShowSofortButton
        {
            get => _ShowSofortButton;
            set
            {
                _ShowSofortButton = value;
                _flagShowSofortButton = true;
            }
        }

        /// <summary>
        ///     Gets or Sets MultifattureSent
        /// </summary>
        [DataMember(Name = "multifatture_sent", EmitDefaultValue = true)]
        public int? MultifattureSent
        {
            get => _MultifattureSent;
            set
            {
                _MultifattureSent = value;
                _flagMultifattureSent = true;
            }
        }

        /// <summary>
        ///     Gets or Sets TsCommunication
        /// </summary>
        [DataMember(Name = "ts_communication", EmitDefaultValue = true)]
        public bool? TsCommunication
        {
            get => _TsCommunication;
            set
            {
                _TsCommunication = value;
                _flagTsCommunication = true;
            }
        }

        /// <summary>
        ///     1 &#x3D;&gt; TK (Ticket di pronto soccorso); 2 &#x3D;&gt; SR (Visita in intramoenia)
        /// </summary>
        /// <value>1 &#x3D;&gt; TK (Ticket di pronto soccorso); 2 &#x3D;&gt; SR (Visita in intramoenia)</value>
        [DataMember(Name = "ts_flag_tipo_spesa", EmitDefaultValue = true)]
        public decimal? TsFlagTipoSpesa
        {
            get => _TsFlagTipoSpesa;
            set
            {
                _TsFlagTipoSpesa = value;
                _flagTsFlagTipoSpesa = true;
            }
        }

        /// <summary>
        ///     Gets or Sets TsPagamentoTracciato
        /// </summary>
        [DataMember(Name = "ts_pagamento_tracciato", EmitDefaultValue = true)]
        public bool? TsPagamentoTracciato
        {
            get => _TsPagamentoTracciato;
            set
            {
                _TsPagamentoTracciato = value;
                _flagTsPagamentoTracciato = true;
            }
        }

        /// <summary>
        ///     Can be [ &#39;TK&#39;, &#39;FC&#39;, &#39;FV&#39;, &#39;SV&#39;, &#39;SP&#39;, &#39;AD&#39;, &#39;AS&#39;, &#39;SR
        ///     &#39;, &#39;CT&#39;, &#39;PI&#39;, &#39;IC&#39;, &#39;AA&#39; ]. Refer to the technical specifications to learn
        ///     more.
        /// </summary>
        /// <value>
        ///     Can be [ &#39;TK&#39;, &#39;FC&#39;, &#39;FV&#39;, &#39;SV&#39;, &#39;SP&#39;, &#39;AD&#39;, &#39;AS&#39;, &#39;
        ///     SR&#39;, &#39;CT&#39;, &#39;PI&#39;, &#39;IC&#39;, &#39;AA&#39; ]. Refer to the technical specifications to learn
        ///     more.
        /// </value>
        [DataMember(Name = "ts_tipo_spesa", EmitDefaultValue = true)]
        public string TsTipoSpesa
        {
            get => _TsTipoSpesa;
            set
            {
                _TsTipoSpesa = value;
                _flagTsTipoSpesa = true;
            }
        }

        /// <summary>
        ///     Gets or Sets TsOpposizione
        /// </summary>
        [DataMember(Name = "ts_opposizione", EmitDefaultValue = true)]
        public bool? TsOpposizione
        {
            get => _TsOpposizione;
            set
            {
                _TsOpposizione = value;
                _flagTsOpposizione = true;
            }
        }

        /// <summary>
        ///     Gets or Sets TsStatus
        /// </summary>
        [DataMember(Name = "ts_status", EmitDefaultValue = true)]
        public int? TsStatus
        {
            get => _TsStatus;
            set
            {
                _TsStatus = value;
                _flagTsStatus = true;
            }
        }

        /// <summary>
        ///     Gets or Sets TsFileId
        /// </summary>
        [DataMember(Name = "ts_file_id", EmitDefaultValue = true)]
        public string TsFileId
        {
            get => _TsFileId;
            set
            {
                _TsFileId = value;
                _flagTsFileId = true;
            }
        }

        /// <summary>
        ///     Gets or Sets TsSentDate
        /// </summary>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "ts_sent_date", EmitDefaultValue = true)]
        public DateTime? TsSentDate
        {
            get => _TsSentDate;
            set
            {
                _TsSentDate = value;
                _flagTsSentDate = true;
            }
        }

        /// <summary>
        ///     Gets or Sets TsFullAmount
        /// </summary>
        [DataMember(Name = "ts_full_amount", EmitDefaultValue = true)]
        public bool? TsFullAmount
        {
            get => _TsFullAmount;
            set
            {
                _TsFullAmount = value;
                _flagTsFullAmount = true;
            }
        }

        /// <summary>
        ///     Gets or Sets ImportedBy
        /// </summary>
        [DataMember(Name = "imported_by", EmitDefaultValue = true)]
        public string ImportedBy
        {
            get => _ImportedBy;
            set
            {
                _ImportedBy = value;
                _flagImportedBy = true;
            }
        }

        /// <summary>
        ///     Gets or Sets TsSingleSending
        /// </summary>
        [DataMember(Name = "ts_single_sending", EmitDefaultValue = true)]
        public bool? TsSingleSending
        {
            get => _TsSingleSending;
            set
            {
                _TsSingleSending = value;
                _flagTsSingleSending = true;
            }
        }

        /// <summary>
        ///     Returns false as ShowSofortButton should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowSofortButton()
        {
            return _flagShowSofortButton;
        }

        /// <summary>
        ///     Returns false as MultifattureSent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMultifattureSent()
        {
            return _flagMultifattureSent;
        }

        /// <summary>
        ///     Returns false as TsCommunication should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsCommunication()
        {
            return _flagTsCommunication;
        }

        /// <summary>
        ///     Returns false as TsFlagTipoSpesa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsFlagTipoSpesa()
        {
            return _flagTsFlagTipoSpesa;
        }

        /// <summary>
        ///     Returns false as TsPagamentoTracciato should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsPagamentoTracciato()
        {
            return _flagTsPagamentoTracciato;
        }

        /// <summary>
        ///     Returns false as TsTipoSpesa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsTipoSpesa()
        {
            return _flagTsTipoSpesa;
        }

        /// <summary>
        ///     Returns false as TsOpposizione should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsOpposizione()
        {
            return _flagTsOpposizione;
        }

        /// <summary>
        ///     Returns false as TsStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsStatus()
        {
            return _flagTsStatus;
        }

        /// <summary>
        ///     Returns false as TsFileId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsFileId()
        {
            return _flagTsFileId;
        }

        /// <summary>
        ///     Returns false as TsSentDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsSentDate()
        {
            return _flagTsSentDate;
        }

        /// <summary>
        ///     Returns false as TsFullAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsFullAmount()
        {
            return _flagTsFullAmount;
        }

        /// <summary>
        ///     Returns false as ImportedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeImportedBy()
        {
            return _flagImportedBy;
        }

        /// <summary>
        ///     Returns false as TsSingleSending should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsSingleSending()
        {
            return _flagTsSingleSending;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentExtraData {\n");
            sb.Append("  ShowSofortButton: ").Append(ShowSofortButton).Append("\n");
            sb.Append("  MultifattureSent: ").Append(MultifattureSent).Append("\n");
            sb.Append("  TsCommunication: ").Append(TsCommunication).Append("\n");
            sb.Append("  TsFlagTipoSpesa: ").Append(TsFlagTipoSpesa).Append("\n");
            sb.Append("  TsPagamentoTracciato: ").Append(TsPagamentoTracciato).Append("\n");
            sb.Append("  TsTipoSpesa: ").Append(TsTipoSpesa).Append("\n");
            sb.Append("  TsOpposizione: ").Append(TsOpposizione).Append("\n");
            sb.Append("  TsStatus: ").Append(TsStatus).Append("\n");
            sb.Append("  TsFileId: ").Append(TsFileId).Append("\n");
            sb.Append("  TsSentDate: ").Append(TsSentDate).Append("\n");
            sb.Append("  TsFullAmount: ").Append(TsFullAmount).Append("\n");
            sb.Append("  ImportedBy: ").Append(ImportedBy).Append("\n");
            sb.Append("  TsSingleSending: ").Append(TsSingleSending).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as IssuedDocumentExtraData);
        }

        /// <summary>
        ///     Returns true if IssuedDocumentExtraData instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentExtraData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentExtraData input)
        {
            if (input == null) return false;
            return
                (
                    ShowSofortButton == input.ShowSofortButton ||
                    (ShowSofortButton != null &&
                     ShowSofortButton.Equals(input.ShowSofortButton))
                ) &&
                (
                    MultifattureSent == input.MultifattureSent ||
                    (MultifattureSent != null &&
                     MultifattureSent.Equals(input.MultifattureSent))
                ) &&
                (
                    TsCommunication == input.TsCommunication ||
                    (TsCommunication != null &&
                     TsCommunication.Equals(input.TsCommunication))
                ) &&
                (
                    TsFlagTipoSpesa == input.TsFlagTipoSpesa ||
                    (TsFlagTipoSpesa != null &&
                     TsFlagTipoSpesa.Equals(input.TsFlagTipoSpesa))
                ) &&
                (
                    TsPagamentoTracciato == input.TsPagamentoTracciato ||
                    (TsPagamentoTracciato != null &&
                     TsPagamentoTracciato.Equals(input.TsPagamentoTracciato))
                ) &&
                (
                    TsTipoSpesa == input.TsTipoSpesa ||
                    (TsTipoSpesa != null &&
                     TsTipoSpesa.Equals(input.TsTipoSpesa))
                ) &&
                (
                    TsOpposizione == input.TsOpposizione ||
                    (TsOpposizione != null &&
                     TsOpposizione.Equals(input.TsOpposizione))
                ) &&
                (
                    TsStatus == input.TsStatus ||
                    (TsStatus != null &&
                     TsStatus.Equals(input.TsStatus))
                ) &&
                (
                    TsFileId == input.TsFileId ||
                    (TsFileId != null &&
                     TsFileId.Equals(input.TsFileId))
                ) &&
                (
                    TsSentDate == input.TsSentDate ||
                    (TsSentDate != null &&
                     TsSentDate.Equals(input.TsSentDate))
                ) &&
                (
                    TsFullAmount == input.TsFullAmount ||
                    (TsFullAmount != null &&
                     TsFullAmount.Equals(input.TsFullAmount))
                ) &&
                (
                    ImportedBy == input.ImportedBy ||
                    (ImportedBy != null &&
                     ImportedBy.Equals(input.ImportedBy))
                ) &&
                (
                    TsSingleSending == input.TsSingleSending ||
                    (TsSingleSending != null &&
                     TsSingleSending.Equals(input.TsSingleSending))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (ShowSofortButton != null) hashCode = hashCode * 59 + ShowSofortButton.GetHashCode();
                if (MultifattureSent != null) hashCode = hashCode * 59 + MultifattureSent.GetHashCode();
                if (TsCommunication != null) hashCode = hashCode * 59 + TsCommunication.GetHashCode();
                if (TsFlagTipoSpesa != null) hashCode = hashCode * 59 + TsFlagTipoSpesa.GetHashCode();
                if (TsPagamentoTracciato != null) hashCode = hashCode * 59 + TsPagamentoTracciato.GetHashCode();
                if (TsTipoSpesa != null) hashCode = hashCode * 59 + TsTipoSpesa.GetHashCode();
                if (TsOpposizione != null) hashCode = hashCode * 59 + TsOpposizione.GetHashCode();
                if (TsStatus != null) hashCode = hashCode * 59 + TsStatus.GetHashCode();
                if (TsFileId != null) hashCode = hashCode * 59 + TsFileId.GetHashCode();
                if (TsSentDate != null) hashCode = hashCode * 59 + TsSentDate.GetHashCode();
                if (TsFullAmount != null) hashCode = hashCode * 59 + TsFullAmount.GetHashCode();
                if (ImportedBy != null) hashCode = hashCode * 59 + ImportedBy.GetHashCode();
                if (TsSingleSending != null) hashCode = hashCode * 59 + TsSingleSending.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}