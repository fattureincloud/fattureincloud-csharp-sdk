/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.28
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Extra data. TS fields follow the technical specifications provided by \&quot;Sistema Tessera Sanitaria\&quot;.
    /// </summary>
    [DataContract(Name = "IssuedDocument_extra_data")]
    public partial class IssuedDocumentExtraData : IEquatable<IssuedDocumentExtraData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentExtraData" /> class.
        /// </summary>
        /// <param name="showSofortButton">showSofortButton.</param>
        /// <param name="multifattureSent">multifattureSent.</param>
        /// <param name="tsCommunication">tsCommunication.</param>
        /// <param name="tsFlagTipoSpesa">1 &#x3D;&gt; TK (Ticket di pronto soccorso); 2 &#x3D;&gt; SR (Visita in intramoenia).</param>
        /// <param name="tsPagamentoTracciato">tsPagamentoTracciato.</param>
        /// <param name="tsTipoSpesa">Can be [ &#39;TK&#39;, &#39;FC&#39;, &#39;FV&#39;, &#39;SV&#39;, &#39;SP&#39;, &#39;AD&#39;, &#39;AS&#39;, &#39;SR&#39;, &#39;CT&#39;, &#39;PI&#39;, &#39;IC&#39;, &#39;AA&#39; ]. Refer to the technical specifications to learn more..</param>
        /// <param name="tsOpposizione">tsOpposizione.</param>
        /// <param name="tsStatus">tsStatus.</param>
        /// <param name="tsFileId">tsFileId.</param>
        /// <param name="tsSentDate">tsSentDate.</param>
        /// <param name="tsFullAmount">tsFullAmount.</param>
        /// <param name="importedBy">importedBy.</param>
        /// <param name="tsSingleSending">tsSingleSending.</param>
        public IssuedDocumentExtraData(bool? showSofortButton = default(bool?), int? multifattureSent = default(int?), bool? tsCommunication = default(bool?), decimal? tsFlagTipoSpesa = default(decimal?), bool? tsPagamentoTracciato = default(bool?), string tsTipoSpesa = default(string), bool? tsOpposizione = default(bool?), int? tsStatus = default(int?), string tsFileId = default(string), DateTime? tsSentDate = default(DateTime?), bool? tsFullAmount = default(bool?), string importedBy = default(string), bool? tsSingleSending = default(bool?))
        {
            this._ShowSofortButton = showSofortButton;
            if (this.ShowSofortButton != null)
            {
                this._flagShowSofortButton = true;
            }
            this._MultifattureSent = multifattureSent;
            if (this.MultifattureSent != null)
            {
                this._flagMultifattureSent = true;
            }
            this._TsCommunication = tsCommunication;
            if (this.TsCommunication != null)
            {
                this._flagTsCommunication = true;
            }
            this._TsFlagTipoSpesa = tsFlagTipoSpesa;
            if (this.TsFlagTipoSpesa != null)
            {
                this._flagTsFlagTipoSpesa = true;
            }
            this._TsPagamentoTracciato = tsPagamentoTracciato;
            if (this.TsPagamentoTracciato != null)
            {
                this._flagTsPagamentoTracciato = true;
            }
            this._TsTipoSpesa = tsTipoSpesa;
            if (this.TsTipoSpesa != null)
            {
                this._flagTsTipoSpesa = true;
            }
            this._TsOpposizione = tsOpposizione;
            if (this.TsOpposizione != null)
            {
                this._flagTsOpposizione = true;
            }
            this._TsStatus = tsStatus;
            if (this.TsStatus != null)
            {
                this._flagTsStatus = true;
            }
            this._TsFileId = tsFileId;
            if (this.TsFileId != null)
            {
                this._flagTsFileId = true;
            }
            this._TsSentDate = tsSentDate;
            if (this.TsSentDate != null)
            {
                this._flagTsSentDate = true;
            }
            this._TsFullAmount = tsFullAmount;
            if (this.TsFullAmount != null)
            {
                this._flagTsFullAmount = true;
            }
            this._ImportedBy = importedBy;
            if (this.ImportedBy != null)
            {
                this._flagImportedBy = true;
            }
            this._TsSingleSending = tsSingleSending;
            if (this.TsSingleSending != null)
            {
                this._flagTsSingleSending = true;
            }
        }

        /// <summary>
        /// Gets or Sets ShowSofortButton
        /// </summary>
        [DataMember(Name = "show_sofort_button", EmitDefaultValue = true)]
        public bool? ShowSofortButton
        {
            get { return _ShowSofortButton; }
            set
            {
                _ShowSofortButton = value;
                _flagShowSofortButton = true;
            }
        }
        private bool? _ShowSofortButton;
        private bool _flagShowSofortButton;

        /// <summary>
        /// Returns false as ShowSofortButton should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowSofortButton()
        {
            return _flagShowSofortButton;
        }
        /// <summary>
        /// Gets or Sets MultifattureSent
        /// </summary>
        [DataMember(Name = "multifatture_sent", EmitDefaultValue = true)]
        public int? MultifattureSent
        {
            get { return _MultifattureSent; }
            set
            {
                _MultifattureSent = value;
                _flagMultifattureSent = true;
            }
        }
        private int? _MultifattureSent;
        private bool _flagMultifattureSent;

        /// <summary>
        /// Returns false as MultifattureSent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMultifattureSent()
        {
            return _flagMultifattureSent;
        }
        /// <summary>
        /// Gets or Sets TsCommunication
        /// </summary>
        [DataMember(Name = "ts_communication", EmitDefaultValue = true)]
        public bool? TsCommunication
        {
            get { return _TsCommunication; }
            set
            {
                _TsCommunication = value;
                _flagTsCommunication = true;
            }
        }
        private bool? _TsCommunication;
        private bool _flagTsCommunication;

        /// <summary>
        /// Returns false as TsCommunication should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsCommunication()
        {
            return _flagTsCommunication;
        }
        /// <summary>
        /// 1 &#x3D;&gt; TK (Ticket di pronto soccorso); 2 &#x3D;&gt; SR (Visita in intramoenia)
        /// </summary>
        /// <value>1 &#x3D;&gt; TK (Ticket di pronto soccorso); 2 &#x3D;&gt; SR (Visita in intramoenia)</value>
        [DataMember(Name = "ts_flag_tipo_spesa", EmitDefaultValue = true)]
        public decimal? TsFlagTipoSpesa
        {
            get { return _TsFlagTipoSpesa; }
            set
            {
                _TsFlagTipoSpesa = value;
                _flagTsFlagTipoSpesa = true;
            }
        }
        private decimal? _TsFlagTipoSpesa;
        private bool _flagTsFlagTipoSpesa;

        /// <summary>
        /// Returns false as TsFlagTipoSpesa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsFlagTipoSpesa()
        {
            return _flagTsFlagTipoSpesa;
        }
        /// <summary>
        /// Gets or Sets TsPagamentoTracciato
        /// </summary>
        [DataMember(Name = "ts_pagamento_tracciato", EmitDefaultValue = true)]
        public bool? TsPagamentoTracciato
        {
            get { return _TsPagamentoTracciato; }
            set
            {
                _TsPagamentoTracciato = value;
                _flagTsPagamentoTracciato = true;
            }
        }
        private bool? _TsPagamentoTracciato;
        private bool _flagTsPagamentoTracciato;

        /// <summary>
        /// Returns false as TsPagamentoTracciato should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsPagamentoTracciato()
        {
            return _flagTsPagamentoTracciato;
        }
        /// <summary>
        /// Can be [ &#39;TK&#39;, &#39;FC&#39;, &#39;FV&#39;, &#39;SV&#39;, &#39;SP&#39;, &#39;AD&#39;, &#39;AS&#39;, &#39;SR&#39;, &#39;CT&#39;, &#39;PI&#39;, &#39;IC&#39;, &#39;AA&#39; ]. Refer to the technical specifications to learn more.
        /// </summary>
        /// <value>Can be [ &#39;TK&#39;, &#39;FC&#39;, &#39;FV&#39;, &#39;SV&#39;, &#39;SP&#39;, &#39;AD&#39;, &#39;AS&#39;, &#39;SR&#39;, &#39;CT&#39;, &#39;PI&#39;, &#39;IC&#39;, &#39;AA&#39; ]. Refer to the technical specifications to learn more.</value>
        [DataMember(Name = "ts_tipo_spesa", EmitDefaultValue = true)]
        public string TsTipoSpesa
        {
            get { return _TsTipoSpesa; }
            set
            {
                _TsTipoSpesa = value;
                _flagTsTipoSpesa = true;
            }
        }
        private string _TsTipoSpesa;
        private bool _flagTsTipoSpesa;

        /// <summary>
        /// Returns false as TsTipoSpesa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsTipoSpesa()
        {
            return _flagTsTipoSpesa;
        }
        /// <summary>
        /// Gets or Sets TsOpposizione
        /// </summary>
        [DataMember(Name = "ts_opposizione", EmitDefaultValue = true)]
        public bool? TsOpposizione
        {
            get { return _TsOpposizione; }
            set
            {
                _TsOpposizione = value;
                _flagTsOpposizione = true;
            }
        }
        private bool? _TsOpposizione;
        private bool _flagTsOpposizione;

        /// <summary>
        /// Returns false as TsOpposizione should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsOpposizione()
        {
            return _flagTsOpposizione;
        }
        /// <summary>
        /// Gets or Sets TsStatus
        /// </summary>
        [DataMember(Name = "ts_status", EmitDefaultValue = true)]
        public int? TsStatus
        {
            get { return _TsStatus; }
            set
            {
                _TsStatus = value;
                _flagTsStatus = true;
            }
        }
        private int? _TsStatus;
        private bool _flagTsStatus;

        /// <summary>
        /// Returns false as TsStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsStatus()
        {
            return _flagTsStatus;
        }
        /// <summary>
        /// Gets or Sets TsFileId
        /// </summary>
        [DataMember(Name = "ts_file_id", EmitDefaultValue = true)]
        public string TsFileId
        {
            get { return _TsFileId; }
            set
            {
                _TsFileId = value;
                _flagTsFileId = true;
            }
        }
        private string _TsFileId;
        private bool _flagTsFileId;

        /// <summary>
        /// Returns false as TsFileId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsFileId()
        {
            return _flagTsFileId;
        }
        /// <summary>
        /// Gets or Sets TsSentDate
        /// </summary>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "ts_sent_date", EmitDefaultValue = true)]
        public DateTime? TsSentDate
        {
            get { return _TsSentDate; }
            set
            {
                _TsSentDate = value;
                _flagTsSentDate = true;
            }
        }
        private DateTime? _TsSentDate;
        private bool _flagTsSentDate;

        /// <summary>
        /// Returns false as TsSentDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsSentDate()
        {
            return _flagTsSentDate;
        }
        /// <summary>
        /// Gets or Sets TsFullAmount
        /// </summary>
        [DataMember(Name = "ts_full_amount", EmitDefaultValue = true)]
        public bool? TsFullAmount
        {
            get { return _TsFullAmount; }
            set
            {
                _TsFullAmount = value;
                _flagTsFullAmount = true;
            }
        }
        private bool? _TsFullAmount;
        private bool _flagTsFullAmount;

        /// <summary>
        /// Returns false as TsFullAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsFullAmount()
        {
            return _flagTsFullAmount;
        }
        /// <summary>
        /// Gets or Sets ImportedBy
        /// </summary>
        [DataMember(Name = "imported_by", EmitDefaultValue = true)]
        public string ImportedBy
        {
            get { return _ImportedBy; }
            set
            {
                _ImportedBy = value;
                _flagImportedBy = true;
            }
        }
        private string _ImportedBy;
        private bool _flagImportedBy;

        /// <summary>
        /// Returns false as ImportedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeImportedBy()
        {
            return _flagImportedBy;
        }
        /// <summary>
        /// Gets or Sets TsSingleSending
        /// </summary>
        [DataMember(Name = "ts_single_sending", EmitDefaultValue = true)]
        public bool? TsSingleSending
        {
            get { return _TsSingleSending; }
            set
            {
                _TsSingleSending = value;
                _flagTsSingleSending = true;
            }
        }
        private bool? _TsSingleSending;
        private bool _flagTsSingleSending;

        /// <summary>
        /// Returns false as TsSingleSending should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsSingleSending()
        {
            return _flagTsSingleSending;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentExtraData {\n");
            sb.Append("  ShowSofortButton: ").Append(ShowSofortButton).Append("\n");
            sb.Append("  MultifattureSent: ").Append(MultifattureSent).Append("\n");
            sb.Append("  TsCommunication: ").Append(TsCommunication).Append("\n");
            sb.Append("  TsFlagTipoSpesa: ").Append(TsFlagTipoSpesa).Append("\n");
            sb.Append("  TsPagamentoTracciato: ").Append(TsPagamentoTracciato).Append("\n");
            sb.Append("  TsTipoSpesa: ").Append(TsTipoSpesa).Append("\n");
            sb.Append("  TsOpposizione: ").Append(TsOpposizione).Append("\n");
            sb.Append("  TsStatus: ").Append(TsStatus).Append("\n");
            sb.Append("  TsFileId: ").Append(TsFileId).Append("\n");
            sb.Append("  TsSentDate: ").Append(TsSentDate).Append("\n");
            sb.Append("  TsFullAmount: ").Append(TsFullAmount).Append("\n");
            sb.Append("  ImportedBy: ").Append(ImportedBy).Append("\n");
            sb.Append("  TsSingleSending: ").Append(TsSingleSending).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocumentExtraData);
        }

        /// <summary>
        /// Returns true if IssuedDocumentExtraData instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentExtraData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentExtraData input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.ShowSofortButton == input.ShowSofortButton ||
                    (this.ShowSofortButton != null &&
                    this.ShowSofortButton.Equals(input.ShowSofortButton))
                ) &&
                (
                    this.MultifattureSent == input.MultifattureSent ||
                    (this.MultifattureSent != null &&
                    this.MultifattureSent.Equals(input.MultifattureSent))
                ) &&
                (
                    this.TsCommunication == input.TsCommunication ||
                    (this.TsCommunication != null &&
                    this.TsCommunication.Equals(input.TsCommunication))
                ) &&
                (
                    this.TsFlagTipoSpesa == input.TsFlagTipoSpesa ||
                    (this.TsFlagTipoSpesa != null &&
                    this.TsFlagTipoSpesa.Equals(input.TsFlagTipoSpesa))
                ) &&
                (
                    this.TsPagamentoTracciato == input.TsPagamentoTracciato ||
                    (this.TsPagamentoTracciato != null &&
                    this.TsPagamentoTracciato.Equals(input.TsPagamentoTracciato))
                ) &&
                (
                    this.TsTipoSpesa == input.TsTipoSpesa ||
                    (this.TsTipoSpesa != null &&
                    this.TsTipoSpesa.Equals(input.TsTipoSpesa))
                ) &&
                (
                    this.TsOpposizione == input.TsOpposizione ||
                    (this.TsOpposizione != null &&
                    this.TsOpposizione.Equals(input.TsOpposizione))
                ) &&
                (
                    this.TsStatus == input.TsStatus ||
                    (this.TsStatus != null &&
                    this.TsStatus.Equals(input.TsStatus))
                ) &&
                (
                    this.TsFileId == input.TsFileId ||
                    (this.TsFileId != null &&
                    this.TsFileId.Equals(input.TsFileId))
                ) &&
                (
                    this.TsSentDate == input.TsSentDate ||
                    (this.TsSentDate != null &&
                    this.TsSentDate.Equals(input.TsSentDate))
                ) &&
                (
                    this.TsFullAmount == input.TsFullAmount ||
                    (this.TsFullAmount != null &&
                    this.TsFullAmount.Equals(input.TsFullAmount))
                ) &&
                (
                    this.ImportedBy == input.ImportedBy ||
                    (this.ImportedBy != null &&
                    this.ImportedBy.Equals(input.ImportedBy))
                ) &&
                (
                    this.TsSingleSending == input.TsSingleSending ||
                    (this.TsSingleSending != null &&
                    this.TsSingleSending.Equals(input.TsSingleSending))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShowSofortButton != null)
                {
                    hashCode = (hashCode * 59) + this.ShowSofortButton.GetHashCode();
                }
                if (this.MultifattureSent != null)
                {
                    hashCode = (hashCode * 59) + this.MultifattureSent.GetHashCode();
                }
                if (this.TsCommunication != null)
                {
                    hashCode = (hashCode * 59) + this.TsCommunication.GetHashCode();
                }
                if (this.TsFlagTipoSpesa != null)
                {
                    hashCode = (hashCode * 59) + this.TsFlagTipoSpesa.GetHashCode();
                }
                if (this.TsPagamentoTracciato != null)
                {
                    hashCode = (hashCode * 59) + this.TsPagamentoTracciato.GetHashCode();
                }
                if (this.TsTipoSpesa != null)
                {
                    hashCode = (hashCode * 59) + this.TsTipoSpesa.GetHashCode();
                }
                if (this.TsOpposizione != null)
                {
                    hashCode = (hashCode * 59) + this.TsOpposizione.GetHashCode();
                }
                if (this.TsStatus != null)
                {
                    hashCode = (hashCode * 59) + this.TsStatus.GetHashCode();
                }
                if (this.TsFileId != null)
                {
                    hashCode = (hashCode * 59) + this.TsFileId.GetHashCode();
                }
                if (this.TsSentDate != null)
                {
                    hashCode = (hashCode * 59) + this.TsSentDate.GetHashCode();
                }
                if (this.TsFullAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TsFullAmount.GetHashCode();
                }
                if (this.ImportedBy != null)
                {
                    hashCode = (hashCode * 59) + this.ImportedBy.GetHashCode();
                }
                if (this.TsSingleSending != null)
                {
                    hashCode = (hashCode * 59) + this.TsSingleSending.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
