// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Issued document extra data [TS fields follow the technical specifications provided by \&quot;Sistema Tessera Sanitaria\&quot;]
    /// </summary>
    public partial class IssuedDocumentExtraData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentExtraData" /> class.
        /// </summary>
        /// <param name="multifattureSent">multifattureSent</param>
        /// <param name="tsCommunication">Send issued document to \&quot;Sistema Tessera Sanitaria\&quot;</param>
        /// <param name="tsFlagTipoSpesa">Issued document ts \&quot;tipo spesa\&quot; [TK, FC, FV, SV,SP, AD, AS, ECG, SR]</param>
        /// <param name="tsPagamentoTracciato">Issued document ts traced payment</param>
        /// <param name="tsTipoSpesa">Can be [ &#39;TK&#39;, &#39;FC&#39;, &#39;FV&#39;, &#39;SV&#39;, &#39;SP&#39;, &#39;AD&#39;, &#39;AS&#39;, &#39;SR&#39;, &#39;CT&#39;, &#39;PI&#39;, &#39;IC&#39;, &#39;AA&#39; ]. Refer to the technical specifications to learn more.</param>
        /// <param name="tsOpposizione">Issued document ts \&quot;opposizione\&quot;</param>
        /// <param name="tsStatus">Issued document ts status</param>
        /// <param name="tsFileId">Issued document ts file id</param>
        /// <param name="tsSentDate">Issued document ts sent date</param>
        /// <param name="tsFullAmount">Issued document ts total amount</param>
        /// <param name="importedBy">Issued document imported by software</param>
        [JsonConstructor]
        public IssuedDocumentExtraData(Option<int?> multifattureSent = default, Option<bool?> tsCommunication = default, Option<decimal?> tsFlagTipoSpesa = default, Option<bool?> tsPagamentoTracciato = default, Option<string> tsTipoSpesa = default, Option<bool?> tsOpposizione = default, Option<int?> tsStatus = default, Option<string> tsFileId = default, Option<DateTimeOffset?> tsSentDate = default, Option<bool?> tsFullAmount = default, Option<string> importedBy = default)
        {
            MultifattureSentOption = multifattureSent;
            TsCommunicationOption = tsCommunication;
            TsFlagTipoSpesaOption = tsFlagTipoSpesa;
            TsPagamentoTracciatoOption = tsPagamentoTracciato;
            TsTipoSpesaOption = tsTipoSpesa;
            TsOpposizioneOption = tsOpposizione;
            TsStatusOption = tsStatus;
            TsFileIdOption = tsFileId;
            TsSentDateOption = tsSentDate;
            TsFullAmountOption = tsFullAmount;
            ImportedByOption = importedBy;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of MultifattureSent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MultifattureSentOption { get; private set; }

        /// <summary>
        /// Gets or Sets MultifattureSent
        /// </summary>
        [JsonPropertyName("multifatture_sent")]
        public int? MultifattureSent { get { return this.MultifattureSentOption; } set { this.MultifattureSentOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of TsCommunication
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TsCommunicationOption { get; private set; }

        /// <summary>
        /// Send issued document to \&quot;Sistema Tessera Sanitaria\&quot;
        /// </summary>
        /// <value>Send issued document to \&quot;Sistema Tessera Sanitaria\&quot;</value>
        [JsonPropertyName("ts_communication")]
        public bool? TsCommunication { get { return this.TsCommunicationOption; } set { this.TsCommunicationOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of TsFlagTipoSpesa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TsFlagTipoSpesaOption { get; private set; }

        /// <summary>
        /// Issued document ts \&quot;tipo spesa\&quot; [TK, FC, FV, SV,SP, AD, AS, ECG, SR]
        /// </summary>
        /// <value>Issued document ts \&quot;tipo spesa\&quot; [TK, FC, FV, SV,SP, AD, AS, ECG, SR]</value>
        [JsonPropertyName("ts_flag_tipo_spesa")]
        public decimal? TsFlagTipoSpesa { get { return this.TsFlagTipoSpesaOption; } set { this.TsFlagTipoSpesaOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of TsPagamentoTracciato
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TsPagamentoTracciatoOption { get; private set; }

        /// <summary>
        /// Issued document ts traced payment
        /// </summary>
        /// <value>Issued document ts traced payment</value>
        [JsonPropertyName("ts_pagamento_tracciato")]
        public bool? TsPagamentoTracciato { get { return this.TsPagamentoTracciatoOption; } set { this.TsPagamentoTracciatoOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of TsTipoSpesa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TsTipoSpesaOption { get; private set; }

        /// <summary>
        /// Can be [ &#39;TK&#39;, &#39;FC&#39;, &#39;FV&#39;, &#39;SV&#39;, &#39;SP&#39;, &#39;AD&#39;, &#39;AS&#39;, &#39;SR&#39;, &#39;CT&#39;, &#39;PI&#39;, &#39;IC&#39;, &#39;AA&#39; ]. Refer to the technical specifications to learn more.
        /// </summary>
        /// <value>Can be [ &#39;TK&#39;, &#39;FC&#39;, &#39;FV&#39;, &#39;SV&#39;, &#39;SP&#39;, &#39;AD&#39;, &#39;AS&#39;, &#39;SR&#39;, &#39;CT&#39;, &#39;PI&#39;, &#39;IC&#39;, &#39;AA&#39; ]. Refer to the technical specifications to learn more.</value>
        [JsonPropertyName("ts_tipo_spesa")]
        public string TsTipoSpesa { get { return this.TsTipoSpesaOption; } set { this.TsTipoSpesaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TsOpposizione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TsOpposizioneOption { get; private set; }

        /// <summary>
        /// Issued document ts \&quot;opposizione\&quot;
        /// </summary>
        /// <value>Issued document ts \&quot;opposizione\&quot;</value>
        [JsonPropertyName("ts_opposizione")]
        public bool? TsOpposizione { get { return this.TsOpposizioneOption; } set { this.TsOpposizioneOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of TsStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TsStatusOption { get; private set; }

        /// <summary>
        /// Issued document ts status
        /// </summary>
        /// <value>Issued document ts status</value>
        [JsonPropertyName("ts_status")]
        public int? TsStatus { get { return this.TsStatusOption; } set { this.TsStatusOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of TsFileId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TsFileIdOption { get; private set; }

        /// <summary>
        /// Issued document ts file id
        /// </summary>
        /// <value>Issued document ts file id</value>
        [JsonPropertyName("ts_file_id")]
        public string TsFileId { get { return this.TsFileIdOption; } set { this.TsFileIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TsSentDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> TsSentDateOption { get; private set; }

        /// <summary>
        /// Issued document ts sent date
        /// </summary>
        /// <value>Issued document ts sent date</value>
        [JsonPropertyName("ts_sent_date")]
        public DateTimeOffset? TsSentDate { get { return this.TsSentDateOption; } set { this.TsSentDateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of TsFullAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TsFullAmountOption { get; private set; }

        /// <summary>
        /// Issued document ts total amount
        /// </summary>
        /// <value>Issued document ts total amount</value>
        [JsonPropertyName("ts_full_amount")]
        public bool? TsFullAmount { get { return this.TsFullAmountOption; } set { this.TsFullAmountOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ImportedBy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ImportedByOption { get; private set; }

        /// <summary>
        /// Issued document imported by software
        /// </summary>
        /// <value>Issued document imported by software</value>
        [JsonPropertyName("imported_by")]
        public string ImportedBy { get { return this.ImportedByOption; } set { this.ImportedByOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentExtraData {\n");
            sb.Append("  MultifattureSent: ").Append(MultifattureSent).Append("\n");
            sb.Append("  TsCommunication: ").Append(TsCommunication).Append("\n");
            sb.Append("  TsFlagTipoSpesa: ").Append(TsFlagTipoSpesa).Append("\n");
            sb.Append("  TsPagamentoTracciato: ").Append(TsPagamentoTracciato).Append("\n");
            sb.Append("  TsTipoSpesa: ").Append(TsTipoSpesa).Append("\n");
            sb.Append("  TsOpposizione: ").Append(TsOpposizione).Append("\n");
            sb.Append("  TsStatus: ").Append(TsStatus).Append("\n");
            sb.Append("  TsFileId: ").Append(TsFileId).Append("\n");
            sb.Append("  TsSentDate: ").Append(TsSentDate).Append("\n");
            sb.Append("  TsFullAmount: ").Append(TsFullAmount).Append("\n");
            sb.Append("  ImportedBy: ").Append(ImportedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentExtraData" />
    /// </summary>
    public class IssuedDocumentExtraDataJsonConverter : JsonConverter<IssuedDocumentExtraData>
    {
        /// <summary>
        /// The format to use to serialize TsSentDate
        /// </summary>
        public static string TsSentDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="IssuedDocumentExtraData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocumentExtraData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> multifattureSent = default;
            Option<bool?> tsCommunication = default;
            Option<decimal?> tsFlagTipoSpesa = default;
            Option<bool?> tsPagamentoTracciato = default;
            Option<string> tsTipoSpesa = default;
            Option<bool?> tsOpposizione = default;
            Option<int?> tsStatus = default;
            Option<string> tsFileId = default;
            Option<DateTimeOffset?> tsSentDate = default;
            Option<bool?> tsFullAmount = default;
            Option<string> importedBy = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "multifatture_sent":
                            multifattureSent = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "ts_communication":
                            tsCommunication = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ts_flag_tipo_spesa":
                            tsFlagTipoSpesa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "ts_pagamento_tracciato":
                            tsPagamentoTracciato = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ts_tipo_spesa":
                            tsTipoSpesa = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ts_opposizione":
                            tsOpposizione = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ts_status":
                            tsStatus = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "ts_file_id":
                            tsFileId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ts_sent_date":
                            tsSentDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ts_full_amount":
                            tsFullAmount = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "imported_by":
                            importedBy = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new IssuedDocumentExtraData(multifattureSent, tsCommunication, tsFlagTipoSpesa, tsPagamentoTracciato, tsTipoSpesa, tsOpposizione, tsStatus, tsFileId, tsSentDate, tsFullAmount, importedBy);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocumentExtraData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentExtraData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentExtraData issuedDocumentExtraData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocumentExtraData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocumentExtraData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentExtraData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocumentExtraData issuedDocumentExtraData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocumentExtraData.MultifattureSentOption.IsSet)
                if (issuedDocumentExtraData.MultifattureSentOption.Value != null)
                    writer.WriteNumber("multifatture_sent", issuedDocumentExtraData.MultifattureSentOption.Value.Value);
                else
                    writer.WriteNull("multifatture_sent");

            if (issuedDocumentExtraData.TsCommunicationOption.IsSet)
                if (issuedDocumentExtraData.TsCommunicationOption.Value != null)
                    writer.WriteBoolean("ts_communication", issuedDocumentExtraData.TsCommunicationOption.Value.Value);
                else
                    writer.WriteNull("ts_communication");

            if (issuedDocumentExtraData.TsFlagTipoSpesaOption.IsSet)
                if (issuedDocumentExtraData.TsFlagTipoSpesaOption.Value != null)
                    writer.WriteNumber("ts_flag_tipo_spesa", issuedDocumentExtraData.TsFlagTipoSpesaOption.Value.Value);
                else
                    writer.WriteNull("ts_flag_tipo_spesa");

            if (issuedDocumentExtraData.TsPagamentoTracciatoOption.IsSet)
                if (issuedDocumentExtraData.TsPagamentoTracciatoOption.Value != null)
                    writer.WriteBoolean("ts_pagamento_tracciato", issuedDocumentExtraData.TsPagamentoTracciatoOption.Value.Value);
                else
                    writer.WriteNull("ts_pagamento_tracciato");

            if (issuedDocumentExtraData.TsTipoSpesaOption.IsSet)
                if (issuedDocumentExtraData.TsTipoSpesaOption.Value != null)
                    writer.WriteString("ts_tipo_spesa", issuedDocumentExtraData.TsTipoSpesa);
                else
                    writer.WriteNull("ts_tipo_spesa");

            if (issuedDocumentExtraData.TsOpposizioneOption.IsSet)
                if (issuedDocumentExtraData.TsOpposizioneOption.Value != null)
                    writer.WriteBoolean("ts_opposizione", issuedDocumentExtraData.TsOpposizioneOption.Value.Value);
                else
                    writer.WriteNull("ts_opposizione");

            if (issuedDocumentExtraData.TsStatusOption.IsSet)
                if (issuedDocumentExtraData.TsStatusOption.Value != null)
                    writer.WriteNumber("ts_status", issuedDocumentExtraData.TsStatusOption.Value.Value);
                else
                    writer.WriteNull("ts_status");

            if (issuedDocumentExtraData.TsFileIdOption.IsSet)
                if (issuedDocumentExtraData.TsFileIdOption.Value != null)
                    writer.WriteString("ts_file_id", issuedDocumentExtraData.TsFileId);
                else
                    writer.WriteNull("ts_file_id");

            if (issuedDocumentExtraData.TsSentDateOption.IsSet)
                if (issuedDocumentExtraData.TsSentDateOption.Value != null)
                    writer.WriteString("ts_sent_date", issuedDocumentExtraData.TsSentDateOption.Value.Value.ToString(TsSentDateFormat));
                else
                    writer.WriteNull("ts_sent_date");

            if (issuedDocumentExtraData.TsFullAmountOption.IsSet)
                if (issuedDocumentExtraData.TsFullAmountOption.Value != null)
                    writer.WriteBoolean("ts_full_amount", issuedDocumentExtraData.TsFullAmountOption.Value.Value);
                else
                    writer.WriteNull("ts_full_amount");

            if (issuedDocumentExtraData.ImportedByOption.IsSet)
                if (issuedDocumentExtraData.ImportedByOption.Value != null)
                    writer.WriteString("imported_by", issuedDocumentExtraData.ImportedBy);
                else
                    writer.WriteNull("imported_by");
        }
    }
}
