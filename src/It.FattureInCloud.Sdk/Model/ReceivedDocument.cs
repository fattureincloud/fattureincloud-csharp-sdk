/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     ReceivedDocument
    /// </summary>
    [DataContract(Name = "ReceivedDocument")]
    public class ReceivedDocument : IEquatable<ReceivedDocument>, IValidatableObject
    {
        private decimal? _Amortization;
        private decimal? _AmountNet;
        private decimal? _AmountOtherWithholdingTax;
        private decimal? _AmountVat;
        private decimal? _AmountWithholdingTax;
        private string _AttachmentToken;
        private string _Category;
        private Currency _Currency;
        private DateTime? _Date;
        private string _Description;
        private bool? _EInvoice;
        private ReceivedDocumentEntity _Entity;
        private bool _flagAmortization;
        private bool _flagAmountNet;
        private bool _flagAmountOtherWithholdingTax;
        private bool _flagAmountVat;
        private bool _flagAmountWithholdingTax;
        private bool _flagAttachmentToken;
        private bool _flagCategory;
        private bool _flagCurrency;
        private bool _flagDate;
        private bool _flagDescription;
        private bool _flagEInvoice;
        private bool _flagEntity;
        private bool _flagId;
        private bool _flagInvoiceNumber;
        private bool _flagIsDetailed;
        private bool _flagIsMarked;
        private bool _flagItemsList;
        private bool _flagPaymentsList;
        private bool _flagRcCenter;
        private bool _flagTaxDeductibility;
        private bool _flagType;
        private bool _flagVatDeductibility;
        private int? _Id;
        private string _InvoiceNumber;
        private bool? _IsDetailed;
        private bool? _IsMarked;
        private List<ReceivedDocumentItemsListItem> _ItemsList;
        private List<ReceivedDocumentPaymentsListItem> _PaymentsList;
        private string _RcCenter;
        private decimal? _TaxDeductibility;
        private ReceivedDocumentType? _Type;
        private decimal? _VatDeductibility;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ReceivedDocument" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the document..</param>
        /// <param name="type">type.</param>
        /// <param name="entity">entity.</param>
        /// <param name="date">Date of the document [If not specified, today date is used]..</param>
        /// <param name="category">Document category..</param>
        /// <param name="description">Document description..</param>
        /// <param name="amountNet">Total net amount..</param>
        /// <param name="amountVat">Total vat amount..</param>
        /// <param name="amountWithholdingTax">Withholding tax amount..</param>
        /// <param name="amountOtherWithholdingTax">Other withholding tax amount..</param>
        /// <param name="amortization">Amortization value.</param>
        /// <param name="rcCenter">Revenue center..</param>
        /// <param name="invoiceNumber">Invoice number.</param>
        /// <param name="isMarked">isMarked.</param>
        /// <param name="isDetailed">isDetailed.</param>
        /// <param name="eInvoice">[Read Only] Indicates if this is an e-invoice..</param>
        /// <param name="currency">currency.</param>
        /// <param name="taxDeductibility">Tax deducibility percentage..</param>
        /// <param name="vatDeductibility">Vat deducibility percentage..</param>
        /// <param name="itemsList">itemsList.</param>
        /// <param name="paymentsList">paymentsList.</param>
        /// <param name="attachmentToken">Uploaded attachement token..</param>
        public ReceivedDocument(int? id = default(int?), ReceivedDocumentType? type = default(ReceivedDocumentType?),
            ReceivedDocumentEntity entity = default, DateTime? date = default(DateTime?),
            string category = default(string), string description = default(string),
            decimal? amountNet = default(decimal?), decimal? amountVat = default(decimal?),
            decimal? amountWithholdingTax = default(decimal?), decimal? amountOtherWithholdingTax = default(decimal?),
            decimal? amortization = default(decimal?), string rcCenter = default(string),
            string invoiceNumber = default(string), bool? isMarked = default(bool?), bool? isDetailed = default(bool?),
            bool? eInvoice = default(bool?), Currency currency = default, decimal? taxDeductibility = default(decimal?),
            decimal? vatDeductibility = default(decimal?),
            List<ReceivedDocumentItemsListItem> itemsList = default(List<ReceivedDocumentItemsListItem>),
            List<ReceivedDocumentPaymentsListItem> paymentsList = default(List<ReceivedDocumentPaymentsListItem>),
            string attachmentToken = default(string))
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _Type = type;
            if (Type != null) _flagType = true;
            _Entity = entity;
            if (Entity != null) _flagEntity = true;
            _Date = date;
            if (Date != null) _flagDate = true;
            _Category = category;
            if (Category != null) _flagCategory = true;
            _Description = description;
            if (Description != null) _flagDescription = true;
            _AmountNet = amountNet;
            if (AmountNet != null) _flagAmountNet = true;
            _AmountVat = amountVat;
            if (AmountVat != null) _flagAmountVat = true;
            _AmountWithholdingTax = amountWithholdingTax;
            if (AmountWithholdingTax != null) _flagAmountWithholdingTax = true;
            _AmountOtherWithholdingTax = amountOtherWithholdingTax;
            if (AmountOtherWithholdingTax != null) _flagAmountOtherWithholdingTax = true;
            _Amortization = amortization;
            if (Amortization != null) _flagAmortization = true;
            _RcCenter = rcCenter;
            if (RcCenter != null) _flagRcCenter = true;
            _InvoiceNumber = invoiceNumber;
            if (InvoiceNumber != null) _flagInvoiceNumber = true;
            _IsMarked = isMarked;
            if (IsMarked != null) _flagIsMarked = true;
            _IsDetailed = isDetailed;
            if (IsDetailed != null) _flagIsDetailed = true;
            _EInvoice = eInvoice;
            if (EInvoice != null) _flagEInvoice = true;
            _Currency = currency;
            if (Currency != null) _flagCurrency = true;
            _TaxDeductibility = taxDeductibility;
            if (TaxDeductibility != null) _flagTaxDeductibility = true;
            _VatDeductibility = vatDeductibility;
            if (VatDeductibility != null) _flagVatDeductibility = true;
            _ItemsList = itemsList;
            if (ItemsList != null) _flagItemsList = true;
            _PaymentsList = paymentsList;
            if (PaymentsList != null) _flagPaymentsList = true;
            _AttachmentToken = attachmentToken;
            if (AttachmentToken != null) _flagAttachmentToken = true;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = false)]
        public ReceivedDocumentType? Type
        {
            get => _Type;
            set
            {
                _Type = value;
                _flagType = true;
            }
        }

        /// <summary>
        ///     Unique identifier of the document.
        /// </summary>
        /// <value>Unique identifier of the document.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = true)]
        public ReceivedDocumentEntity Entity
        {
            get => _Entity;
            set
            {
                _Entity = value;
                _flagEntity = true;
            }
        }

        /// <summary>
        ///     Date of the document [If not specified, today date is used].
        /// </summary>
        /// <value>Date of the document [If not specified, today date is used].</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateTime? Date
        {
            get => _Date;
            set
            {
                _Date = value;
                _flagDate = true;
            }
        }

        /// <summary>
        ///     Document category.
        /// </summary>
        /// <value>Document category.</value>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category
        {
            get => _Category;
            set
            {
                _Category = value;
                _flagCategory = true;
            }
        }

        /// <summary>
        ///     Document description.
        /// </summary>
        /// <value>Document description.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get => _Description;
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }

        /// <summary>
        ///     Total net amount.
        /// </summary>
        /// <value>Total net amount.</value>
        [DataMember(Name = "amount_net", EmitDefaultValue = true)]
        public decimal? AmountNet
        {
            get => _AmountNet;
            set
            {
                _AmountNet = value;
                _flagAmountNet = true;
            }
        }

        /// <summary>
        ///     Total vat amount.
        /// </summary>
        /// <value>Total vat amount.</value>
        [DataMember(Name = "amount_vat", EmitDefaultValue = true)]
        public decimal? AmountVat
        {
            get => _AmountVat;
            set
            {
                _AmountVat = value;
                _flagAmountVat = true;
            }
        }

        /// <summary>
        ///     Withholding tax amount.
        /// </summary>
        /// <value>Withholding tax amount.</value>
        [DataMember(Name = "amount_withholding_tax", EmitDefaultValue = true)]
        public decimal? AmountWithholdingTax
        {
            get => _AmountWithholdingTax;
            set
            {
                _AmountWithholdingTax = value;
                _flagAmountWithholdingTax = true;
            }
        }

        /// <summary>
        ///     Other withholding tax amount.
        /// </summary>
        /// <value>Other withholding tax amount.</value>
        [DataMember(Name = "amount_other_withholding_tax", EmitDefaultValue = true)]
        public decimal? AmountOtherWithholdingTax
        {
            get => _AmountOtherWithholdingTax;
            set
            {
                _AmountOtherWithholdingTax = value;
                _flagAmountOtherWithholdingTax = true;
            }
        }

        /// <summary>
        ///     [Read Only] Total gross amount.
        /// </summary>
        /// <value>[Read Only] Total gross amount.</value>
        [DataMember(Name = "amount_gross", EmitDefaultValue = true)]
        public decimal? AmountGross { get; private set; }

        /// <summary>
        ///     Amortization value
        /// </summary>
        /// <value>Amortization value</value>
        [DataMember(Name = "amortization", EmitDefaultValue = true)]
        public decimal? Amortization
        {
            get => _Amortization;
            set
            {
                _Amortization = value;
                _flagAmortization = true;
            }
        }

        /// <summary>
        ///     Revenue center.
        /// </summary>
        /// <value>Revenue center.</value>
        [DataMember(Name = "rc_center", EmitDefaultValue = true)]
        public string RcCenter
        {
            get => _RcCenter;
            set
            {
                _RcCenter = value;
                _flagRcCenter = true;
            }
        }

        /// <summary>
        ///     Invoice number
        /// </summary>
        /// <value>Invoice number</value>
        [DataMember(Name = "invoice_number", EmitDefaultValue = true)]
        public string InvoiceNumber
        {
            get => _InvoiceNumber;
            set
            {
                _InvoiceNumber = value;
                _flagInvoiceNumber = true;
            }
        }

        /// <summary>
        ///     Gets or Sets IsMarked
        /// </summary>
        [DataMember(Name = "is_marked", EmitDefaultValue = true)]
        public bool? IsMarked
        {
            get => _IsMarked;
            set
            {
                _IsMarked = value;
                _flagIsMarked = true;
            }
        }

        /// <summary>
        ///     Gets or Sets IsDetailed
        /// </summary>
        [DataMember(Name = "is_detailed", EmitDefaultValue = true)]
        public bool? IsDetailed
        {
            get => _IsDetailed;
            set
            {
                _IsDetailed = value;
                _flagIsDetailed = true;
            }
        }

        /// <summary>
        ///     [Read Only] Indicates if this is an e-invoice.
        /// </summary>
        /// <value>[Read Only] Indicates if this is an e-invoice.</value>
        [DataMember(Name = "e_invoice", EmitDefaultValue = true)]
        public bool? EInvoice
        {
            get => _EInvoice;
            set
            {
                _EInvoice = value;
                _flagEInvoice = true;
            }
        }

        /// <summary>
        ///     [Read Only] Next due date.
        /// </summary>
        /// <value>[Read Only] Next due date.</value>
        [DataMember(Name = "next_due_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? NextDueDate { get; private set; }

        /// <summary>
        ///     Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public Currency Currency
        {
            get => _Currency;
            set
            {
                _Currency = value;
                _flagCurrency = true;
            }
        }

        /// <summary>
        ///     Tax deducibility percentage.
        /// </summary>
        /// <value>Tax deducibility percentage.</value>
        [DataMember(Name = "tax_deductibility", EmitDefaultValue = true)]
        public decimal? TaxDeductibility
        {
            get => _TaxDeductibility;
            set
            {
                _TaxDeductibility = value;
                _flagTaxDeductibility = true;
            }
        }

        /// <summary>
        ///     Vat deducibility percentage.
        /// </summary>
        /// <value>Vat deducibility percentage.</value>
        [DataMember(Name = "vat_deductibility", EmitDefaultValue = true)]
        public decimal? VatDeductibility
        {
            get => _VatDeductibility;
            set
            {
                _VatDeductibility = value;
                _flagVatDeductibility = true;
            }
        }

        /// <summary>
        ///     Gets or Sets ItemsList
        /// </summary>
        [DataMember(Name = "items_list", EmitDefaultValue = true)]
        public List<ReceivedDocumentItemsListItem> ItemsList
        {
            get => _ItemsList;
            set
            {
                _ItemsList = value;
                _flagItemsList = true;
            }
        }

        /// <summary>
        ///     Gets or Sets PaymentsList
        /// </summary>
        [DataMember(Name = "payments_list", EmitDefaultValue = true)]
        public List<ReceivedDocumentPaymentsListItem> PaymentsList
        {
            get => _PaymentsList;
            set
            {
                _PaymentsList = value;
                _flagPaymentsList = true;
            }
        }

        /// <summary>
        ///     [Read Only] Attachment url.
        /// </summary>
        /// <value>[Read Only] Attachment url.</value>
        [DataMember(Name = "attachment_url", EmitDefaultValue = true)]
        public string AttachmentUrl { get; private set; }

        /// <summary>
        ///     [Read Only] Attachment preview url.
        /// </summary>
        /// <value>[Read Only] Attachment preview url.</value>
        [DataMember(Name = "attachment_preview_url", EmitDefaultValue = true)]
        public string AttachmentPreviewUrl { get; private set; }

        /// <summary>
        ///     Uploaded attachement token.
        /// </summary>
        /// <value>Uploaded attachement token.</value>
        [DataMember(Name = "attachment_token", EmitDefaultValue = true)]
        public string AttachmentToken
        {
            get => _AttachmentToken;
            set
            {
                _AttachmentToken = value;
                _flagAttachmentToken = true;
            }
        }

        /// <summary>
        ///     Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as Entity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntity()
        {
            return _flagEntity;
        }

        /// <summary>
        ///     Returns false as Date should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDate()
        {
            return _flagDate;
        }

        /// <summary>
        ///     Returns false as Category should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategory()
        {
            return _flagCategory;
        }

        /// <summary>
        ///     Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }

        /// <summary>
        ///     Returns false as AmountNet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountNet()
        {
            return _flagAmountNet;
        }

        /// <summary>
        ///     Returns false as AmountVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountVat()
        {
            return _flagAmountVat;
        }

        /// <summary>
        ///     Returns false as AmountWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountWithholdingTax()
        {
            return _flagAmountWithholdingTax;
        }

        /// <summary>
        ///     Returns false as AmountOtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOtherWithholdingTax()
        {
            return _flagAmountOtherWithholdingTax;
        }

        /// <summary>
        ///     Returns false as AmountGross should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountGross()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as Amortization should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmortization()
        {
            return _flagAmortization;
        }

        /// <summary>
        ///     Returns false as RcCenter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRcCenter()
        {
            return _flagRcCenter;
        }

        /// <summary>
        ///     Returns false as InvoiceNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInvoiceNumber()
        {
            return _flagInvoiceNumber;
        }

        /// <summary>
        ///     Returns false as IsMarked should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsMarked()
        {
            return _flagIsMarked;
        }

        /// <summary>
        ///     Returns false as IsDetailed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsDetailed()
        {
            return _flagIsDetailed;
        }

        /// <summary>
        ///     Returns false as EInvoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEInvoice()
        {
            return _flagEInvoice;
        }

        /// <summary>
        ///     Returns false as NextDueDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNextDueDate()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as Currency should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrency()
        {
            return _flagCurrency;
        }

        /// <summary>
        ///     Returns false as TaxDeductibility should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTaxDeductibility()
        {
            return _flagTaxDeductibility;
        }

        /// <summary>
        ///     Returns false as VatDeductibility should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVatDeductibility()
        {
            return _flagVatDeductibility;
        }

        /// <summary>
        ///     Returns false as ItemsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItemsList()
        {
            return _flagItemsList;
        }

        /// <summary>
        ///     Returns false as PaymentsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentsList()
        {
            return _flagPaymentsList;
        }

        /// <summary>
        ///     Returns false as AttachmentUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachmentUrl()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as AttachmentPreviewUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachmentPreviewUrl()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as AttachmentToken should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachmentToken()
        {
            return _flagAttachmentToken;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceivedDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountWithholdingTax: ").Append(AmountWithholdingTax).Append("\n");
            sb.Append("  AmountOtherWithholdingTax: ").Append(AmountOtherWithholdingTax).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  Amortization: ").Append(Amortization).Append("\n");
            sb.Append("  RcCenter: ").Append(RcCenter).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  IsMarked: ").Append(IsMarked).Append("\n");
            sb.Append("  IsDetailed: ").Append(IsDetailed).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  NextDueDate: ").Append(NextDueDate).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TaxDeductibility: ").Append(TaxDeductibility).Append("\n");
            sb.Append("  VatDeductibility: ").Append(VatDeductibility).Append("\n");
            sb.Append("  ItemsList: ").Append(ItemsList).Append("\n");
            sb.Append("  PaymentsList: ").Append(PaymentsList).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("  AttachmentPreviewUrl: ").Append(AttachmentPreviewUrl).Append("\n");
            sb.Append("  AttachmentToken: ").Append(AttachmentToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ReceivedDocument);
        }

        /// <summary>
        ///     Returns true if ReceivedDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceivedDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceivedDocument input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    Entity == input.Entity ||
                    (Entity != null &&
                     Entity.Equals(input.Entity))
                ) &&
                (
                    Date == input.Date ||
                    (Date != null &&
                     Date.Equals(input.Date))
                ) &&
                (
                    Category == input.Category ||
                    (Category != null &&
                     Category.Equals(input.Category))
                ) &&
                (
                    Description == input.Description ||
                    (Description != null &&
                     Description.Equals(input.Description))
                ) &&
                (
                    AmountNet == input.AmountNet ||
                    (AmountNet != null &&
                     AmountNet.Equals(input.AmountNet))
                ) &&
                (
                    AmountVat == input.AmountVat ||
                    (AmountVat != null &&
                     AmountVat.Equals(input.AmountVat))
                ) &&
                (
                    AmountWithholdingTax == input.AmountWithholdingTax ||
                    (AmountWithholdingTax != null &&
                     AmountWithholdingTax.Equals(input.AmountWithholdingTax))
                ) &&
                (
                    AmountOtherWithholdingTax == input.AmountOtherWithholdingTax ||
                    (AmountOtherWithholdingTax != null &&
                     AmountOtherWithholdingTax.Equals(input.AmountOtherWithholdingTax))
                ) &&
                (
                    AmountGross == input.AmountGross ||
                    (AmountGross != null &&
                     AmountGross.Equals(input.AmountGross))
                ) &&
                (
                    Amortization == input.Amortization ||
                    (Amortization != null &&
                     Amortization.Equals(input.Amortization))
                ) &&
                (
                    RcCenter == input.RcCenter ||
                    (RcCenter != null &&
                     RcCenter.Equals(input.RcCenter))
                ) &&
                (
                    InvoiceNumber == input.InvoiceNumber ||
                    (InvoiceNumber != null &&
                     InvoiceNumber.Equals(input.InvoiceNumber))
                ) &&
                (
                    IsMarked == input.IsMarked ||
                    (IsMarked != null &&
                     IsMarked.Equals(input.IsMarked))
                ) &&
                (
                    IsDetailed == input.IsDetailed ||
                    (IsDetailed != null &&
                     IsDetailed.Equals(input.IsDetailed))
                ) &&
                (
                    EInvoice == input.EInvoice ||
                    (EInvoice != null &&
                     EInvoice.Equals(input.EInvoice))
                ) &&
                (
                    NextDueDate == input.NextDueDate ||
                    (NextDueDate != null &&
                     NextDueDate.Equals(input.NextDueDate))
                ) &&
                (
                    Currency == input.Currency ||
                    (Currency != null &&
                     Currency.Equals(input.Currency))
                ) &&
                (
                    TaxDeductibility == input.TaxDeductibility ||
                    (TaxDeductibility != null &&
                     TaxDeductibility.Equals(input.TaxDeductibility))
                ) &&
                (
                    VatDeductibility == input.VatDeductibility ||
                    (VatDeductibility != null &&
                     VatDeductibility.Equals(input.VatDeductibility))
                ) &&
                (
                    ItemsList == input.ItemsList ||
                    (ItemsList != null &&
                     input.ItemsList != null &&
                     ItemsList.SequenceEqual(input.ItemsList))
                ) &&
                (
                    PaymentsList == input.PaymentsList ||
                    (PaymentsList != null &&
                     input.PaymentsList != null &&
                     PaymentsList.SequenceEqual(input.PaymentsList))
                ) &&
                (
                    AttachmentUrl == input.AttachmentUrl ||
                    (AttachmentUrl != null &&
                     AttachmentUrl.Equals(input.AttachmentUrl))
                ) &&
                (
                    AttachmentPreviewUrl == input.AttachmentPreviewUrl ||
                    (AttachmentPreviewUrl != null &&
                     AttachmentPreviewUrl.Equals(input.AttachmentPreviewUrl))
                ) &&
                (
                    AttachmentToken == input.AttachmentToken ||
                    (AttachmentToken != null &&
                     AttachmentToken.Equals(input.AttachmentToken))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Entity != null) hashCode = hashCode * 59 + Entity.GetHashCode();
                if (Date != null) hashCode = hashCode * 59 + Date.GetHashCode();
                if (Category != null) hashCode = hashCode * 59 + Category.GetHashCode();
                if (Description != null) hashCode = hashCode * 59 + Description.GetHashCode();
                if (AmountNet != null) hashCode = hashCode * 59 + AmountNet.GetHashCode();
                if (AmountVat != null) hashCode = hashCode * 59 + AmountVat.GetHashCode();
                if (AmountWithholdingTax != null) hashCode = hashCode * 59 + AmountWithholdingTax.GetHashCode();
                if (AmountOtherWithholdingTax != null)
                    hashCode = hashCode * 59 + AmountOtherWithholdingTax.GetHashCode();
                if (AmountGross != null) hashCode = hashCode * 59 + AmountGross.GetHashCode();
                if (Amortization != null) hashCode = hashCode * 59 + Amortization.GetHashCode();
                if (RcCenter != null) hashCode = hashCode * 59 + RcCenter.GetHashCode();
                if (InvoiceNumber != null) hashCode = hashCode * 59 + InvoiceNumber.GetHashCode();
                if (IsMarked != null) hashCode = hashCode * 59 + IsMarked.GetHashCode();
                if (IsDetailed != null) hashCode = hashCode * 59 + IsDetailed.GetHashCode();
                if (EInvoice != null) hashCode = hashCode * 59 + EInvoice.GetHashCode();
                if (NextDueDate != null) hashCode = hashCode * 59 + NextDueDate.GetHashCode();
                if (Currency != null) hashCode = hashCode * 59 + Currency.GetHashCode();
                if (TaxDeductibility != null) hashCode = hashCode * 59 + TaxDeductibility.GetHashCode();
                if (VatDeductibility != null) hashCode = hashCode * 59 + VatDeductibility.GetHashCode();
                if (ItemsList != null) hashCode = hashCode * 59 + ItemsList.GetHashCode();
                if (PaymentsList != null) hashCode = hashCode * 59 + PaymentsList.GetHashCode();
                if (AttachmentUrl != null) hashCode = hashCode * 59 + AttachmentUrl.GetHashCode();
                if (AttachmentPreviewUrl != null) hashCode = hashCode * 59 + AttachmentPreviewUrl.GetHashCode();
                if (AttachmentToken != null) hashCode = hashCode * 59 + AttachmentToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}