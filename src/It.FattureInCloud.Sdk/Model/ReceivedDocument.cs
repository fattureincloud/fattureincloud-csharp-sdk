// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ReceivedDocument
    /// </summary>
    public partial class ReceivedDocument : IEquatable<ReceivedDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivedDocument" /> class.
        /// </summary>
        /// <param name="id">Received document id</param>
        /// <param name="type">type</param>
        /// <param name="entity">entity</param>
        /// <param name="date">Received document date [defaults to today&#39;s date]</param>
        /// <param name="category">Received document category</param>
        /// <param name="description">Received document description</param>
        /// <param name="amountNet">Received document total net amount</param>
        /// <param name="amountVat">Received document total vat amount</param>
        /// <param name="amountWithholdingTax">Received document withholding tax amount</param>
        /// <param name="amountOtherWithholdingTax">Received document other withholding tax amount</param>
        /// <param name="amountGross">[Read Only] Received document total gross amount</param>
        /// <param name="amortization">Received document amortization value</param>
        /// <param name="rcCenter">Received document revenue center</param>
        /// <param name="invoiceNumber">Received document invoice number</param>
        /// <param name="isMarked">Received document is marked</param>
        /// <param name="isDetailed">Received document has items</param>
        /// <param name="eInvoice">[Read Only] Received document is an e-invoice</param>
        /// <param name="nextDueDate">[Read Only] Received document date of the next not paid payment</param>
        /// <param name="currency">currency</param>
        /// <param name="taxDeductibility">Received document tax deducibility percentage</param>
        /// <param name="vatDeductibility">Received document vat deducibility percentage</param>
        /// <param name="itemsList">itemsList</param>
        /// <param name="paymentsList">paymentsList</param>
        /// <param name="attachmentUrl">[Temporary] [Read Only] Received document url of the attached file</param>
        /// <param name="attachmentPreviewUrl">[Temporary] [Read Only] Received document url of the attachment preview</param>
        /// <param name="autoCalculate">Received document total items amount and total payments amount can differ if this field is set to false</param>
        /// <param name="attachmentToken">[Write Only] Received document attachment token returned by POST /received_documents/attachment</param>
        /// <param name="locked">Received Document can&#39;t be edited</param>
        /// <param name="createdAt">Received document creation date</param>
        /// <param name="updatedAt">Received document last update date</param>
        [JsonConstructor]
        public ReceivedDocument(Option<int?> id = default, Option<ReceivedDocumentType?> type = default, Option<Entity> entity = default, Option<DateTimeOffset?> date = default, Option<string> category = default, Option<string> description = default, Option<decimal?> amountNet = default, Option<decimal?> amountVat = default, Option<decimal?> amountWithholdingTax = default, Option<decimal?> amountOtherWithholdingTax = default, Option<decimal?> amountGross = default, Option<decimal?> amortization = default, Option<string> rcCenter = default, Option<string> invoiceNumber = default, Option<bool?> isMarked = default, Option<bool?> isDetailed = default, Option<bool?> eInvoice = default, Option<DateTimeOffset?> nextDueDate = default, Option<Currency> currency = default, Option<decimal?> taxDeductibility = default, Option<decimal?> vatDeductibility = default, Option<List<ReceivedDocumentItemsListItem>> itemsList = default, Option<List<ReceivedDocumentPaymentsListItem>> paymentsList = default, Option<string> attachmentUrl = default, Option<string> attachmentPreviewUrl = default, Option<bool?> autoCalculate = default, Option<string> attachmentToken = default, Option<bool?> locked = default, Option<string> createdAt = default, Option<string> updatedAt = default)
        {
            IdOption = id;
            TypeOption = type;
            EntityOption = entity;
            DateOption = date;
            CategoryOption = category;
            DescriptionOption = description;
            AmountNetOption = amountNet;
            AmountVatOption = amountVat;
            AmountWithholdingTaxOption = amountWithholdingTax;
            AmountOtherWithholdingTaxOption = amountOtherWithholdingTax;
            AmountGrossOption = amountGross;
            AmortizationOption = amortization;
            RcCenterOption = rcCenter;
            InvoiceNumberOption = invoiceNumber;
            IsMarkedOption = isMarked;
            IsDetailedOption = isDetailed;
            EInvoiceOption = eInvoice;
            NextDueDateOption = nextDueDate;
            CurrencyOption = currency;
            TaxDeductibilityOption = taxDeductibility;
            VatDeductibilityOption = vatDeductibility;
            ItemsListOption = itemsList;
            PaymentsListOption = paymentsList;
            AttachmentUrlOption = attachmentUrl;
            AttachmentPreviewUrlOption = attachmentPreviewUrl;
            AutoCalculateOption = autoCalculate;
            AttachmentTokenOption = attachmentToken;
            LockedOption = locked;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReceivedDocumentType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public ReceivedDocumentType? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<ReceivedDocumentType?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Received document id
        /// </summary>
        /// <value>Received document id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Entity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Entity> EntityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [JsonPropertyName("entity")]
        public Entity Entity { get { return this.EntityOption; } set { this.EntityOption = new Option<Entity>(value); } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> DateOption { get; private set; }

        /// <summary>
        /// Received document date [defaults to today&#39;s date]
        /// </summary>
        /// <value>Received document date [defaults to today&#39;s date]</value>
        [JsonPropertyName("date")]
        public DateTimeOffset? Date { get { return this.DateOption; } set { this.DateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of Category
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CategoryOption { get; private set; }

        /// <summary>
        /// Received document category
        /// </summary>
        /// <value>Received document category</value>
        [JsonPropertyName("category")]
        public string Category { get { return this.CategoryOption; } set { this.CategoryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Received document description
        /// </summary>
        /// <value>Received document description</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AmountNet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountNetOption { get; private set; }

        /// <summary>
        /// Received document total net amount
        /// </summary>
        /// <value>Received document total net amount</value>
        [JsonPropertyName("amount_net")]
        public decimal? AmountNet { get { return this.AmountNetOption; } set { this.AmountNetOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountVat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountVatOption { get; private set; }

        /// <summary>
        /// Received document total vat amount
        /// </summary>
        /// <value>Received document total vat amount</value>
        [JsonPropertyName("amount_vat")]
        public decimal? AmountVat { get { return this.AmountVatOption; } set { this.AmountVatOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountWithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountWithholdingTaxOption { get; private set; }

        /// <summary>
        /// Received document withholding tax amount
        /// </summary>
        /// <value>Received document withholding tax amount</value>
        [JsonPropertyName("amount_withholding_tax")]
        public decimal? AmountWithholdingTax { get { return this.AmountWithholdingTaxOption; } set { this.AmountWithholdingTaxOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountOtherWithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountOtherWithholdingTaxOption { get; private set; }

        /// <summary>
        /// Received document other withholding tax amount
        /// </summary>
        /// <value>Received document other withholding tax amount</value>
        [JsonPropertyName("amount_other_withholding_tax")]
        public decimal? AmountOtherWithholdingTax { get { return this.AmountOtherWithholdingTaxOption; } set { this.AmountOtherWithholdingTaxOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountGross
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountGrossOption { get; }

        /// <summary>
        /// [Read Only] Received document total gross amount
        /// </summary>
        /// <value>[Read Only] Received document total gross amount</value>
        [JsonPropertyName("amount_gross")]
        public decimal? AmountGross { get { return this.AmountGrossOption; } }

        /// <summary>
        /// Used to track the state of Amortization
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmortizationOption { get; private set; }

        /// <summary>
        /// Received document amortization value
        /// </summary>
        /// <value>Received document amortization value</value>
        [JsonPropertyName("amortization")]
        public decimal? Amortization { get { return this.AmortizationOption; } set { this.AmortizationOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of RcCenter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RcCenterOption { get; private set; }

        /// <summary>
        /// Received document revenue center
        /// </summary>
        /// <value>Received document revenue center</value>
        [JsonPropertyName("rc_center")]
        public string RcCenter { get { return this.RcCenterOption; } set { this.RcCenterOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InvoiceNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InvoiceNumberOption { get; private set; }

        /// <summary>
        /// Received document invoice number
        /// </summary>
        /// <value>Received document invoice number</value>
        [JsonPropertyName("invoice_number")]
        public string InvoiceNumber { get { return this.InvoiceNumberOption; } set { this.InvoiceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsMarked
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsMarkedOption { get; private set; }

        /// <summary>
        /// Received document is marked
        /// </summary>
        /// <value>Received document is marked</value>
        [JsonPropertyName("is_marked")]
        public bool? IsMarked { get { return this.IsMarkedOption; } set { this.IsMarkedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsDetailed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDetailedOption { get; private set; }

        /// <summary>
        /// Received document has items
        /// </summary>
        /// <value>Received document has items</value>
        [JsonPropertyName("is_detailed")]
        public bool? IsDetailed { get { return this.IsDetailedOption; } set { this.IsDetailedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of EInvoice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EInvoiceOption { get; private set; }

        /// <summary>
        /// [Read Only] Received document is an e-invoice
        /// </summary>
        /// <value>[Read Only] Received document is an e-invoice</value>
        [JsonPropertyName("e_invoice")]
        public bool? EInvoice { get { return this.EInvoiceOption; } set { this.EInvoiceOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of NextDueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> NextDueDateOption { get; }

        /// <summary>
        /// [Read Only] Received document date of the next not paid payment
        /// </summary>
        /// <value>[Read Only] Received document date of the next not paid payment</value>
        [JsonPropertyName("next_due_date")]
        public DateTimeOffset? NextDueDate { get { return this.NextDueDateOption; } }

        /// <summary>
        /// Used to track the state of Currency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Currency> CurrencyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [JsonPropertyName("currency")]
        public Currency Currency { get { return this.CurrencyOption; } set { this.CurrencyOption = new Option<Currency>(value); } }

        /// <summary>
        /// Used to track the state of TaxDeductibility
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TaxDeductibilityOption { get; private set; }

        /// <summary>
        /// Received document tax deducibility percentage
        /// </summary>
        /// <value>Received document tax deducibility percentage</value>
        [JsonPropertyName("tax_deductibility")]
        public decimal? TaxDeductibility { get { return this.TaxDeductibilityOption; } set { this.TaxDeductibilityOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of VatDeductibility
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> VatDeductibilityOption { get; private set; }

        /// <summary>
        /// Received document vat deducibility percentage
        /// </summary>
        /// <value>Received document vat deducibility percentage</value>
        [JsonPropertyName("vat_deductibility")]
        public decimal? VatDeductibility { get { return this.VatDeductibilityOption; } set { this.VatDeductibilityOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of ItemsList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ReceivedDocumentItemsListItem>> ItemsListOption { get; private set; }

        /// <summary>
        /// Gets or Sets ItemsList
        /// </summary>
        [JsonPropertyName("items_list")]
        public List<ReceivedDocumentItemsListItem> ItemsList { get { return this.ItemsListOption; } set { this.ItemsListOption = new Option<List<ReceivedDocumentItemsListItem>>(value); } }

        /// <summary>
        /// Used to track the state of PaymentsList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ReceivedDocumentPaymentsListItem>> PaymentsListOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentsList
        /// </summary>
        [JsonPropertyName("payments_list")]
        public List<ReceivedDocumentPaymentsListItem> PaymentsList { get { return this.PaymentsListOption; } set { this.PaymentsListOption = new Option<List<ReceivedDocumentPaymentsListItem>>(value); } }

        /// <summary>
        /// Used to track the state of AttachmentUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AttachmentUrlOption { get; }

        /// <summary>
        /// [Temporary] [Read Only] Received document url of the attached file
        /// </summary>
        /// <value>[Temporary] [Read Only] Received document url of the attached file</value>
        [JsonPropertyName("attachment_url")]
        public string AttachmentUrl { get { return this.AttachmentUrlOption; } }

        /// <summary>
        /// Used to track the state of AttachmentPreviewUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AttachmentPreviewUrlOption { get; }

        /// <summary>
        /// [Temporary] [Read Only] Received document url of the attachment preview
        /// </summary>
        /// <value>[Temporary] [Read Only] Received document url of the attachment preview</value>
        [JsonPropertyName("attachment_preview_url")]
        public string AttachmentPreviewUrl { get { return this.AttachmentPreviewUrlOption; } }

        /// <summary>
        /// Used to track the state of AutoCalculate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AutoCalculateOption { get; private set; }

        /// <summary>
        /// Received document total items amount and total payments amount can differ if this field is set to false
        /// </summary>
        /// <value>Received document total items amount and total payments amount can differ if this field is set to false</value>
        [JsonPropertyName("auto_calculate")]
        public bool? AutoCalculate { get { return this.AutoCalculateOption; } set { this.AutoCalculateOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of AttachmentToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AttachmentTokenOption { get; private set; }

        /// <summary>
        /// [Write Only] Received document attachment token returned by POST /received_documents/attachment
        /// </summary>
        /// <value>[Write Only] Received document attachment token returned by POST /received_documents/attachment</value>
        [JsonPropertyName("attachment_token")]
        public string AttachmentToken { get { return this.AttachmentTokenOption; } set { this.AttachmentTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Locked
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LockedOption { get; private set; }

        /// <summary>
        /// Received Document can&#39;t be edited
        /// </summary>
        /// <value>Received Document can&#39;t be edited</value>
        [JsonPropertyName("locked")]
        public bool? Locked { get { return this.LockedOption; } set { this.LockedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CreatedAtOption { get; private set; }

        /// <summary>
        /// Received document creation date
        /// </summary>
        /// <value>Received document creation date</value>
        [JsonPropertyName("created_at")]
        public string CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Received document last update date
        /// </summary>
        /// <value>Received document last update date</value>
        [JsonPropertyName("updated_at")]
        public string UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceivedDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountWithholdingTax: ").Append(AmountWithholdingTax).Append("\n");
            sb.Append("  AmountOtherWithholdingTax: ").Append(AmountOtherWithholdingTax).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  Amortization: ").Append(Amortization).Append("\n");
            sb.Append("  RcCenter: ").Append(RcCenter).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  IsMarked: ").Append(IsMarked).Append("\n");
            sb.Append("  IsDetailed: ").Append(IsDetailed).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  NextDueDate: ").Append(NextDueDate).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TaxDeductibility: ").Append(TaxDeductibility).Append("\n");
            sb.Append("  VatDeductibility: ").Append(VatDeductibility).Append("\n");
            sb.Append("  ItemsList: ").Append(ItemsList).Append("\n");
            sb.Append("  PaymentsList: ").Append(PaymentsList).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("  AttachmentPreviewUrl: ").Append(AttachmentPreviewUrl).Append("\n");
            sb.Append("  AutoCalculate: ").Append(AutoCalculate).Append("\n");
            sb.Append("  AttachmentToken: ").Append(AttachmentToken).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceivedDocument);
        }

        /// <summary>
        /// Returns true if ReceivedDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceivedDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceivedDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    AmountGross == input.AmountGross ||
                    AmountGross.Equals(input.AmountGross)
                ) && 
                (
                    NextDueDate == input.NextDueDate ||
                    NextDueDate.Equals(input.NextDueDate)
                ) && 
                (
                    AttachmentUrl == input.AttachmentUrl ||
                    (AttachmentUrl != null &&
                    AttachmentUrl.Equals(input.AttachmentUrl))
                ) && 
                (
                    AttachmentPreviewUrl == input.AttachmentPreviewUrl ||
                    (AttachmentPreviewUrl != null &&
                    AttachmentPreviewUrl.Equals(input.AttachmentPreviewUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (AmountGross != null)
                    hashCode = (hashCode * 59) + AmountGross.GetHashCode();

                if (NextDueDate != null)
                    hashCode = (hashCode * 59) + NextDueDate.GetHashCode();

                if (AttachmentUrl != null)
                    hashCode = (hashCode * 59) + AttachmentUrl.GetHashCode();

                if (AttachmentPreviewUrl != null)
                    hashCode = (hashCode * 59) + AttachmentPreviewUrl.GetHashCode();


                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="ReceivedDocument" />
    /// </summary>
    public class ReceivedDocumentJsonConverter : JsonConverter<ReceivedDocument>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize NextDueDate
        /// </summary>
        public static string NextDueDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="ReceivedDocument" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReceivedDocument Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<ReceivedDocumentType?> type = default;
            Option<Entity> entity = default;
            Option<DateTimeOffset?> date = default;
            Option<string> category = default;
            Option<string> description = default;
            Option<decimal?> amountNet = default;
            Option<decimal?> amountVat = default;
            Option<decimal?> amountWithholdingTax = default;
            Option<decimal?> amountOtherWithholdingTax = default;
            Option<decimal?> amountGross = default;
            Option<decimal?> amortization = default;
            Option<string> rcCenter = default;
            Option<string> invoiceNumber = default;
            Option<bool?> isMarked = default;
            Option<bool?> isDetailed = default;
            Option<bool?> eInvoice = default;
            Option<DateTimeOffset?> nextDueDate = default;
            Option<Currency> currency = default;
            Option<decimal?> taxDeductibility = default;
            Option<decimal?> vatDeductibility = default;
            Option<List<ReceivedDocumentItemsListItem>> itemsList = default;
            Option<List<ReceivedDocumentPaymentsListItem>> paymentsList = default;
            Option<string> attachmentUrl = default;
            Option<string> attachmentPreviewUrl = default;
            Option<bool?> autoCalculate = default;
            Option<string> attachmentToken = default;
            Option<bool?> locked = default;
            Option<string> createdAt = default;
            Option<string> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ReceivedDocumentType?>(ReceivedDocumentTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "entity":
                            entity = new Option<Entity>(JsonSerializer.Deserialize<Entity>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "date":
                            date = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "category":
                            category = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "amount_net":
                            amountNet = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_vat":
                            amountVat = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_withholding_tax":
                            amountWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_other_withholding_tax":
                            amountOtherWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_gross":
                            amountGross = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amortization":
                            amortization = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "rc_center":
                            rcCenter = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "invoice_number":
                            invoiceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "is_marked":
                            isMarked = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_detailed":
                            isDetailed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "e_invoice":
                            eInvoice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "next_due_date":
                            nextDueDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "currency":
                            currency = new Option<Currency>(JsonSerializer.Deserialize<Currency>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tax_deductibility":
                            taxDeductibility = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "vat_deductibility":
                            vatDeductibility = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "items_list":
                            itemsList = new Option<List<ReceivedDocumentItemsListItem>>(JsonSerializer.Deserialize<List<ReceivedDocumentItemsListItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payments_list":
                            paymentsList = new Option<List<ReceivedDocumentPaymentsListItem>>(JsonSerializer.Deserialize<List<ReceivedDocumentPaymentsListItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "attachment_url":
                            attachmentUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "attachment_preview_url":
                            attachmentPreviewUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "auto_calculate":
                            autoCalculate = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "attachment_token":
                            attachmentToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "locked":
                            locked = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "created_at":
                            createdAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ReceivedDocument.");

            if (entity.IsSet && entity.Value == null)
                throw new ArgumentNullException(nameof(entity), "Property is not nullable for class ReceivedDocument.");

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class ReceivedDocument.");

            return new ReceivedDocument(id, type, entity, date, category, description, amountNet, amountVat, amountWithholdingTax, amountOtherWithholdingTax, amountGross, amortization, rcCenter, invoiceNumber, isMarked, isDetailed, eInvoice, nextDueDate, currency, taxDeductibility, vatDeductibility, itemsList, paymentsList, attachmentUrl, attachmentPreviewUrl, autoCalculate, attachmentToken, locked, createdAt, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="ReceivedDocument" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocument"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReceivedDocument receivedDocument, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, receivedDocument, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReceivedDocument" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocument"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReceivedDocument receivedDocument, JsonSerializerOptions jsonSerializerOptions)
        {
            if (receivedDocument.EntityOption.IsSet && receivedDocument.Entity == null)
                throw new ArgumentNullException(nameof(receivedDocument.Entity), "Property is required for class ReceivedDocument.");

            if (receivedDocument.CurrencyOption.IsSet && receivedDocument.Currency == null)
                throw new ArgumentNullException(nameof(receivedDocument.Currency), "Property is required for class ReceivedDocument.");

            if (receivedDocument.IdOption.IsSet)
                if (receivedDocument.IdOption.Value != null)
                    writer.WriteNumber("id", receivedDocument.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (receivedDocument.TypeOption.IsSet)
            {
                var typeRawValue = ReceivedDocumentTypeValueConverter.ToJsonValue(receivedDocument.Type.Value);
                writer.WriteString("type", typeRawValue);
            }
            if (receivedDocument.EntityOption.IsSet)
            {
                writer.WritePropertyName("entity");
                JsonSerializer.Serialize(writer, receivedDocument.Entity, jsonSerializerOptions);
            }
            if (receivedDocument.DateOption.IsSet)
                if (receivedDocument.DateOption.Value != null)
                    writer.WriteString("date", receivedDocument.DateOption.Value.Value.ToString(DateFormat));
                else
                    writer.WriteNull("date");

            if (receivedDocument.CategoryOption.IsSet)
                if (receivedDocument.CategoryOption.Value != null)
                    writer.WriteString("category", receivedDocument.Category);
                else
                    writer.WriteNull("category");

            if (receivedDocument.DescriptionOption.IsSet)
                if (receivedDocument.DescriptionOption.Value != null)
                    writer.WriteString("description", receivedDocument.Description);
                else
                    writer.WriteNull("description");

            if (receivedDocument.AmountNetOption.IsSet)
                if (receivedDocument.AmountNetOption.Value != null)
                    writer.WriteNumber("amount_net", receivedDocument.AmountNetOption.Value.Value);
                else
                    writer.WriteNull("amount_net");

            if (receivedDocument.AmountVatOption.IsSet)
                if (receivedDocument.AmountVatOption.Value != null)
                    writer.WriteNumber("amount_vat", receivedDocument.AmountVatOption.Value.Value);
                else
                    writer.WriteNull("amount_vat");

            if (receivedDocument.AmountWithholdingTaxOption.IsSet)
                if (receivedDocument.AmountWithholdingTaxOption.Value != null)
                    writer.WriteNumber("amount_withholding_tax", receivedDocument.AmountWithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("amount_withholding_tax");

            if (receivedDocument.AmountOtherWithholdingTaxOption.IsSet)
                if (receivedDocument.AmountOtherWithholdingTaxOption.Value != null)
                    writer.WriteNumber("amount_other_withholding_tax", receivedDocument.AmountOtherWithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("amount_other_withholding_tax");

            if (receivedDocument.AmountGrossOption.IsSet)
                if (receivedDocument.AmountGrossOption.Value != null)
                    writer.WriteNumber("amount_gross", receivedDocument.AmountGrossOption.Value.Value);
                else
                    writer.WriteNull("amount_gross");

            if (receivedDocument.AmortizationOption.IsSet)
                if (receivedDocument.AmortizationOption.Value != null)
                    writer.WriteNumber("amortization", receivedDocument.AmortizationOption.Value.Value);
                else
                    writer.WriteNull("amortization");

            if (receivedDocument.RcCenterOption.IsSet)
                if (receivedDocument.RcCenterOption.Value != null)
                    writer.WriteString("rc_center", receivedDocument.RcCenter);
                else
                    writer.WriteNull("rc_center");

            if (receivedDocument.InvoiceNumberOption.IsSet)
                if (receivedDocument.InvoiceNumberOption.Value != null)
                    writer.WriteString("invoice_number", receivedDocument.InvoiceNumber);
                else
                    writer.WriteNull("invoice_number");

            if (receivedDocument.IsMarkedOption.IsSet)
                if (receivedDocument.IsMarkedOption.Value != null)
                    writer.WriteBoolean("is_marked", receivedDocument.IsMarkedOption.Value.Value);
                else
                    writer.WriteNull("is_marked");

            if (receivedDocument.IsDetailedOption.IsSet)
                if (receivedDocument.IsDetailedOption.Value != null)
                    writer.WriteBoolean("is_detailed", receivedDocument.IsDetailedOption.Value.Value);
                else
                    writer.WriteNull("is_detailed");

            if (receivedDocument.EInvoiceOption.IsSet)
                if (receivedDocument.EInvoiceOption.Value != null)
                    writer.WriteBoolean("e_invoice", receivedDocument.EInvoiceOption.Value.Value);
                else
                    writer.WriteNull("e_invoice");

            if (receivedDocument.NextDueDateOption.IsSet)
                if (receivedDocument.NextDueDateOption.Value != null)
                    writer.WriteString("next_due_date", receivedDocument.NextDueDateOption.Value.Value.ToString(NextDueDateFormat));
                else
                    writer.WriteNull("next_due_date");

            if (receivedDocument.CurrencyOption.IsSet)
            {
                writer.WritePropertyName("currency");
                JsonSerializer.Serialize(writer, receivedDocument.Currency, jsonSerializerOptions);
            }
            if (receivedDocument.TaxDeductibilityOption.IsSet)
                if (receivedDocument.TaxDeductibilityOption.Value != null)
                    writer.WriteNumber("tax_deductibility", receivedDocument.TaxDeductibilityOption.Value.Value);
                else
                    writer.WriteNull("tax_deductibility");

            if (receivedDocument.VatDeductibilityOption.IsSet)
                if (receivedDocument.VatDeductibilityOption.Value != null)
                    writer.WriteNumber("vat_deductibility", receivedDocument.VatDeductibilityOption.Value.Value);
                else
                    writer.WriteNull("vat_deductibility");

            if (receivedDocument.ItemsListOption.IsSet)
                if (receivedDocument.ItemsListOption.Value != null)
                {
                    writer.WritePropertyName("items_list");
                    JsonSerializer.Serialize(writer, receivedDocument.ItemsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items_list");
            if (receivedDocument.PaymentsListOption.IsSet)
                if (receivedDocument.PaymentsListOption.Value != null)
                {
                    writer.WritePropertyName("payments_list");
                    JsonSerializer.Serialize(writer, receivedDocument.PaymentsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payments_list");
            if (receivedDocument.AttachmentUrlOption.IsSet)
                if (receivedDocument.AttachmentUrlOption.Value != null)
                    writer.WriteString("attachment_url", receivedDocument.AttachmentUrl);
                else
                    writer.WriteNull("attachment_url");

            if (receivedDocument.AttachmentPreviewUrlOption.IsSet)
                if (receivedDocument.AttachmentPreviewUrlOption.Value != null)
                    writer.WriteString("attachment_preview_url", receivedDocument.AttachmentPreviewUrl);
                else
                    writer.WriteNull("attachment_preview_url");

            if (receivedDocument.AutoCalculateOption.IsSet)
                if (receivedDocument.AutoCalculateOption.Value != null)
                    writer.WriteBoolean("auto_calculate", receivedDocument.AutoCalculateOption.Value.Value);
                else
                    writer.WriteNull("auto_calculate");

            if (receivedDocument.AttachmentTokenOption.IsSet)
                if (receivedDocument.AttachmentTokenOption.Value != null)
                    writer.WriteString("attachment_token", receivedDocument.AttachmentToken);
                else
                    writer.WriteNull("attachment_token");

            if (receivedDocument.LockedOption.IsSet)
                if (receivedDocument.LockedOption.Value != null)
                    writer.WriteBoolean("locked", receivedDocument.LockedOption.Value.Value);
                else
                    writer.WriteNull("locked");

            if (receivedDocument.CreatedAtOption.IsSet)
                if (receivedDocument.CreatedAtOption.Value != null)
                    writer.WriteString("created_at", receivedDocument.CreatedAt);
                else
                    writer.WriteNull("created_at");

            if (receivedDocument.UpdatedAtOption.IsSet)
                if (receivedDocument.UpdatedAtOption.Value != null)
                    writer.WriteString("updated_at", receivedDocument.UpdatedAt);
                else
                    writer.WriteNull("updated_at");
        }
    }
}
