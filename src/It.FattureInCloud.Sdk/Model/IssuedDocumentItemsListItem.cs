// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// IssuedDocumentItemsListItem
    /// </summary>
    public partial class IssuedDocumentItemsListItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentItemsListItem" /> class.
        /// </summary>
        /// <param name="id">Issued document item id</param>
        /// <param name="productId">Issued document item product id</param>
        /// <param name="code">Issued document item product code</param>
        /// <param name="name">Issued document item product name</param>
        /// <param name="category">Issued document item product category</param>
        /// <param name="description">Issued document product description</param>
        /// <param name="qty">Issued document item quantity</param>
        /// <param name="measure">Issued document item measure</param>
        /// <param name="netPrice">Issued document item net price</param>
        /// <param name="grossPrice">Issued document item gross price</param>
        /// <param name="vat">vat</param>
        /// <param name="notTaxable">Issued document item is not taxable</param>
        /// <param name="applyWithholdingTaxes">Issued document item apply withholding taxes, rivalsa and cassa</param>
        /// <param name="discount">Issued document item discount percentual value</param>
        /// <param name="discountHighlight">Issued document item highlight discount</param>
        /// <param name="inDn">Issued document item add in delivery note</param>
        /// <param name="stock">Issued document item move stock</param>
        /// <param name="eiRaw">Issued document advanced raw attributes for e-invoices</param>
        [JsonConstructor]
        public IssuedDocumentItemsListItem(Option<int?> id = default, Option<int?> productId = default, Option<string> code = default, Option<string> name = default, Option<string> category = default, Option<string> description = default, Option<decimal?> qty = default, Option<string> measure = default, Option<decimal?> netPrice = default, Option<decimal?> grossPrice = default, Option<VatType> vat = default, Option<bool?> notTaxable = default, Option<bool?> applyWithholdingTaxes = default, Option<decimal?> discount = default, Option<bool?> discountHighlight = default, Option<bool?> inDn = default, Option<bool?> stock = default, Option<Object> eiRaw = default)
        {
            IdOption = id;
            ProductIdOption = productId;
            CodeOption = code;
            NameOption = name;
            CategoryOption = category;
            DescriptionOption = description;
            QtyOption = qty;
            MeasureOption = measure;
            NetPriceOption = netPrice;
            GrossPriceOption = grossPrice;
            VatOption = vat;
            NotTaxableOption = notTaxable;
            ApplyWithholdingTaxesOption = applyWithholdingTaxes;
            DiscountOption = discount;
            DiscountHighlightOption = discountHighlight;
            InDnOption = inDn;
            StockOption = stock;
            EiRawOption = eiRaw;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Issued document item id
        /// </summary>
        /// <value>Issued document item id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ProductId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProductIdOption { get; private set; }

        /// <summary>
        /// Issued document item product id
        /// </summary>
        /// <value>Issued document item product id</value>
        /* <example>1234</example> */
        [JsonPropertyName("product_id")]
        public int? ProductId { get { return this.ProductIdOption; } set { this.ProductIdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodeOption { get; private set; }

        /// <summary>
        /// Issued document item product code
        /// </summary>
        /// <value>Issued document item product code</value>
        /* <example>239874892374982</example> */
        [JsonPropertyName("code")]
        public string Code { get { return this.CodeOption; } set { this.CodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Issued document item product name
        /// </summary>
        /// <value>Issued document item product name</value>
        /* <example>Water bottle</example> */
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Category
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CategoryOption { get; private set; }

        /// <summary>
        /// Issued document item product category
        /// </summary>
        /// <value>Issued document item product category</value>
        [JsonPropertyName("category")]
        public string Category { get { return this.CategoryOption; } set { this.CategoryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Issued document product description
        /// </summary>
        /// <value>Issued document product description</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Qty
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> QtyOption { get; private set; }

        /// <summary>
        /// Issued document item quantity
        /// </summary>
        /// <value>Issued document item quantity</value>
        [JsonPropertyName("qty")]
        public decimal? Qty { get { return this.QtyOption; } set { this.QtyOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Measure
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MeasureOption { get; private set; }

        /// <summary>
        /// Issued document item measure
        /// </summary>
        /// <value>Issued document item measure</value>
        [JsonPropertyName("measure")]
        public string Measure { get { return this.MeasureOption; } set { this.MeasureOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NetPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> NetPriceOption { get; private set; }

        /// <summary>
        /// Issued document item net price
        /// </summary>
        /// <value>Issued document item net price</value>
        /* <example>1.23</example> */
        [JsonPropertyName("net_price")]
        public decimal? NetPrice { get { return this.NetPriceOption; } set { this.NetPriceOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of GrossPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> GrossPriceOption { get; private set; }

        /// <summary>
        /// Issued document item gross price
        /// </summary>
        /// <value>Issued document item gross price</value>
        /* <example>1.45</example> */
        [JsonPropertyName("gross_price")]
        public decimal? GrossPrice { get { return this.GrossPriceOption; } set { this.GrossPriceOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Vat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatType> VatOption { get; private set; }

        /// <summary>
        /// Gets or Sets Vat
        /// </summary>
        [JsonPropertyName("vat")]
        public VatType Vat { get { return this.VatOption; } set { this.VatOption = new Option<VatType>(value); } }

        /// <summary>
        /// Used to track the state of NotTaxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NotTaxableOption { get; private set; }

        /// <summary>
        /// Issued document item is not taxable
        /// </summary>
        /// <value>Issued document item is not taxable</value>
        [JsonPropertyName("not_taxable")]
        public bool? NotTaxable { get { return this.NotTaxableOption; } set { this.NotTaxableOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ApplyWithholdingTaxes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ApplyWithholdingTaxesOption { get; private set; }

        /// <summary>
        /// Issued document item apply withholding taxes, rivalsa and cassa
        /// </summary>
        /// <value>Issued document item apply withholding taxes, rivalsa and cassa</value>
        [JsonPropertyName("apply_withholding_taxes")]
        public bool? ApplyWithholdingTaxes { get { return this.ApplyWithholdingTaxesOption; } set { this.ApplyWithholdingTaxesOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Discount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> DiscountOption { get; private set; }

        /// <summary>
        /// Issued document item discount percentual value
        /// </summary>
        /// <value>Issued document item discount percentual value</value>
        [JsonPropertyName("discount")]
        public decimal? Discount { get { return this.DiscountOption; } set { this.DiscountOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of DiscountHighlight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DiscountHighlightOption { get; private set; }

        /// <summary>
        /// Issued document item highlight discount
        /// </summary>
        /// <value>Issued document item highlight discount</value>
        [JsonPropertyName("discount_highlight")]
        public bool? DiscountHighlight { get { return this.DiscountHighlightOption; } set { this.DiscountHighlightOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of InDn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InDnOption { get; private set; }

        /// <summary>
        /// Issued document item add in delivery note
        /// </summary>
        /// <value>Issued document item add in delivery note</value>
        [JsonPropertyName("in_dn")]
        public bool? InDn { get { return this.InDnOption; } set { this.InDnOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Stock
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StockOption { get; private set; }

        /// <summary>
        /// Issued document item move stock
        /// </summary>
        /// <value>Issued document item move stock</value>
        [JsonPropertyName("stock")]
        public bool? Stock { get { return this.StockOption; } set { this.StockOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of EiRaw
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object> EiRawOption { get; private set; }

        /// <summary>
        /// Issued document advanced raw attributes for e-invoices
        /// </summary>
        /// <value>Issued document advanced raw attributes for e-invoices</value>
        [JsonPropertyName("ei_raw")]
        public Object EiRaw { get { return this.EiRawOption; } set { this.EiRawOption = new Option<Object>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentItemsListItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  Measure: ").Append(Measure).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  GrossPrice: ").Append(GrossPrice).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("  NotTaxable: ").Append(NotTaxable).Append("\n");
            sb.Append("  ApplyWithholdingTaxes: ").Append(ApplyWithholdingTaxes).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  DiscountHighlight: ").Append(DiscountHighlight).Append("\n");
            sb.Append("  InDn: ").Append(InDn).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  EiRaw: ").Append(EiRaw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentItemsListItem" />
    /// </summary>
    public class IssuedDocumentItemsListItemJsonConverter : JsonConverter<IssuedDocumentItemsListItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="IssuedDocumentItemsListItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocumentItemsListItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<int?> productId = default;
            Option<string> code = default;
            Option<string> name = default;
            Option<string> category = default;
            Option<string> description = default;
            Option<decimal?> qty = default;
            Option<string> measure = default;
            Option<decimal?> netPrice = default;
            Option<decimal?> grossPrice = default;
            Option<VatType> vat = default;
            Option<bool?> notTaxable = default;
            Option<bool?> applyWithholdingTaxes = default;
            Option<decimal?> discount = default;
            Option<bool?> discountHighlight = default;
            Option<bool?> inDn = default;
            Option<bool?> stock = default;
            Option<Object> eiRaw = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "product_id":
                            productId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "code":
                            code = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "category":
                            category = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "qty":
                            qty = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "measure":
                            measure = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "net_price":
                            netPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "gross_price":
                            grossPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "vat":
                            vat = new Option<VatType>(JsonSerializer.Deserialize<VatType>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "not_taxable":
                            notTaxable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "apply_withholding_taxes":
                            applyWithholdingTaxes = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "discount":
                            discount = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "discount_highlight":
                            discountHighlight = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "in_dn":
                            inDn = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "stock":
                            stock = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ei_raw":
                            eiRaw = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new IssuedDocumentItemsListItem(id, productId, code, name, category, description, qty, measure, netPrice, grossPrice, vat, notTaxable, applyWithholdingTaxes, discount, discountHighlight, inDn, stock, eiRaw);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocumentItemsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentItemsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentItemsListItem issuedDocumentItemsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocumentItemsListItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocumentItemsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentItemsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocumentItemsListItem issuedDocumentItemsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocumentItemsListItem.IdOption.IsSet)
                if (issuedDocumentItemsListItem.IdOption.Value != null)
                    writer.WriteNumber("id", issuedDocumentItemsListItem.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (issuedDocumentItemsListItem.ProductIdOption.IsSet)
                if (issuedDocumentItemsListItem.ProductIdOption.Value != null)
                    writer.WriteNumber("product_id", issuedDocumentItemsListItem.ProductIdOption.Value.Value);
                else
                    writer.WriteNull("product_id");

            if (issuedDocumentItemsListItem.CodeOption.IsSet)
                if (issuedDocumentItemsListItem.CodeOption.Value != null)
                    writer.WriteString("code", issuedDocumentItemsListItem.Code);
                else
                    writer.WriteNull("code");

            if (issuedDocumentItemsListItem.NameOption.IsSet)
                if (issuedDocumentItemsListItem.NameOption.Value != null)
                    writer.WriteString("name", issuedDocumentItemsListItem.Name);
                else
                    writer.WriteNull("name");

            if (issuedDocumentItemsListItem.CategoryOption.IsSet)
                if (issuedDocumentItemsListItem.CategoryOption.Value != null)
                    writer.WriteString("category", issuedDocumentItemsListItem.Category);
                else
                    writer.WriteNull("category");

            if (issuedDocumentItemsListItem.DescriptionOption.IsSet)
                if (issuedDocumentItemsListItem.DescriptionOption.Value != null)
                    writer.WriteString("description", issuedDocumentItemsListItem.Description);
                else
                    writer.WriteNull("description");

            if (issuedDocumentItemsListItem.QtyOption.IsSet)
                if (issuedDocumentItemsListItem.QtyOption.Value != null)
                    writer.WriteNumber("qty", issuedDocumentItemsListItem.QtyOption.Value.Value);
                else
                    writer.WriteNull("qty");

            if (issuedDocumentItemsListItem.MeasureOption.IsSet)
                if (issuedDocumentItemsListItem.MeasureOption.Value != null)
                    writer.WriteString("measure", issuedDocumentItemsListItem.Measure);
                else
                    writer.WriteNull("measure");

            if (issuedDocumentItemsListItem.NetPriceOption.IsSet)
                if (issuedDocumentItemsListItem.NetPriceOption.Value != null)
                    writer.WriteNumber("net_price", issuedDocumentItemsListItem.NetPriceOption.Value.Value);
                else
                    writer.WriteNull("net_price");

            if (issuedDocumentItemsListItem.GrossPriceOption.IsSet)
                if (issuedDocumentItemsListItem.GrossPriceOption.Value != null)
                    writer.WriteNumber("gross_price", issuedDocumentItemsListItem.GrossPriceOption.Value.Value);
                else
                    writer.WriteNull("gross_price");

            if (issuedDocumentItemsListItem.VatOption.IsSet)
                if (issuedDocumentItemsListItem.VatOption.Value != null)
                {
                    writer.WritePropertyName("vat");
                    JsonSerializer.Serialize(writer, issuedDocumentItemsListItem.Vat, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("vat");
            if (issuedDocumentItemsListItem.NotTaxableOption.IsSet)
                if (issuedDocumentItemsListItem.NotTaxableOption.Value != null)
                    writer.WriteBoolean("not_taxable", issuedDocumentItemsListItem.NotTaxableOption.Value.Value);
                else
                    writer.WriteNull("not_taxable");

            if (issuedDocumentItemsListItem.ApplyWithholdingTaxesOption.IsSet)
                if (issuedDocumentItemsListItem.ApplyWithholdingTaxesOption.Value != null)
                    writer.WriteBoolean("apply_withholding_taxes", issuedDocumentItemsListItem.ApplyWithholdingTaxesOption.Value.Value);
                else
                    writer.WriteNull("apply_withholding_taxes");

            if (issuedDocumentItemsListItem.DiscountOption.IsSet)
                if (issuedDocumentItemsListItem.DiscountOption.Value != null)
                    writer.WriteNumber("discount", issuedDocumentItemsListItem.DiscountOption.Value.Value);
                else
                    writer.WriteNull("discount");

            if (issuedDocumentItemsListItem.DiscountHighlightOption.IsSet)
                if (issuedDocumentItemsListItem.DiscountHighlightOption.Value != null)
                    writer.WriteBoolean("discount_highlight", issuedDocumentItemsListItem.DiscountHighlightOption.Value.Value);
                else
                    writer.WriteNull("discount_highlight");

            if (issuedDocumentItemsListItem.InDnOption.IsSet)
                if (issuedDocumentItemsListItem.InDnOption.Value != null)
                    writer.WriteBoolean("in_dn", issuedDocumentItemsListItem.InDnOption.Value.Value);
                else
                    writer.WriteNull("in_dn");

            if (issuedDocumentItemsListItem.StockOption.IsSet)
                if (issuedDocumentItemsListItem.StockOption.Value != null)
                    writer.WriteBoolean("stock", issuedDocumentItemsListItem.StockOption.Value.Value);
                else
                    writer.WriteNull("stock");

            if (issuedDocumentItemsListItem.EiRawOption.IsSet)
                if (issuedDocumentItemsListItem.EiRawOption.Value != null)
                {
                    writer.WritePropertyName("ei_raw");
                    JsonSerializer.Serialize(writer, issuedDocumentItemsListItem.EiRaw, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ei_raw");
        }
    }
}
