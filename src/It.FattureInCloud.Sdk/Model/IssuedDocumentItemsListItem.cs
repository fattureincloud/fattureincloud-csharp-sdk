/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     IssuedDocumentItemsListItem
    /// </summary>
    [DataContract(Name = "IssuedDocumentItemsListItem")]
    public class IssuedDocumentItemsListItem : IEquatable<IssuedDocumentItemsListItem>, IValidatableObject
    {
        private bool? _ApplyWithholdingTaxes;
        private string _Category;
        private string _Code;
        private string _Description;
        private decimal? _Discount;
        private bool? _DiscountHighlight;
        private Object _EiRaw;
        private bool _flagApplyWithholdingTaxes;
        private bool _flagCategory;
        private bool _flagCode;
        private bool _flagDescription;
        private bool _flagDiscount;
        private bool _flagDiscountHighlight;
        private bool _flagEiRaw;
        private bool _flagGrossPrice;
        private bool _flagId;
        private bool _flagInDdt;
        private bool _flagMeasure;
        private bool _flagName;
        private bool _flagNetPrice;
        private bool _flagNotTaxable;
        private bool _flagProductId;
        private bool _flagQty;
        private bool _flagStock;
        private bool _flagVat;
        private decimal? _GrossPrice;
        private int? _Id;
        private bool? _InDdt;
        private string _Measure;
        private string _Name;
        private decimal? _NetPrice;
        private bool? _NotTaxable;
        private int? _ProductId;
        private decimal? _Qty;
        private bool? _Stock;
        private VatType _Vat;

        /// <summary>
        ///     Initializes a new instance of the <see cref="IssuedDocumentItemsListItem" /> class.
        /// </summary>
        /// <param name="id">Unique identifier..</param>
        /// <param name="productId">Unique identifier of the product..</param>
        /// <param name="code">Product code..</param>
        /// <param name="name">Product name..</param>
        /// <param name="category">Product category.</param>
        /// <param name="description">Product description..</param>
        /// <param name="qty">Items quantity,.</param>
        /// <param name="measure">Item measure..</param>
        /// <param name="netPrice">Net price..</param>
        /// <param name="grossPrice">Gross price..</param>
        /// <param name="vat">vat.</param>
        /// <param name="notTaxable">notTaxable.</param>
        /// <param name="applyWithholdingTaxes">Apply withholding taxes, rivalsa and cassa..</param>
        /// <param name="discount">Discount percentual value..</param>
        /// <param name="discountHighlight">discountHighlight.</param>
        /// <param name="inDdt">inDdt.</param>
        /// <param name="stock">stock.</param>
        /// <param name="eiRaw">Advanced raw attributes for e-invoices..</param>
        public IssuedDocumentItemsListItem(int? id = default(int?), int? productId = default(int?),
            string code = default(string), string name = default(string), string category = default(string),
            string description = default(string), decimal? qty = default(decimal?), string measure = default(string),
            decimal? netPrice = default(decimal?), decimal? grossPrice = default(decimal?), VatType vat = default,
            bool? notTaxable = default(bool?), bool? applyWithholdingTaxes = default(bool?),
            decimal? discount = default(decimal?), bool? discountHighlight = default(bool?),
            bool? inDdt = default(bool?), bool? stock = default(bool?), Object eiRaw = default(Object))
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _ProductId = productId;
            if (ProductId != null) _flagProductId = true;
            _Code = code;
            if (Code != null) _flagCode = true;
            _Name = name;
            if (Name != null) _flagName = true;
            _Category = category;
            if (Category != null) _flagCategory = true;
            _Description = description;
            if (Description != null) _flagDescription = true;
            _Qty = qty;
            if (Qty != null) _flagQty = true;
            _Measure = measure;
            if (Measure != null) _flagMeasure = true;
            _NetPrice = netPrice;
            if (NetPrice != null) _flagNetPrice = true;
            _GrossPrice = grossPrice;
            if (GrossPrice != null) _flagGrossPrice = true;
            _Vat = vat;
            if (Vat != null) _flagVat = true;
            _NotTaxable = notTaxable;
            if (NotTaxable != null) _flagNotTaxable = true;
            _ApplyWithholdingTaxes = applyWithholdingTaxes;
            if (ApplyWithholdingTaxes != null) _flagApplyWithholdingTaxes = true;
            _Discount = discount;
            if (Discount != null) _flagDiscount = true;
            _DiscountHighlight = discountHighlight;
            if (DiscountHighlight != null) _flagDiscountHighlight = true;
            _InDdt = inDdt;
            if (InDdt != null) _flagInDdt = true;
            _Stock = stock;
            if (Stock != null) _flagStock = true;
            _EiRaw = eiRaw;
            if (EiRaw != null) _flagEiRaw = true;
        }

        /// <summary>
        ///     Unique identifier.
        /// </summary>
        /// <value>Unique identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Unique identifier of the product.
        /// </summary>
        /// <value>Unique identifier of the product.</value>
        [DataMember(Name = "product_id", EmitDefaultValue = true)]
        public int? ProductId
        {
            get => _ProductId;
            set
            {
                _ProductId = value;
                _flagProductId = true;
            }
        }

        /// <summary>
        ///     Product code.
        /// </summary>
        /// <value>Product code.</value>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code
        {
            get => _Code;
            set
            {
                _Code = value;
                _flagCode = true;
            }
        }

        /// <summary>
        ///     Product name.
        /// </summary>
        /// <value>Product name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get => _Name;
            set
            {
                _Name = value;
                _flagName = true;
            }
        }

        /// <summary>
        ///     Product category
        /// </summary>
        /// <value>Product category</value>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category
        {
            get => _Category;
            set
            {
                _Category = value;
                _flagCategory = true;
            }
        }

        /// <summary>
        ///     Product description.
        /// </summary>
        /// <value>Product description.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get => _Description;
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }

        /// <summary>
        ///     Items quantity,
        /// </summary>
        /// <value>Items quantity,</value>
        [DataMember(Name = "qty", EmitDefaultValue = true)]
        public decimal? Qty
        {
            get => _Qty;
            set
            {
                _Qty = value;
                _flagQty = true;
            }
        }

        /// <summary>
        ///     Item measure.
        /// </summary>
        /// <value>Item measure.</value>
        [DataMember(Name = "measure", EmitDefaultValue = true)]
        public string Measure
        {
            get => _Measure;
            set
            {
                _Measure = value;
                _flagMeasure = true;
            }
        }

        /// <summary>
        ///     Net price.
        /// </summary>
        /// <value>Net price.</value>
        [DataMember(Name = "net_price", EmitDefaultValue = true)]
        public decimal? NetPrice
        {
            get => _NetPrice;
            set
            {
                _NetPrice = value;
                _flagNetPrice = true;
            }
        }

        /// <summary>
        ///     Gross price.
        /// </summary>
        /// <value>Gross price.</value>
        [DataMember(Name = "gross_price", EmitDefaultValue = true)]
        public decimal? GrossPrice
        {
            get => _GrossPrice;
            set
            {
                _GrossPrice = value;
                _flagGrossPrice = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Vat
        /// </summary>
        [DataMember(Name = "vat", EmitDefaultValue = true)]
        public VatType Vat
        {
            get => _Vat;
            set
            {
                _Vat = value;
                _flagVat = true;
            }
        }

        /// <summary>
        ///     Gets or Sets NotTaxable
        /// </summary>
        [DataMember(Name = "not_taxable", EmitDefaultValue = true)]
        public bool? NotTaxable
        {
            get => _NotTaxable;
            set
            {
                _NotTaxable = value;
                _flagNotTaxable = true;
            }
        }

        /// <summary>
        ///     Apply withholding taxes, rivalsa and cassa.
        /// </summary>
        /// <value>Apply withholding taxes, rivalsa and cassa.</value>
        [DataMember(Name = "apply_withholding_taxes", EmitDefaultValue = true)]
        public bool? ApplyWithholdingTaxes
        {
            get => _ApplyWithholdingTaxes;
            set
            {
                _ApplyWithholdingTaxes = value;
                _flagApplyWithholdingTaxes = true;
            }
        }

        /// <summary>
        ///     Discount percentual value.
        /// </summary>
        /// <value>Discount percentual value.</value>
        [DataMember(Name = "discount", EmitDefaultValue = true)]
        public decimal? Discount
        {
            get => _Discount;
            set
            {
                _Discount = value;
                _flagDiscount = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DiscountHighlight
        /// </summary>
        [DataMember(Name = "discount_highlight", EmitDefaultValue = true)]
        public bool? DiscountHighlight
        {
            get => _DiscountHighlight;
            set
            {
                _DiscountHighlight = value;
                _flagDiscountHighlight = true;
            }
        }

        /// <summary>
        ///     Gets or Sets InDdt
        /// </summary>
        [DataMember(Name = "in_ddt", EmitDefaultValue = true)]
        public bool? InDdt
        {
            get => _InDdt;
            set
            {
                _InDdt = value;
                _flagInDdt = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Stock
        /// </summary>
        [DataMember(Name = "stock", EmitDefaultValue = true)]
        public bool? Stock
        {
            get => _Stock;
            set
            {
                _Stock = value;
                _flagStock = true;
            }
        }

        /// <summary>
        ///     Advanced raw attributes for e-invoices.
        /// </summary>
        /// <value>Advanced raw attributes for e-invoices.</value>
        [DataMember(Name = "ei_raw", EmitDefaultValue = true)]
        public Object EiRaw
        {
            get => _EiRaw;
            set
            {
                _EiRaw = value;
                _flagEiRaw = true;
            }
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as ProductId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProductId()
        {
            return _flagProductId;
        }

        /// <summary>
        ///     Returns false as Code should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCode()
        {
            return _flagCode;
        }

        /// <summary>
        ///     Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }

        /// <summary>
        ///     Returns false as Category should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategory()
        {
            return _flagCategory;
        }

        /// <summary>
        ///     Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }

        /// <summary>
        ///     Returns false as Qty should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQty()
        {
            return _flagQty;
        }

        /// <summary>
        ///     Returns false as Measure should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMeasure()
        {
            return _flagMeasure;
        }

        /// <summary>
        ///     Returns false as NetPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNetPrice()
        {
            return _flagNetPrice;
        }

        /// <summary>
        ///     Returns false as GrossPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGrossPrice()
        {
            return _flagGrossPrice;
        }

        /// <summary>
        ///     Returns false as Vat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVat()
        {
            return _flagVat;
        }

        /// <summary>
        ///     Returns false as NotTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotTaxable()
        {
            return _flagNotTaxable;
        }

        /// <summary>
        ///     Returns false as ApplyWithholdingTaxes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplyWithholdingTaxes()
        {
            return _flagApplyWithholdingTaxes;
        }

        /// <summary>
        ///     Returns false as Discount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDiscount()
        {
            return _flagDiscount;
        }

        /// <summary>
        ///     Returns false as DiscountHighlight should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDiscountHighlight()
        {
            return _flagDiscountHighlight;
        }

        /// <summary>
        ///     Returns false as InDdt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInDdt()
        {
            return _flagInDdt;
        }

        /// <summary>
        ///     Returns false as Stock should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStock()
        {
            return _flagStock;
        }

        /// <summary>
        ///     Returns false as EiRaw should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiRaw()
        {
            return _flagEiRaw;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentItemsListItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  Measure: ").Append(Measure).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  GrossPrice: ").Append(GrossPrice).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("  NotTaxable: ").Append(NotTaxable).Append("\n");
            sb.Append("  ApplyWithholdingTaxes: ").Append(ApplyWithholdingTaxes).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  DiscountHighlight: ").Append(DiscountHighlight).Append("\n");
            sb.Append("  InDdt: ").Append(InDdt).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  EiRaw: ").Append(EiRaw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as IssuedDocumentItemsListItem);
        }

        /// <summary>
        ///     Returns true if IssuedDocumentItemsListItem instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentItemsListItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentItemsListItem input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    ProductId == input.ProductId ||
                    (ProductId != null &&
                     ProductId.Equals(input.ProductId))
                ) &&
                (
                    Code == input.Code ||
                    (Code != null &&
                     Code.Equals(input.Code))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Category == input.Category ||
                    (Category != null &&
                     Category.Equals(input.Category))
                ) &&
                (
                    Description == input.Description ||
                    (Description != null &&
                     Description.Equals(input.Description))
                ) &&
                (
                    Qty == input.Qty ||
                    (Qty != null &&
                     Qty.Equals(input.Qty))
                ) &&
                (
                    Measure == input.Measure ||
                    (Measure != null &&
                     Measure.Equals(input.Measure))
                ) &&
                (
                    NetPrice == input.NetPrice ||
                    (NetPrice != null &&
                     NetPrice.Equals(input.NetPrice))
                ) &&
                (
                    GrossPrice == input.GrossPrice ||
                    (GrossPrice != null &&
                     GrossPrice.Equals(input.GrossPrice))
                ) &&
                (
                    Vat == input.Vat ||
                    (Vat != null &&
                     Vat.Equals(input.Vat))
                ) &&
                (
                    NotTaxable == input.NotTaxable ||
                    (NotTaxable != null &&
                     NotTaxable.Equals(input.NotTaxable))
                ) &&
                (
                    ApplyWithholdingTaxes == input.ApplyWithholdingTaxes ||
                    (ApplyWithholdingTaxes != null &&
                     ApplyWithholdingTaxes.Equals(input.ApplyWithholdingTaxes))
                ) &&
                (
                    Discount == input.Discount ||
                    (Discount != null &&
                     Discount.Equals(input.Discount))
                ) &&
                (
                    DiscountHighlight == input.DiscountHighlight ||
                    (DiscountHighlight != null &&
                     DiscountHighlight.Equals(input.DiscountHighlight))
                ) &&
                (
                    InDdt == input.InDdt ||
                    (InDdt != null &&
                     InDdt.Equals(input.InDdt))
                ) &&
                (
                    Stock == input.Stock ||
                    (Stock != null &&
                     Stock.Equals(input.Stock))
                ) &&
                (
                    EiRaw == input.EiRaw ||
                    (EiRaw != null &&
                     EiRaw.Equals(input.EiRaw))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (ProductId != null) hashCode = hashCode * 59 + ProductId.GetHashCode();
                if (Code != null) hashCode = hashCode * 59 + Code.GetHashCode();
                if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
                if (Category != null) hashCode = hashCode * 59 + Category.GetHashCode();
                if (Description != null) hashCode = hashCode * 59 + Description.GetHashCode();
                if (Qty != null) hashCode = hashCode * 59 + Qty.GetHashCode();
                if (Measure != null) hashCode = hashCode * 59 + Measure.GetHashCode();
                if (NetPrice != null) hashCode = hashCode * 59 + NetPrice.GetHashCode();
                if (GrossPrice != null) hashCode = hashCode * 59 + GrossPrice.GetHashCode();
                if (Vat != null) hashCode = hashCode * 59 + Vat.GetHashCode();
                if (NotTaxable != null) hashCode = hashCode * 59 + NotTaxable.GetHashCode();
                if (ApplyWithholdingTaxes != null) hashCode = hashCode * 59 + ApplyWithholdingTaxes.GetHashCode();
                if (Discount != null) hashCode = hashCode * 59 + Discount.GetHashCode();
                if (DiscountHighlight != null) hashCode = hashCode * 59 + DiscountHighlight.GetHashCode();
                if (InDdt != null) hashCode = hashCode * 59 + InDdt.GetHashCode();
                if (Stock != null) hashCode = hashCode * 59 + Stock.GetHashCode();
                if (EiRaw != null) hashCode = hashCode * 59 + EiRaw.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}