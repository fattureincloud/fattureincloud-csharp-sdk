// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ArchiveDocument
    /// </summary>
    public partial class ArchiveDocument : IEquatable<ArchiveDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArchiveDocument" /> class.
        /// </summary>
        /// <param name="id">Archive document id</param>
        /// <param name="date">Archive document date</param>
        /// <param name="description">Archive Document description</param>
        /// <param name="attachmentUrl">[Temporary] [Read Only] Archive Document url of the attached file</param>
        /// <param name="category">Archive document category</param>
        /// <param name="attachmentToken">[Write Only]  [Required] Archive document attachment token returned by POST /archive/attachment</param>
        [JsonConstructor]
        public ArchiveDocument(Option<int?> id = default, Option<DateTimeOffset?> date = default, Option<string> description = default, Option<string> attachmentUrl = default, Option<string> category = default, Option<string> attachmentToken = default)
        {
            IdOption = id;
            DateOption = date;
            DescriptionOption = description;
            AttachmentUrlOption = attachmentUrl;
            CategoryOption = category;
            AttachmentTokenOption = attachmentToken;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Archive document id
        /// </summary>
        /// <value>Archive document id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> DateOption { get; private set; }

        /// <summary>
        /// Archive document date
        /// </summary>
        /// <value>Archive document date</value>
        [JsonPropertyName("date")]
        public DateTimeOffset? Date { get { return this.DateOption; } set { this.DateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Archive Document description
        /// </summary>
        /// <value>Archive Document description</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AttachmentUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AttachmentUrlOption { get; }

        /// <summary>
        /// [Temporary] [Read Only] Archive Document url of the attached file
        /// </summary>
        /// <value>[Temporary] [Read Only] Archive Document url of the attached file</value>
        [JsonPropertyName("attachment_url")]
        public string AttachmentUrl { get { return this.AttachmentUrlOption; } }

        /// <summary>
        /// Used to track the state of Category
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CategoryOption { get; private set; }

        /// <summary>
        /// Archive document category
        /// </summary>
        /// <value>Archive document category</value>
        [JsonPropertyName("category")]
        public string Category { get { return this.CategoryOption; } set { this.CategoryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AttachmentToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AttachmentTokenOption { get; private set; }

        /// <summary>
        /// [Write Only]  [Required] Archive document attachment token returned by POST /archive/attachment
        /// </summary>
        /// <value>[Write Only]  [Required] Archive document attachment token returned by POST /archive/attachment</value>
        [JsonPropertyName("attachment_token")]
        public string AttachmentToken { get { return this.AttachmentTokenOption; } set { this.AttachmentTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ArchiveDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  AttachmentToken: ").Append(AttachmentToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArchiveDocument);
        }

        /// <summary>
        /// Returns true if ArchiveDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of ArchiveDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArchiveDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    AttachmentUrl == input.AttachmentUrl ||
                    (AttachmentUrl != null &&
                    AttachmentUrl.Equals(input.AttachmentUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (AttachmentUrl != null)
                    hashCode = (hashCode * 59) + AttachmentUrl.GetHashCode();


                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="ArchiveDocument" />
    /// </summary>
    public class ArchiveDocumentJsonConverter : JsonConverter<ArchiveDocument>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="ArchiveDocument" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ArchiveDocument Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<DateTimeOffset?> date = default;
            Option<string> description = default;
            Option<string> attachmentUrl = default;
            Option<string> category = default;
            Option<string> attachmentToken = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "date":
                            date = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "attachment_url":
                            attachmentUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "category":
                            category = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "attachment_token":
                            attachmentToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ArchiveDocument(id, date, description, attachmentUrl, category, attachmentToken);
        }

        /// <summary>
        /// Serializes a <see cref="ArchiveDocument" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="archiveDocument"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ArchiveDocument archiveDocument, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, archiveDocument, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ArchiveDocument" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="archiveDocument"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ArchiveDocument archiveDocument, JsonSerializerOptions jsonSerializerOptions)
        {
            if (archiveDocument.IdOption.IsSet)
                if (archiveDocument.IdOption.Value != null)
                    writer.WriteNumber("id", archiveDocument.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (archiveDocument.DateOption.IsSet)
                if (archiveDocument.DateOption.Value != null)
                    writer.WriteString("date", archiveDocument.DateOption.Value.Value.ToString(DateFormat));
                else
                    writer.WriteNull("date");

            if (archiveDocument.DescriptionOption.IsSet)
                if (archiveDocument.DescriptionOption.Value != null)
                    writer.WriteString("description", archiveDocument.Description);
                else
                    writer.WriteNull("description");

            if (archiveDocument.AttachmentUrlOption.IsSet)
                if (archiveDocument.AttachmentUrlOption.Value != null)
                    writer.WriteString("attachment_url", archiveDocument.AttachmentUrl);
                else
                    writer.WriteNull("attachment_url");

            if (archiveDocument.CategoryOption.IsSet)
                if (archiveDocument.CategoryOption.Value != null)
                    writer.WriteString("category", archiveDocument.Category);
                else
                    writer.WriteNull("category");

            if (archiveDocument.AttachmentTokenOption.IsSet)
                if (archiveDocument.AttachmentTokenOption.Value != null)
                    writer.WriteString("attachment_token", archiveDocument.AttachmentToken);
                else
                    writer.WriteNull("attachment_token");
        }
    }
}
