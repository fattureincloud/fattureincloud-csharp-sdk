// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Supplier
    /// </summary>
    public partial class Supplier : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Supplier" /> class.
        /// </summary>
        /// <param name="id">Supplier id</param>
        /// <param name="code">Supplier code</param>
        /// <param name="name">Supplier name</param>
        /// <param name="type">type</param>
        /// <param name="firstName">Supplier first name</param>
        /// <param name="lastName">Supplier last name</param>
        /// <param name="contactPerson">Supplier contact person</param>
        /// <param name="vatNumber">Supplier vat number</param>
        /// <param name="taxCode">Supplier tax code</param>
        /// <param name="addressStreet">Supplier street address</param>
        /// <param name="addressPostalCode">Supplier postal code</param>
        /// <param name="addressCity">Supplier city</param>
        /// <param name="addressProvince">Supplier province</param>
        /// <param name="addressExtra">Supplier address extra info</param>
        /// <param name="country">Supplier country</param>
        /// <param name="countryIso">Supplier country iso code</param>
        /// <param name="email">Supplier email</param>
        /// <param name="certifiedEmail">Supplier certified email</param>
        /// <param name="phone">Supplier phone</param>
        /// <param name="fax">Supplier fax</param>
        /// <param name="notes">Supplier extra notes</param>
        /// <param name="bankIban">Supplier bank IBAN</param>
        /// <param name="createdAt">Supplier creation date</param>
        /// <param name="updatedAt">Supplier last update date</param>
        [JsonConstructor]
        public Supplier(Option<int?> id = default, Option<string> code = default, Option<string> name = default, Option<SupplierType?> type = default, Option<string> firstName = default, Option<string> lastName = default, Option<string> contactPerson = default, Option<string> vatNumber = default, Option<string> taxCode = default, Option<string> addressStreet = default, Option<string> addressPostalCode = default, Option<string> addressCity = default, Option<string> addressProvince = default, Option<string> addressExtra = default, Option<string> country = default, Option<string> countryIso = default, Option<string> email = default, Option<string> certifiedEmail = default, Option<string> phone = default, Option<string> fax = default, Option<string> notes = default, Option<string> bankIban = default, Option<string> createdAt = default, Option<string> updatedAt = default)
        {
            IdOption = id;
            CodeOption = code;
            NameOption = name;
            TypeOption = type;
            FirstNameOption = firstName;
            LastNameOption = lastName;
            ContactPersonOption = contactPerson;
            VatNumberOption = vatNumber;
            TaxCodeOption = taxCode;
            AddressStreetOption = addressStreet;
            AddressPostalCodeOption = addressPostalCode;
            AddressCityOption = addressCity;
            AddressProvinceOption = addressProvince;
            AddressExtraOption = addressExtra;
            CountryOption = country;
            CountryIsoOption = countryIso;
            EmailOption = email;
            CertifiedEmailOption = certifiedEmail;
            PhoneOption = phone;
            FaxOption = fax;
            NotesOption = notes;
            BankIbanOption = bankIban;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SupplierType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public SupplierType? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<SupplierType?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Supplier id
        /// </summary>
        /// <value>Supplier id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodeOption { get; private set; }

        /// <summary>
        /// Supplier code
        /// </summary>
        /// <value>Supplier code</value>
        /* <example>123</example> */
        [JsonPropertyName("code")]
        public string Code { get { return this.CodeOption; } set { this.CodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Supplier name
        /// </summary>
        /// <value>Supplier name</value>
        /* <example>Rossi S.r.l.</example> */
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FirstNameOption { get; private set; }

        /// <summary>
        /// Supplier first name
        /// </summary>
        /// <value>Supplier first name</value>
        [JsonPropertyName("first_name")]
        public string FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LastNameOption { get; private set; }

        /// <summary>
        /// Supplier last name
        /// </summary>
        /// <value>Supplier last name</value>
        [JsonPropertyName("last_name")]
        public string LastName { get { return this.LastNameOption; } set { this.LastNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ContactPerson
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContactPersonOption { get; private set; }

        /// <summary>
        /// Supplier contact person
        /// </summary>
        /// <value>Supplier contact person</value>
        [JsonPropertyName("contact_person")]
        public string ContactPerson { get { return this.ContactPersonOption; } set { this.ContactPersonOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VatNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> VatNumberOption { get; private set; }

        /// <summary>
        /// Supplier vat number
        /// </summary>
        /// <value>Supplier vat number</value>
        /* <example>IT01234567890</example> */
        [JsonPropertyName("vat_number")]
        public string VatNumber { get { return this.VatNumberOption; } set { this.VatNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TaxCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TaxCodeOption { get; private set; }

        /// <summary>
        /// Supplier tax code
        /// </summary>
        /// <value>Supplier tax code</value>
        /* <example>RSSMRA44A12E890Q</example> */
        [JsonPropertyName("tax_code")]
        public string TaxCode { get { return this.TaxCodeOption; } set { this.TaxCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressStreet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressStreetOption { get; private set; }

        /// <summary>
        /// Supplier street address
        /// </summary>
        /// <value>Supplier street address</value>
        /* <example>Via dei tigli, 12</example> */
        [JsonPropertyName("address_street")]
        public string AddressStreet { get { return this.AddressStreetOption; } set { this.AddressStreetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressPostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressPostalCodeOption { get; private set; }

        /// <summary>
        /// Supplier postal code
        /// </summary>
        /// <value>Supplier postal code</value>
        /* <example>24010</example> */
        [JsonPropertyName("address_postal_code")]
        public string AddressPostalCode { get { return this.AddressPostalCodeOption; } set { this.AddressPostalCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressCity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressCityOption { get; private set; }

        /// <summary>
        /// Supplier city
        /// </summary>
        /// <value>Supplier city</value>
        /* <example>Bergamo</example> */
        [JsonPropertyName("address_city")]
        public string AddressCity { get { return this.AddressCityOption; } set { this.AddressCityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressProvinceOption { get; private set; }

        /// <summary>
        /// Supplier province
        /// </summary>
        /// <value>Supplier province</value>
        /* <example>BG</example> */
        [JsonPropertyName("address_province")]
        public string AddressProvince { get { return this.AddressProvinceOption; } set { this.AddressProvinceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressExtra
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressExtraOption { get; private set; }

        /// <summary>
        /// Supplier address extra info
        /// </summary>
        /// <value>Supplier address extra info</value>
        [JsonPropertyName("address_extra")]
        public string AddressExtra { get { return this.AddressExtraOption; } set { this.AddressExtraOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Country
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryOption { get; private set; }

        /// <summary>
        /// Supplier country
        /// </summary>
        /// <value>Supplier country</value>
        /* <example>Italia</example> */
        [JsonPropertyName("country")]
        public string Country { get { return this.CountryOption; } set { this.CountryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CountryIso
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryIsoOption { get; private set; }

        /// <summary>
        /// Supplier country iso code
        /// </summary>
        /// <value>Supplier country iso code</value>
        /* <example>Italia</example> */
        [JsonPropertyName("country_iso")]
        public string CountryIso { get { return this.CountryIsoOption; } set { this.CountryIsoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EmailOption { get; private set; }

        /// <summary>
        /// Supplier email
        /// </summary>
        /// <value>Supplier email</value>
        /* <example>mario.rossi@example.it</example> */
        [JsonPropertyName("email")]
        public string Email { get { return this.EmailOption; } set { this.EmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CertifiedEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CertifiedEmailOption { get; private set; }

        /// <summary>
        /// Supplier certified email
        /// </summary>
        /// <value>Supplier certified email</value>
        /* <example>mario.rossi@pec.example.it</example> */
        [JsonPropertyName("certified_email")]
        public string CertifiedEmail { get { return this.CertifiedEmailOption; } set { this.CertifiedEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PhoneOption { get; private set; }

        /// <summary>
        /// Supplier phone
        /// </summary>
        /// <value>Supplier phone</value>
        [JsonPropertyName("phone")]
        public string Phone { get { return this.PhoneOption; } set { this.PhoneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Fax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FaxOption { get; private set; }

        /// <summary>
        /// Supplier fax
        /// </summary>
        /// <value>Supplier fax</value>
        [JsonPropertyName("fax")]
        public string Fax { get { return this.FaxOption; } set { this.FaxOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NotesOption { get; private set; }

        /// <summary>
        /// Supplier extra notes
        /// </summary>
        /// <value>Supplier extra notes</value>
        [JsonPropertyName("notes")]
        public string Notes { get { return this.NotesOption; } set { this.NotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BankIban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankIbanOption { get; private set; }

        /// <summary>
        /// Supplier bank IBAN
        /// </summary>
        /// <value>Supplier bank IBAN</value>
        [JsonPropertyName("bank_iban")]
        public string BankIban { get { return this.BankIbanOption; } set { this.BankIbanOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CreatedAtOption { get; private set; }

        /// <summary>
        /// Supplier creation date
        /// </summary>
        /// <value>Supplier creation date</value>
        [JsonPropertyName("created_at")]
        public string CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Supplier last update date
        /// </summary>
        /// <value>Supplier last update date</value>
        [JsonPropertyName("updated_at")]
        public string UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Supplier {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  AddressStreet: ").Append(AddressStreet).Append("\n");
            sb.Append("  AddressPostalCode: ").Append(AddressPostalCode).Append("\n");
            sb.Append("  AddressCity: ").Append(AddressCity).Append("\n");
            sb.Append("  AddressProvince: ").Append(AddressProvince).Append("\n");
            sb.Append("  AddressExtra: ").Append(AddressExtra).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryIso: ").Append(CountryIso).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CertifiedEmail: ").Append(CertifiedEmail).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  BankIban: ").Append(BankIban).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="Supplier" />
    /// </summary>
    public class SupplierJsonConverter : JsonConverter<Supplier>
    {
        /// <summary>
        /// Deserializes json to <see cref="Supplier" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Supplier Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string> code = default;
            Option<string> name = default;
            Option<SupplierType?> type = default;
            Option<string> firstName = default;
            Option<string> lastName = default;
            Option<string> contactPerson = default;
            Option<string> vatNumber = default;
            Option<string> taxCode = default;
            Option<string> addressStreet = default;
            Option<string> addressPostalCode = default;
            Option<string> addressCity = default;
            Option<string> addressProvince = default;
            Option<string> addressExtra = default;
            Option<string> country = default;
            Option<string> countryIso = default;
            Option<string> email = default;
            Option<string> certifiedEmail = default;
            Option<string> phone = default;
            Option<string> fax = default;
            Option<string> notes = default;
            Option<string> bankIban = default;
            Option<string> createdAt = default;
            Option<string> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "code":
                            code = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<SupplierType?>(SupplierTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "first_name":
                            firstName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "last_name":
                            lastName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contact_person":
                            contactPerson = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vat_number":
                            vatNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tax_code":
                            taxCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address_street":
                            addressStreet = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address_postal_code":
                            addressPostalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address_city":
                            addressCity = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address_province":
                            addressProvince = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address_extra":
                            addressExtra = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "country":
                            country = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "country_iso":
                            countryIso = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "certified_email":
                            certifiedEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phone":
                            phone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fax":
                            fax = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "notes":
                            notes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bank_iban":
                            bankIban = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "created_at":
                            createdAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new Supplier(id, code, name, type, firstName, lastName, contactPerson, vatNumber, taxCode, addressStreet, addressPostalCode, addressCity, addressProvince, addressExtra, country, countryIso, email, certifiedEmail, phone, fax, notes, bankIban, createdAt, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="Supplier" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="supplier"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Supplier supplier, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, supplier, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Supplier" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="supplier"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Supplier supplier, JsonSerializerOptions jsonSerializerOptions)
        {
            if (supplier.IdOption.IsSet)
                if (supplier.IdOption.Value != null)
                    writer.WriteNumber("id", supplier.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (supplier.CodeOption.IsSet)
                if (supplier.CodeOption.Value != null)
                    writer.WriteString("code", supplier.Code);
                else
                    writer.WriteNull("code");

            if (supplier.NameOption.IsSet)
                if (supplier.NameOption.Value != null)
                    writer.WriteString("name", supplier.Name);
                else
                    writer.WriteNull("name");

            if (supplier.TypeOption.IsSet)
                if (supplier.TypeOption.Value != null)
                {
                    var typeRawValue = SupplierTypeValueConverter.ToJsonValue(supplier.TypeOption.Value.Value);
                    writer.WriteString("type", typeRawValue);
                }
                else
                    writer.WriteNull("type");
            if (supplier.FirstNameOption.IsSet)
                if (supplier.FirstNameOption.Value != null)
                    writer.WriteString("first_name", supplier.FirstName);
                else
                    writer.WriteNull("first_name");

            if (supplier.LastNameOption.IsSet)
                if (supplier.LastNameOption.Value != null)
                    writer.WriteString("last_name", supplier.LastName);
                else
                    writer.WriteNull("last_name");

            if (supplier.ContactPersonOption.IsSet)
                if (supplier.ContactPersonOption.Value != null)
                    writer.WriteString("contact_person", supplier.ContactPerson);
                else
                    writer.WriteNull("contact_person");

            if (supplier.VatNumberOption.IsSet)
                if (supplier.VatNumberOption.Value != null)
                    writer.WriteString("vat_number", supplier.VatNumber);
                else
                    writer.WriteNull("vat_number");

            if (supplier.TaxCodeOption.IsSet)
                if (supplier.TaxCodeOption.Value != null)
                    writer.WriteString("tax_code", supplier.TaxCode);
                else
                    writer.WriteNull("tax_code");

            if (supplier.AddressStreetOption.IsSet)
                if (supplier.AddressStreetOption.Value != null)
                    writer.WriteString("address_street", supplier.AddressStreet);
                else
                    writer.WriteNull("address_street");

            if (supplier.AddressPostalCodeOption.IsSet)
                if (supplier.AddressPostalCodeOption.Value != null)
                    writer.WriteString("address_postal_code", supplier.AddressPostalCode);
                else
                    writer.WriteNull("address_postal_code");

            if (supplier.AddressCityOption.IsSet)
                if (supplier.AddressCityOption.Value != null)
                    writer.WriteString("address_city", supplier.AddressCity);
                else
                    writer.WriteNull("address_city");

            if (supplier.AddressProvinceOption.IsSet)
                if (supplier.AddressProvinceOption.Value != null)
                    writer.WriteString("address_province", supplier.AddressProvince);
                else
                    writer.WriteNull("address_province");

            if (supplier.AddressExtraOption.IsSet)
                if (supplier.AddressExtraOption.Value != null)
                    writer.WriteString("address_extra", supplier.AddressExtra);
                else
                    writer.WriteNull("address_extra");

            if (supplier.CountryOption.IsSet)
                if (supplier.CountryOption.Value != null)
                    writer.WriteString("country", supplier.Country);
                else
                    writer.WriteNull("country");

            if (supplier.CountryIsoOption.IsSet)
                if (supplier.CountryIsoOption.Value != null)
                    writer.WriteString("country_iso", supplier.CountryIso);
                else
                    writer.WriteNull("country_iso");

            if (supplier.EmailOption.IsSet)
                if (supplier.EmailOption.Value != null)
                    writer.WriteString("email", supplier.Email);
                else
                    writer.WriteNull("email");

            if (supplier.CertifiedEmailOption.IsSet)
                if (supplier.CertifiedEmailOption.Value != null)
                    writer.WriteString("certified_email", supplier.CertifiedEmail);
                else
                    writer.WriteNull("certified_email");

            if (supplier.PhoneOption.IsSet)
                if (supplier.PhoneOption.Value != null)
                    writer.WriteString("phone", supplier.Phone);
                else
                    writer.WriteNull("phone");

            if (supplier.FaxOption.IsSet)
                if (supplier.FaxOption.Value != null)
                    writer.WriteString("fax", supplier.Fax);
                else
                    writer.WriteNull("fax");

            if (supplier.NotesOption.IsSet)
                if (supplier.NotesOption.Value != null)
                    writer.WriteString("notes", supplier.Notes);
                else
                    writer.WriteNull("notes");

            if (supplier.BankIbanOption.IsSet)
                if (supplier.BankIbanOption.Value != null)
                    writer.WriteString("bank_iban", supplier.BankIban);
                else
                    writer.WriteNull("bank_iban");

            if (supplier.CreatedAtOption.IsSet)
                if (supplier.CreatedAtOption.Value != null)
                    writer.WriteString("created_at", supplier.CreatedAt);
                else
                    writer.WriteNull("created_at");

            if (supplier.UpdatedAtOption.IsSet)
                if (supplier.UpdatedAtOption.Value != null)
                    writer.WriteString("updated_at", supplier.UpdatedAt);
                else
                    writer.WriteNull("updated_at");
        }
    }
}
