/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     Supplier
    /// </summary>
    [DataContract(Name = "Supplier")]
    public class Supplier : IEquatable<Supplier>, IValidatableObject
    {
        private string _AddressCity;
        private string _AddressExtra;
        private string _AddressPostalCode;
        private string _AddressProvince;
        private string _AddressStreet;
        private string _CertifiedEmail;
        private string _Code;
        private string _ContactPerson;
        private string _Country;
        private string _CreatedAt;
        private string _Email;
        private string _Fax;
        private string _FirstName;
        private bool _flagAddressCity;
        private bool _flagAddressExtra;
        private bool _flagAddressPostalCode;
        private bool _flagAddressProvince;
        private bool _flagAddressStreet;
        private bool _flagCertifiedEmail;
        private bool _flagCode;
        private bool _flagContactPerson;
        private bool _flagCountry;
        private bool _flagCreatedAt;
        private bool _flagEmail;
        private bool _flagFax;
        private bool _flagFirstName;
        private bool _flagId;
        private bool _flagLastName;
        private bool _flagName;
        private bool _flagNotes;
        private bool _flagPhone;
        private bool _flagTaxCode;
        private bool _flagType;
        private bool _flagUpdatedAt;
        private bool _flagVatNumber;
        private int? _Id;
        private string _LastName;
        private string _Name;
        private string _Notes;
        private string _Phone;
        private string _TaxCode;
        private SupplierType? _Type;
        private string _UpdatedAt;
        private string _VatNumber;

        /// <summary>
        ///     Initializes a new instance of the <see cref="Supplier" /> class.
        /// </summary>
        /// <param name="id">Unique identifier.</param>
        /// <param name="code">Supplier code..</param>
        /// <param name="name">Supplier name..</param>
        /// <param name="type">type.</param>
        /// <param name="firstName">Supplier first name..</param>
        /// <param name="lastName">Supplier last name..</param>
        /// <param name="contactPerson">contactPerson.</param>
        /// <param name="vatNumber">Supplier vat number..</param>
        /// <param name="taxCode">Supplier tax code..</param>
        /// <param name="addressStreet">Supplier street address..</param>
        /// <param name="addressPostalCode">Supplier postal code..</param>
        /// <param name="addressCity">Supplier city..</param>
        /// <param name="addressProvince">Supplier province..</param>
        /// <param name="addressExtra">Supplier address extra info..</param>
        /// <param name="country">Supplier country..</param>
        /// <param name="email">Supplier email..</param>
        /// <param name="certifiedEmail">Supplier certified email..</param>
        /// <param name="phone">Supplier phone..</param>
        /// <param name="fax">Supplier fax..</param>
        /// <param name="notes">Supplier extra notes..</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public Supplier(int? id = default(int?), string code = default(string), string name = default(string),
            SupplierType? type = default(SupplierType?), string firstName = default(string),
            string lastName = default(string), string contactPerson = default(string),
            string vatNumber = default(string), string taxCode = default(string),
            string addressStreet = default(string), string addressPostalCode = default(string),
            string addressCity = default(string), string addressProvince = default(string),
            string addressExtra = default(string), string country = default(string), string email = default(string),
            string certifiedEmail = default(string), string phone = default(string), string fax = default(string),
            string notes = default(string), string createdAt = default(string), string updatedAt = default(string))
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _Code = code;
            if (Code != null) _flagCode = true;
            _Name = name;
            if (Name != null) _flagName = true;
            _Type = type;
            if (Type != null) _flagType = true;
            _FirstName = firstName;
            if (FirstName != null) _flagFirstName = true;
            _LastName = lastName;
            if (LastName != null) _flagLastName = true;
            _ContactPerson = contactPerson;
            if (ContactPerson != null) _flagContactPerson = true;
            _VatNumber = vatNumber;
            if (VatNumber != null) _flagVatNumber = true;
            _TaxCode = taxCode;
            if (TaxCode != null) _flagTaxCode = true;
            _AddressStreet = addressStreet;
            if (AddressStreet != null) _flagAddressStreet = true;
            _AddressPostalCode = addressPostalCode;
            if (AddressPostalCode != null) _flagAddressPostalCode = true;
            _AddressCity = addressCity;
            if (AddressCity != null) _flagAddressCity = true;
            _AddressProvince = addressProvince;
            if (AddressProvince != null) _flagAddressProvince = true;
            _AddressExtra = addressExtra;
            if (AddressExtra != null) _flagAddressExtra = true;
            _Country = country;
            if (Country != null) _flagCountry = true;
            _Email = email;
            if (Email != null) _flagEmail = true;
            _CertifiedEmail = certifiedEmail;
            if (CertifiedEmail != null) _flagCertifiedEmail = true;
            _Phone = phone;
            if (Phone != null) _flagPhone = true;
            _Fax = fax;
            if (Fax != null) _flagFax = true;
            _Notes = notes;
            if (Notes != null) _flagNotes = true;
            _CreatedAt = createdAt;
            if (CreatedAt != null) _flagCreatedAt = true;
            _UpdatedAt = updatedAt;
            if (UpdatedAt != null) _flagUpdatedAt = true;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public SupplierType? Type
        {
            get => _Type;
            set
            {
                _Type = value;
                _flagType = true;
            }
        }

        /// <summary>
        ///     Unique identifier
        /// </summary>
        /// <value>Unique identifier</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Supplier code.
        /// </summary>
        /// <value>Supplier code.</value>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code
        {
            get => _Code;
            set
            {
                _Code = value;
                _flagCode = true;
            }
        }

        /// <summary>
        ///     Supplier name.
        /// </summary>
        /// <value>Supplier name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get => _Name;
            set
            {
                _Name = value;
                _flagName = true;
            }
        }

        /// <summary>
        ///     Supplier first name.
        /// </summary>
        /// <value>Supplier first name.</value>
        [DataMember(Name = "first_name", EmitDefaultValue = true)]
        public string FirstName
        {
            get => _FirstName;
            set
            {
                _FirstName = value;
                _flagFirstName = true;
            }
        }

        /// <summary>
        ///     Supplier last name.
        /// </summary>
        /// <value>Supplier last name.</value>
        [DataMember(Name = "last_name", EmitDefaultValue = true)]
        public string LastName
        {
            get => _LastName;
            set
            {
                _LastName = value;
                _flagLastName = true;
            }
        }

        /// <summary>
        ///     Gets or Sets ContactPerson
        /// </summary>
        [DataMember(Name = "contact_person", EmitDefaultValue = true)]
        public string ContactPerson
        {
            get => _ContactPerson;
            set
            {
                _ContactPerson = value;
                _flagContactPerson = true;
            }
        }

        /// <summary>
        ///     Supplier vat number.
        /// </summary>
        /// <value>Supplier vat number.</value>
        [DataMember(Name = "vat_number", EmitDefaultValue = true)]
        public string VatNumber
        {
            get => _VatNumber;
            set
            {
                _VatNumber = value;
                _flagVatNumber = true;
            }
        }

        /// <summary>
        ///     Supplier tax code.
        /// </summary>
        /// <value>Supplier tax code.</value>
        [DataMember(Name = "tax_code", EmitDefaultValue = true)]
        public string TaxCode
        {
            get => _TaxCode;
            set
            {
                _TaxCode = value;
                _flagTaxCode = true;
            }
        }

        /// <summary>
        ///     Supplier street address.
        /// </summary>
        /// <value>Supplier street address.</value>
        [DataMember(Name = "address_street", EmitDefaultValue = true)]
        public string AddressStreet
        {
            get => _AddressStreet;
            set
            {
                _AddressStreet = value;
                _flagAddressStreet = true;
            }
        }

        /// <summary>
        ///     Supplier postal code.
        /// </summary>
        /// <value>Supplier postal code.</value>
        [DataMember(Name = "address_postal_code", EmitDefaultValue = true)]
        public string AddressPostalCode
        {
            get => _AddressPostalCode;
            set
            {
                _AddressPostalCode = value;
                _flagAddressPostalCode = true;
            }
        }

        /// <summary>
        ///     Supplier city.
        /// </summary>
        /// <value>Supplier city.</value>
        [DataMember(Name = "address_city", EmitDefaultValue = true)]
        public string AddressCity
        {
            get => _AddressCity;
            set
            {
                _AddressCity = value;
                _flagAddressCity = true;
            }
        }

        /// <summary>
        ///     Supplier province.
        /// </summary>
        /// <value>Supplier province.</value>
        [DataMember(Name = "address_province", EmitDefaultValue = true)]
        public string AddressProvince
        {
            get => _AddressProvince;
            set
            {
                _AddressProvince = value;
                _flagAddressProvince = true;
            }
        }

        /// <summary>
        ///     Supplier address extra info.
        /// </summary>
        /// <value>Supplier address extra info.</value>
        [DataMember(Name = "address_extra", EmitDefaultValue = true)]
        public string AddressExtra
        {
            get => _AddressExtra;
            set
            {
                _AddressExtra = value;
                _flagAddressExtra = true;
            }
        }

        /// <summary>
        ///     Supplier country.
        /// </summary>
        /// <value>Supplier country.</value>
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public string Country
        {
            get => _Country;
            set
            {
                _Country = value;
                _flagCountry = true;
            }
        }

        /// <summary>
        ///     Supplier email.
        /// </summary>
        /// <value>Supplier email.</value>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email
        {
            get => _Email;
            set
            {
                _Email = value;
                _flagEmail = true;
            }
        }

        /// <summary>
        ///     Supplier certified email.
        /// </summary>
        /// <value>Supplier certified email.</value>
        [DataMember(Name = "certified_email", EmitDefaultValue = true)]
        public string CertifiedEmail
        {
            get => _CertifiedEmail;
            set
            {
                _CertifiedEmail = value;
                _flagCertifiedEmail = true;
            }
        }

        /// <summary>
        ///     Supplier phone.
        /// </summary>
        /// <value>Supplier phone.</value>
        [DataMember(Name = "phone", EmitDefaultValue = true)]
        public string Phone
        {
            get => _Phone;
            set
            {
                _Phone = value;
                _flagPhone = true;
            }
        }

        /// <summary>
        ///     Supplier fax.
        /// </summary>
        /// <value>Supplier fax.</value>
        [DataMember(Name = "fax", EmitDefaultValue = true)]
        public string Fax
        {
            get => _Fax;
            set
            {
                _Fax = value;
                _flagFax = true;
            }
        }

        /// <summary>
        ///     Supplier extra notes.
        /// </summary>
        /// <value>Supplier extra notes.</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes
        {
            get => _Notes;
            set
            {
                _Notes = value;
                _flagNotes = true;
            }
        }

        /// <summary>
        ///     Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt
        {
            get => _CreatedAt;
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }

        /// <summary>
        ///     Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt
        {
            get => _UpdatedAt;
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }

        /// <summary>
        ///     Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as Code should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCode()
        {
            return _flagCode;
        }

        /// <summary>
        ///     Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }

        /// <summary>
        ///     Returns false as FirstName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirstName()
        {
            return _flagFirstName;
        }

        /// <summary>
        ///     Returns false as LastName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastName()
        {
            return _flagLastName;
        }

        /// <summary>
        ///     Returns false as ContactPerson should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContactPerson()
        {
            return _flagContactPerson;
        }

        /// <summary>
        ///     Returns false as VatNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVatNumber()
        {
            return _flagVatNumber;
        }

        /// <summary>
        ///     Returns false as TaxCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTaxCode()
        {
            return _flagTaxCode;
        }

        /// <summary>
        ///     Returns false as AddressStreet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressStreet()
        {
            return _flagAddressStreet;
        }

        /// <summary>
        ///     Returns false as AddressPostalCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressPostalCode()
        {
            return _flagAddressPostalCode;
        }

        /// <summary>
        ///     Returns false as AddressCity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressCity()
        {
            return _flagAddressCity;
        }

        /// <summary>
        ///     Returns false as AddressProvince should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressProvince()
        {
            return _flagAddressProvince;
        }

        /// <summary>
        ///     Returns false as AddressExtra should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressExtra()
        {
            return _flagAddressExtra;
        }

        /// <summary>
        ///     Returns false as Country should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountry()
        {
            return _flagCountry;
        }

        /// <summary>
        ///     Returns false as Email should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmail()
        {
            return _flagEmail;
        }

        /// <summary>
        ///     Returns false as CertifiedEmail should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCertifiedEmail()
        {
            return _flagCertifiedEmail;
        }

        /// <summary>
        ///     Returns false as Phone should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePhone()
        {
            return _flagPhone;
        }

        /// <summary>
        ///     Returns false as Fax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFax()
        {
            return _flagFax;
        }

        /// <summary>
        ///     Returns false as Notes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotes()
        {
            return _flagNotes;
        }

        /// <summary>
        ///     Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }

        /// <summary>
        ///     Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Supplier {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  AddressStreet: ").Append(AddressStreet).Append("\n");
            sb.Append("  AddressPostalCode: ").Append(AddressPostalCode).Append("\n");
            sb.Append("  AddressCity: ").Append(AddressCity).Append("\n");
            sb.Append("  AddressProvince: ").Append(AddressProvince).Append("\n");
            sb.Append("  AddressExtra: ").Append(AddressExtra).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CertifiedEmail: ").Append(CertifiedEmail).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Supplier);
        }

        /// <summary>
        ///     Returns true if Supplier instances are equal
        /// </summary>
        /// <param name="input">Instance of Supplier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Supplier input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Code == input.Code ||
                    (Code != null &&
                     Code.Equals(input.Code))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    FirstName == input.FirstName ||
                    (FirstName != null &&
                     FirstName.Equals(input.FirstName))
                ) &&
                (
                    LastName == input.LastName ||
                    (LastName != null &&
                     LastName.Equals(input.LastName))
                ) &&
                (
                    ContactPerson == input.ContactPerson ||
                    (ContactPerson != null &&
                     ContactPerson.Equals(input.ContactPerson))
                ) &&
                (
                    VatNumber == input.VatNumber ||
                    (VatNumber != null &&
                     VatNumber.Equals(input.VatNumber))
                ) &&
                (
                    TaxCode == input.TaxCode ||
                    (TaxCode != null &&
                     TaxCode.Equals(input.TaxCode))
                ) &&
                (
                    AddressStreet == input.AddressStreet ||
                    (AddressStreet != null &&
                     AddressStreet.Equals(input.AddressStreet))
                ) &&
                (
                    AddressPostalCode == input.AddressPostalCode ||
                    (AddressPostalCode != null &&
                     AddressPostalCode.Equals(input.AddressPostalCode))
                ) &&
                (
                    AddressCity == input.AddressCity ||
                    (AddressCity != null &&
                     AddressCity.Equals(input.AddressCity))
                ) &&
                (
                    AddressProvince == input.AddressProvince ||
                    (AddressProvince != null &&
                     AddressProvince.Equals(input.AddressProvince))
                ) &&
                (
                    AddressExtra == input.AddressExtra ||
                    (AddressExtra != null &&
                     AddressExtra.Equals(input.AddressExtra))
                ) &&
                (
                    Country == input.Country ||
                    (Country != null &&
                     Country.Equals(input.Country))
                ) &&
                (
                    Email == input.Email ||
                    (Email != null &&
                     Email.Equals(input.Email))
                ) &&
                (
                    CertifiedEmail == input.CertifiedEmail ||
                    (CertifiedEmail != null &&
                     CertifiedEmail.Equals(input.CertifiedEmail))
                ) &&
                (
                    Phone == input.Phone ||
                    (Phone != null &&
                     Phone.Equals(input.Phone))
                ) &&
                (
                    Fax == input.Fax ||
                    (Fax != null &&
                     Fax.Equals(input.Fax))
                ) &&
                (
                    Notes == input.Notes ||
                    (Notes != null &&
                     Notes.Equals(input.Notes))
                ) &&
                (
                    CreatedAt == input.CreatedAt ||
                    (CreatedAt != null &&
                     CreatedAt.Equals(input.CreatedAt))
                ) &&
                (
                    UpdatedAt == input.UpdatedAt ||
                    (UpdatedAt != null &&
                     UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (Code != null) hashCode = hashCode * 59 + Code.GetHashCode();
                if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
                hashCode = hashCode * 59 + Type.GetHashCode();
                if (FirstName != null) hashCode = hashCode * 59 + FirstName.GetHashCode();
                if (LastName != null) hashCode = hashCode * 59 + LastName.GetHashCode();
                if (ContactPerson != null) hashCode = hashCode * 59 + ContactPerson.GetHashCode();
                if (VatNumber != null) hashCode = hashCode * 59 + VatNumber.GetHashCode();
                if (TaxCode != null) hashCode = hashCode * 59 + TaxCode.GetHashCode();
                if (AddressStreet != null) hashCode = hashCode * 59 + AddressStreet.GetHashCode();
                if (AddressPostalCode != null) hashCode = hashCode * 59 + AddressPostalCode.GetHashCode();
                if (AddressCity != null) hashCode = hashCode * 59 + AddressCity.GetHashCode();
                if (AddressProvince != null) hashCode = hashCode * 59 + AddressProvince.GetHashCode();
                if (AddressExtra != null) hashCode = hashCode * 59 + AddressExtra.GetHashCode();
                if (Country != null) hashCode = hashCode * 59 + Country.GetHashCode();
                if (Email != null) hashCode = hashCode * 59 + Email.GetHashCode();
                if (CertifiedEmail != null) hashCode = hashCode * 59 + CertifiedEmail.GetHashCode();
                if (Phone != null) hashCode = hashCode * 59 + Phone.GetHashCode();
                if (Fax != null) hashCode = hashCode * 59 + Fax.GetHashCode();
                if (Notes != null) hashCode = hashCode * 59 + Notes.GetHashCode();
                if (CreatedAt != null) hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                if (UpdatedAt != null) hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}