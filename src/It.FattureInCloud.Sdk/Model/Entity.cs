/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     Entity
    /// </summary>
    [DataContract(Name = "Entity")]
    public class Entity : IEquatable<Entity>, IValidatableObject
    {
        private string _AddressCity;
        private string _AddressExtra;
        private string _AddressPostalCode;
        private string _AddressProvince;
        private string _AddressStreet;
        private string _BankIban;
        private string _BankName;
        private string _BankSwiftCode;
        private string _CertifiedEmail;
        private string _Code;
        private string _ContactPerson;
        private string _Country;
        private string _CreatedAt;
        private PaymentMethod _DefaultPaymentMethod;
        private int? _DefaultPaymentTerms;
        private DefaultPaymentTermsType? _DefaultPaymentTermsType;
        private VatType _DefaultVat;
        private string _EiCode;
        private bool? _EInvoice;
        private string _Email;
        private string _Fax;
        private string _FirstName;
        private bool _flagAddressCity;
        private bool _flagAddressExtra;
        private bool _flagAddressPostalCode;
        private bool _flagAddressProvince;
        private bool _flagAddressStreet;
        private bool _flagBankIban;
        private bool _flagBankName;
        private bool _flagBankSwiftCode;
        private bool _flagCertifiedEmail;
        private bool _flagCode;
        private bool _flagContactPerson;
        private bool _flagCountry;
        private bool _flagCreatedAt;
        private bool _flagDefaultPaymentMethod;
        private bool _flagDefaultPaymentTerms;
        private bool _flagDefaultPaymentTermsType;
        private bool _flagDefaultVat;
        private bool _flagEiCode;
        private bool _flagEInvoice;
        private bool _flagEmail;
        private bool _flagFax;
        private bool _flagFirstName;
        private bool _flagHasIntentDeclaration;
        private bool _flagId;
        private bool _flagIntentDeclarationProtocolDate;
        private bool _flagIntentDeclarationProtocolNumber;
        private bool _flagLastName;
        private bool _flagName;
        private bool _flagNotes;
        private bool _flagPhone;
        private bool _flagShippingAddress;
        private bool _flagTaxCode;
        private bool _flagType;
        private bool _flagUpdatedAt;
        private bool _flagVatNumber;
        private bool? _HasIntentDeclaration;
        private int? _Id;
        private string _IntentDeclarationProtocolDate;
        private DateTime? _IntentDeclarationProtocolNumber;
        private string _LastName;
        private string _Name;
        private string _Notes;
        private string _Phone;
        private string _ShippingAddress;
        private string _TaxCode;
        private EntityType? _Type;
        private string _UpdatedAt;
        private string _VatNumber;

        /// <summary>
        ///     Initializes a new instance of the <see cref="Entity" /> class.
        /// </summary>
        /// <param name="id">Unique identifier.</param>
        /// <param name="code">Code..</param>
        /// <param name="name">Name.</param>
        /// <param name="type">type.</param>
        /// <param name="firstName">First name..</param>
        /// <param name="lastName">Last name..</param>
        /// <param name="contactPerson">contactPerson.</param>
        /// <param name="vatNumber">Vat number.</param>
        /// <param name="taxCode">Tax code..</param>
        /// <param name="addressStreet">Street address..</param>
        /// <param name="addressPostalCode">Postal code..</param>
        /// <param name="addressCity">City..</param>
        /// <param name="addressProvince">Province..</param>
        /// <param name="addressExtra">Address extra info..</param>
        /// <param name="country">Country.</param>
        /// <param name="email">Email..</param>
        /// <param name="certifiedEmail">Certified email..</param>
        /// <param name="phone">Phone..</param>
        /// <param name="fax">Fax..</param>
        /// <param name="notes">Extra notes..</param>
        /// <param name="defaultVat">defaultVat.</param>
        /// <param name="defaultPaymentTerms">[Only for client] Default payment terms..</param>
        /// <param name="defaultPaymentTermsType">defaultPaymentTermsType.</param>
        /// <param name="defaultPaymentMethod">defaultPaymentMethod.</param>
        /// <param name="bankName">[Only for client] Bank name..</param>
        /// <param name="bankIban">[Only for client] Iban..</param>
        /// <param name="bankSwiftCode">[Only for client] Bank swift code..</param>
        /// <param name="shippingAddress">[Only for client] Shipping address..</param>
        /// <param name="eInvoice">[Only for client] Use e-invoices..</param>
        /// <param name="eiCode">[Only for client] E-invoices code..</param>
        /// <param name="hasIntentDeclaration">[Only for client] Has intent declaration..</param>
        /// <param name="intentDeclarationProtocolNumber">[Only for client] Intent declaration protocol number..</param>
        /// <param name="intentDeclarationProtocolDate">[Only for client] Intent declaration protocol date..</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public Entity(int? id = default(int?), string code = default(string), string name = default(string),
            EntityType? type = default(EntityType?), string firstName = default(string),
            string lastName = default(string), string contactPerson = default(string),
            string vatNumber = default(string), string taxCode = default(string),
            string addressStreet = default(string), string addressPostalCode = default(string),
            string addressCity = default(string), string addressProvince = default(string),
            string addressExtra = default(string), string country = default(string), string email = default(string),
            string certifiedEmail = default(string), string phone = default(string), string fax = default(string),
            string notes = default(string), VatType defaultVat = default, int? defaultPaymentTerms = default(int?),
            DefaultPaymentTermsType? defaultPaymentTermsType = default(DefaultPaymentTermsType?),
            PaymentMethod defaultPaymentMethod = default, string bankName = default(string),
            string bankIban = default(string), string bankSwiftCode = default(string),
            string shippingAddress = default(string), bool? eInvoice = default(bool?), string eiCode = default(string),
            bool? hasIntentDeclaration = default(bool?), DateTime? intentDeclarationProtocolNumber = default(DateTime?),
            string intentDeclarationProtocolDate = default(string), string createdAt = default(string),
            string updatedAt = default(string))
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _Code = code;
            if (Code != null) _flagCode = true;
            _Name = name;
            if (Name != null) _flagName = true;
            _Type = type;
            if (Type != null) _flagType = true;
            _FirstName = firstName;
            if (FirstName != null) _flagFirstName = true;
            _LastName = lastName;
            if (LastName != null) _flagLastName = true;
            _ContactPerson = contactPerson;
            if (ContactPerson != null) _flagContactPerson = true;
            _VatNumber = vatNumber;
            if (VatNumber != null) _flagVatNumber = true;
            _TaxCode = taxCode;
            if (TaxCode != null) _flagTaxCode = true;
            _AddressStreet = addressStreet;
            if (AddressStreet != null) _flagAddressStreet = true;
            _AddressPostalCode = addressPostalCode;
            if (AddressPostalCode != null) _flagAddressPostalCode = true;
            _AddressCity = addressCity;
            if (AddressCity != null) _flagAddressCity = true;
            _AddressProvince = addressProvince;
            if (AddressProvince != null) _flagAddressProvince = true;
            _AddressExtra = addressExtra;
            if (AddressExtra != null) _flagAddressExtra = true;
            _Country = country;
            if (Country != null) _flagCountry = true;
            _Email = email;
            if (Email != null) _flagEmail = true;
            _CertifiedEmail = certifiedEmail;
            if (CertifiedEmail != null) _flagCertifiedEmail = true;
            _Phone = phone;
            if (Phone != null) _flagPhone = true;
            _Fax = fax;
            if (Fax != null) _flagFax = true;
            _Notes = notes;
            if (Notes != null) _flagNotes = true;
            _DefaultVat = defaultVat;
            if (DefaultVat != null) _flagDefaultVat = true;
            _DefaultPaymentTerms = defaultPaymentTerms;
            if (DefaultPaymentTerms != null) _flagDefaultPaymentTerms = true;
            _DefaultPaymentTermsType = defaultPaymentTermsType;
            if (DefaultPaymentTermsType != null) _flagDefaultPaymentTermsType = true;
            _DefaultPaymentMethod = defaultPaymentMethod;
            if (DefaultPaymentMethod != null) _flagDefaultPaymentMethod = true;
            _BankName = bankName;
            if (BankName != null) _flagBankName = true;
            _BankIban = bankIban;
            if (BankIban != null) _flagBankIban = true;
            _BankSwiftCode = bankSwiftCode;
            if (BankSwiftCode != null) _flagBankSwiftCode = true;
            _ShippingAddress = shippingAddress;
            if (ShippingAddress != null) _flagShippingAddress = true;
            _EInvoice = eInvoice;
            if (EInvoice != null) _flagEInvoice = true;
            _EiCode = eiCode;
            if (EiCode != null) _flagEiCode = true;
            _HasIntentDeclaration = hasIntentDeclaration;
            if (HasIntentDeclaration != null) _flagHasIntentDeclaration = true;
            _IntentDeclarationProtocolNumber = intentDeclarationProtocolNumber;
            if (IntentDeclarationProtocolNumber != null) _flagIntentDeclarationProtocolNumber = true;
            _IntentDeclarationProtocolDate = intentDeclarationProtocolDate;
            if (IntentDeclarationProtocolDate != null) _flagIntentDeclarationProtocolDate = true;
            _CreatedAt = createdAt;
            if (CreatedAt != null) _flagCreatedAt = true;
            _UpdatedAt = updatedAt;
            if (UpdatedAt != null) _flagUpdatedAt = true;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public EntityType? Type
        {
            get => _Type;
            set
            {
                _Type = value;
                _flagType = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DefaultPaymentTermsType
        /// </summary>

        [DataMember(Name = "default_payment_terms_type", EmitDefaultValue = false)]
        public DefaultPaymentTermsType? DefaultPaymentTermsType
        {
            get => _DefaultPaymentTermsType;
            set
            {
                _DefaultPaymentTermsType = value;
                _flagDefaultPaymentTermsType = true;
            }
        }

        /// <summary>
        ///     Unique identifier
        /// </summary>
        /// <value>Unique identifier</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Code.
        /// </summary>
        /// <value>Code.</value>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code
        {
            get => _Code;
            set
            {
                _Code = value;
                _flagCode = true;
            }
        }

        /// <summary>
        ///     Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get => _Name;
            set
            {
                _Name = value;
                _flagName = true;
            }
        }

        /// <summary>
        ///     First name.
        /// </summary>
        /// <value>First name.</value>
        [DataMember(Name = "first_name", EmitDefaultValue = true)]
        public string FirstName
        {
            get => _FirstName;
            set
            {
                _FirstName = value;
                _flagFirstName = true;
            }
        }

        /// <summary>
        ///     Last name.
        /// </summary>
        /// <value>Last name.</value>
        [DataMember(Name = "last_name", EmitDefaultValue = true)]
        public string LastName
        {
            get => _LastName;
            set
            {
                _LastName = value;
                _flagLastName = true;
            }
        }

        /// <summary>
        ///     Gets or Sets ContactPerson
        /// </summary>
        [DataMember(Name = "contact_person", EmitDefaultValue = true)]
        public string ContactPerson
        {
            get => _ContactPerson;
            set
            {
                _ContactPerson = value;
                _flagContactPerson = true;
            }
        }

        /// <summary>
        ///     Vat number
        /// </summary>
        /// <value>Vat number</value>
        [DataMember(Name = "vat_number", EmitDefaultValue = true)]
        public string VatNumber
        {
            get => _VatNumber;
            set
            {
                _VatNumber = value;
                _flagVatNumber = true;
            }
        }

        /// <summary>
        ///     Tax code.
        /// </summary>
        /// <value>Tax code.</value>
        [DataMember(Name = "tax_code", EmitDefaultValue = true)]
        public string TaxCode
        {
            get => _TaxCode;
            set
            {
                _TaxCode = value;
                _flagTaxCode = true;
            }
        }

        /// <summary>
        ///     Street address.
        /// </summary>
        /// <value>Street address.</value>
        [DataMember(Name = "address_street", EmitDefaultValue = true)]
        public string AddressStreet
        {
            get => _AddressStreet;
            set
            {
                _AddressStreet = value;
                _flagAddressStreet = true;
            }
        }

        /// <summary>
        ///     Postal code.
        /// </summary>
        /// <value>Postal code.</value>
        [DataMember(Name = "address_postal_code", EmitDefaultValue = true)]
        public string AddressPostalCode
        {
            get => _AddressPostalCode;
            set
            {
                _AddressPostalCode = value;
                _flagAddressPostalCode = true;
            }
        }

        /// <summary>
        ///     City.
        /// </summary>
        /// <value>City.</value>
        [DataMember(Name = "address_city", EmitDefaultValue = true)]
        public string AddressCity
        {
            get => _AddressCity;
            set
            {
                _AddressCity = value;
                _flagAddressCity = true;
            }
        }

        /// <summary>
        ///     Province.
        /// </summary>
        /// <value>Province.</value>
        [DataMember(Name = "address_province", EmitDefaultValue = true)]
        public string AddressProvince
        {
            get => _AddressProvince;
            set
            {
                _AddressProvince = value;
                _flagAddressProvince = true;
            }
        }

        /// <summary>
        ///     Address extra info.
        /// </summary>
        /// <value>Address extra info.</value>
        [DataMember(Name = "address_extra", EmitDefaultValue = true)]
        public string AddressExtra
        {
            get => _AddressExtra;
            set
            {
                _AddressExtra = value;
                _flagAddressExtra = true;
            }
        }

        /// <summary>
        ///     Country
        /// </summary>
        /// <value>Country</value>
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public string Country
        {
            get => _Country;
            set
            {
                _Country = value;
                _flagCountry = true;
            }
        }

        /// <summary>
        ///     Email.
        /// </summary>
        /// <value>Email.</value>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email
        {
            get => _Email;
            set
            {
                _Email = value;
                _flagEmail = true;
            }
        }

        /// <summary>
        ///     Certified email.
        /// </summary>
        /// <value>Certified email.</value>
        [DataMember(Name = "certified_email", EmitDefaultValue = true)]
        public string CertifiedEmail
        {
            get => _CertifiedEmail;
            set
            {
                _CertifiedEmail = value;
                _flagCertifiedEmail = true;
            }
        }

        /// <summary>
        ///     Phone.
        /// </summary>
        /// <value>Phone.</value>
        [DataMember(Name = "phone", EmitDefaultValue = true)]
        public string Phone
        {
            get => _Phone;
            set
            {
                _Phone = value;
                _flagPhone = true;
            }
        }

        /// <summary>
        ///     Fax.
        /// </summary>
        /// <value>Fax.</value>
        [DataMember(Name = "fax", EmitDefaultValue = true)]
        public string Fax
        {
            get => _Fax;
            set
            {
                _Fax = value;
                _flagFax = true;
            }
        }

        /// <summary>
        ///     Extra notes.
        /// </summary>
        /// <value>Extra notes.</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes
        {
            get => _Notes;
            set
            {
                _Notes = value;
                _flagNotes = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DefaultVat
        /// </summary>
        [DataMember(Name = "default_vat", EmitDefaultValue = true)]
        public VatType DefaultVat
        {
            get => _DefaultVat;
            set
            {
                _DefaultVat = value;
                _flagDefaultVat = true;
            }
        }

        /// <summary>
        ///     [Only for client] Default payment terms.
        /// </summary>
        /// <value>[Only for client] Default payment terms.</value>
        [DataMember(Name = "default_payment_terms", EmitDefaultValue = true)]
        public int? DefaultPaymentTerms
        {
            get => _DefaultPaymentTerms;
            set
            {
                _DefaultPaymentTerms = value;
                _flagDefaultPaymentTerms = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DefaultPaymentMethod
        /// </summary>
        [DataMember(Name = "default_payment_method", EmitDefaultValue = false)]
        public PaymentMethod DefaultPaymentMethod
        {
            get => _DefaultPaymentMethod;
            set
            {
                _DefaultPaymentMethod = value;
                _flagDefaultPaymentMethod = true;
            }
        }

        /// <summary>
        ///     [Only for client] Bank name.
        /// </summary>
        /// <value>[Only for client] Bank name.</value>
        [DataMember(Name = "bank_name", EmitDefaultValue = true)]
        public string BankName
        {
            get => _BankName;
            set
            {
                _BankName = value;
                _flagBankName = true;
            }
        }

        /// <summary>
        ///     [Only for client] Iban.
        /// </summary>
        /// <value>[Only for client] Iban.</value>
        [DataMember(Name = "bank_iban", EmitDefaultValue = true)]
        public string BankIban
        {
            get => _BankIban;
            set
            {
                _BankIban = value;
                _flagBankIban = true;
            }
        }

        /// <summary>
        ///     [Only for client] Bank swift code.
        /// </summary>
        /// <value>[Only for client] Bank swift code.</value>
        [DataMember(Name = "bank_swift_code", EmitDefaultValue = true)]
        public string BankSwiftCode
        {
            get => _BankSwiftCode;
            set
            {
                _BankSwiftCode = value;
                _flagBankSwiftCode = true;
            }
        }

        /// <summary>
        ///     [Only for client] Shipping address.
        /// </summary>
        /// <value>[Only for client] Shipping address.</value>
        [DataMember(Name = "shipping_address", EmitDefaultValue = true)]
        public string ShippingAddress
        {
            get => _ShippingAddress;
            set
            {
                _ShippingAddress = value;
                _flagShippingAddress = true;
            }
        }

        /// <summary>
        ///     [Only for client] Use e-invoices.
        /// </summary>
        /// <value>[Only for client] Use e-invoices.</value>
        [DataMember(Name = "e_invoice", EmitDefaultValue = true)]
        public bool? EInvoice
        {
            get => _EInvoice;
            set
            {
                _EInvoice = value;
                _flagEInvoice = true;
            }
        }

        /// <summary>
        ///     [Only for client] E-invoices code.
        /// </summary>
        /// <value>[Only for client] E-invoices code.</value>
        [DataMember(Name = "ei_code", EmitDefaultValue = true)]
        public string EiCode
        {
            get => _EiCode;
            set
            {
                _EiCode = value;
                _flagEiCode = true;
            }
        }

        /// <summary>
        ///     [Only for client] Has intent declaration.
        /// </summary>
        /// <value>[Only for client] Has intent declaration.</value>
        [DataMember(Name = "has_intent_declaration", EmitDefaultValue = true)]
        public bool? HasIntentDeclaration
        {
            get => _HasIntentDeclaration;
            set
            {
                _HasIntentDeclaration = value;
                _flagHasIntentDeclaration = true;
            }
        }

        /// <summary>
        ///     [Only for client] Intent declaration protocol number.
        /// </summary>
        /// <value>[Only for client] Intent declaration protocol number.</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "intent_declaration_protocol_number", EmitDefaultValue = true)]
        public DateTime? IntentDeclarationProtocolNumber
        {
            get => _IntentDeclarationProtocolNumber;
            set
            {
                _IntentDeclarationProtocolNumber = value;
                _flagIntentDeclarationProtocolNumber = true;
            }
        }

        /// <summary>
        ///     [Only for client] Intent declaration protocol date.
        /// </summary>
        /// <value>[Only for client] Intent declaration protocol date.</value>
        [DataMember(Name = "intent_declaration_protocol_date", EmitDefaultValue = true)]
        public string IntentDeclarationProtocolDate
        {
            get => _IntentDeclarationProtocolDate;
            set
            {
                _IntentDeclarationProtocolDate = value;
                _flagIntentDeclarationProtocolDate = true;
            }
        }

        /// <summary>
        ///     Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt
        {
            get => _CreatedAt;
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }

        /// <summary>
        ///     Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt
        {
            get => _UpdatedAt;
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }

        /// <summary>
        ///     Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }

        /// <summary>
        ///     Returns false as DefaultPaymentTermsType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultPaymentTermsType()
        {
            return _flagDefaultPaymentTermsType;
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as Code should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCode()
        {
            return _flagCode;
        }

        /// <summary>
        ///     Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }

        /// <summary>
        ///     Returns false as FirstName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirstName()
        {
            return _flagFirstName;
        }

        /// <summary>
        ///     Returns false as LastName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastName()
        {
            return _flagLastName;
        }

        /// <summary>
        ///     Returns false as ContactPerson should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContactPerson()
        {
            return _flagContactPerson;
        }

        /// <summary>
        ///     Returns false as VatNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVatNumber()
        {
            return _flagVatNumber;
        }

        /// <summary>
        ///     Returns false as TaxCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTaxCode()
        {
            return _flagTaxCode;
        }

        /// <summary>
        ///     Returns false as AddressStreet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressStreet()
        {
            return _flagAddressStreet;
        }

        /// <summary>
        ///     Returns false as AddressPostalCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressPostalCode()
        {
            return _flagAddressPostalCode;
        }

        /// <summary>
        ///     Returns false as AddressCity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressCity()
        {
            return _flagAddressCity;
        }

        /// <summary>
        ///     Returns false as AddressProvince should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressProvince()
        {
            return _flagAddressProvince;
        }

        /// <summary>
        ///     Returns false as AddressExtra should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressExtra()
        {
            return _flagAddressExtra;
        }

        /// <summary>
        ///     Returns false as Country should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountry()
        {
            return _flagCountry;
        }

        /// <summary>
        ///     Returns false as Email should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmail()
        {
            return _flagEmail;
        }

        /// <summary>
        ///     Returns false as CertifiedEmail should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCertifiedEmail()
        {
            return _flagCertifiedEmail;
        }

        /// <summary>
        ///     Returns false as Phone should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePhone()
        {
            return _flagPhone;
        }

        /// <summary>
        ///     Returns false as Fax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFax()
        {
            return _flagFax;
        }

        /// <summary>
        ///     Returns false as Notes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotes()
        {
            return _flagNotes;
        }

        /// <summary>
        ///     Returns false as DefaultVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultVat()
        {
            return _flagDefaultVat;
        }

        /// <summary>
        ///     Returns false as DefaultPaymentTerms should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultPaymentTerms()
        {
            return _flagDefaultPaymentTerms;
        }

        /// <summary>
        ///     Returns false as DefaultPaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultPaymentMethod()
        {
            return _flagDefaultPaymentMethod;
        }

        /// <summary>
        ///     Returns false as BankName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBankName()
        {
            return _flagBankName;
        }

        /// <summary>
        ///     Returns false as BankIban should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBankIban()
        {
            return _flagBankIban;
        }

        /// <summary>
        ///     Returns false as BankSwiftCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBankSwiftCode()
        {
            return _flagBankSwiftCode;
        }

        /// <summary>
        ///     Returns false as ShippingAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingAddress()
        {
            return _flagShippingAddress;
        }

        /// <summary>
        ///     Returns false as EInvoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEInvoice()
        {
            return _flagEInvoice;
        }

        /// <summary>
        ///     Returns false as EiCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiCode()
        {
            return _flagEiCode;
        }

        /// <summary>
        ///     Returns false as HasIntentDeclaration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasIntentDeclaration()
        {
            return _flagHasIntentDeclaration;
        }

        /// <summary>
        ///     Returns false as IntentDeclarationProtocolNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIntentDeclarationProtocolNumber()
        {
            return _flagIntentDeclarationProtocolNumber;
        }

        /// <summary>
        ///     Returns false as IntentDeclarationProtocolDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIntentDeclarationProtocolDate()
        {
            return _flagIntentDeclarationProtocolDate;
        }

        /// <summary>
        ///     Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }

        /// <summary>
        ///     Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Entity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  AddressStreet: ").Append(AddressStreet).Append("\n");
            sb.Append("  AddressPostalCode: ").Append(AddressPostalCode).Append("\n");
            sb.Append("  AddressCity: ").Append(AddressCity).Append("\n");
            sb.Append("  AddressProvince: ").Append(AddressProvince).Append("\n");
            sb.Append("  AddressExtra: ").Append(AddressExtra).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CertifiedEmail: ").Append(CertifiedEmail).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  DefaultVat: ").Append(DefaultVat).Append("\n");
            sb.Append("  DefaultPaymentTerms: ").Append(DefaultPaymentTerms).Append("\n");
            sb.Append("  DefaultPaymentTermsType: ").Append(DefaultPaymentTermsType).Append("\n");
            sb.Append("  DefaultPaymentMethod: ").Append(DefaultPaymentMethod).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankIban: ").Append(BankIban).Append("\n");
            sb.Append("  BankSwiftCode: ").Append(BankSwiftCode).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  EiCode: ").Append(EiCode).Append("\n");
            sb.Append("  HasIntentDeclaration: ").Append(HasIntentDeclaration).Append("\n");
            sb.Append("  IntentDeclarationProtocolNumber: ").Append(IntentDeclarationProtocolNumber).Append("\n");
            sb.Append("  IntentDeclarationProtocolDate: ").Append(IntentDeclarationProtocolDate).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Entity);
        }

        /// <summary>
        ///     Returns true if Entity instances are equal
        /// </summary>
        /// <param name="input">Instance of Entity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Entity input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Code == input.Code ||
                    (Code != null &&
                     Code.Equals(input.Code))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    FirstName == input.FirstName ||
                    (FirstName != null &&
                     FirstName.Equals(input.FirstName))
                ) &&
                (
                    LastName == input.LastName ||
                    (LastName != null &&
                     LastName.Equals(input.LastName))
                ) &&
                (
                    ContactPerson == input.ContactPerson ||
                    (ContactPerson != null &&
                     ContactPerson.Equals(input.ContactPerson))
                ) &&
                (
                    VatNumber == input.VatNumber ||
                    (VatNumber != null &&
                     VatNumber.Equals(input.VatNumber))
                ) &&
                (
                    TaxCode == input.TaxCode ||
                    (TaxCode != null &&
                     TaxCode.Equals(input.TaxCode))
                ) &&
                (
                    AddressStreet == input.AddressStreet ||
                    (AddressStreet != null &&
                     AddressStreet.Equals(input.AddressStreet))
                ) &&
                (
                    AddressPostalCode == input.AddressPostalCode ||
                    (AddressPostalCode != null &&
                     AddressPostalCode.Equals(input.AddressPostalCode))
                ) &&
                (
                    AddressCity == input.AddressCity ||
                    (AddressCity != null &&
                     AddressCity.Equals(input.AddressCity))
                ) &&
                (
                    AddressProvince == input.AddressProvince ||
                    (AddressProvince != null &&
                     AddressProvince.Equals(input.AddressProvince))
                ) &&
                (
                    AddressExtra == input.AddressExtra ||
                    (AddressExtra != null &&
                     AddressExtra.Equals(input.AddressExtra))
                ) &&
                (
                    Country == input.Country ||
                    (Country != null &&
                     Country.Equals(input.Country))
                ) &&
                (
                    Email == input.Email ||
                    (Email != null &&
                     Email.Equals(input.Email))
                ) &&
                (
                    CertifiedEmail == input.CertifiedEmail ||
                    (CertifiedEmail != null &&
                     CertifiedEmail.Equals(input.CertifiedEmail))
                ) &&
                (
                    Phone == input.Phone ||
                    (Phone != null &&
                     Phone.Equals(input.Phone))
                ) &&
                (
                    Fax == input.Fax ||
                    (Fax != null &&
                     Fax.Equals(input.Fax))
                ) &&
                (
                    Notes == input.Notes ||
                    (Notes != null &&
                     Notes.Equals(input.Notes))
                ) &&
                (
                    DefaultVat == input.DefaultVat ||
                    (DefaultVat != null &&
                     DefaultVat.Equals(input.DefaultVat))
                ) &&
                (
                    DefaultPaymentTerms == input.DefaultPaymentTerms ||
                    (DefaultPaymentTerms != null &&
                     DefaultPaymentTerms.Equals(input.DefaultPaymentTerms))
                ) &&
                (
                    DefaultPaymentTermsType == input.DefaultPaymentTermsType ||
                    DefaultPaymentTermsType.Equals(input.DefaultPaymentTermsType)
                ) &&
                (
                    DefaultPaymentMethod == input.DefaultPaymentMethod ||
                    (DefaultPaymentMethod != null &&
                     DefaultPaymentMethod.Equals(input.DefaultPaymentMethod))
                ) &&
                (
                    BankName == input.BankName ||
                    (BankName != null &&
                     BankName.Equals(input.BankName))
                ) &&
                (
                    BankIban == input.BankIban ||
                    (BankIban != null &&
                     BankIban.Equals(input.BankIban))
                ) &&
                (
                    BankSwiftCode == input.BankSwiftCode ||
                    (BankSwiftCode != null &&
                     BankSwiftCode.Equals(input.BankSwiftCode))
                ) &&
                (
                    ShippingAddress == input.ShippingAddress ||
                    (ShippingAddress != null &&
                     ShippingAddress.Equals(input.ShippingAddress))
                ) &&
                (
                    EInvoice == input.EInvoice ||
                    (EInvoice != null &&
                     EInvoice.Equals(input.EInvoice))
                ) &&
                (
                    EiCode == input.EiCode ||
                    (EiCode != null &&
                     EiCode.Equals(input.EiCode))
                ) &&
                (
                    HasIntentDeclaration == input.HasIntentDeclaration ||
                    (HasIntentDeclaration != null &&
                     HasIntentDeclaration.Equals(input.HasIntentDeclaration))
                ) &&
                (
                    IntentDeclarationProtocolNumber == input.IntentDeclarationProtocolNumber ||
                    (IntentDeclarationProtocolNumber != null &&
                     IntentDeclarationProtocolNumber.Equals(input.IntentDeclarationProtocolNumber))
                ) &&
                (
                    IntentDeclarationProtocolDate == input.IntentDeclarationProtocolDate ||
                    (IntentDeclarationProtocolDate != null &&
                     IntentDeclarationProtocolDate.Equals(input.IntentDeclarationProtocolDate))
                ) &&
                (
                    CreatedAt == input.CreatedAt ||
                    (CreatedAt != null &&
                     CreatedAt.Equals(input.CreatedAt))
                ) &&
                (
                    UpdatedAt == input.UpdatedAt ||
                    (UpdatedAt != null &&
                     UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (Code != null) hashCode = hashCode * 59 + Code.GetHashCode();
                if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
                hashCode = hashCode * 59 + Type.GetHashCode();
                if (FirstName != null) hashCode = hashCode * 59 + FirstName.GetHashCode();
                if (LastName != null) hashCode = hashCode * 59 + LastName.GetHashCode();
                if (ContactPerson != null) hashCode = hashCode * 59 + ContactPerson.GetHashCode();
                if (VatNumber != null) hashCode = hashCode * 59 + VatNumber.GetHashCode();
                if (TaxCode != null) hashCode = hashCode * 59 + TaxCode.GetHashCode();
                if (AddressStreet != null) hashCode = hashCode * 59 + AddressStreet.GetHashCode();
                if (AddressPostalCode != null) hashCode = hashCode * 59 + AddressPostalCode.GetHashCode();
                if (AddressCity != null) hashCode = hashCode * 59 + AddressCity.GetHashCode();
                if (AddressProvince != null) hashCode = hashCode * 59 + AddressProvince.GetHashCode();
                if (AddressExtra != null) hashCode = hashCode * 59 + AddressExtra.GetHashCode();
                if (Country != null) hashCode = hashCode * 59 + Country.GetHashCode();
                if (Email != null) hashCode = hashCode * 59 + Email.GetHashCode();
                if (CertifiedEmail != null) hashCode = hashCode * 59 + CertifiedEmail.GetHashCode();
                if (Phone != null) hashCode = hashCode * 59 + Phone.GetHashCode();
                if (Fax != null) hashCode = hashCode * 59 + Fax.GetHashCode();
                if (Notes != null) hashCode = hashCode * 59 + Notes.GetHashCode();
                if (DefaultVat != null) hashCode = hashCode * 59 + DefaultVat.GetHashCode();
                if (DefaultPaymentTerms != null) hashCode = hashCode * 59 + DefaultPaymentTerms.GetHashCode();
                hashCode = hashCode * 59 + DefaultPaymentTermsType.GetHashCode();
                if (DefaultPaymentMethod != null) hashCode = hashCode * 59 + DefaultPaymentMethod.GetHashCode();
                if (BankName != null) hashCode = hashCode * 59 + BankName.GetHashCode();
                if (BankIban != null) hashCode = hashCode * 59 + BankIban.GetHashCode();
                if (BankSwiftCode != null) hashCode = hashCode * 59 + BankSwiftCode.GetHashCode();
                if (ShippingAddress != null) hashCode = hashCode * 59 + ShippingAddress.GetHashCode();
                if (EInvoice != null) hashCode = hashCode * 59 + EInvoice.GetHashCode();
                if (EiCode != null) hashCode = hashCode * 59 + EiCode.GetHashCode();
                if (HasIntentDeclaration != null) hashCode = hashCode * 59 + HasIntentDeclaration.GetHashCode();
                if (IntentDeclarationProtocolNumber != null)
                    hashCode = hashCode * 59 + IntentDeclarationProtocolNumber.GetHashCode();
                if (IntentDeclarationProtocolDate != null)
                    hashCode = hashCode * 59 + IntentDeclarationProtocolDate.GetHashCode();
                if (CreatedAt != null) hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                if (UpdatedAt != null) hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}