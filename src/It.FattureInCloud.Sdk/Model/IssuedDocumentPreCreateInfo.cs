// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// IssuedDocumentPreCreateInfo
    /// </summary>
    public partial class IssuedDocumentPreCreateInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentPreCreateInfo" /> class.
        /// </summary>
        /// <param name="numerations">numerations</param>
        /// <param name="dnNumerations">dnNumerations</param>
        /// <param name="defaultValues">defaultValues</param>
        /// <param name="extraDataDefaultValues">extraDataDefaultValues</param>
        /// <param name="itemsDefaultValues">itemsDefaultValues</param>
        /// <param name="countriesList">Countries list</param>
        /// <param name="currenciesList">Currencies list</param>
        /// <param name="templatesList">Document templates list</param>
        /// <param name="dnTemplatesList">Delivery note templates list</param>
        /// <param name="aiTemplatesList">Accompanying invoice templates list</param>
        /// <param name="paymentMethodsList">Payment methods list</param>
        /// <param name="paymentAccountsList">Payment accounts list</param>
        /// <param name="vatTypesList">Vat types list</param>
        /// <param name="languagesList">Languages list</param>
        /// <param name="priceLists">Price lists</param>
        [JsonConstructor]
        public IssuedDocumentPreCreateInfo(Option<Dictionary<string, Dictionary<string, int>>> numerations = default, Option<Dictionary<string, Dictionary<string, int>>> dnNumerations = default, Option<IssuedDocumentPreCreateInfoDefaultValues> defaultValues = default, Option<IssuedDocumentPreCreateInfoExtraDataDefaultValues> extraDataDefaultValues = default, Option<IssuedDocumentPreCreateInfoItemsDefaultValues> itemsDefaultValues = default, Option<List<string>> countriesList = default, Option<List<Currency>> currenciesList = default, Option<List<DocumentTemplate>> templatesList = default, Option<List<DocumentTemplate>> dnTemplatesList = default, Option<List<DocumentTemplate>> aiTemplatesList = default, Option<List<PaymentMethod>> paymentMethodsList = default, Option<List<PaymentAccount>> paymentAccountsList = default, Option<List<VatType>> vatTypesList = default, Option<List<Language>> languagesList = default, Option<List<PriceList>> priceLists = default)
        {
            NumerationsOption = numerations;
            DnNumerationsOption = dnNumerations;
            DefaultValuesOption = defaultValues;
            ExtraDataDefaultValuesOption = extraDataDefaultValues;
            ItemsDefaultValuesOption = itemsDefaultValues;
            CountriesListOption = countriesList;
            CurrenciesListOption = currenciesList;
            TemplatesListOption = templatesList;
            DnTemplatesListOption = dnTemplatesList;
            AiTemplatesListOption = aiTemplatesList;
            PaymentMethodsListOption = paymentMethodsList;
            PaymentAccountsListOption = paymentAccountsList;
            VatTypesListOption = vatTypesList;
            LanguagesListOption = languagesList;
            PriceListsOption = priceLists;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Numerations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Dictionary<string, int>>> NumerationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Numerations
        /// </summary>
        [JsonPropertyName("numerations")]
        public Dictionary<string, Dictionary<string, int>> Numerations { get { return this.NumerationsOption; } set { this.NumerationsOption = new Option<Dictionary<string, Dictionary<string, int>>>(value); } }

        /// <summary>
        /// Used to track the state of DnNumerations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Dictionary<string, int>>> DnNumerationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets DnNumerations
        /// </summary>
        [JsonPropertyName("dn_numerations")]
        public Dictionary<string, Dictionary<string, int>> DnNumerations { get { return this.DnNumerationsOption; } set { this.DnNumerationsOption = new Option<Dictionary<string, Dictionary<string, int>>>(value); } }

        /// <summary>
        /// Used to track the state of DefaultValues
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IssuedDocumentPreCreateInfoDefaultValues> DefaultValuesOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultValues
        /// </summary>
        [JsonPropertyName("default_values")]
        public IssuedDocumentPreCreateInfoDefaultValues DefaultValues { get { return this.DefaultValuesOption; } set { this.DefaultValuesOption = new Option<IssuedDocumentPreCreateInfoDefaultValues>(value); } }

        /// <summary>
        /// Used to track the state of ExtraDataDefaultValues
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IssuedDocumentPreCreateInfoExtraDataDefaultValues> ExtraDataDefaultValuesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExtraDataDefaultValues
        /// </summary>
        [JsonPropertyName("extra_data_default_values")]
        public IssuedDocumentPreCreateInfoExtraDataDefaultValues ExtraDataDefaultValues { get { return this.ExtraDataDefaultValuesOption; } set { this.ExtraDataDefaultValuesOption = new Option<IssuedDocumentPreCreateInfoExtraDataDefaultValues>(value); } }

        /// <summary>
        /// Used to track the state of ItemsDefaultValues
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IssuedDocumentPreCreateInfoItemsDefaultValues> ItemsDefaultValuesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ItemsDefaultValues
        /// </summary>
        [JsonPropertyName("items_default_values")]
        public IssuedDocumentPreCreateInfoItemsDefaultValues ItemsDefaultValues { get { return this.ItemsDefaultValuesOption; } set { this.ItemsDefaultValuesOption = new Option<IssuedDocumentPreCreateInfoItemsDefaultValues>(value); } }

        /// <summary>
        /// Used to track the state of CountriesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CountriesListOption { get; private set; }

        /// <summary>
        /// Countries list
        /// </summary>
        /// <value>Countries list</value>
        [JsonPropertyName("countries_list")]
        public List<string> CountriesList { get { return this.CountriesListOption; } set { this.CountriesListOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of CurrenciesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Currency>> CurrenciesListOption { get; private set; }

        /// <summary>
        /// Currencies list
        /// </summary>
        /// <value>Currencies list</value>
        [JsonPropertyName("currencies_list")]
        public List<Currency> CurrenciesList { get { return this.CurrenciesListOption; } set { this.CurrenciesListOption = new Option<List<Currency>>(value); } }

        /// <summary>
        /// Used to track the state of TemplatesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DocumentTemplate>> TemplatesListOption { get; private set; }

        /// <summary>
        /// Document templates list
        /// </summary>
        /// <value>Document templates list</value>
        [JsonPropertyName("templates_list")]
        public List<DocumentTemplate> TemplatesList { get { return this.TemplatesListOption; } set { this.TemplatesListOption = new Option<List<DocumentTemplate>>(value); } }

        /// <summary>
        /// Used to track the state of DnTemplatesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DocumentTemplate>> DnTemplatesListOption { get; private set; }

        /// <summary>
        /// Delivery note templates list
        /// </summary>
        /// <value>Delivery note templates list</value>
        [JsonPropertyName("dn_templates_list")]
        public List<DocumentTemplate> DnTemplatesList { get { return this.DnTemplatesListOption; } set { this.DnTemplatesListOption = new Option<List<DocumentTemplate>>(value); } }

        /// <summary>
        /// Used to track the state of AiTemplatesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DocumentTemplate>> AiTemplatesListOption { get; private set; }

        /// <summary>
        /// Accompanying invoice templates list
        /// </summary>
        /// <value>Accompanying invoice templates list</value>
        [JsonPropertyName("ai_templates_list")]
        public List<DocumentTemplate> AiTemplatesList { get { return this.AiTemplatesListOption; } set { this.AiTemplatesListOption = new Option<List<DocumentTemplate>>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethodsList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PaymentMethod>> PaymentMethodsListOption { get; private set; }

        /// <summary>
        /// Payment methods list
        /// </summary>
        /// <value>Payment methods list</value>
        [JsonPropertyName("payment_methods_list")]
        public List<PaymentMethod> PaymentMethodsList { get { return this.PaymentMethodsListOption; } set { this.PaymentMethodsListOption = new Option<List<PaymentMethod>>(value); } }

        /// <summary>
        /// Used to track the state of PaymentAccountsList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PaymentAccount>> PaymentAccountsListOption { get; private set; }

        /// <summary>
        /// Payment accounts list
        /// </summary>
        /// <value>Payment accounts list</value>
        [JsonPropertyName("payment_accounts_list")]
        public List<PaymentAccount> PaymentAccountsList { get { return this.PaymentAccountsListOption; } set { this.PaymentAccountsListOption = new Option<List<PaymentAccount>>(value); } }

        /// <summary>
        /// Used to track the state of VatTypesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<VatType>> VatTypesListOption { get; private set; }

        /// <summary>
        /// Vat types list
        /// </summary>
        /// <value>Vat types list</value>
        [JsonPropertyName("vat_types_list")]
        public List<VatType> VatTypesList { get { return this.VatTypesListOption; } set { this.VatTypesListOption = new Option<List<VatType>>(value); } }

        /// <summary>
        /// Used to track the state of LanguagesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Language>> LanguagesListOption { get; private set; }

        /// <summary>
        /// Languages list
        /// </summary>
        /// <value>Languages list</value>
        [JsonPropertyName("languages_list")]
        public List<Language> LanguagesList { get { return this.LanguagesListOption; } set { this.LanguagesListOption = new Option<List<Language>>(value); } }

        /// <summary>
        /// Used to track the state of PriceLists
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PriceList>> PriceListsOption { get; private set; }

        /// <summary>
        /// Price lists
        /// </summary>
        /// <value>Price lists</value>
        [JsonPropertyName("price_lists")]
        public List<PriceList> PriceLists { get { return this.PriceListsOption; } set { this.PriceListsOption = new Option<List<PriceList>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentPreCreateInfo {\n");
            sb.Append("  Numerations: ").Append(Numerations).Append("\n");
            sb.Append("  DnNumerations: ").Append(DnNumerations).Append("\n");
            sb.Append("  DefaultValues: ").Append(DefaultValues).Append("\n");
            sb.Append("  ExtraDataDefaultValues: ").Append(ExtraDataDefaultValues).Append("\n");
            sb.Append("  ItemsDefaultValues: ").Append(ItemsDefaultValues).Append("\n");
            sb.Append("  CountriesList: ").Append(CountriesList).Append("\n");
            sb.Append("  CurrenciesList: ").Append(CurrenciesList).Append("\n");
            sb.Append("  TemplatesList: ").Append(TemplatesList).Append("\n");
            sb.Append("  DnTemplatesList: ").Append(DnTemplatesList).Append("\n");
            sb.Append("  AiTemplatesList: ").Append(AiTemplatesList).Append("\n");
            sb.Append("  PaymentMethodsList: ").Append(PaymentMethodsList).Append("\n");
            sb.Append("  PaymentAccountsList: ").Append(PaymentAccountsList).Append("\n");
            sb.Append("  VatTypesList: ").Append(VatTypesList).Append("\n");
            sb.Append("  LanguagesList: ").Append(LanguagesList).Append("\n");
            sb.Append("  PriceLists: ").Append(PriceLists).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentPreCreateInfo" />
    /// </summary>
    public class IssuedDocumentPreCreateInfoJsonConverter : JsonConverter<IssuedDocumentPreCreateInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="IssuedDocumentPreCreateInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocumentPreCreateInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, Dictionary<string, int>>> numerations = default;
            Option<Dictionary<string, Dictionary<string, int>>> dnNumerations = default;
            Option<IssuedDocumentPreCreateInfoDefaultValues> defaultValues = default;
            Option<IssuedDocumentPreCreateInfoExtraDataDefaultValues> extraDataDefaultValues = default;
            Option<IssuedDocumentPreCreateInfoItemsDefaultValues> itemsDefaultValues = default;
            Option<List<string>> countriesList = default;
            Option<List<Currency>> currenciesList = default;
            Option<List<DocumentTemplate>> templatesList = default;
            Option<List<DocumentTemplate>> dnTemplatesList = default;
            Option<List<DocumentTemplate>> aiTemplatesList = default;
            Option<List<PaymentMethod>> paymentMethodsList = default;
            Option<List<PaymentAccount>> paymentAccountsList = default;
            Option<List<VatType>> vatTypesList = default;
            Option<List<Language>> languagesList = default;
            Option<List<PriceList>> priceLists = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "numerations":
                            numerations = new Option<Dictionary<string, Dictionary<string, int>>>(JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, int>>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dn_numerations":
                            dnNumerations = new Option<Dictionary<string, Dictionary<string, int>>>(JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, int>>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "default_values":
                            defaultValues = new Option<IssuedDocumentPreCreateInfoDefaultValues>(JsonSerializer.Deserialize<IssuedDocumentPreCreateInfoDefaultValues>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "extra_data_default_values":
                            extraDataDefaultValues = new Option<IssuedDocumentPreCreateInfoExtraDataDefaultValues>(JsonSerializer.Deserialize<IssuedDocumentPreCreateInfoExtraDataDefaultValues>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "items_default_values":
                            itemsDefaultValues = new Option<IssuedDocumentPreCreateInfoItemsDefaultValues>(JsonSerializer.Deserialize<IssuedDocumentPreCreateInfoItemsDefaultValues>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "countries_list":
                            countriesList = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "currencies_list":
                            currenciesList = new Option<List<Currency>>(JsonSerializer.Deserialize<List<Currency>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "templates_list":
                            templatesList = new Option<List<DocumentTemplate>>(JsonSerializer.Deserialize<List<DocumentTemplate>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dn_templates_list":
                            dnTemplatesList = new Option<List<DocumentTemplate>>(JsonSerializer.Deserialize<List<DocumentTemplate>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ai_templates_list":
                            aiTemplatesList = new Option<List<DocumentTemplate>>(JsonSerializer.Deserialize<List<DocumentTemplate>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payment_methods_list":
                            paymentMethodsList = new Option<List<PaymentMethod>>(JsonSerializer.Deserialize<List<PaymentMethod>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payment_accounts_list":
                            paymentAccountsList = new Option<List<PaymentAccount>>(JsonSerializer.Deserialize<List<PaymentAccount>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "vat_types_list":
                            vatTypesList = new Option<List<VatType>>(JsonSerializer.Deserialize<List<VatType>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "languages_list":
                            languagesList = new Option<List<Language>>(JsonSerializer.Deserialize<List<Language>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "price_lists":
                            priceLists = new Option<List<PriceList>>(JsonSerializer.Deserialize<List<PriceList>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (numerations.IsSet && numerations.Value == null)
                throw new ArgumentNullException(nameof(numerations), "Property is not nullable for class IssuedDocumentPreCreateInfo.");

            if (dnNumerations.IsSet && dnNumerations.Value == null)
                throw new ArgumentNullException(nameof(dnNumerations), "Property is not nullable for class IssuedDocumentPreCreateInfo.");

            if (priceLists.IsSet && priceLists.Value == null)
                throw new ArgumentNullException(nameof(priceLists), "Property is not nullable for class IssuedDocumentPreCreateInfo.");

            return new IssuedDocumentPreCreateInfo(numerations, dnNumerations, defaultValues, extraDataDefaultValues, itemsDefaultValues, countriesList, currenciesList, templatesList, dnTemplatesList, aiTemplatesList, paymentMethodsList, paymentAccountsList, vatTypesList, languagesList, priceLists);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocumentPreCreateInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentPreCreateInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentPreCreateInfo issuedDocumentPreCreateInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocumentPreCreateInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocumentPreCreateInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentPreCreateInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocumentPreCreateInfo issuedDocumentPreCreateInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocumentPreCreateInfo.NumerationsOption.IsSet && issuedDocumentPreCreateInfo.Numerations == null)
                throw new ArgumentNullException(nameof(issuedDocumentPreCreateInfo.Numerations), "Property is required for class IssuedDocumentPreCreateInfo.");

            if (issuedDocumentPreCreateInfo.DnNumerationsOption.IsSet && issuedDocumentPreCreateInfo.DnNumerations == null)
                throw new ArgumentNullException(nameof(issuedDocumentPreCreateInfo.DnNumerations), "Property is required for class IssuedDocumentPreCreateInfo.");

            if (issuedDocumentPreCreateInfo.PriceListsOption.IsSet && issuedDocumentPreCreateInfo.PriceLists == null)
                throw new ArgumentNullException(nameof(issuedDocumentPreCreateInfo.PriceLists), "Property is required for class IssuedDocumentPreCreateInfo.");

            if (issuedDocumentPreCreateInfo.NumerationsOption.IsSet)
            {
                writer.WritePropertyName("numerations");
                JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.Numerations, jsonSerializerOptions);
            }
            if (issuedDocumentPreCreateInfo.DnNumerationsOption.IsSet)
            {
                writer.WritePropertyName("dn_numerations");
                JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.DnNumerations, jsonSerializerOptions);
            }
            if (issuedDocumentPreCreateInfo.DefaultValuesOption.IsSet)
                if (issuedDocumentPreCreateInfo.DefaultValuesOption.Value != null)
                {
                    writer.WritePropertyName("default_values");
                    JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.DefaultValues, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("default_values");
            if (issuedDocumentPreCreateInfo.ExtraDataDefaultValuesOption.IsSet)
                if (issuedDocumentPreCreateInfo.ExtraDataDefaultValuesOption.Value != null)
                {
                    writer.WritePropertyName("extra_data_default_values");
                    JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.ExtraDataDefaultValues, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("extra_data_default_values");
            if (issuedDocumentPreCreateInfo.ItemsDefaultValuesOption.IsSet)
                if (issuedDocumentPreCreateInfo.ItemsDefaultValuesOption.Value != null)
                {
                    writer.WritePropertyName("items_default_values");
                    JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.ItemsDefaultValues, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items_default_values");
            if (issuedDocumentPreCreateInfo.CountriesListOption.IsSet)
                if (issuedDocumentPreCreateInfo.CountriesListOption.Value != null)
                {
                    writer.WritePropertyName("countries_list");
                    JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.CountriesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("countries_list");
            if (issuedDocumentPreCreateInfo.CurrenciesListOption.IsSet)
                if (issuedDocumentPreCreateInfo.CurrenciesListOption.Value != null)
                {
                    writer.WritePropertyName("currencies_list");
                    JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.CurrenciesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("currencies_list");
            if (issuedDocumentPreCreateInfo.TemplatesListOption.IsSet)
                if (issuedDocumentPreCreateInfo.TemplatesListOption.Value != null)
                {
                    writer.WritePropertyName("templates_list");
                    JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.TemplatesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("templates_list");
            if (issuedDocumentPreCreateInfo.DnTemplatesListOption.IsSet)
                if (issuedDocumentPreCreateInfo.DnTemplatesListOption.Value != null)
                {
                    writer.WritePropertyName("dn_templates_list");
                    JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.DnTemplatesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("dn_templates_list");
            if (issuedDocumentPreCreateInfo.AiTemplatesListOption.IsSet)
                if (issuedDocumentPreCreateInfo.AiTemplatesListOption.Value != null)
                {
                    writer.WritePropertyName("ai_templates_list");
                    JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.AiTemplatesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ai_templates_list");
            if (issuedDocumentPreCreateInfo.PaymentMethodsListOption.IsSet)
                if (issuedDocumentPreCreateInfo.PaymentMethodsListOption.Value != null)
                {
                    writer.WritePropertyName("payment_methods_list");
                    JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.PaymentMethodsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_methods_list");
            if (issuedDocumentPreCreateInfo.PaymentAccountsListOption.IsSet)
                if (issuedDocumentPreCreateInfo.PaymentAccountsListOption.Value != null)
                {
                    writer.WritePropertyName("payment_accounts_list");
                    JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.PaymentAccountsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_accounts_list");
            if (issuedDocumentPreCreateInfo.VatTypesListOption.IsSet)
                if (issuedDocumentPreCreateInfo.VatTypesListOption.Value != null)
                {
                    writer.WritePropertyName("vat_types_list");
                    JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.VatTypesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("vat_types_list");
            if (issuedDocumentPreCreateInfo.LanguagesListOption.IsSet)
                if (issuedDocumentPreCreateInfo.LanguagesListOption.Value != null)
                {
                    writer.WritePropertyName("languages_list");
                    JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.LanguagesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("languages_list");
            if (issuedDocumentPreCreateInfo.PriceListsOption.IsSet)
            {
                writer.WritePropertyName("price_lists");
                JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfo.PriceLists, jsonSerializerOptions);
            }
        }
    }
}
