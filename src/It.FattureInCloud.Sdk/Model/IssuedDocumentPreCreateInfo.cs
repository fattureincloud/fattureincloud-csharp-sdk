/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     IssuedDocumentPreCreateInfo
    /// </summary>
    [DataContract(Name = "IssuedDocumentPreCreateInfo")]
    public class IssuedDocumentPreCreateInfo : IEquatable<IssuedDocumentPreCreateInfo>, IValidatableObject
    {
        private List<DocumentTemplate> _AiTemplatesList;
        private List<string> _CountriesList;
        private List<Currency> _CurrenciesList;
        private IssuedDocumentPreCreateInfoDefaultValues _DefaultValues;
        private Dictionary<string, Dictionary> _DnNumerations;
        private List<DocumentTemplate> _DnTemplatesList;
        private IssuedDocumentPreCreateInfoExtraDataDefaultValues _ExtraDataDefaultValues;
        private bool _flagAiTemplatesList;
        private bool _flagCountriesList;
        private bool _flagCurrenciesList;
        private bool _flagDefaultValues;
        private bool _flagDnNumerations;
        private bool _flagDnTemplatesList;
        private bool _flagExtraDataDefaultValues;
        private bool _flagItemsDefaultValues;
        private bool _flagNumerations;
        private bool _flagPaymentAccountsList;
        private bool _flagPaymentMethodsList;
        private bool _flagTemplatesList;
        private bool _flagVatTypesList;
        private IssuedDocumentPreCreateInfoItemsDefaultValues _ItemsDefaultValues;
        private Dictionary<string, Dictionary> _Numerations;
        private List<PaymentAccount> _PaymentAccountsList;
        private List<PaymentMethod> _PaymentMethodsList;
        private List<DocumentTemplate> _TemplatesList;
        private List<VatType> _VatTypesList;

        /// <summary>
        ///     Initializes a new instance of the <see cref="IssuedDocumentPreCreateInfo" /> class.
        /// </summary>
        /// <param name="numerations">numerations.</param>
        /// <param name="dnNumerations">dnNumerations.</param>
        /// <param name="defaultValues">defaultValues.</param>
        /// <param name="extraDataDefaultValues">extraDataDefaultValues.</param>
        /// <param name="itemsDefaultValues">itemsDefaultValues.</param>
        /// <param name="countriesList">Countries list..</param>
        /// <param name="currenciesList">Currencies list..</param>
        /// <param name="templatesList">Document templates list..</param>
        /// <param name="dnTemplatesList">Delivery note templates list..</param>
        /// <param name="aiTemplatesList">Accompanying invoice templates list..</param>
        /// <param name="paymentMethodsList">Payment methods list..</param>
        /// <param name="paymentAccountsList">Payment accounts list..</param>
        /// <param name="vatTypesList">Vat types list..</param>
        public IssuedDocumentPreCreateInfo(
            Dictionary<string, Dictionary> numerations = default(Dictionary<string, Dictionary>),
            Dictionary<string, Dictionary> dnNumerations = default(Dictionary<string, Dictionary>),
            IssuedDocumentPreCreateInfoDefaultValues defaultValues = default,
            IssuedDocumentPreCreateInfoExtraDataDefaultValues extraDataDefaultValues = default,
            IssuedDocumentPreCreateInfoItemsDefaultValues itemsDefaultValues = default,
            List<string> countriesList = default(List<string>), List<Currency> currenciesList = default(List<Currency>),
            List<DocumentTemplate> templatesList = default(List<DocumentTemplate>),
            List<DocumentTemplate> dnTemplatesList = default(List<DocumentTemplate>),
            List<DocumentTemplate> aiTemplatesList = default(List<DocumentTemplate>),
            List<PaymentMethod> paymentMethodsList = default(List<PaymentMethod>),
            List<PaymentAccount> paymentAccountsList = default(List<PaymentAccount>),
            List<VatType> vatTypesList = default(List<VatType>))
        {
            _Numerations = numerations;
            if (Numerations != null) _flagNumerations = true;
            _DnNumerations = dnNumerations;
            if (DnNumerations != null) _flagDnNumerations = true;
            _DefaultValues = defaultValues;
            if (DefaultValues != null) _flagDefaultValues = true;
            _ExtraDataDefaultValues = extraDataDefaultValues;
            if (ExtraDataDefaultValues != null) _flagExtraDataDefaultValues = true;
            _ItemsDefaultValues = itemsDefaultValues;
            if (ItemsDefaultValues != null) _flagItemsDefaultValues = true;
            _CountriesList = countriesList;
            if (CountriesList != null) _flagCountriesList = true;
            _CurrenciesList = currenciesList;
            if (CurrenciesList != null) _flagCurrenciesList = true;
            _TemplatesList = templatesList;
            if (TemplatesList != null) _flagTemplatesList = true;
            _DnTemplatesList = dnTemplatesList;
            if (DnTemplatesList != null) _flagDnTemplatesList = true;
            _AiTemplatesList = aiTemplatesList;
            if (AiTemplatesList != null) _flagAiTemplatesList = true;
            _PaymentMethodsList = paymentMethodsList;
            if (PaymentMethodsList != null) _flagPaymentMethodsList = true;
            _PaymentAccountsList = paymentAccountsList;
            if (PaymentAccountsList != null) _flagPaymentAccountsList = true;
            _VatTypesList = vatTypesList;
            if (VatTypesList != null) _flagVatTypesList = true;
        }

        /// <summary>
        ///     Gets or Sets Numerations
        /// </summary>
        [DataMember(Name = "numerations", EmitDefaultValue = false)]
        public Dictionary<string, Dictionary> Numerations
        {
            get => _Numerations;
            set
            {
                _Numerations = value;
                _flagNumerations = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DnNumerations
        /// </summary>
        [DataMember(Name = "dn_numerations", EmitDefaultValue = false)]
        public Dictionary<string, Dictionary> DnNumerations
        {
            get => _DnNumerations;
            set
            {
                _DnNumerations = value;
                _flagDnNumerations = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DefaultValues
        /// </summary>
        [DataMember(Name = "default_values", EmitDefaultValue = true)]
        public IssuedDocumentPreCreateInfoDefaultValues DefaultValues
        {
            get => _DefaultValues;
            set
            {
                _DefaultValues = value;
                _flagDefaultValues = true;
            }
        }

        /// <summary>
        ///     Gets or Sets ExtraDataDefaultValues
        /// </summary>
        [DataMember(Name = "extra_data_default_values", EmitDefaultValue = true)]
        public IssuedDocumentPreCreateInfoExtraDataDefaultValues ExtraDataDefaultValues
        {
            get => _ExtraDataDefaultValues;
            set
            {
                _ExtraDataDefaultValues = value;
                _flagExtraDataDefaultValues = true;
            }
        }

        /// <summary>
        ///     Gets or Sets ItemsDefaultValues
        /// </summary>
        [DataMember(Name = "items_default_values", EmitDefaultValue = true)]
        public IssuedDocumentPreCreateInfoItemsDefaultValues ItemsDefaultValues
        {
            get => _ItemsDefaultValues;
            set
            {
                _ItemsDefaultValues = value;
                _flagItemsDefaultValues = true;
            }
        }

        /// <summary>
        ///     Countries list.
        /// </summary>
        /// <value>Countries list.</value>
        [DataMember(Name = "countries_list", EmitDefaultValue = true)]
        public List<string> CountriesList
        {
            get => _CountriesList;
            set
            {
                _CountriesList = value;
                _flagCountriesList = true;
            }
        }

        /// <summary>
        ///     Currencies list.
        /// </summary>
        /// <value>Currencies list.</value>
        [DataMember(Name = "currencies_list", EmitDefaultValue = true)]
        public List<Currency> CurrenciesList
        {
            get => _CurrenciesList;
            set
            {
                _CurrenciesList = value;
                _flagCurrenciesList = true;
            }
        }

        /// <summary>
        ///     Document templates list.
        /// </summary>
        /// <value>Document templates list.</value>
        [DataMember(Name = "templates_list", EmitDefaultValue = true)]
        public List<DocumentTemplate> TemplatesList
        {
            get => _TemplatesList;
            set
            {
                _TemplatesList = value;
                _flagTemplatesList = true;
            }
        }

        /// <summary>
        ///     Delivery note templates list.
        /// </summary>
        /// <value>Delivery note templates list.</value>
        [DataMember(Name = "dn_templates_list", EmitDefaultValue = true)]
        public List<DocumentTemplate> DnTemplatesList
        {
            get => _DnTemplatesList;
            set
            {
                _DnTemplatesList = value;
                _flagDnTemplatesList = true;
            }
        }

        /// <summary>
        ///     Accompanying invoice templates list.
        /// </summary>
        /// <value>Accompanying invoice templates list.</value>
        [DataMember(Name = "ai_templates_list", EmitDefaultValue = true)]
        public List<DocumentTemplate> AiTemplatesList
        {
            get => _AiTemplatesList;
            set
            {
                _AiTemplatesList = value;
                _flagAiTemplatesList = true;
            }
        }

        /// <summary>
        ///     Payment methods list.
        /// </summary>
        /// <value>Payment methods list.</value>
        [DataMember(Name = "payment_methods_list", EmitDefaultValue = true)]
        public List<PaymentMethod> PaymentMethodsList
        {
            get => _PaymentMethodsList;
            set
            {
                _PaymentMethodsList = value;
                _flagPaymentMethodsList = true;
            }
        }

        /// <summary>
        ///     Payment accounts list.
        /// </summary>
        /// <value>Payment accounts list.</value>
        [DataMember(Name = "payment_accounts_list", EmitDefaultValue = true)]
        public List<PaymentAccount> PaymentAccountsList
        {
            get => _PaymentAccountsList;
            set
            {
                _PaymentAccountsList = value;
                _flagPaymentAccountsList = true;
            }
        }

        /// <summary>
        ///     Vat types list.
        /// </summary>
        /// <value>Vat types list.</value>
        [DataMember(Name = "vat_types_list", EmitDefaultValue = true)]
        public List<VatType> VatTypesList
        {
            get => _VatTypesList;
            set
            {
                _VatTypesList = value;
                _flagVatTypesList = true;
            }
        }

        /// <summary>
        ///     Returns false as Numerations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumerations()
        {
            return _flagNumerations;
        }

        /// <summary>
        ///     Returns false as DnNumerations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnNumerations()
        {
            return _flagDnNumerations;
        }

        /// <summary>
        ///     Returns false as DefaultValues should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultValues()
        {
            return _flagDefaultValues;
        }

        /// <summary>
        ///     Returns false as ExtraDataDefaultValues should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExtraDataDefaultValues()
        {
            return _flagExtraDataDefaultValues;
        }

        /// <summary>
        ///     Returns false as ItemsDefaultValues should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItemsDefaultValues()
        {
            return _flagItemsDefaultValues;
        }

        /// <summary>
        ///     Returns false as CountriesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountriesList()
        {
            return _flagCountriesList;
        }

        /// <summary>
        ///     Returns false as CurrenciesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrenciesList()
        {
            return _flagCurrenciesList;
        }

        /// <summary>
        ///     Returns false as TemplatesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTemplatesList()
        {
            return _flagTemplatesList;
        }

        /// <summary>
        ///     Returns false as DnTemplatesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnTemplatesList()
        {
            return _flagDnTemplatesList;
        }

        /// <summary>
        ///     Returns false as AiTemplatesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAiTemplatesList()
        {
            return _flagAiTemplatesList;
        }

        /// <summary>
        ///     Returns false as PaymentMethodsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentMethodsList()
        {
            return _flagPaymentMethodsList;
        }

        /// <summary>
        ///     Returns false as PaymentAccountsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccountsList()
        {
            return _flagPaymentAccountsList;
        }

        /// <summary>
        ///     Returns false as VatTypesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVatTypesList()
        {
            return _flagVatTypesList;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentPreCreateInfo {\n");
            sb.Append("  Numerations: ").Append(Numerations).Append("\n");
            sb.Append("  DnNumerations: ").Append(DnNumerations).Append("\n");
            sb.Append("  DefaultValues: ").Append(DefaultValues).Append("\n");
            sb.Append("  ExtraDataDefaultValues: ").Append(ExtraDataDefaultValues).Append("\n");
            sb.Append("  ItemsDefaultValues: ").Append(ItemsDefaultValues).Append("\n");
            sb.Append("  CountriesList: ").Append(CountriesList).Append("\n");
            sb.Append("  CurrenciesList: ").Append(CurrenciesList).Append("\n");
            sb.Append("  TemplatesList: ").Append(TemplatesList).Append("\n");
            sb.Append("  DnTemplatesList: ").Append(DnTemplatesList).Append("\n");
            sb.Append("  AiTemplatesList: ").Append(AiTemplatesList).Append("\n");
            sb.Append("  PaymentMethodsList: ").Append(PaymentMethodsList).Append("\n");
            sb.Append("  PaymentAccountsList: ").Append(PaymentAccountsList).Append("\n");
            sb.Append("  VatTypesList: ").Append(VatTypesList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as IssuedDocumentPreCreateInfo);
        }

        /// <summary>
        ///     Returns true if IssuedDocumentPreCreateInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentPreCreateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentPreCreateInfo input)
        {
            if (input == null) return false;
            return
                (
                    Numerations == input.Numerations ||
                    (Numerations != null &&
                     input.Numerations != null &&
                     Numerations.SequenceEqual(input.Numerations))
                ) &&
                (
                    DnNumerations == input.DnNumerations ||
                    (DnNumerations != null &&
                     input.DnNumerations != null &&
                     DnNumerations.SequenceEqual(input.DnNumerations))
                ) &&
                (
                    DefaultValues == input.DefaultValues ||
                    (DefaultValues != null &&
                     DefaultValues.Equals(input.DefaultValues))
                ) &&
                (
                    ExtraDataDefaultValues == input.ExtraDataDefaultValues ||
                    (ExtraDataDefaultValues != null &&
                     ExtraDataDefaultValues.Equals(input.ExtraDataDefaultValues))
                ) &&
                (
                    ItemsDefaultValues == input.ItemsDefaultValues ||
                    (ItemsDefaultValues != null &&
                     ItemsDefaultValues.Equals(input.ItemsDefaultValues))
                ) &&
                (
                    CountriesList == input.CountriesList ||
                    (CountriesList != null &&
                     input.CountriesList != null &&
                     CountriesList.SequenceEqual(input.CountriesList))
                ) &&
                (
                    CurrenciesList == input.CurrenciesList ||
                    (CurrenciesList != null &&
                     input.CurrenciesList != null &&
                     CurrenciesList.SequenceEqual(input.CurrenciesList))
                ) &&
                (
                    TemplatesList == input.TemplatesList ||
                    (TemplatesList != null &&
                     input.TemplatesList != null &&
                     TemplatesList.SequenceEqual(input.TemplatesList))
                ) &&
                (
                    DnTemplatesList == input.DnTemplatesList ||
                    (DnTemplatesList != null &&
                     input.DnTemplatesList != null &&
                     DnTemplatesList.SequenceEqual(input.DnTemplatesList))
                ) &&
                (
                    AiTemplatesList == input.AiTemplatesList ||
                    (AiTemplatesList != null &&
                     input.AiTemplatesList != null &&
                     AiTemplatesList.SequenceEqual(input.AiTemplatesList))
                ) &&
                (
                    PaymentMethodsList == input.PaymentMethodsList ||
                    (PaymentMethodsList != null &&
                     input.PaymentMethodsList != null &&
                     PaymentMethodsList.SequenceEqual(input.PaymentMethodsList))
                ) &&
                (
                    PaymentAccountsList == input.PaymentAccountsList ||
                    (PaymentAccountsList != null &&
                     input.PaymentAccountsList != null &&
                     PaymentAccountsList.SequenceEqual(input.PaymentAccountsList))
                ) &&
                (
                    VatTypesList == input.VatTypesList ||
                    (VatTypesList != null &&
                     input.VatTypesList != null &&
                     VatTypesList.SequenceEqual(input.VatTypesList))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Numerations != null) hashCode = hashCode * 59 + Numerations.GetHashCode();
                if (DnNumerations != null) hashCode = hashCode * 59 + DnNumerations.GetHashCode();
                if (DefaultValues != null) hashCode = hashCode * 59 + DefaultValues.GetHashCode();
                if (ExtraDataDefaultValues != null) hashCode = hashCode * 59 + ExtraDataDefaultValues.GetHashCode();
                if (ItemsDefaultValues != null) hashCode = hashCode * 59 + ItemsDefaultValues.GetHashCode();
                if (CountriesList != null) hashCode = hashCode * 59 + CountriesList.GetHashCode();
                if (CurrenciesList != null) hashCode = hashCode * 59 + CurrenciesList.GetHashCode();
                if (TemplatesList != null) hashCode = hashCode * 59 + TemplatesList.GetHashCode();
                if (DnTemplatesList != null) hashCode = hashCode * 59 + DnTemplatesList.GetHashCode();
                if (AiTemplatesList != null) hashCode = hashCode * 59 + AiTemplatesList.GetHashCode();
                if (PaymentMethodsList != null) hashCode = hashCode * 59 + PaymentMethodsList.GetHashCode();
                if (PaymentAccountsList != null) hashCode = hashCode * 59 + PaymentAccountsList.GetHashCode();
                if (VatTypesList != null) hashCode = hashCode * 59 + VatTypesList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}