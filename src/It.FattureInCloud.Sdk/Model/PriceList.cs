// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// PriceList
    /// </summary>
    public partial class PriceList : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceList" /> class.
        /// </summary>
        /// <param name="id">Price list id</param>
        /// <param name="name">Price list name</param>
        /// <param name="pricesType">pricesType</param>
        /// <param name="isDefault">This entity is default</param>
        /// <param name="validFrom">Price list validity start date</param>
        /// <param name="validTo">Price list validity end date</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public PriceList(Option<string> id = default, Option<string> name = default, Option<PriceListPricesType?> pricesType = default, Option<bool?> isDefault = default, Option<string> validFrom = default, Option<string> validTo = default, Option<PriceListType?> type = default)
        {
            IdOption = id;
            NameOption = name;
            PricesTypeOption = pricesType;
            IsDefaultOption = isDefault;
            ValidFromOption = validFrom;
            ValidToOption = validTo;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PricesType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PriceListPricesType?> PricesTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PricesType
        /// </summary>
        [JsonPropertyName("prices_type")]
        public PriceListPricesType? PricesType { get { return this.PricesTypeOption; } set { this.PricesTypeOption = new Option<PriceListPricesType?>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PriceListType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public PriceListType? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<PriceListType?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// Price list id
        /// </summary>
        /// <value>Price list id</value>
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Price list name
        /// </summary>
        /// <value>Price list name</value>
        /* <example>123</example> */
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsDefault
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDefaultOption { get; private set; }

        /// <summary>
        /// This entity is default
        /// </summary>
        /// <value>This entity is default</value>
        [JsonPropertyName("is_default")]
        public bool? IsDefault { get { return this.IsDefaultOption; } set { this.IsDefaultOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ValidFrom
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ValidFromOption { get; private set; }

        /// <summary>
        /// Price list validity start date
        /// </summary>
        /// <value>Price list validity start date</value>
        [JsonPropertyName("valid_from")]
        public string ValidFrom { get { return this.ValidFromOption; } set { this.ValidFromOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ValidTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ValidToOption { get; private set; }

        /// <summary>
        /// Price list validity end date
        /// </summary>
        /// <value>Price list validity end date</value>
        [JsonPropertyName("valid_to")]
        public string ValidTo { get { return this.ValidToOption; } set { this.ValidToOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PriceList {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PricesType: ").Append(PricesType).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="PriceList" />
    /// </summary>
    public class PriceListJsonConverter : JsonConverter<PriceList>
    {
        /// <summary>
        /// Deserializes json to <see cref="PriceList" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PriceList Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> id = default;
            Option<string> name = default;
            Option<PriceListPricesType?> pricesType = default;
            Option<bool?> isDefault = default;
            Option<string> validFrom = default;
            Option<string> validTo = default;
            Option<PriceListType?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "prices_type":
                            string pricesTypeRawValue = utf8JsonReader.GetString();
                            if (pricesTypeRawValue != null)
                                pricesType = new Option<PriceListPricesType?>(PriceListPricesTypeValueConverter.FromStringOrDefault(pricesTypeRawValue));
                            break;
                        case "is_default":
                            isDefault = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "valid_from":
                            validFrom = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "valid_to":
                            validTo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<PriceListType?>(PriceListTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (pricesType.IsSet && pricesType.Value == null)
                throw new ArgumentNullException(nameof(pricesType), "Property is not nullable for class PriceList.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PriceList.");

            return new PriceList(id, name, pricesType, isDefault, validFrom, validTo, type);
        }

        /// <summary>
        /// Serializes a <see cref="PriceList" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="priceList"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PriceList priceList, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, priceList, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PriceList" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="priceList"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PriceList priceList, JsonSerializerOptions jsonSerializerOptions)
        {
            if (priceList.IdOption.IsSet)
                if (priceList.IdOption.Value != null)
                    writer.WriteString("id", priceList.Id);
                else
                    writer.WriteNull("id");

            if (priceList.NameOption.IsSet)
                if (priceList.NameOption.Value != null)
                    writer.WriteString("name", priceList.Name);
                else
                    writer.WriteNull("name");

            if (priceList.PricesTypeOption.IsSet)
            {
                var pricesTypeRawValue = PriceListPricesTypeValueConverter.ToJsonValue(priceList.PricesType.Value);
                writer.WriteString("prices_type", pricesTypeRawValue);
            }
            if (priceList.IsDefaultOption.IsSet)
                if (priceList.IsDefaultOption.Value != null)
                    writer.WriteBoolean("is_default", priceList.IsDefaultOption.Value.Value);
                else
                    writer.WriteNull("is_default");

            if (priceList.ValidFromOption.IsSet)
                if (priceList.ValidFromOption.Value != null)
                    writer.WriteString("valid_from", priceList.ValidFrom);
                else
                    writer.WriteNull("valid_from");

            if (priceList.ValidToOption.IsSet)
                if (priceList.ValidToOption.Value != null)
                    writer.WriteString("valid_to", priceList.ValidTo);
                else
                    writer.WriteNull("valid_to");

            if (priceList.TypeOption.IsSet)
            {
                var typeRawValue = PriceListTypeValueConverter.ToJsonValue(priceList.Type.Value);
                writer.WriteString("type", typeRawValue);
            }
        }
    }
}
