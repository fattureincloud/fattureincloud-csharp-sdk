// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// EmailSchedule
    /// </summary>
    public partial class EmailSchedule : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSchedule" /> class.
        /// </summary>
        /// <param name="senderId">Email sender id [required if **sender_email** is not specified]</param>
        /// <param name="senderEmail">Email sender address [required if **sender_id** is not specified]</param>
        /// <param name="recipientEmail">Email recipient emails [comma separated]</param>
        /// <param name="subject">Email subject</param>
        /// <param name="body">Email body [HTML Escaped] [max size 50KiB]</param>
        /// <param name="include">include</param>
        /// <param name="attachPdf">Attach the pdf of the document</param>
        /// <param name="sendCopy">Send a copy of the email to the **cc_email** specified by **Get email data**</param>
        [JsonConstructor]
        public EmailSchedule(Option<int?> senderId = default, Option<string> senderEmail = default, Option<string> recipientEmail = default, Option<string> subject = default, Option<string> body = default, Option<EmailScheduleInclude> include = default, Option<bool?> attachPdf = default, Option<bool?> sendCopy = default)
        {
            SenderIdOption = senderId;
            SenderEmailOption = senderEmail;
            RecipientEmailOption = recipientEmail;
            SubjectOption = subject;
            BodyOption = body;
            IncludeOption = include;
            AttachPdfOption = attachPdf;
            SendCopyOption = sendCopy;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SenderId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SenderIdOption { get; private set; }

        /// <summary>
        /// Email sender id [required if **sender_email** is not specified]
        /// </summary>
        /// <value>Email sender id [required if **sender_email** is not specified]</value>
        [JsonPropertyName("sender_id")]
        public int? SenderId { get { return this.SenderIdOption; } set { this.SenderIdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of SenderEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SenderEmailOption { get; private set; }

        /// <summary>
        /// Email sender address [required if **sender_id** is not specified]
        /// </summary>
        /// <value>Email sender address [required if **sender_id** is not specified]</value>
        [JsonPropertyName("sender_email")]
        public string SenderEmail { get { return this.SenderEmailOption; } set { this.SenderEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecipientEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecipientEmailOption { get; private set; }

        /// <summary>
        /// Email recipient emails [comma separated]
        /// </summary>
        /// <value>Email recipient emails [comma separated]</value>
        [JsonPropertyName("recipient_email")]
        public string RecipientEmail { get { return this.RecipientEmailOption; } set { this.RecipientEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Email subject
        /// </summary>
        /// <value>Email subject</value>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyOption { get; private set; }

        /// <summary>
        /// Email body [HTML Escaped] [max size 50KiB]
        /// </summary>
        /// <value>Email body [HTML Escaped] [max size 50KiB]</value>
        [JsonPropertyName("body")]
        public string Body { get { return this.BodyOption; } set { this.BodyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Include
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmailScheduleInclude> IncludeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Include
        /// </summary>
        [JsonPropertyName("include")]
        public EmailScheduleInclude Include { get { return this.IncludeOption; } set { this.IncludeOption = new Option<EmailScheduleInclude>(value); } }

        /// <summary>
        /// Used to track the state of AttachPdf
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AttachPdfOption { get; private set; }

        /// <summary>
        /// Attach the pdf of the document
        /// </summary>
        /// <value>Attach the pdf of the document</value>
        [JsonPropertyName("attach_pdf")]
        public bool? AttachPdf { get { return this.AttachPdfOption; } set { this.AttachPdfOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of SendCopy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SendCopyOption { get; private set; }

        /// <summary>
        /// Send a copy of the email to the **cc_email** specified by **Get email data**
        /// </summary>
        /// <value>Send a copy of the email to the **cc_email** specified by **Get email data**</value>
        [JsonPropertyName("send_copy")]
        public bool? SendCopy { get { return this.SendCopyOption; } set { this.SendCopyOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailSchedule {\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  SenderEmail: ").Append(SenderEmail).Append("\n");
            sb.Append("  RecipientEmail: ").Append(RecipientEmail).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("  AttachPdf: ").Append(AttachPdf).Append("\n");
            sb.Append("  SendCopy: ").Append(SendCopy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="EmailSchedule" />
    /// </summary>
    public class EmailScheduleJsonConverter : JsonConverter<EmailSchedule>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailSchedule" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailSchedule Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> senderId = default;
            Option<string> senderEmail = default;
            Option<string> recipientEmail = default;
            Option<string> subject = default;
            Option<string> body = default;
            Option<EmailScheduleInclude> include = default;
            Option<bool?> attachPdf = default;
            Option<bool?> sendCopy = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sender_id":
                            senderId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sender_email":
                            senderEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recipient_email":
                            recipientEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "include":
                            include = new Option<EmailScheduleInclude>(JsonSerializer.Deserialize<EmailScheduleInclude>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "attach_pdf":
                            attachPdf = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "send_copy":
                            sendCopy = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new EmailSchedule(senderId, senderEmail, recipientEmail, subject, body, include, attachPdf, sendCopy);
        }

        /// <summary>
        /// Serializes a <see cref="EmailSchedule" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailSchedule"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailSchedule emailSchedule, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailSchedule, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailSchedule" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailSchedule"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailSchedule emailSchedule, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailSchedule.SenderIdOption.IsSet)
                if (emailSchedule.SenderIdOption.Value != null)
                    writer.WriteNumber("sender_id", emailSchedule.SenderIdOption.Value.Value);
                else
                    writer.WriteNull("sender_id");

            if (emailSchedule.SenderEmailOption.IsSet)
                if (emailSchedule.SenderEmailOption.Value != null)
                    writer.WriteString("sender_email", emailSchedule.SenderEmail);
                else
                    writer.WriteNull("sender_email");

            if (emailSchedule.RecipientEmailOption.IsSet)
                if (emailSchedule.RecipientEmailOption.Value != null)
                    writer.WriteString("recipient_email", emailSchedule.RecipientEmail);
                else
                    writer.WriteNull("recipient_email");

            if (emailSchedule.SubjectOption.IsSet)
                if (emailSchedule.SubjectOption.Value != null)
                    writer.WriteString("subject", emailSchedule.Subject);
                else
                    writer.WriteNull("subject");

            if (emailSchedule.BodyOption.IsSet)
                if (emailSchedule.BodyOption.Value != null)
                    writer.WriteString("body", emailSchedule.Body);
                else
                    writer.WriteNull("body");

            if (emailSchedule.IncludeOption.IsSet)
                if (emailSchedule.IncludeOption.Value != null)
                {
                    writer.WritePropertyName("include");
                    JsonSerializer.Serialize(writer, emailSchedule.Include, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("include");
            if (emailSchedule.AttachPdfOption.IsSet)
                if (emailSchedule.AttachPdfOption.Value != null)
                    writer.WriteBoolean("attach_pdf", emailSchedule.AttachPdfOption.Value.Value);
                else
                    writer.WriteNull("attach_pdf");

            if (emailSchedule.SendCopyOption.IsSet)
                if (emailSchedule.SendCopyOption.Value != null)
                    writer.WriteBoolean("send_copy", emailSchedule.SendCopyOption.Value.Value);
                else
                    writer.WriteNull("send_copy");
        }
    }
}
