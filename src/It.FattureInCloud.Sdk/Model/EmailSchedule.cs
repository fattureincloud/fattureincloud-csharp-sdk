/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// EmailSchedule
    /// </summary>
    [DataContract(Name = "EmailSchedule")]
    public partial class EmailSchedule : IEquatable<EmailSchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSchedule" /> class.
        /// </summary>
        /// <param name="senderId">Sender id. Required if &#x60;sender_email&#x60; is not specified.</param>
        /// <param name="senderEmail">Sender email. Required if &#x60;sender_id&#x60; is not specified.</param>
        /// <param name="recipientEmail">One or more comma separated recipient emails.</param>
        /// <param name="subject">Email subject.</param>
        /// <param name="body">Email body.</param>
        /// <param name="include">include.</param>
        /// <param name="attachPdf">If set to true, documents will be sent as PDF attachments too.</param>
        /// <param name="sendCopy">If set to true, a copy of the email will be sent to the &#x60;cc_email&#x60; specified by &#x60;Get email data&#x60;.</param>
        public EmailSchedule(decimal senderId = default(decimal), string senderEmail = default(string), string recipientEmail = default(string), string subject = default(string), string body = default(string), EmailScheduleInclude include = default(EmailScheduleInclude), bool attachPdf = default(bool), bool sendCopy = default(bool))
        {
            this.SenderId = senderId;
            this.SenderEmail = senderEmail;
            this.RecipientEmail = recipientEmail;
            this.Subject = subject;
            this.Body = body;
            this.Include = include;
            this.AttachPdf = attachPdf;
            this.SendCopy = sendCopy;
        }

        /// <summary>
        /// Sender id. Required if &#x60;sender_email&#x60; is not specified
        /// </summary>
        /// <value>Sender id. Required if &#x60;sender_email&#x60; is not specified</value>
        [DataMember(Name = "sender_id", EmitDefaultValue = false)]
        public decimal SenderId { get; set; }

        /// <summary>
        /// Sender email. Required if &#x60;sender_id&#x60; is not specified
        /// </summary>
        /// <value>Sender email. Required if &#x60;sender_id&#x60; is not specified</value>
        [DataMember(Name = "sender_email", EmitDefaultValue = false)]
        public string SenderEmail { get; set; }

        /// <summary>
        /// One or more comma separated recipient emails
        /// </summary>
        /// <value>One or more comma separated recipient emails</value>
        [DataMember(Name = "recipient_email", EmitDefaultValue = false)]
        public string RecipientEmail { get; set; }

        /// <summary>
        /// Email subject
        /// </summary>
        /// <value>Email subject</value>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Email body
        /// </summary>
        /// <value>Email body</value>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets Include
        /// </summary>
        [DataMember(Name = "include", EmitDefaultValue = false)]
        public EmailScheduleInclude Include { get; set; }

        /// <summary>
        /// If set to true, documents will be sent as PDF attachments too
        /// </summary>
        /// <value>If set to true, documents will be sent as PDF attachments too</value>
        [DataMember(Name = "attach_pdf", EmitDefaultValue = true)]
        public bool AttachPdf { get; set; }

        /// <summary>
        /// If set to true, a copy of the email will be sent to the &#x60;cc_email&#x60; specified by &#x60;Get email data&#x60;
        /// </summary>
        /// <value>If set to true, a copy of the email will be sent to the &#x60;cc_email&#x60; specified by &#x60;Get email data&#x60;</value>
        [DataMember(Name = "send_copy", EmitDefaultValue = true)]
        public bool SendCopy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailSchedule {\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  SenderEmail: ").Append(SenderEmail).Append("\n");
            sb.Append("  RecipientEmail: ").Append(RecipientEmail).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("  AttachPdf: ").Append(AttachPdf).Append("\n");
            sb.Append("  SendCopy: ").Append(SendCopy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailSchedule);
        }

        /// <summary>
        /// Returns true if EmailSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailSchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SenderId == input.SenderId ||
                    this.SenderId.Equals(input.SenderId)
                ) && 
                (
                    this.SenderEmail == input.SenderEmail ||
                    (this.SenderEmail != null &&
                    this.SenderEmail.Equals(input.SenderEmail))
                ) && 
                (
                    this.RecipientEmail == input.RecipientEmail ||
                    (this.RecipientEmail != null &&
                    this.RecipientEmail.Equals(input.RecipientEmail))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.Include == input.Include ||
                    (this.Include != null &&
                    this.Include.Equals(input.Include))
                ) && 
                (
                    this.AttachPdf == input.AttachPdf ||
                    this.AttachPdf.Equals(input.AttachPdf)
                ) && 
                (
                    this.SendCopy == input.SendCopy ||
                    this.SendCopy.Equals(input.SendCopy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.SenderId.GetHashCode();
                if (this.SenderEmail != null)
                    hashCode = hashCode * 59 + this.SenderEmail.GetHashCode();
                if (this.RecipientEmail != null)
                    hashCode = hashCode * 59 + this.RecipientEmail.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.Include != null)
                    hashCode = hashCode * 59 + this.Include.GetHashCode();
                hashCode = hashCode * 59 + this.AttachPdf.GetHashCode();
                hashCode = hashCode * 59 + this.SendCopy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
