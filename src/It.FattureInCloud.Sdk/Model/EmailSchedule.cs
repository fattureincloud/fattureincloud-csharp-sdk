/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     EmailSchedule
    /// </summary>
    [DataContract(Name = "EmailSchedule")]
    public class EmailSchedule : IEquatable<EmailSchedule>, IValidatableObject
    {
        private bool? _AttachPdf;
        private string _Body;
        private bool _flagAttachPdf;
        private bool _flagBody;
        private bool _flagInclude;
        private bool _flagRecipientEmail;
        private bool _flagSendCopy;
        private bool _flagSenderEmail;
        private bool _flagSenderId;
        private bool _flagSubject;
        private EmailScheduleInclude _Include;
        private string _RecipientEmail;
        private bool? _SendCopy;
        private string _SenderEmail;
        private int? _SenderId;
        private string _Subject;

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailSchedule" /> class.
        /// </summary>
        /// <param name="senderId">Sender id. Required if &#x60;sender_email&#x60; is not specified.</param>
        /// <param name="senderEmail">Sender email. Required if &#x60;sender_id&#x60; is not specified.</param>
        /// <param name="recipientEmail">One or more comma separated recipient emails.</param>
        /// <param name="subject">Email subject.</param>
        /// <param name="body">Email body.</param>
        /// <param name="include">include.</param>
        /// <param name="attachPdf">If set to true, documents will be sent as PDF attachments too.</param>
        /// <param name="sendCopy">
        ///     If set to true, a copy of the email will be sent to the &#x60;cc_email&#x60; specified by &#x60;
        ///     Get email data&#x60;.
        /// </param>
        public EmailSchedule(int? senderId = default(int?), string senderEmail = default(string),
            string recipientEmail = default(string), string subject = default(string), string body = default(string),
            EmailScheduleInclude include = default, bool? attachPdf = default(bool?), bool? sendCopy = default(bool?))
        {
            _SenderId = senderId;
            if (SenderId != null) _flagSenderId = true;
            _SenderEmail = senderEmail;
            if (SenderEmail != null) _flagSenderEmail = true;
            _RecipientEmail = recipientEmail;
            if (RecipientEmail != null) _flagRecipientEmail = true;
            _Subject = subject;
            if (Subject != null) _flagSubject = true;
            _Body = body;
            if (Body != null) _flagBody = true;
            _Include = include;
            if (Include != null) _flagInclude = true;
            _AttachPdf = attachPdf;
            if (AttachPdf != null) _flagAttachPdf = true;
            _SendCopy = sendCopy;
            if (SendCopy != null) _flagSendCopy = true;
        }

        /// <summary>
        ///     Sender id. Required if &#x60;sender_email&#x60; is not specified
        /// </summary>
        /// <value>Sender id. Required if &#x60;sender_email&#x60; is not specified</value>
        [DataMember(Name = "sender_id", EmitDefaultValue = true)]
        public int? SenderId
        {
            get => _SenderId;
            set
            {
                _SenderId = value;
                _flagSenderId = true;
            }
        }

        /// <summary>
        ///     Sender email. Required if &#x60;sender_id&#x60; is not specified
        /// </summary>
        /// <value>Sender email. Required if &#x60;sender_id&#x60; is not specified</value>
        [DataMember(Name = "sender_email", EmitDefaultValue = true)]
        public string SenderEmail
        {
            get => _SenderEmail;
            set
            {
                _SenderEmail = value;
                _flagSenderEmail = true;
            }
        }

        /// <summary>
        ///     One or more comma separated recipient emails
        /// </summary>
        /// <value>One or more comma separated recipient emails</value>
        [DataMember(Name = "recipient_email", EmitDefaultValue = true)]
        public string RecipientEmail
        {
            get => _RecipientEmail;
            set
            {
                _RecipientEmail = value;
                _flagRecipientEmail = true;
            }
        }

        /// <summary>
        ///     Email subject
        /// </summary>
        /// <value>Email subject</value>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject
        {
            get => _Subject;
            set
            {
                _Subject = value;
                _flagSubject = true;
            }
        }

        /// <summary>
        ///     Email body
        /// </summary>
        /// <value>Email body</value>
        [DataMember(Name = "body", EmitDefaultValue = true)]
        public string Body
        {
            get => _Body;
            set
            {
                _Body = value;
                _flagBody = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Include
        /// </summary>
        [DataMember(Name = "include", EmitDefaultValue = true)]
        public EmailScheduleInclude Include
        {
            get => _Include;
            set
            {
                _Include = value;
                _flagInclude = true;
            }
        }

        /// <summary>
        ///     If set to true, documents will be sent as PDF attachments too
        /// </summary>
        /// <value>If set to true, documents will be sent as PDF attachments too</value>
        [DataMember(Name = "attach_pdf", EmitDefaultValue = true)]
        public bool? AttachPdf
        {
            get => _AttachPdf;
            set
            {
                _AttachPdf = value;
                _flagAttachPdf = true;
            }
        }

        /// <summary>
        ///     If set to true, a copy of the email will be sent to the &#x60;cc_email&#x60; specified by &#x60;Get email data
        ///     &#x60;
        /// </summary>
        /// <value>
        ///     If set to true, a copy of the email will be sent to the &#x60;cc_email&#x60; specified by &#x60;Get email data
        ///     &#x60;
        /// </value>
        [DataMember(Name = "send_copy", EmitDefaultValue = true)]
        public bool? SendCopy
        {
            get => _SendCopy;
            set
            {
                _SendCopy = value;
                _flagSendCopy = true;
            }
        }

        /// <summary>
        ///     Returns false as SenderId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSenderId()
        {
            return _flagSenderId;
        }

        /// <summary>
        ///     Returns false as SenderEmail should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSenderEmail()
        {
            return _flagSenderEmail;
        }

        /// <summary>
        ///     Returns false as RecipientEmail should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecipientEmail()
        {
            return _flagRecipientEmail;
        }

        /// <summary>
        ///     Returns false as Subject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubject()
        {
            return _flagSubject;
        }

        /// <summary>
        ///     Returns false as Body should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBody()
        {
            return _flagBody;
        }

        /// <summary>
        ///     Returns false as Include should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInclude()
        {
            return _flagInclude;
        }

        /// <summary>
        ///     Returns false as AttachPdf should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachPdf()
        {
            return _flagAttachPdf;
        }

        /// <summary>
        ///     Returns false as SendCopy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSendCopy()
        {
            return _flagSendCopy;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailSchedule {\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  SenderEmail: ").Append(SenderEmail).Append("\n");
            sb.Append("  RecipientEmail: ").Append(RecipientEmail).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("  AttachPdf: ").Append(AttachPdf).Append("\n");
            sb.Append("  SendCopy: ").Append(SendCopy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailSchedule);
        }

        /// <summary>
        ///     Returns true if EmailSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailSchedule input)
        {
            if (input == null) return false;
            return
                (
                    SenderId == input.SenderId ||
                    (SenderId != null &&
                     SenderId.Equals(input.SenderId))
                ) &&
                (
                    SenderEmail == input.SenderEmail ||
                    (SenderEmail != null &&
                     SenderEmail.Equals(input.SenderEmail))
                ) &&
                (
                    RecipientEmail == input.RecipientEmail ||
                    (RecipientEmail != null &&
                     RecipientEmail.Equals(input.RecipientEmail))
                ) &&
                (
                    Subject == input.Subject ||
                    (Subject != null &&
                     Subject.Equals(input.Subject))
                ) &&
                (
                    Body == input.Body ||
                    (Body != null &&
                     Body.Equals(input.Body))
                ) &&
                (
                    Include == input.Include ||
                    (Include != null &&
                     Include.Equals(input.Include))
                ) &&
                (
                    AttachPdf == input.AttachPdf ||
                    (AttachPdf != null &&
                     AttachPdf.Equals(input.AttachPdf))
                ) &&
                (
                    SendCopy == input.SendCopy ||
                    (SendCopy != null &&
                     SendCopy.Equals(input.SendCopy))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (SenderId != null) hashCode = hashCode * 59 + SenderId.GetHashCode();
                if (SenderEmail != null) hashCode = hashCode * 59 + SenderEmail.GetHashCode();
                if (RecipientEmail != null) hashCode = hashCode * 59 + RecipientEmail.GetHashCode();
                if (Subject != null) hashCode = hashCode * 59 + Subject.GetHashCode();
                if (Body != null) hashCode = hashCode * 59 + Body.GetHashCode();
                if (Include != null) hashCode = hashCode * 59 + Include.GetHashCode();
                if (AttachPdf != null) hashCode = hashCode * 59 + AttachPdf.GetHashCode();
                if (SendCopy != null) hashCode = hashCode * 59 + SendCopy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}