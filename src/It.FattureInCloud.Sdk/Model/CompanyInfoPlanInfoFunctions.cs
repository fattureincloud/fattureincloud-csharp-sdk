// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Access to functions for this company.
    /// </summary>
    public partial class CompanyInfoPlanInfoFunctions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyInfoPlanInfoFunctions" /> class.
        /// </summary>
        /// <param name="archive">archive</param>
        /// <param name="cerved">cerved</param>
        /// <param name="documentAttachments">documentAttachments</param>
        /// <param name="eInvoice">eInvoice</param>
        /// <param name="genius">genius</param>
        /// <param name="mailTracking">mailTracking</param>
        /// <param name="paymentNotifications">paymentNotifications</param>
        /// <param name="paypal">paypal</param>
        /// <param name="receipts">receipts</param>
        /// <param name="recurring">recurring</param>
        /// <param name="smtp">smtp</param>
        /// <param name="stock">stock</param>
        /// <param name="subaccounts">subaccounts</param>
        /// <param name="tesseraSanitaria">tesseraSanitaria</param>
        /// <param name="tsDigital">tsDigital</param>
        /// <param name="tsInvoiceTrading">tsInvoiceTrading</param>
        /// <param name="tsPay">tsPay</param>
        [JsonConstructor]
        public CompanyInfoPlanInfoFunctions(Option<bool?> archive = default, Option<bool?> cerved = default, Option<bool?> documentAttachments = default, Option<bool?> eInvoice = default, Option<bool?> genius = default, Option<bool?> mailTracking = default, Option<bool?> paymentNotifications = default, Option<bool?> paypal = default, Option<bool?> receipts = default, Option<bool?> recurring = default, Option<bool?> smtp = default, Option<bool?> stock = default, Option<bool?> subaccounts = default, Option<bool?> tesseraSanitaria = default, Option<bool?> tsDigital = default, Option<bool?> tsInvoiceTrading = default, Option<bool?> tsPay = default)
        {
            ArchiveOption = archive;
            CervedOption = cerved;
            DocumentAttachmentsOption = documentAttachments;
            EInvoiceOption = eInvoice;
            GeniusOption = genius;
            MailTrackingOption = mailTracking;
            PaymentNotificationsOption = paymentNotifications;
            PaypalOption = paypal;
            ReceiptsOption = receipts;
            RecurringOption = recurring;
            SmtpOption = smtp;
            StockOption = stock;
            SubaccountsOption = subaccounts;
            TesseraSanitariaOption = tesseraSanitaria;
            TsDigitalOption = tsDigital;
            TsInvoiceTradingOption = tsInvoiceTrading;
            TsPayOption = tsPay;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Archive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ArchiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets Archive
        /// </summary>
        [JsonPropertyName("archive")]
        public bool? Archive { get { return this.ArchiveOption; } set { this.ArchiveOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Cerved
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CervedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cerved
        /// </summary>
        [JsonPropertyName("cerved")]
        public bool? Cerved { get { return this.CervedOption; } set { this.CervedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of DocumentAttachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DocumentAttachmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentAttachments
        /// </summary>
        [JsonPropertyName("document_attachments")]
        public bool? DocumentAttachments { get { return this.DocumentAttachmentsOption; } set { this.DocumentAttachmentsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of EInvoice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EInvoiceOption { get; private set; }

        /// <summary>
        /// Gets or Sets EInvoice
        /// </summary>
        [JsonPropertyName("e_invoice")]
        public bool? EInvoice { get { return this.EInvoiceOption; } set { this.EInvoiceOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Genius
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> GeniusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Genius
        /// </summary>
        [JsonPropertyName("genius")]
        public bool? Genius { get { return this.GeniusOption; } set { this.GeniusOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of MailTracking
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MailTrackingOption { get; private set; }

        /// <summary>
        /// Gets or Sets MailTracking
        /// </summary>
        [JsonPropertyName("mail_tracking")]
        public bool? MailTracking { get { return this.MailTrackingOption; } set { this.MailTrackingOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of PaymentNotifications
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PaymentNotificationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentNotifications
        /// </summary>
        [JsonPropertyName("payment_notifications")]
        public bool? PaymentNotifications { get { return this.PaymentNotificationsOption; } set { this.PaymentNotificationsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Paypal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PaypalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Paypal
        /// </summary>
        [JsonPropertyName("paypal")]
        public bool? Paypal { get { return this.PaypalOption; } set { this.PaypalOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Receipts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ReceiptsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Receipts
        /// </summary>
        [JsonPropertyName("receipts")]
        public bool? Receipts { get { return this.ReceiptsOption; } set { this.ReceiptsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Recurring
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RecurringOption { get; private set; }

        /// <summary>
        /// Gets or Sets Recurring
        /// </summary>
        [JsonPropertyName("recurring")]
        public bool? Recurring { get { return this.RecurringOption; } set { this.RecurringOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Smtp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SmtpOption { get; private set; }

        /// <summary>
        /// Gets or Sets Smtp
        /// </summary>
        [JsonPropertyName("smtp")]
        public bool? Smtp { get { return this.SmtpOption; } set { this.SmtpOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Stock
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StockOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stock
        /// </summary>
        [JsonPropertyName("stock")]
        public bool? Stock { get { return this.StockOption; } set { this.StockOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Subaccounts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SubaccountsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subaccounts
        /// </summary>
        [JsonPropertyName("subaccounts")]
        public bool? Subaccounts { get { return this.SubaccountsOption; } set { this.SubaccountsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of TesseraSanitaria
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TesseraSanitariaOption { get; private set; }

        /// <summary>
        /// Gets or Sets TesseraSanitaria
        /// </summary>
        [JsonPropertyName("tessera_sanitaria")]
        public bool? TesseraSanitaria { get { return this.TesseraSanitariaOption; } set { this.TesseraSanitariaOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of TsDigital
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TsDigitalOption { get; private set; }

        /// <summary>
        /// Gets or Sets TsDigital
        /// </summary>
        [JsonPropertyName("ts_digital")]
        public bool? TsDigital { get { return this.TsDigitalOption; } set { this.TsDigitalOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of TsInvoiceTrading
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TsInvoiceTradingOption { get; private set; }

        /// <summary>
        /// Gets or Sets TsInvoiceTrading
        /// </summary>
        [JsonPropertyName("ts_invoice_trading")]
        public bool? TsInvoiceTrading { get { return this.TsInvoiceTradingOption; } set { this.TsInvoiceTradingOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of TsPay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TsPayOption { get; private set; }

        /// <summary>
        /// Gets or Sets TsPay
        /// </summary>
        [JsonPropertyName("ts_pay")]
        public bool? TsPay { get { return this.TsPayOption; } set { this.TsPayOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyInfoPlanInfoFunctions {\n");
            sb.Append("  Archive: ").Append(Archive).Append("\n");
            sb.Append("  Cerved: ").Append(Cerved).Append("\n");
            sb.Append("  DocumentAttachments: ").Append(DocumentAttachments).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  Genius: ").Append(Genius).Append("\n");
            sb.Append("  MailTracking: ").Append(MailTracking).Append("\n");
            sb.Append("  PaymentNotifications: ").Append(PaymentNotifications).Append("\n");
            sb.Append("  Paypal: ").Append(Paypal).Append("\n");
            sb.Append("  Receipts: ").Append(Receipts).Append("\n");
            sb.Append("  Recurring: ").Append(Recurring).Append("\n");
            sb.Append("  Smtp: ").Append(Smtp).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  Subaccounts: ").Append(Subaccounts).Append("\n");
            sb.Append("  TesseraSanitaria: ").Append(TesseraSanitaria).Append("\n");
            sb.Append("  TsDigital: ").Append(TsDigital).Append("\n");
            sb.Append("  TsInvoiceTrading: ").Append(TsInvoiceTrading).Append("\n");
            sb.Append("  TsPay: ").Append(TsPay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="CompanyInfoPlanInfoFunctions" />
    /// </summary>
    public class CompanyInfoPlanInfoFunctionsJsonConverter : JsonConverter<CompanyInfoPlanInfoFunctions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CompanyInfoPlanInfoFunctions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CompanyInfoPlanInfoFunctions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> archive = default;
            Option<bool?> cerved = default;
            Option<bool?> documentAttachments = default;
            Option<bool?> eInvoice = default;
            Option<bool?> genius = default;
            Option<bool?> mailTracking = default;
            Option<bool?> paymentNotifications = default;
            Option<bool?> paypal = default;
            Option<bool?> receipts = default;
            Option<bool?> recurring = default;
            Option<bool?> smtp = default;
            Option<bool?> stock = default;
            Option<bool?> subaccounts = default;
            Option<bool?> tesseraSanitaria = default;
            Option<bool?> tsDigital = default;
            Option<bool?> tsInvoiceTrading = default;
            Option<bool?> tsPay = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "archive":
                            archive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "cerved":
                            cerved = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "document_attachments":
                            documentAttachments = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "e_invoice":
                            eInvoice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "genius":
                            genius = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "mail_tracking":
                            mailTracking = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "payment_notifications":
                            paymentNotifications = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "paypal":
                            paypal = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "receipts":
                            receipts = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "recurring":
                            recurring = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "smtp":
                            smtp = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "stock":
                            stock = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "subaccounts":
                            subaccounts = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "tessera_sanitaria":
                            tesseraSanitaria = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ts_digital":
                            tsDigital = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ts_invoice_trading":
                            tsInvoiceTrading = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ts_pay":
                            tsPay = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new CompanyInfoPlanInfoFunctions(archive, cerved, documentAttachments, eInvoice, genius, mailTracking, paymentNotifications, paypal, receipts, recurring, smtp, stock, subaccounts, tesseraSanitaria, tsDigital, tsInvoiceTrading, tsPay);
        }

        /// <summary>
        /// Serializes a <see cref="CompanyInfoPlanInfoFunctions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="companyInfoPlanInfoFunctions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CompanyInfoPlanInfoFunctions companyInfoPlanInfoFunctions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, companyInfoPlanInfoFunctions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CompanyInfoPlanInfoFunctions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="companyInfoPlanInfoFunctions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CompanyInfoPlanInfoFunctions companyInfoPlanInfoFunctions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (companyInfoPlanInfoFunctions.ArchiveOption.IsSet)
                if (companyInfoPlanInfoFunctions.ArchiveOption.Value != null)
                    writer.WriteBoolean("archive", companyInfoPlanInfoFunctions.ArchiveOption.Value.Value);
                else
                    writer.WriteNull("archive");

            if (companyInfoPlanInfoFunctions.CervedOption.IsSet)
                if (companyInfoPlanInfoFunctions.CervedOption.Value != null)
                    writer.WriteBoolean("cerved", companyInfoPlanInfoFunctions.CervedOption.Value.Value);
                else
                    writer.WriteNull("cerved");

            if (companyInfoPlanInfoFunctions.DocumentAttachmentsOption.IsSet)
                if (companyInfoPlanInfoFunctions.DocumentAttachmentsOption.Value != null)
                    writer.WriteBoolean("document_attachments", companyInfoPlanInfoFunctions.DocumentAttachmentsOption.Value.Value);
                else
                    writer.WriteNull("document_attachments");

            if (companyInfoPlanInfoFunctions.EInvoiceOption.IsSet)
                if (companyInfoPlanInfoFunctions.EInvoiceOption.Value != null)
                    writer.WriteBoolean("e_invoice", companyInfoPlanInfoFunctions.EInvoiceOption.Value.Value);
                else
                    writer.WriteNull("e_invoice");

            if (companyInfoPlanInfoFunctions.GeniusOption.IsSet)
                if (companyInfoPlanInfoFunctions.GeniusOption.Value != null)
                    writer.WriteBoolean("genius", companyInfoPlanInfoFunctions.GeniusOption.Value.Value);
                else
                    writer.WriteNull("genius");

            if (companyInfoPlanInfoFunctions.MailTrackingOption.IsSet)
                if (companyInfoPlanInfoFunctions.MailTrackingOption.Value != null)
                    writer.WriteBoolean("mail_tracking", companyInfoPlanInfoFunctions.MailTrackingOption.Value.Value);
                else
                    writer.WriteNull("mail_tracking");

            if (companyInfoPlanInfoFunctions.PaymentNotificationsOption.IsSet)
                if (companyInfoPlanInfoFunctions.PaymentNotificationsOption.Value != null)
                    writer.WriteBoolean("payment_notifications", companyInfoPlanInfoFunctions.PaymentNotificationsOption.Value.Value);
                else
                    writer.WriteNull("payment_notifications");

            if (companyInfoPlanInfoFunctions.PaypalOption.IsSet)
                if (companyInfoPlanInfoFunctions.PaypalOption.Value != null)
                    writer.WriteBoolean("paypal", companyInfoPlanInfoFunctions.PaypalOption.Value.Value);
                else
                    writer.WriteNull("paypal");

            if (companyInfoPlanInfoFunctions.ReceiptsOption.IsSet)
                if (companyInfoPlanInfoFunctions.ReceiptsOption.Value != null)
                    writer.WriteBoolean("receipts", companyInfoPlanInfoFunctions.ReceiptsOption.Value.Value);
                else
                    writer.WriteNull("receipts");

            if (companyInfoPlanInfoFunctions.RecurringOption.IsSet)
                if (companyInfoPlanInfoFunctions.RecurringOption.Value != null)
                    writer.WriteBoolean("recurring", companyInfoPlanInfoFunctions.RecurringOption.Value.Value);
                else
                    writer.WriteNull("recurring");

            if (companyInfoPlanInfoFunctions.SmtpOption.IsSet)
                if (companyInfoPlanInfoFunctions.SmtpOption.Value != null)
                    writer.WriteBoolean("smtp", companyInfoPlanInfoFunctions.SmtpOption.Value.Value);
                else
                    writer.WriteNull("smtp");

            if (companyInfoPlanInfoFunctions.StockOption.IsSet)
                if (companyInfoPlanInfoFunctions.StockOption.Value != null)
                    writer.WriteBoolean("stock", companyInfoPlanInfoFunctions.StockOption.Value.Value);
                else
                    writer.WriteNull("stock");

            if (companyInfoPlanInfoFunctions.SubaccountsOption.IsSet)
                if (companyInfoPlanInfoFunctions.SubaccountsOption.Value != null)
                    writer.WriteBoolean("subaccounts", companyInfoPlanInfoFunctions.SubaccountsOption.Value.Value);
                else
                    writer.WriteNull("subaccounts");

            if (companyInfoPlanInfoFunctions.TesseraSanitariaOption.IsSet)
                if (companyInfoPlanInfoFunctions.TesseraSanitariaOption.Value != null)
                    writer.WriteBoolean("tessera_sanitaria", companyInfoPlanInfoFunctions.TesseraSanitariaOption.Value.Value);
                else
                    writer.WriteNull("tessera_sanitaria");

            if (companyInfoPlanInfoFunctions.TsDigitalOption.IsSet)
                if (companyInfoPlanInfoFunctions.TsDigitalOption.Value != null)
                    writer.WriteBoolean("ts_digital", companyInfoPlanInfoFunctions.TsDigitalOption.Value.Value);
                else
                    writer.WriteNull("ts_digital");

            if (companyInfoPlanInfoFunctions.TsInvoiceTradingOption.IsSet)
                if (companyInfoPlanInfoFunctions.TsInvoiceTradingOption.Value != null)
                    writer.WriteBoolean("ts_invoice_trading", companyInfoPlanInfoFunctions.TsInvoiceTradingOption.Value.Value);
                else
                    writer.WriteNull("ts_invoice_trading");

            if (companyInfoPlanInfoFunctions.TsPayOption.IsSet)
                if (companyInfoPlanInfoFunctions.TsPayOption.Value != null)
                    writer.WriteBoolean("ts_pay", companyInfoPlanInfoFunctions.TsPayOption.Value.Value);
                else
                    writer.WriteNull("ts_pay");
        }
    }
}
