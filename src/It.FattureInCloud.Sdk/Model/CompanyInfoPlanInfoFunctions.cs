/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     Access to functions for this company.
    /// </summary>
    [DataContract(Name = "CompanyInfo_plan_info_functions")]
    public class CompanyInfoPlanInfoFunctions : IEquatable<CompanyInfoPlanInfoFunctions>, IValidatableObject
    {
        private bool? _Archive;
        private bool? _Cerved;
        private bool? _DocumentAttachments;
        private bool? _EInvoice;
        private bool _flagArchive;
        private bool _flagCerved;
        private bool _flagDocumentAttachments;
        private bool _flagEInvoice;
        private bool _flagGenius;
        private bool _flagMailTracking;
        private bool _flagPaymentNotifications;
        private bool _flagPaypal;
        private bool _flagReceipts;
        private bool _flagRecurring;
        private bool _flagSmtp;
        private bool _flagSofort;
        private bool _flagStock;
        private bool _flagSubaccounts;
        private bool _flagTesseraSanitaria;
        private bool _flagTsDigital;
        private bool _flagTsInvoiceTrading;
        private bool _flagTsPay;
        private bool? _Genius;
        private bool? _MailTracking;
        private bool? _PaymentNotifications;
        private bool? _Paypal;
        private bool? _Receipts;
        private bool? _Recurring;
        private bool? _Smtp;
        private bool? _Sofort;
        private bool? _Stock;
        private bool? _Subaccounts;
        private bool? _TesseraSanitaria;
        private bool? _TsDigital;
        private bool? _TsInvoiceTrading;
        private bool? _TsPay;

        /// <summary>
        ///     Initializes a new instance of the <see cref="CompanyInfoPlanInfoFunctions" /> class.
        /// </summary>
        /// <param name="archive">archive.</param>
        /// <param name="cerved">cerved.</param>
        /// <param name="documentAttachments">documentAttachments.</param>
        /// <param name="eInvoice">eInvoice.</param>
        /// <param name="genius">genius.</param>
        /// <param name="mailTracking">mailTracking.</param>
        /// <param name="paymentNotifications">paymentNotifications.</param>
        /// <param name="paypal">paypal.</param>
        /// <param name="receipts">receipts.</param>
        /// <param name="recurring">recurring.</param>
        /// <param name="smtp">smtp.</param>
        /// <param name="sofort">sofort.</param>
        /// <param name="stock">stock.</param>
        /// <param name="subaccounts">subaccounts.</param>
        /// <param name="tesseraSanitaria">tesseraSanitaria.</param>
        /// <param name="tsDigital">tsDigital.</param>
        /// <param name="tsInvoiceTrading">tsInvoiceTrading.</param>
        /// <param name="tsPay">tsPay.</param>
        public CompanyInfoPlanInfoFunctions(bool? archive = default(bool?), bool? cerved = default(bool?),
            bool? documentAttachments = default(bool?), bool? eInvoice = default(bool?), bool? genius = default(bool?),
            bool? mailTracking = default(bool?), bool? paymentNotifications = default(bool?),
            bool? paypal = default(bool?), bool? receipts = default(bool?), bool? recurring = default(bool?),
            bool? smtp = default(bool?), bool? sofort = default(bool?), bool? stock = default(bool?),
            bool? subaccounts = default(bool?), bool? tesseraSanitaria = default(bool?),
            bool? tsDigital = default(bool?), bool? tsInvoiceTrading = default(bool?), bool? tsPay = default(bool?))
        {
            _Archive = archive;
            if (Archive != null) _flagArchive = true;
            _Cerved = cerved;
            if (Cerved != null) _flagCerved = true;
            _DocumentAttachments = documentAttachments;
            if (DocumentAttachments != null) _flagDocumentAttachments = true;
            _EInvoice = eInvoice;
            if (EInvoice != null) _flagEInvoice = true;
            _Genius = genius;
            if (Genius != null) _flagGenius = true;
            _MailTracking = mailTracking;
            if (MailTracking != null) _flagMailTracking = true;
            _PaymentNotifications = paymentNotifications;
            if (PaymentNotifications != null) _flagPaymentNotifications = true;
            _Paypal = paypal;
            if (Paypal != null) _flagPaypal = true;
            _Receipts = receipts;
            if (Receipts != null) _flagReceipts = true;
            _Recurring = recurring;
            if (Recurring != null) _flagRecurring = true;
            _Smtp = smtp;
            if (Smtp != null) _flagSmtp = true;
            _Sofort = sofort;
            if (Sofort != null) _flagSofort = true;
            _Stock = stock;
            if (Stock != null) _flagStock = true;
            _Subaccounts = subaccounts;
            if (Subaccounts != null) _flagSubaccounts = true;
            _TesseraSanitaria = tesseraSanitaria;
            if (TesseraSanitaria != null) _flagTesseraSanitaria = true;
            _TsDigital = tsDigital;
            if (TsDigital != null) _flagTsDigital = true;
            _TsInvoiceTrading = tsInvoiceTrading;
            if (TsInvoiceTrading != null) _flagTsInvoiceTrading = true;
            _TsPay = tsPay;
            if (TsPay != null) _flagTsPay = true;
        }

        /// <summary>
        ///     Gets or Sets Archive
        /// </summary>
        [DataMember(Name = "archive", EmitDefaultValue = true)]
        public bool? Archive
        {
            get => _Archive;
            set
            {
                _Archive = value;
                _flagArchive = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Cerved
        /// </summary>
        [DataMember(Name = "cerved", EmitDefaultValue = true)]
        public bool? Cerved
        {
            get => _Cerved;
            set
            {
                _Cerved = value;
                _flagCerved = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DocumentAttachments
        /// </summary>
        [DataMember(Name = "document_attachments", EmitDefaultValue = true)]
        public bool? DocumentAttachments
        {
            get => _DocumentAttachments;
            set
            {
                _DocumentAttachments = value;
                _flagDocumentAttachments = true;
            }
        }

        /// <summary>
        ///     Gets or Sets EInvoice
        /// </summary>
        [DataMember(Name = "e_invoice", EmitDefaultValue = true)]
        public bool? EInvoice
        {
            get => _EInvoice;
            set
            {
                _EInvoice = value;
                _flagEInvoice = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Genius
        /// </summary>
        [DataMember(Name = "genius", EmitDefaultValue = true)]
        public bool? Genius
        {
            get => _Genius;
            set
            {
                _Genius = value;
                _flagGenius = true;
            }
        }

        /// <summary>
        ///     Gets or Sets MailTracking
        /// </summary>
        [DataMember(Name = "mail_tracking", EmitDefaultValue = true)]
        public bool? MailTracking
        {
            get => _MailTracking;
            set
            {
                _MailTracking = value;
                _flagMailTracking = true;
            }
        }

        /// <summary>
        ///     Gets or Sets PaymentNotifications
        /// </summary>
        [DataMember(Name = "payment_notifications", EmitDefaultValue = true)]
        public bool? PaymentNotifications
        {
            get => _PaymentNotifications;
            set
            {
                _PaymentNotifications = value;
                _flagPaymentNotifications = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Paypal
        /// </summary>
        [DataMember(Name = "paypal", EmitDefaultValue = true)]
        public bool? Paypal
        {
            get => _Paypal;
            set
            {
                _Paypal = value;
                _flagPaypal = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Receipts
        /// </summary>
        [DataMember(Name = "receipts", EmitDefaultValue = true)]
        public bool? Receipts
        {
            get => _Receipts;
            set
            {
                _Receipts = value;
                _flagReceipts = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Recurring
        /// </summary>
        [DataMember(Name = "recurring", EmitDefaultValue = true)]
        public bool? Recurring
        {
            get => _Recurring;
            set
            {
                _Recurring = value;
                _flagRecurring = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Smtp
        /// </summary>
        [DataMember(Name = "smtp", EmitDefaultValue = true)]
        public bool? Smtp
        {
            get => _Smtp;
            set
            {
                _Smtp = value;
                _flagSmtp = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Sofort
        /// </summary>
        [DataMember(Name = "sofort", EmitDefaultValue = true)]
        public bool? Sofort
        {
            get => _Sofort;
            set
            {
                _Sofort = value;
                _flagSofort = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Stock
        /// </summary>
        [DataMember(Name = "stock", EmitDefaultValue = true)]
        public bool? Stock
        {
            get => _Stock;
            set
            {
                _Stock = value;
                _flagStock = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Subaccounts
        /// </summary>
        [DataMember(Name = "subaccounts", EmitDefaultValue = true)]
        public bool? Subaccounts
        {
            get => _Subaccounts;
            set
            {
                _Subaccounts = value;
                _flagSubaccounts = true;
            }
        }

        /// <summary>
        ///     Gets or Sets TesseraSanitaria
        /// </summary>
        [DataMember(Name = "tessera_sanitaria", EmitDefaultValue = true)]
        public bool? TesseraSanitaria
        {
            get => _TesseraSanitaria;
            set
            {
                _TesseraSanitaria = value;
                _flagTesseraSanitaria = true;
            }
        }

        /// <summary>
        ///     Gets or Sets TsDigital
        /// </summary>
        [DataMember(Name = "ts_digital", EmitDefaultValue = true)]
        public bool? TsDigital
        {
            get => _TsDigital;
            set
            {
                _TsDigital = value;
                _flagTsDigital = true;
            }
        }

        /// <summary>
        ///     Gets or Sets TsInvoiceTrading
        /// </summary>
        [DataMember(Name = "ts_invoice_trading", EmitDefaultValue = true)]
        public bool? TsInvoiceTrading
        {
            get => _TsInvoiceTrading;
            set
            {
                _TsInvoiceTrading = value;
                _flagTsInvoiceTrading = true;
            }
        }

        /// <summary>
        ///     Gets or Sets TsPay
        /// </summary>
        [DataMember(Name = "ts_pay", EmitDefaultValue = true)]
        public bool? TsPay
        {
            get => _TsPay;
            set
            {
                _TsPay = value;
                _flagTsPay = true;
            }
        }

        /// <summary>
        ///     Returns false as Archive should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeArchive()
        {
            return _flagArchive;
        }

        /// <summary>
        ///     Returns false as Cerved should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCerved()
        {
            return _flagCerved;
        }

        /// <summary>
        ///     Returns false as DocumentAttachments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDocumentAttachments()
        {
            return _flagDocumentAttachments;
        }

        /// <summary>
        ///     Returns false as EInvoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEInvoice()
        {
            return _flagEInvoice;
        }

        /// <summary>
        ///     Returns false as Genius should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGenius()
        {
            return _flagGenius;
        }

        /// <summary>
        ///     Returns false as MailTracking should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMailTracking()
        {
            return _flagMailTracking;
        }

        /// <summary>
        ///     Returns false as PaymentNotifications should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentNotifications()
        {
            return _flagPaymentNotifications;
        }

        /// <summary>
        ///     Returns false as Paypal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaypal()
        {
            return _flagPaypal;
        }

        /// <summary>
        ///     Returns false as Receipts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReceipts()
        {
            return _flagReceipts;
        }

        /// <summary>
        ///     Returns false as Recurring should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecurring()
        {
            return _flagRecurring;
        }

        /// <summary>
        ///     Returns false as Smtp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSmtp()
        {
            return _flagSmtp;
        }

        /// <summary>
        ///     Returns false as Sofort should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSofort()
        {
            return _flagSofort;
        }

        /// <summary>
        ///     Returns false as Stock should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStock()
        {
            return _flagStock;
        }

        /// <summary>
        ///     Returns false as Subaccounts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubaccounts()
        {
            return _flagSubaccounts;
        }

        /// <summary>
        ///     Returns false as TesseraSanitaria should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTesseraSanitaria()
        {
            return _flagTesseraSanitaria;
        }

        /// <summary>
        ///     Returns false as TsDigital should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsDigital()
        {
            return _flagTsDigital;
        }

        /// <summary>
        ///     Returns false as TsInvoiceTrading should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsInvoiceTrading()
        {
            return _flagTsInvoiceTrading;
        }

        /// <summary>
        ///     Returns false as TsPay should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsPay()
        {
            return _flagTsPay;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyInfoPlanInfoFunctions {\n");
            sb.Append("  Archive: ").Append(Archive).Append("\n");
            sb.Append("  Cerved: ").Append(Cerved).Append("\n");
            sb.Append("  DocumentAttachments: ").Append(DocumentAttachments).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  Genius: ").Append(Genius).Append("\n");
            sb.Append("  MailTracking: ").Append(MailTracking).Append("\n");
            sb.Append("  PaymentNotifications: ").Append(PaymentNotifications).Append("\n");
            sb.Append("  Paypal: ").Append(Paypal).Append("\n");
            sb.Append("  Receipts: ").Append(Receipts).Append("\n");
            sb.Append("  Recurring: ").Append(Recurring).Append("\n");
            sb.Append("  Smtp: ").Append(Smtp).Append("\n");
            sb.Append("  Sofort: ").Append(Sofort).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  Subaccounts: ").Append(Subaccounts).Append("\n");
            sb.Append("  TesseraSanitaria: ").Append(TesseraSanitaria).Append("\n");
            sb.Append("  TsDigital: ").Append(TsDigital).Append("\n");
            sb.Append("  TsInvoiceTrading: ").Append(TsInvoiceTrading).Append("\n");
            sb.Append("  TsPay: ").Append(TsPay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CompanyInfoPlanInfoFunctions);
        }

        /// <summary>
        ///     Returns true if CompanyInfoPlanInfoFunctions instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyInfoPlanInfoFunctions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyInfoPlanInfoFunctions input)
        {
            if (input == null) return false;
            return
                (
                    Archive == input.Archive ||
                    (Archive != null &&
                     Archive.Equals(input.Archive))
                ) &&
                (
                    Cerved == input.Cerved ||
                    (Cerved != null &&
                     Cerved.Equals(input.Cerved))
                ) &&
                (
                    DocumentAttachments == input.DocumentAttachments ||
                    (DocumentAttachments != null &&
                     DocumentAttachments.Equals(input.DocumentAttachments))
                ) &&
                (
                    EInvoice == input.EInvoice ||
                    (EInvoice != null &&
                     EInvoice.Equals(input.EInvoice))
                ) &&
                (
                    Genius == input.Genius ||
                    (Genius != null &&
                     Genius.Equals(input.Genius))
                ) &&
                (
                    MailTracking == input.MailTracking ||
                    (MailTracking != null &&
                     MailTracking.Equals(input.MailTracking))
                ) &&
                (
                    PaymentNotifications == input.PaymentNotifications ||
                    (PaymentNotifications != null &&
                     PaymentNotifications.Equals(input.PaymentNotifications))
                ) &&
                (
                    Paypal == input.Paypal ||
                    (Paypal != null &&
                     Paypal.Equals(input.Paypal))
                ) &&
                (
                    Receipts == input.Receipts ||
                    (Receipts != null &&
                     Receipts.Equals(input.Receipts))
                ) &&
                (
                    Recurring == input.Recurring ||
                    (Recurring != null &&
                     Recurring.Equals(input.Recurring))
                ) &&
                (
                    Smtp == input.Smtp ||
                    (Smtp != null &&
                     Smtp.Equals(input.Smtp))
                ) &&
                (
                    Sofort == input.Sofort ||
                    (Sofort != null &&
                     Sofort.Equals(input.Sofort))
                ) &&
                (
                    Stock == input.Stock ||
                    (Stock != null &&
                     Stock.Equals(input.Stock))
                ) &&
                (
                    Subaccounts == input.Subaccounts ||
                    (Subaccounts != null &&
                     Subaccounts.Equals(input.Subaccounts))
                ) &&
                (
                    TesseraSanitaria == input.TesseraSanitaria ||
                    (TesseraSanitaria != null &&
                     TesseraSanitaria.Equals(input.TesseraSanitaria))
                ) &&
                (
                    TsDigital == input.TsDigital ||
                    (TsDigital != null &&
                     TsDigital.Equals(input.TsDigital))
                ) &&
                (
                    TsInvoiceTrading == input.TsInvoiceTrading ||
                    (TsInvoiceTrading != null &&
                     TsInvoiceTrading.Equals(input.TsInvoiceTrading))
                ) &&
                (
                    TsPay == input.TsPay ||
                    (TsPay != null &&
                     TsPay.Equals(input.TsPay))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Archive != null) hashCode = hashCode * 59 + Archive.GetHashCode();
                if (Cerved != null) hashCode = hashCode * 59 + Cerved.GetHashCode();
                if (DocumentAttachments != null) hashCode = hashCode * 59 + DocumentAttachments.GetHashCode();
                if (EInvoice != null) hashCode = hashCode * 59 + EInvoice.GetHashCode();
                if (Genius != null) hashCode = hashCode * 59 + Genius.GetHashCode();
                if (MailTracking != null) hashCode = hashCode * 59 + MailTracking.GetHashCode();
                if (PaymentNotifications != null) hashCode = hashCode * 59 + PaymentNotifications.GetHashCode();
                if (Paypal != null) hashCode = hashCode * 59 + Paypal.GetHashCode();
                if (Receipts != null) hashCode = hashCode * 59 + Receipts.GetHashCode();
                if (Recurring != null) hashCode = hashCode * 59 + Recurring.GetHashCode();
                if (Smtp != null) hashCode = hashCode * 59 + Smtp.GetHashCode();
                if (Sofort != null) hashCode = hashCode * 59 + Sofort.GetHashCode();
                if (Stock != null) hashCode = hashCode * 59 + Stock.GetHashCode();
                if (Subaccounts != null) hashCode = hashCode * 59 + Subaccounts.GetHashCode();
                if (TesseraSanitaria != null) hashCode = hashCode * 59 + TesseraSanitaria.GetHashCode();
                if (TsDigital != null) hashCode = hashCode * 59 + TsDigital.GetHashCode();
                if (TsInvoiceTrading != null) hashCode = hashCode * 59 + TsInvoiceTrading.GetHashCode();
                if (TsPay != null) hashCode = hashCode * 59 + TsPay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}