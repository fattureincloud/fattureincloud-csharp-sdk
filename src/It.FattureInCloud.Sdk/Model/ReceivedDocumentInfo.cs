// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ReceivedDocumentInfo
    /// </summary>
    public partial class ReceivedDocumentInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivedDocumentInfo" /> class.
        /// </summary>
        /// <param name="defaultValues">defaultValues</param>
        /// <param name="itemsDefaultValues">itemsDefaultValues</param>
        /// <param name="countriesList">Countries list</param>
        /// <param name="currenciesList">Currencies list</param>
        /// <param name="categoriesList">Categories list</param>
        /// <param name="paymentAccountsList">Payments accounts list</param>
        /// <param name="vatTypesList">Vat types list</param>
        [JsonConstructor]
        public ReceivedDocumentInfo(Option<ReceivedDocumentInfoDefaultValues> defaultValues = default, Option<ReceivedDocumentInfoItemsDefaultValues> itemsDefaultValues = default, Option<List<string>> countriesList = default, Option<List<Currency>> currenciesList = default, Option<List<string>> categoriesList = default, Option<List<PaymentAccount>> paymentAccountsList = default, Option<List<VatType>> vatTypesList = default)
        {
            DefaultValuesOption = defaultValues;
            ItemsDefaultValuesOption = itemsDefaultValues;
            CountriesListOption = countriesList;
            CurrenciesListOption = currenciesList;
            CategoriesListOption = categoriesList;
            PaymentAccountsListOption = paymentAccountsList;
            VatTypesListOption = vatTypesList;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DefaultValues
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReceivedDocumentInfoDefaultValues> DefaultValuesOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultValues
        /// </summary>
        [JsonPropertyName("default_values")]
        public ReceivedDocumentInfoDefaultValues DefaultValues { get { return this.DefaultValuesOption; } set { this.DefaultValuesOption = new Option<ReceivedDocumentInfoDefaultValues>(value); } }

        /// <summary>
        /// Used to track the state of ItemsDefaultValues
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReceivedDocumentInfoItemsDefaultValues> ItemsDefaultValuesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ItemsDefaultValues
        /// </summary>
        [JsonPropertyName("items_default_values")]
        public ReceivedDocumentInfoItemsDefaultValues ItemsDefaultValues { get { return this.ItemsDefaultValuesOption; } set { this.ItemsDefaultValuesOption = new Option<ReceivedDocumentInfoItemsDefaultValues>(value); } }

        /// <summary>
        /// Used to track the state of CountriesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CountriesListOption { get; private set; }

        /// <summary>
        /// Countries list
        /// </summary>
        /// <value>Countries list</value>
        [JsonPropertyName("countries_list")]
        public List<string> CountriesList { get { return this.CountriesListOption; } set { this.CountriesListOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of CurrenciesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Currency>> CurrenciesListOption { get; private set; }

        /// <summary>
        /// Currencies list
        /// </summary>
        /// <value>Currencies list</value>
        [JsonPropertyName("currencies_list")]
        public List<Currency> CurrenciesList { get { return this.CurrenciesListOption; } set { this.CurrenciesListOption = new Option<List<Currency>>(value); } }

        /// <summary>
        /// Used to track the state of CategoriesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CategoriesListOption { get; private set; }

        /// <summary>
        /// Categories list
        /// </summary>
        /// <value>Categories list</value>
        [JsonPropertyName("categories_list")]
        public List<string> CategoriesList { get { return this.CategoriesListOption; } set { this.CategoriesListOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of PaymentAccountsList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PaymentAccount>> PaymentAccountsListOption { get; private set; }

        /// <summary>
        /// Payments accounts list
        /// </summary>
        /// <value>Payments accounts list</value>
        [JsonPropertyName("payment_accounts_list")]
        public List<PaymentAccount> PaymentAccountsList { get { return this.PaymentAccountsListOption; } set { this.PaymentAccountsListOption = new Option<List<PaymentAccount>>(value); } }

        /// <summary>
        /// Used to track the state of VatTypesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<VatType>> VatTypesListOption { get; private set; }

        /// <summary>
        /// Vat types list
        /// </summary>
        /// <value>Vat types list</value>
        [JsonPropertyName("vat_types_list")]
        public List<VatType> VatTypesList { get { return this.VatTypesListOption; } set { this.VatTypesListOption = new Option<List<VatType>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceivedDocumentInfo {\n");
            sb.Append("  DefaultValues: ").Append(DefaultValues).Append("\n");
            sb.Append("  ItemsDefaultValues: ").Append(ItemsDefaultValues).Append("\n");
            sb.Append("  CountriesList: ").Append(CountriesList).Append("\n");
            sb.Append("  CurrenciesList: ").Append(CurrenciesList).Append("\n");
            sb.Append("  CategoriesList: ").Append(CategoriesList).Append("\n");
            sb.Append("  PaymentAccountsList: ").Append(PaymentAccountsList).Append("\n");
            sb.Append("  VatTypesList: ").Append(VatTypesList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="ReceivedDocumentInfo" />
    /// </summary>
    public class ReceivedDocumentInfoJsonConverter : JsonConverter<ReceivedDocumentInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReceivedDocumentInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReceivedDocumentInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ReceivedDocumentInfoDefaultValues> defaultValues = default;
            Option<ReceivedDocumentInfoItemsDefaultValues> itemsDefaultValues = default;
            Option<List<string>> countriesList = default;
            Option<List<Currency>> currenciesList = default;
            Option<List<string>> categoriesList = default;
            Option<List<PaymentAccount>> paymentAccountsList = default;
            Option<List<VatType>> vatTypesList = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "default_values":
                            defaultValues = new Option<ReceivedDocumentInfoDefaultValues>(JsonSerializer.Deserialize<ReceivedDocumentInfoDefaultValues>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "items_default_values":
                            itemsDefaultValues = new Option<ReceivedDocumentInfoItemsDefaultValues>(JsonSerializer.Deserialize<ReceivedDocumentInfoItemsDefaultValues>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "countries_list":
                            countriesList = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "currencies_list":
                            currenciesList = new Option<List<Currency>>(JsonSerializer.Deserialize<List<Currency>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "categories_list":
                            categoriesList = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payment_accounts_list":
                            paymentAccountsList = new Option<List<PaymentAccount>>(JsonSerializer.Deserialize<List<PaymentAccount>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "vat_types_list":
                            vatTypesList = new Option<List<VatType>>(JsonSerializer.Deserialize<List<VatType>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ReceivedDocumentInfo(defaultValues, itemsDefaultValues, countriesList, currenciesList, categoriesList, paymentAccountsList, vatTypesList);
        }

        /// <summary>
        /// Serializes a <see cref="ReceivedDocumentInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReceivedDocumentInfo receivedDocumentInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, receivedDocumentInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReceivedDocumentInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReceivedDocumentInfo receivedDocumentInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (receivedDocumentInfo.DefaultValuesOption.IsSet)
                if (receivedDocumentInfo.DefaultValuesOption.Value != null)
                {
                    writer.WritePropertyName("default_values");
                    JsonSerializer.Serialize(writer, receivedDocumentInfo.DefaultValues, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("default_values");
            if (receivedDocumentInfo.ItemsDefaultValuesOption.IsSet)
                if (receivedDocumentInfo.ItemsDefaultValuesOption.Value != null)
                {
                    writer.WritePropertyName("items_default_values");
                    JsonSerializer.Serialize(writer, receivedDocumentInfo.ItemsDefaultValues, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items_default_values");
            if (receivedDocumentInfo.CountriesListOption.IsSet)
                if (receivedDocumentInfo.CountriesListOption.Value != null)
                {
                    writer.WritePropertyName("countries_list");
                    JsonSerializer.Serialize(writer, receivedDocumentInfo.CountriesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("countries_list");
            if (receivedDocumentInfo.CurrenciesListOption.IsSet)
                if (receivedDocumentInfo.CurrenciesListOption.Value != null)
                {
                    writer.WritePropertyName("currencies_list");
                    JsonSerializer.Serialize(writer, receivedDocumentInfo.CurrenciesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("currencies_list");
            if (receivedDocumentInfo.CategoriesListOption.IsSet)
                if (receivedDocumentInfo.CategoriesListOption.Value != null)
                {
                    writer.WritePropertyName("categories_list");
                    JsonSerializer.Serialize(writer, receivedDocumentInfo.CategoriesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("categories_list");
            if (receivedDocumentInfo.PaymentAccountsListOption.IsSet)
                if (receivedDocumentInfo.PaymentAccountsListOption.Value != null)
                {
                    writer.WritePropertyName("payment_accounts_list");
                    JsonSerializer.Serialize(writer, receivedDocumentInfo.PaymentAccountsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_accounts_list");
            if (receivedDocumentInfo.VatTypesListOption.IsSet)
                if (receivedDocumentInfo.VatTypesListOption.Value != null)
                {
                    writer.WritePropertyName("vat_types_list");
                    JsonSerializer.Serialize(writer, receivedDocumentInfo.VatTypesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("vat_types_list");
        }
    }
}
