/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     ReceivedDocumentInfo
    /// </summary>
    [DataContract(Name = "ReceivedDocumentInfo")]
    public class ReceivedDocumentInfo : IEquatable<ReceivedDocumentInfo>, IValidatableObject
    {
        private List<string> _CategoriesList;
        private List<string> _CountriesList;
        private List<Currency> _CurrenciesList;
        private ReceivedDocumentInfoDefaultValues _DefaultValues;
        private bool _flagCategoriesList;
        private bool _flagCountriesList;
        private bool _flagCurrenciesList;
        private bool _flagDefaultValues;
        private bool _flagItemsDefaultValues;
        private bool _flagPaymentAccountsList;
        private bool _flagVatTypesList;
        private ReceivedDocumentInfoItemsDefaultValues _ItemsDefaultValues;
        private List<PaymentAccount> _PaymentAccountsList;
        private List<VatType> _VatTypesList;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ReceivedDocumentInfo" /> class.
        /// </summary>
        /// <param name="defaultValues">defaultValues.</param>
        /// <param name="itemsDefaultValues">itemsDefaultValues.</param>
        /// <param name="countriesList">countriesList.</param>
        /// <param name="currenciesList">currenciesList.</param>
        /// <param name="categoriesList">categoriesList.</param>
        /// <param name="paymentAccountsList">paymentAccountsList.</param>
        /// <param name="vatTypesList">vatTypesList.</param>
        public ReceivedDocumentInfo(ReceivedDocumentInfoDefaultValues defaultValues = default,
            ReceivedDocumentInfoItemsDefaultValues itemsDefaultValues = default,
            List<string> countriesList = default(List<string>), List<Currency> currenciesList = default(List<Currency>),
            List<string> categoriesList = default(List<string>),
            List<PaymentAccount> paymentAccountsList = default(List<PaymentAccount>),
            List<VatType> vatTypesList = default(List<VatType>))
        {
            _DefaultValues = defaultValues;
            if (DefaultValues != null) _flagDefaultValues = true;
            _ItemsDefaultValues = itemsDefaultValues;
            if (ItemsDefaultValues != null) _flagItemsDefaultValues = true;
            _CountriesList = countriesList;
            if (CountriesList != null) _flagCountriesList = true;
            _CurrenciesList = currenciesList;
            if (CurrenciesList != null) _flagCurrenciesList = true;
            _CategoriesList = categoriesList;
            if (CategoriesList != null) _flagCategoriesList = true;
            _PaymentAccountsList = paymentAccountsList;
            if (PaymentAccountsList != null) _flagPaymentAccountsList = true;
            _VatTypesList = vatTypesList;
            if (VatTypesList != null) _flagVatTypesList = true;
        }

        /// <summary>
        ///     Gets or Sets DefaultValues
        /// </summary>
        [DataMember(Name = "default_values", EmitDefaultValue = true)]
        public ReceivedDocumentInfoDefaultValues DefaultValues
        {
            get => _DefaultValues;
            set
            {
                _DefaultValues = value;
                _flagDefaultValues = true;
            }
        }

        /// <summary>
        ///     Gets or Sets ItemsDefaultValues
        /// </summary>
        [DataMember(Name = "items_default_values", EmitDefaultValue = true)]
        public ReceivedDocumentInfoItemsDefaultValues ItemsDefaultValues
        {
            get => _ItemsDefaultValues;
            set
            {
                _ItemsDefaultValues = value;
                _flagItemsDefaultValues = true;
            }
        }

        /// <summary>
        ///     Gets or Sets CountriesList
        /// </summary>
        [DataMember(Name = "countries_list", EmitDefaultValue = true)]
        public List<string> CountriesList
        {
            get => _CountriesList;
            set
            {
                _CountriesList = value;
                _flagCountriesList = true;
            }
        }

        /// <summary>
        ///     Gets or Sets CurrenciesList
        /// </summary>
        [DataMember(Name = "currencies_list", EmitDefaultValue = true)]
        public List<Currency> CurrenciesList
        {
            get => _CurrenciesList;
            set
            {
                _CurrenciesList = value;
                _flagCurrenciesList = true;
            }
        }

        /// <summary>
        ///     Gets or Sets CategoriesList
        /// </summary>
        [DataMember(Name = "categories_list", EmitDefaultValue = true)]
        public List<string> CategoriesList
        {
            get => _CategoriesList;
            set
            {
                _CategoriesList = value;
                _flagCategoriesList = true;
            }
        }

        /// <summary>
        ///     Gets or Sets PaymentAccountsList
        /// </summary>
        [DataMember(Name = "payment_accounts_list", EmitDefaultValue = true)]
        public List<PaymentAccount> PaymentAccountsList
        {
            get => _PaymentAccountsList;
            set
            {
                _PaymentAccountsList = value;
                _flagPaymentAccountsList = true;
            }
        }

        /// <summary>
        ///     Gets or Sets VatTypesList
        /// </summary>
        [DataMember(Name = "vat_types_list", EmitDefaultValue = true)]
        public List<VatType> VatTypesList
        {
            get => _VatTypesList;
            set
            {
                _VatTypesList = value;
                _flagVatTypesList = true;
            }
        }

        /// <summary>
        ///     Returns false as DefaultValues should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultValues()
        {
            return _flagDefaultValues;
        }

        /// <summary>
        ///     Returns false as ItemsDefaultValues should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItemsDefaultValues()
        {
            return _flagItemsDefaultValues;
        }

        /// <summary>
        ///     Returns false as CountriesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountriesList()
        {
            return _flagCountriesList;
        }

        /// <summary>
        ///     Returns false as CurrenciesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrenciesList()
        {
            return _flagCurrenciesList;
        }

        /// <summary>
        ///     Returns false as CategoriesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategoriesList()
        {
            return _flagCategoriesList;
        }

        /// <summary>
        ///     Returns false as PaymentAccountsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccountsList()
        {
            return _flagPaymentAccountsList;
        }

        /// <summary>
        ///     Returns false as VatTypesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVatTypesList()
        {
            return _flagVatTypesList;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceivedDocumentInfo {\n");
            sb.Append("  DefaultValues: ").Append(DefaultValues).Append("\n");
            sb.Append("  ItemsDefaultValues: ").Append(ItemsDefaultValues).Append("\n");
            sb.Append("  CountriesList: ").Append(CountriesList).Append("\n");
            sb.Append("  CurrenciesList: ").Append(CurrenciesList).Append("\n");
            sb.Append("  CategoriesList: ").Append(CategoriesList).Append("\n");
            sb.Append("  PaymentAccountsList: ").Append(PaymentAccountsList).Append("\n");
            sb.Append("  VatTypesList: ").Append(VatTypesList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ReceivedDocumentInfo);
        }

        /// <summary>
        ///     Returns true if ReceivedDocumentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceivedDocumentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceivedDocumentInfo input)
        {
            if (input == null) return false;
            return
                (
                    DefaultValues == input.DefaultValues ||
                    (DefaultValues != null &&
                     DefaultValues.Equals(input.DefaultValues))
                ) &&
                (
                    ItemsDefaultValues == input.ItemsDefaultValues ||
                    (ItemsDefaultValues != null &&
                     ItemsDefaultValues.Equals(input.ItemsDefaultValues))
                ) &&
                (
                    CountriesList == input.CountriesList ||
                    (CountriesList != null &&
                     input.CountriesList != null &&
                     CountriesList.SequenceEqual(input.CountriesList))
                ) &&
                (
                    CurrenciesList == input.CurrenciesList ||
                    (CurrenciesList != null &&
                     input.CurrenciesList != null &&
                     CurrenciesList.SequenceEqual(input.CurrenciesList))
                ) &&
                (
                    CategoriesList == input.CategoriesList ||
                    (CategoriesList != null &&
                     input.CategoriesList != null &&
                     CategoriesList.SequenceEqual(input.CategoriesList))
                ) &&
                (
                    PaymentAccountsList == input.PaymentAccountsList ||
                    (PaymentAccountsList != null &&
                     input.PaymentAccountsList != null &&
                     PaymentAccountsList.SequenceEqual(input.PaymentAccountsList))
                ) &&
                (
                    VatTypesList == input.VatTypesList ||
                    (VatTypesList != null &&
                     input.VatTypesList != null &&
                     VatTypesList.SequenceEqual(input.VatTypesList))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (DefaultValues != null) hashCode = hashCode * 59 + DefaultValues.GetHashCode();
                if (ItemsDefaultValues != null) hashCode = hashCode * 59 + ItemsDefaultValues.GetHashCode();
                if (CountriesList != null) hashCode = hashCode * 59 + CountriesList.GetHashCode();
                if (CurrenciesList != null) hashCode = hashCode * 59 + CurrenciesList.GetHashCode();
                if (CategoriesList != null) hashCode = hashCode * 59 + CategoriesList.GetHashCode();
                if (PaymentAccountsList != null) hashCode = hashCode * 59 + PaymentAccountsList.GetHashCode();
                if (VatTypesList != null) hashCode = hashCode * 59 + VatTypesList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}