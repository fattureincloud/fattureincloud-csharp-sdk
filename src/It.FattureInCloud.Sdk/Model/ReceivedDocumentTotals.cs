// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ReceivedDocumentTotals
    /// </summary>
    public partial class ReceivedDocumentTotals : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivedDocumentTotals" /> class.
        /// </summary>
        /// <param name="amountNet">Received document total net amount</param>
        /// <param name="amountVat">Received document total vat amount</param>
        /// <param name="amountGross">Received document total gross amount</param>
        /// <param name="amountWithholdingTax">Received document withholding tax amount</param>
        /// <param name="amountOtherWithholdingTax">Received document other withholding tax amount</param>
        /// <param name="amountDue">Received document total amount due</param>
        /// <param name="paymentsSum">Received document payments sum</param>
        [JsonConstructor]
        public ReceivedDocumentTotals(Option<decimal?> amountNet = default, Option<decimal?> amountVat = default, Option<decimal?> amountGross = default, Option<decimal?> amountWithholdingTax = default, Option<decimal?> amountOtherWithholdingTax = default, Option<decimal?> amountDue = default, Option<decimal?> paymentsSum = default)
        {
            AmountNetOption = amountNet;
            AmountVatOption = amountVat;
            AmountGrossOption = amountGross;
            AmountWithholdingTaxOption = amountWithholdingTax;
            AmountOtherWithholdingTaxOption = amountOtherWithholdingTax;
            AmountDueOption = amountDue;
            PaymentsSumOption = paymentsSum;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AmountNet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountNetOption { get; private set; }

        /// <summary>
        /// Received document total net amount
        /// </summary>
        /// <value>Received document total net amount</value>
        [JsonPropertyName("amount_net")]
        public decimal? AmountNet { get { return this.AmountNetOption; } set { this.AmountNetOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountVat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountVatOption { get; private set; }

        /// <summary>
        /// Received document total vat amount
        /// </summary>
        /// <value>Received document total vat amount</value>
        [JsonPropertyName("amount_vat")]
        public decimal? AmountVat { get { return this.AmountVatOption; } set { this.AmountVatOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountGross
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountGrossOption { get; private set; }

        /// <summary>
        /// Received document total gross amount
        /// </summary>
        /// <value>Received document total gross amount</value>
        [JsonPropertyName("amount_gross")]
        public decimal? AmountGross { get { return this.AmountGrossOption; } set { this.AmountGrossOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountWithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountWithholdingTaxOption { get; private set; }

        /// <summary>
        /// Received document withholding tax amount
        /// </summary>
        /// <value>Received document withholding tax amount</value>
        [JsonPropertyName("amount_withholding_tax")]
        public decimal? AmountWithholdingTax { get { return this.AmountWithholdingTaxOption; } set { this.AmountWithholdingTaxOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountOtherWithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountOtherWithholdingTaxOption { get; private set; }

        /// <summary>
        /// Received document other withholding tax amount
        /// </summary>
        /// <value>Received document other withholding tax amount</value>
        [JsonPropertyName("amount_other_withholding_tax")]
        public decimal? AmountOtherWithholdingTax { get { return this.AmountOtherWithholdingTaxOption; } set { this.AmountOtherWithholdingTaxOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountDue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountDueOption { get; private set; }

        /// <summary>
        /// Received document total amount due
        /// </summary>
        /// <value>Received document total amount due</value>
        [JsonPropertyName("amount_due")]
        public decimal? AmountDue { get { return this.AmountDueOption; } set { this.AmountDueOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of PaymentsSum
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> PaymentsSumOption { get; private set; }

        /// <summary>
        /// Received document payments sum
        /// </summary>
        /// <value>Received document payments sum</value>
        [JsonPropertyName("payments_sum")]
        public decimal? PaymentsSum { get { return this.PaymentsSumOption; } set { this.PaymentsSumOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceivedDocumentTotals {\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  AmountWithholdingTax: ").Append(AmountWithholdingTax).Append("\n");
            sb.Append("  AmountOtherWithholdingTax: ").Append(AmountOtherWithholdingTax).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  PaymentsSum: ").Append(PaymentsSum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="ReceivedDocumentTotals" />
    /// </summary>
    public class ReceivedDocumentTotalsJsonConverter : JsonConverter<ReceivedDocumentTotals>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReceivedDocumentTotals" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReceivedDocumentTotals Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> amountNet = default;
            Option<decimal?> amountVat = default;
            Option<decimal?> amountGross = default;
            Option<decimal?> amountWithholdingTax = default;
            Option<decimal?> amountOtherWithholdingTax = default;
            Option<decimal?> amountDue = default;
            Option<decimal?> paymentsSum = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount_net":
                            amountNet = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_vat":
                            amountVat = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_gross":
                            amountGross = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_withholding_tax":
                            amountWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_other_withholding_tax":
                            amountOtherWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_due":
                            amountDue = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "payments_sum":
                            paymentsSum = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ReceivedDocumentTotals(amountNet, amountVat, amountGross, amountWithholdingTax, amountOtherWithholdingTax, amountDue, paymentsSum);
        }

        /// <summary>
        /// Serializes a <see cref="ReceivedDocumentTotals" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentTotals"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReceivedDocumentTotals receivedDocumentTotals, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, receivedDocumentTotals, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReceivedDocumentTotals" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentTotals"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReceivedDocumentTotals receivedDocumentTotals, JsonSerializerOptions jsonSerializerOptions)
        {
            if (receivedDocumentTotals.AmountNetOption.IsSet)
                if (receivedDocumentTotals.AmountNetOption.Value != null)
                    writer.WriteNumber("amount_net", receivedDocumentTotals.AmountNetOption.Value.Value);
                else
                    writer.WriteNull("amount_net");

            if (receivedDocumentTotals.AmountVatOption.IsSet)
                if (receivedDocumentTotals.AmountVatOption.Value != null)
                    writer.WriteNumber("amount_vat", receivedDocumentTotals.AmountVatOption.Value.Value);
                else
                    writer.WriteNull("amount_vat");

            if (receivedDocumentTotals.AmountGrossOption.IsSet)
                if (receivedDocumentTotals.AmountGrossOption.Value != null)
                    writer.WriteNumber("amount_gross", receivedDocumentTotals.AmountGrossOption.Value.Value);
                else
                    writer.WriteNull("amount_gross");

            if (receivedDocumentTotals.AmountWithholdingTaxOption.IsSet)
                if (receivedDocumentTotals.AmountWithholdingTaxOption.Value != null)
                    writer.WriteNumber("amount_withholding_tax", receivedDocumentTotals.AmountWithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("amount_withholding_tax");

            if (receivedDocumentTotals.AmountOtherWithholdingTaxOption.IsSet)
                if (receivedDocumentTotals.AmountOtherWithholdingTaxOption.Value != null)
                    writer.WriteNumber("amount_other_withholding_tax", receivedDocumentTotals.AmountOtherWithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("amount_other_withholding_tax");

            if (receivedDocumentTotals.AmountDueOption.IsSet)
                if (receivedDocumentTotals.AmountDueOption.Value != null)
                    writer.WriteNumber("amount_due", receivedDocumentTotals.AmountDueOption.Value.Value);
                else
                    writer.WriteNull("amount_due");

            if (receivedDocumentTotals.PaymentsSumOption.IsSet)
                if (receivedDocumentTotals.PaymentsSumOption.Value != null)
                    writer.WriteNumber("payments_sum", receivedDocumentTotals.PaymentsSumOption.Value.Value);
                else
                    writer.WriteNull("payments_sum");
        }
    }
}
