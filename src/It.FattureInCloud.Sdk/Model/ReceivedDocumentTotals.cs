/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     ReceivedDocumentTotals
    /// </summary>
    [DataContract(Name = "ReceivedDocumentTotals")]
    public class ReceivedDocumentTotals : IEquatable<ReceivedDocumentTotals>, IValidatableObject
    {
        private decimal? _AmountDue;
        private decimal? _AmountGross;
        private decimal? _AmountNet;
        private decimal? _AmountOtherWithholdingTax;
        private decimal? _AmountVat;
        private decimal? _AmountWithholdingTax;
        private bool _flagAmountDue;
        private bool _flagAmountGross;
        private bool _flagAmountNet;
        private bool _flagAmountOtherWithholdingTax;
        private bool _flagAmountVat;
        private bool _flagAmountWithholdingTax;
        private bool _flagPaymentsSum;
        private decimal? _PaymentsSum;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ReceivedDocumentTotals" /> class.
        /// </summary>
        /// <param name="amountNet">Total net amount..</param>
        /// <param name="amountVat">Total vat amount..</param>
        /// <param name="amountGross">Total gross amount..</param>
        /// <param name="amountWithholdingTax">Total withholding tax amount..</param>
        /// <param name="amountOtherWithholdingTax">Total other withholding tax amount..</param>
        /// <param name="amountDue">Total amount due..</param>
        /// <param name="paymentsSum">Payments sum..</param>
        public ReceivedDocumentTotals(decimal? amountNet = default(decimal?), decimal? amountVat = default(decimal?),
            decimal? amountGross = default(decimal?), decimal? amountWithholdingTax = default(decimal?),
            decimal? amountOtherWithholdingTax = default(decimal?), decimal? amountDue = default(decimal?),
            decimal? paymentsSum = default(decimal?))
        {
            _AmountNet = amountNet;
            if (AmountNet != null) _flagAmountNet = true;
            _AmountVat = amountVat;
            if (AmountVat != null) _flagAmountVat = true;
            _AmountGross = amountGross;
            if (AmountGross != null) _flagAmountGross = true;
            _AmountWithholdingTax = amountWithholdingTax;
            if (AmountWithholdingTax != null) _flagAmountWithholdingTax = true;
            _AmountOtherWithholdingTax = amountOtherWithholdingTax;
            if (AmountOtherWithholdingTax != null) _flagAmountOtherWithholdingTax = true;
            _AmountDue = amountDue;
            if (AmountDue != null) _flagAmountDue = true;
            _PaymentsSum = paymentsSum;
            if (PaymentsSum != null) _flagPaymentsSum = true;
        }

        /// <summary>
        ///     Total net amount.
        /// </summary>
        /// <value>Total net amount.</value>
        [DataMember(Name = "amount_net", EmitDefaultValue = true)]
        public decimal? AmountNet
        {
            get => _AmountNet;
            set
            {
                _AmountNet = value;
                _flagAmountNet = true;
            }
        }

        /// <summary>
        ///     Total vat amount.
        /// </summary>
        /// <value>Total vat amount.</value>
        [DataMember(Name = "amount_vat", EmitDefaultValue = true)]
        public decimal? AmountVat
        {
            get => _AmountVat;
            set
            {
                _AmountVat = value;
                _flagAmountVat = true;
            }
        }

        /// <summary>
        ///     Total gross amount.
        /// </summary>
        /// <value>Total gross amount.</value>
        [DataMember(Name = "amount_gross", EmitDefaultValue = true)]
        public decimal? AmountGross
        {
            get => _AmountGross;
            set
            {
                _AmountGross = value;
                _flagAmountGross = true;
            }
        }

        /// <summary>
        ///     Total withholding tax amount.
        /// </summary>
        /// <value>Total withholding tax amount.</value>
        [DataMember(Name = "amount_withholding_tax", EmitDefaultValue = true)]
        public decimal? AmountWithholdingTax
        {
            get => _AmountWithholdingTax;
            set
            {
                _AmountWithholdingTax = value;
                _flagAmountWithholdingTax = true;
            }
        }

        /// <summary>
        ///     Total other withholding tax amount.
        /// </summary>
        /// <value>Total other withholding tax amount.</value>
        [DataMember(Name = "amount_other_withholding_tax", EmitDefaultValue = true)]
        public decimal? AmountOtherWithholdingTax
        {
            get => _AmountOtherWithholdingTax;
            set
            {
                _AmountOtherWithholdingTax = value;
                _flagAmountOtherWithholdingTax = true;
            }
        }

        /// <summary>
        ///     Total amount due.
        /// </summary>
        /// <value>Total amount due.</value>
        [DataMember(Name = "amount_due", EmitDefaultValue = true)]
        public decimal? AmountDue
        {
            get => _AmountDue;
            set
            {
                _AmountDue = value;
                _flagAmountDue = true;
            }
        }

        /// <summary>
        ///     Payments sum.
        /// </summary>
        /// <value>Payments sum.</value>
        [DataMember(Name = "payments_sum", EmitDefaultValue = true)]
        public decimal? PaymentsSum
        {
            get => _PaymentsSum;
            set
            {
                _PaymentsSum = value;
                _flagPaymentsSum = true;
            }
        }

        /// <summary>
        ///     Returns false as AmountNet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountNet()
        {
            return _flagAmountNet;
        }

        /// <summary>
        ///     Returns false as AmountVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountVat()
        {
            return _flagAmountVat;
        }

        /// <summary>
        ///     Returns false as AmountGross should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountGross()
        {
            return _flagAmountGross;
        }

        /// <summary>
        ///     Returns false as AmountWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountWithholdingTax()
        {
            return _flagAmountWithholdingTax;
        }

        /// <summary>
        ///     Returns false as AmountOtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOtherWithholdingTax()
        {
            return _flagAmountOtherWithholdingTax;
        }

        /// <summary>
        ///     Returns false as AmountDue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountDue()
        {
            return _flagAmountDue;
        }

        /// <summary>
        ///     Returns false as PaymentsSum should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentsSum()
        {
            return _flagPaymentsSum;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceivedDocumentTotals {\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  AmountWithholdingTax: ").Append(AmountWithholdingTax).Append("\n");
            sb.Append("  AmountOtherWithholdingTax: ").Append(AmountOtherWithholdingTax).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  PaymentsSum: ").Append(PaymentsSum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ReceivedDocumentTotals);
        }

        /// <summary>
        ///     Returns true if ReceivedDocumentTotals instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceivedDocumentTotals to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceivedDocumentTotals input)
        {
            if (input == null) return false;
            return
                (
                    AmountNet == input.AmountNet ||
                    (AmountNet != null &&
                     AmountNet.Equals(input.AmountNet))
                ) &&
                (
                    AmountVat == input.AmountVat ||
                    (AmountVat != null &&
                     AmountVat.Equals(input.AmountVat))
                ) &&
                (
                    AmountGross == input.AmountGross ||
                    (AmountGross != null &&
                     AmountGross.Equals(input.AmountGross))
                ) &&
                (
                    AmountWithholdingTax == input.AmountWithholdingTax ||
                    (AmountWithholdingTax != null &&
                     AmountWithholdingTax.Equals(input.AmountWithholdingTax))
                ) &&
                (
                    AmountOtherWithholdingTax == input.AmountOtherWithholdingTax ||
                    (AmountOtherWithholdingTax != null &&
                     AmountOtherWithholdingTax.Equals(input.AmountOtherWithholdingTax))
                ) &&
                (
                    AmountDue == input.AmountDue ||
                    (AmountDue != null &&
                     AmountDue.Equals(input.AmountDue))
                ) &&
                (
                    PaymentsSum == input.PaymentsSum ||
                    (PaymentsSum != null &&
                     PaymentsSum.Equals(input.PaymentsSum))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (AmountNet != null) hashCode = hashCode * 59 + AmountNet.GetHashCode();
                if (AmountVat != null) hashCode = hashCode * 59 + AmountVat.GetHashCode();
                if (AmountGross != null) hashCode = hashCode * 59 + AmountGross.GetHashCode();
                if (AmountWithholdingTax != null) hashCode = hashCode * 59 + AmountWithholdingTax.GetHashCode();
                if (AmountOtherWithholdingTax != null)
                    hashCode = hashCode * 59 + AmountOtherWithholdingTax.GetHashCode();
                if (AmountDue != null) hashCode = hashCode * 59 + AmountDue.GetHashCode();
                if (PaymentsSum != null) hashCode = hashCode * 59 + PaymentsSum.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}