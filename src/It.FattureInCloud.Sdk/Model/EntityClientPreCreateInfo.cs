// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// EntityClientPreCreateInfo
    /// </summary>
    public partial class EntityClientPreCreateInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityClientPreCreateInfo" /> class.
        /// </summary>
        /// <param name="countriesList">Countries list</param>
        /// <param name="paymentMethodsList">Entity payment methods list</param>
        /// <param name="paymentAccountsList">Entity payment accounts list</param>
        /// <param name="vatTypesList">Vat types list</param>
        /// <param name="priceLists">Entity price lists</param>
        /// <param name="limit">Entity limit</param>
        /// <param name="usage">Entity usage</param>
        [JsonConstructor]
        public EntityClientPreCreateInfo(Option<List<string>> countriesList = default, Option<List<PaymentMethod>> paymentMethodsList = default, Option<List<PaymentAccount>> paymentAccountsList = default, Option<List<VatType>> vatTypesList = default, Option<List<PriceList>> priceLists = default, Option<decimal?> limit = default, Option<decimal?> usage = default)
        {
            CountriesListOption = countriesList;
            PaymentMethodsListOption = paymentMethodsList;
            PaymentAccountsListOption = paymentAccountsList;
            VatTypesListOption = vatTypesList;
            PriceListsOption = priceLists;
            LimitOption = limit;
            UsageOption = usage;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CountriesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CountriesListOption { get; private set; }

        /// <summary>
        /// Countries list
        /// </summary>
        /// <value>Countries list</value>
        [JsonPropertyName("countries_list")]
        public List<string> CountriesList { get { return this.CountriesListOption; } set { this.CountriesListOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethodsList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PaymentMethod>> PaymentMethodsListOption { get; private set; }

        /// <summary>
        /// Entity payment methods list
        /// </summary>
        /// <value>Entity payment methods list</value>
        [JsonPropertyName("payment_methods_list")]
        public List<PaymentMethod> PaymentMethodsList { get { return this.PaymentMethodsListOption; } set { this.PaymentMethodsListOption = new Option<List<PaymentMethod>>(value); } }

        /// <summary>
        /// Used to track the state of PaymentAccountsList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PaymentAccount>> PaymentAccountsListOption { get; private set; }

        /// <summary>
        /// Entity payment accounts list
        /// </summary>
        /// <value>Entity payment accounts list</value>
        [JsonPropertyName("payment_accounts_list")]
        public List<PaymentAccount> PaymentAccountsList { get { return this.PaymentAccountsListOption; } set { this.PaymentAccountsListOption = new Option<List<PaymentAccount>>(value); } }

        /// <summary>
        /// Used to track the state of VatTypesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<VatType>> VatTypesListOption { get; private set; }

        /// <summary>
        /// Vat types list
        /// </summary>
        /// <value>Vat types list</value>
        [JsonPropertyName("vat_types_list")]
        public List<VatType> VatTypesList { get { return this.VatTypesListOption; } set { this.VatTypesListOption = new Option<List<VatType>>(value); } }

        /// <summary>
        /// Used to track the state of PriceLists
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PriceList>> PriceListsOption { get; private set; }

        /// <summary>
        /// Entity price lists
        /// </summary>
        /// <value>Entity price lists</value>
        [JsonPropertyName("price_lists")]
        public List<PriceList> PriceLists { get { return this.PriceListsOption; } set { this.PriceListsOption = new Option<List<PriceList>>(value); } }

        /// <summary>
        /// Used to track the state of Limit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LimitOption { get; private set; }

        /// <summary>
        /// Entity limit
        /// </summary>
        /// <value>Entity limit</value>
        [JsonPropertyName("limit")]
        public decimal? Limit { get { return this.LimitOption; } set { this.LimitOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Usage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> UsageOption { get; private set; }

        /// <summary>
        /// Entity usage
        /// </summary>
        /// <value>Entity usage</value>
        [JsonPropertyName("usage")]
        public decimal? Usage { get { return this.UsageOption; } set { this.UsageOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntityClientPreCreateInfo {\n");
            sb.Append("  CountriesList: ").Append(CountriesList).Append("\n");
            sb.Append("  PaymentMethodsList: ").Append(PaymentMethodsList).Append("\n");
            sb.Append("  PaymentAccountsList: ").Append(PaymentAccountsList).Append("\n");
            sb.Append("  VatTypesList: ").Append(VatTypesList).Append("\n");
            sb.Append("  PriceLists: ").Append(PriceLists).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="EntityClientPreCreateInfo" />
    /// </summary>
    public class EntityClientPreCreateInfoJsonConverter : JsonConverter<EntityClientPreCreateInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="EntityClientPreCreateInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EntityClientPreCreateInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>> countriesList = default;
            Option<List<PaymentMethod>> paymentMethodsList = default;
            Option<List<PaymentAccount>> paymentAccountsList = default;
            Option<List<VatType>> vatTypesList = default;
            Option<List<PriceList>> priceLists = default;
            Option<decimal?> limit = default;
            Option<decimal?> usage = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "countries_list":
                            countriesList = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payment_methods_list":
                            paymentMethodsList = new Option<List<PaymentMethod>>(JsonSerializer.Deserialize<List<PaymentMethod>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payment_accounts_list":
                            paymentAccountsList = new Option<List<PaymentAccount>>(JsonSerializer.Deserialize<List<PaymentAccount>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "vat_types_list":
                            vatTypesList = new Option<List<VatType>>(JsonSerializer.Deserialize<List<VatType>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "price_lists":
                            priceLists = new Option<List<PriceList>>(JsonSerializer.Deserialize<List<PriceList>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "limit":
                            limit = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "usage":
                            usage = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new EntityClientPreCreateInfo(countriesList, paymentMethodsList, paymentAccountsList, vatTypesList, priceLists, limit, usage);
        }

        /// <summary>
        /// Serializes a <see cref="EntityClientPreCreateInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="entityClientPreCreateInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EntityClientPreCreateInfo entityClientPreCreateInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, entityClientPreCreateInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EntityClientPreCreateInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="entityClientPreCreateInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EntityClientPreCreateInfo entityClientPreCreateInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (entityClientPreCreateInfo.CountriesListOption.IsSet)
                if (entityClientPreCreateInfo.CountriesListOption.Value != null)
                {
                    writer.WritePropertyName("countries_list");
                    JsonSerializer.Serialize(writer, entityClientPreCreateInfo.CountriesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("countries_list");
            if (entityClientPreCreateInfo.PaymentMethodsListOption.IsSet)
                if (entityClientPreCreateInfo.PaymentMethodsListOption.Value != null)
                {
                    writer.WritePropertyName("payment_methods_list");
                    JsonSerializer.Serialize(writer, entityClientPreCreateInfo.PaymentMethodsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_methods_list");
            if (entityClientPreCreateInfo.PaymentAccountsListOption.IsSet)
                if (entityClientPreCreateInfo.PaymentAccountsListOption.Value != null)
                {
                    writer.WritePropertyName("payment_accounts_list");
                    JsonSerializer.Serialize(writer, entityClientPreCreateInfo.PaymentAccountsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_accounts_list");
            if (entityClientPreCreateInfo.VatTypesListOption.IsSet)
                if (entityClientPreCreateInfo.VatTypesListOption.Value != null)
                {
                    writer.WritePropertyName("vat_types_list");
                    JsonSerializer.Serialize(writer, entityClientPreCreateInfo.VatTypesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("vat_types_list");
            if (entityClientPreCreateInfo.PriceListsOption.IsSet)
                if (entityClientPreCreateInfo.PriceListsOption.Value != null)
                {
                    writer.WritePropertyName("price_lists");
                    JsonSerializer.Serialize(writer, entityClientPreCreateInfo.PriceLists, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("price_lists");
            if (entityClientPreCreateInfo.LimitOption.IsSet)
                if (entityClientPreCreateInfo.LimitOption.Value != null)
                    writer.WriteNumber("limit", entityClientPreCreateInfo.LimitOption.Value.Value);
                else
                    writer.WriteNull("limit");

            if (entityClientPreCreateInfo.UsageOption.IsSet)
                if (entityClientPreCreateInfo.UsageOption.Value != null)
                    writer.WriteNumber("usage", entityClientPreCreateInfo.UsageOption.Value.Value);
                else
                    writer.WriteNull("usage");
        }
    }
}
