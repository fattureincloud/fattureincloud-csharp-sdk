/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol. For more information, please visit https://www.fattureincloud.it.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// IssuedDocumentPaymentsList
    /// </summary>
    [DataContract(Name = "IssuedDocument_payments_list")]
    public partial class IssuedDocumentPaymentsList : IEquatable<IssuedDocumentPaymentsList>, IValidatableObject
    {
        /// <summary>
        /// Payment status.
        /// </summary>
        /// <value>Payment status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum NotPaid for value: not_paid
            /// </summary>
            [EnumMember(Value = "not_paid")]
            NotPaid = 1,

            /// <summary>
            /// Enum Paid for value: paid
            /// </summary>
            [EnumMember(Value = "paid")]
            Paid = 2,

            /// <summary>
            /// Enum Reversed for value: reversed
            /// </summary>
            [EnumMember(Value = "reversed")]
            Reversed = 3

        }


        /// <summary>
        /// Payment status.
        /// </summary>
        /// <value>Payment status.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentPaymentsList" /> class.
        /// </summary>
        /// <param name="dueDate">Due date..</param>
        /// <param name="amount">Payment amount..</param>
        /// <param name="status">Payment status. (default to StatusEnum.NotPaid).</param>
        /// <param name="paymentAccount">paymentAccount.</param>
        /// <param name="paidDate">Payment date. [Only if status is paid].</param>
        /// <param name="eiRaw">Advanced raw attributes for e-invoices..</param>
        public IssuedDocumentPaymentsList(DateTimeOffset dueDate = default(DateTimeOffset), decimal amount = default(decimal), StatusEnum? status = StatusEnum.NotPaid, PaymentAccount paymentAccount = default(PaymentAccount), DateTimeOffset paidDate = default(DateTimeOffset), Object eiRaw = default(Object))
        {
            this.DueDate = dueDate;
            this.Amount = amount;
            this.Status = status;
            this.PaymentAccount = paymentAccount;
            this.PaidDate = paidDate;
            this.EiRaw = eiRaw;
        }

        /// <summary>
        /// Due date.
        /// </summary>
        /// <value>Due date.</value>
        [DataMember(Name = "due_date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset DueDate { get; set; }

        /// <summary>
        /// Payment amount.
        /// </summary>
        /// <value>Payment amount.</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentAccount
        /// </summary>
        [DataMember(Name = "payment_account", EmitDefaultValue = true)]
        public PaymentAccount PaymentAccount { get; set; }

        /// <summary>
        /// Payment date. [Only if status is paid]
        /// </summary>
        /// <value>Payment date. [Only if status is paid]</value>
        [DataMember(Name = "paid_date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset PaidDate { get; set; }

        /// <summary>
        /// Advanced raw attributes for e-invoices.
        /// </summary>
        /// <value>Advanced raw attributes for e-invoices.</value>
        [DataMember(Name = "ei_raw", EmitDefaultValue = true)]
        public Object EiRaw { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssuedDocumentPaymentsList {\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PaymentAccount: ").Append(PaymentAccount).Append("\n");
            sb.Append("  PaidDate: ").Append(PaidDate).Append("\n");
            sb.Append("  EiRaw: ").Append(EiRaw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocumentPaymentsList);
        }

        /// <summary>
        /// Returns true if IssuedDocumentPaymentsList instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentPaymentsList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentPaymentsList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.PaymentAccount == input.PaymentAccount ||
                    (this.PaymentAccount != null &&
                    this.PaymentAccount.Equals(input.PaymentAccount))
                ) && 
                (
                    this.PaidDate == input.PaidDate ||
                    (this.PaidDate != null &&
                    this.PaidDate.Equals(input.PaidDate))
                ) && 
                (
                    this.EiRaw == input.EiRaw ||
                    (this.EiRaw != null &&
                    this.EiRaw.Equals(input.EiRaw))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                hashCode = hashCode * 59 + this.Amount.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.PaymentAccount != null)
                    hashCode = hashCode * 59 + this.PaymentAccount.GetHashCode();
                if (this.PaidDate != null)
                    hashCode = hashCode * 59 + this.PaidDate.GetHashCode();
                if (this.EiRaw != null)
                    hashCode = hashCode * 59 + this.EiRaw.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
