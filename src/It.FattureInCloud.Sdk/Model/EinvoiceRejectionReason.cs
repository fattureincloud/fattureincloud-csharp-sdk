/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// EinvoiceRejectionReason
    /// </summary>
    [DataContract(Name = "EinvoiceRejectionReason")]
    public partial class EinvoiceRejectionReason : IEquatable<EinvoiceRejectionReason>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EinvoiceRejectionReason" /> class.
        /// </summary>
        /// <param name="reason">Rejection reason..</param>
        /// <param name="eiStatus">EInvoice status..</param>
        /// <param name="solution">Error solution..</param>
        /// <param name="code">Error code..</param>
        /// <param name="date">Rejection date..</param>
        public EinvoiceRejectionReason(string reason = default(string), string eiStatus = default(string), string solution = default(string), string code = default(string), DateTime? date = default(DateTime?))
        {
            this.Reason = reason;
            this.EiStatus = eiStatus;
            this.Solution = solution;
            this.Code = code;
            this.Date = date;
        }

        /// <summary>
        /// Rejection reason.
        /// </summary>
        /// <value>Rejection reason.</value>
        [DataMember(Name = "reason", EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// EInvoice status.
        /// </summary>
        /// <value>EInvoice status.</value>
        [DataMember(Name = "ei_status", EmitDefaultValue = true)]
        public string EiStatus { get; set; }

        /// <summary>
        /// Error solution.
        /// </summary>
        /// <value>Error solution.</value>
        [DataMember(Name = "solution", EmitDefaultValue = true)]
        public string Solution { get; set; }

        /// <summary>
        /// Error code.
        /// </summary>
        /// <value>Error code.</value>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Rejection date.
        /// </summary>
        /// <value>Rejection date.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EinvoiceRejectionReason {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  EiStatus: ").Append(EiStatus).Append("\n");
            sb.Append("  Solution: ").Append(Solution).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EinvoiceRejectionReason);
        }

        /// <summary>
        /// Returns true if EinvoiceRejectionReason instances are equal
        /// </summary>
        /// <param name="input">Instance of EinvoiceRejectionReason to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EinvoiceRejectionReason input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.EiStatus == input.EiStatus ||
                    (this.EiStatus != null &&
                    this.EiStatus.Equals(input.EiStatus))
                ) && 
                (
                    this.Solution == input.Solution ||
                    (this.Solution != null &&
                    this.Solution.Equals(input.Solution))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                if (this.EiStatus != null)
                {
                    hashCode = (hashCode * 59) + this.EiStatus.GetHashCode();
                }
                if (this.Solution != null)
                {
                    hashCode = (hashCode * 59) + this.Solution.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
