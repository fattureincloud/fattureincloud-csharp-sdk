// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ListClientsResponse
    /// </summary>
    public partial class ListClientsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListClientsResponse" /> class.
        /// </summary>
        /// <param name="currentPage">Current page number.</param>
        /// <param name="firstPageUrl">First page url.</param>
        /// <param name="from">First result of the page.</param>
        /// <param name="lastPage">Last page number.</param>
        /// <param name="lastPageUrl">Last page url.</param>
        /// <param name="nextPageUrl">Next page url</param>
        /// <param name="path">Request path.</param>
        /// <param name="perPage">Number of result per page.</param>
        /// <param name="prevPageUrl">Previous page url.</param>
        /// <param name="to">Last result of the page.</param>
        /// <param name="total">Total number of results</param>
        /// <param name="data">data</param>
        [JsonConstructor]
        public ListClientsResponse(Option<int?> currentPage = default, Option<string> firstPageUrl = default, Option<int?> from = default, Option<int?> lastPage = default, Option<string> lastPageUrl = default, Option<string> nextPageUrl = default, Option<string> path = default, Option<int?> perPage = default, Option<string> prevPageUrl = default, Option<int?> to = default, Option<int?> total = default, Option<List<ModelClient>> data = default)
        {
            CurrentPageOption = currentPage;
            FirstPageUrlOption = firstPageUrl;
            FromOption = from;
            LastPageOption = lastPage;
            LastPageUrlOption = lastPageUrl;
            NextPageUrlOption = nextPageUrl;
            PathOption = path;
            PerPageOption = perPage;
            PrevPageUrlOption = prevPageUrl;
            ToOption = to;
            TotalOption = total;
            DataOption = data;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CurrentPage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrentPageOption { get; private set; }

        /// <summary>
        /// Current page number.
        /// </summary>
        /// <value>Current page number.</value>
        [JsonPropertyName("current_page")]
        public int? CurrentPage { get { return this.CurrentPageOption; } set { this.CurrentPageOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of FirstPageUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FirstPageUrlOption { get; private set; }

        /// <summary>
        /// First page url.
        /// </summary>
        /// <value>First page url.</value>
        [JsonPropertyName("first_page_url")]
        public string FirstPageUrl { get { return this.FirstPageUrlOption; } set { this.FirstPageUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of From
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FromOption { get; private set; }

        /// <summary>
        /// First result of the page.
        /// </summary>
        /// <value>First result of the page.</value>
        [JsonPropertyName("from")]
        public int? From { get { return this.FromOption; } set { this.FromOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of LastPage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LastPageOption { get; private set; }

        /// <summary>
        /// Last page number.
        /// </summary>
        /// <value>Last page number.</value>
        [JsonPropertyName("last_page")]
        public int? LastPage { get { return this.LastPageOption; } set { this.LastPageOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of LastPageUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LastPageUrlOption { get; private set; }

        /// <summary>
        /// Last page url.
        /// </summary>
        /// <value>Last page url.</value>
        [JsonPropertyName("last_page_url")]
        public string LastPageUrl { get { return this.LastPageUrlOption; } set { this.LastPageUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NextPageUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NextPageUrlOption { get; private set; }

        /// <summary>
        /// Next page url
        /// </summary>
        /// <value>Next page url</value>
        [JsonPropertyName("next_page_url")]
        public string NextPageUrl { get { return this.NextPageUrlOption; } set { this.NextPageUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PathOption { get; private set; }

        /// <summary>
        /// Request path.
        /// </summary>
        /// <value>Request path.</value>
        [JsonPropertyName("path")]
        public string Path { get { return this.PathOption; } set { this.PathOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PerPage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PerPageOption { get; private set; }

        /// <summary>
        /// Number of result per page.
        /// </summary>
        /// <value>Number of result per page.</value>
        [JsonPropertyName("per_page")]
        public int? PerPage { get { return this.PerPageOption; } set { this.PerPageOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of PrevPageUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PrevPageUrlOption { get; private set; }

        /// <summary>
        /// Previous page url.
        /// </summary>
        /// <value>Previous page url.</value>
        [JsonPropertyName("prev_page_url")]
        public string PrevPageUrl { get { return this.PrevPageUrlOption; } set { this.PrevPageUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of To
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ToOption { get; private set; }

        /// <summary>
        /// Last result of the page.
        /// </summary>
        /// <value>Last result of the page.</value>
        [JsonPropertyName("to")]
        public int? To { get { return this.ToOption; } set { this.ToOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Total
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalOption { get; private set; }

        /// <summary>
        /// Total number of results
        /// </summary>
        /// <value>Total number of results</value>
        [JsonPropertyName("total")]
        public int? Total { get { return this.TotalOption; } set { this.TotalOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ModelClient>> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public List<ModelClient> Data { get { return this.DataOption; } set { this.DataOption = new Option<List<ModelClient>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListClientsResponse {\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("  FirstPageUrl: ").Append(FirstPageUrl).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  LastPage: ").Append(LastPage).Append("\n");
            sb.Append("  LastPageUrl: ").Append(LastPageUrl).Append("\n");
            sb.Append("  NextPageUrl: ").Append(NextPageUrl).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  PerPage: ").Append(PerPage).Append("\n");
            sb.Append("  PrevPageUrl: ").Append(PrevPageUrl).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="ListClientsResponse" />
    /// </summary>
    public class ListClientsResponseJsonConverter : JsonConverter<ListClientsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ListClientsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ListClientsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> currentPage = default;
            Option<string> firstPageUrl = default;
            Option<int?> from = default;
            Option<int?> lastPage = default;
            Option<string> lastPageUrl = default;
            Option<string> nextPageUrl = default;
            Option<string> path = default;
            Option<int?> perPage = default;
            Option<string> prevPageUrl = default;
            Option<int?> to = default;
            Option<int?> total = default;
            Option<List<ModelClient>> data = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "current_page":
                            currentPage = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "first_page_url":
                            firstPageUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "from":
                            from = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "last_page":
                            lastPage = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "last_page_url":
                            lastPageUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "next_page_url":
                            nextPageUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "path":
                            path = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "per_page":
                            perPage = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "prev_page_url":
                            prevPageUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "to":
                            to = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "data":
                            data = new Option<List<ModelClient>>(JsonSerializer.Deserialize<List<ModelClient>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ListClientsResponse(currentPage, firstPageUrl, from, lastPage, lastPageUrl, nextPageUrl, path, perPage, prevPageUrl, to, total, data);
        }

        /// <summary>
        /// Serializes a <see cref="ListClientsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listClientsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ListClientsResponse listClientsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, listClientsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ListClientsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listClientsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ListClientsResponse listClientsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (listClientsResponse.CurrentPageOption.IsSet)
                if (listClientsResponse.CurrentPageOption.Value != null)
                    writer.WriteNumber("current_page", listClientsResponse.CurrentPageOption.Value.Value);
                else
                    writer.WriteNull("current_page");

            if (listClientsResponse.FirstPageUrlOption.IsSet)
                if (listClientsResponse.FirstPageUrlOption.Value != null)
                    writer.WriteString("first_page_url", listClientsResponse.FirstPageUrl);
                else
                    writer.WriteNull("first_page_url");

            if (listClientsResponse.FromOption.IsSet)
                if (listClientsResponse.FromOption.Value != null)
                    writer.WriteNumber("from", listClientsResponse.FromOption.Value.Value);
                else
                    writer.WriteNull("from");

            if (listClientsResponse.LastPageOption.IsSet)
                if (listClientsResponse.LastPageOption.Value != null)
                    writer.WriteNumber("last_page", listClientsResponse.LastPageOption.Value.Value);
                else
                    writer.WriteNull("last_page");

            if (listClientsResponse.LastPageUrlOption.IsSet)
                if (listClientsResponse.LastPageUrlOption.Value != null)
                    writer.WriteString("last_page_url", listClientsResponse.LastPageUrl);
                else
                    writer.WriteNull("last_page_url");

            if (listClientsResponse.NextPageUrlOption.IsSet)
                if (listClientsResponse.NextPageUrlOption.Value != null)
                    writer.WriteString("next_page_url", listClientsResponse.NextPageUrl);
                else
                    writer.WriteNull("next_page_url");

            if (listClientsResponse.PathOption.IsSet)
                if (listClientsResponse.PathOption.Value != null)
                    writer.WriteString("path", listClientsResponse.Path);
                else
                    writer.WriteNull("path");

            if (listClientsResponse.PerPageOption.IsSet)
                if (listClientsResponse.PerPageOption.Value != null)
                    writer.WriteNumber("per_page", listClientsResponse.PerPageOption.Value.Value);
                else
                    writer.WriteNull("per_page");

            if (listClientsResponse.PrevPageUrlOption.IsSet)
                if (listClientsResponse.PrevPageUrlOption.Value != null)
                    writer.WriteString("prev_page_url", listClientsResponse.PrevPageUrl);
                else
                    writer.WriteNull("prev_page_url");

            if (listClientsResponse.ToOption.IsSet)
                if (listClientsResponse.ToOption.Value != null)
                    writer.WriteNumber("to", listClientsResponse.ToOption.Value.Value);
                else
                    writer.WriteNull("to");

            if (listClientsResponse.TotalOption.IsSet)
                if (listClientsResponse.TotalOption.Value != null)
                    writer.WriteNumber("total", listClientsResponse.TotalOption.Value.Value);
                else
                    writer.WriteNull("total");

            if (listClientsResponse.DataOption.IsSet)
                if (listClientsResponse.DataOption.Value != null)
                {
                    writer.WritePropertyName("data");
                    JsonSerializer.Serialize(writer, listClientsResponse.Data, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("data");
        }
    }
}
