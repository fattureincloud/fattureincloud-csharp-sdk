/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     PaymentMethod
    /// </summary>
    [DataContract(Name = "PaymentMethod")]
    public class PaymentMethod : IEquatable<PaymentMethod>, IValidatableObject
    {
        private string _BankBeneficiary;
        private string _BankIban;
        private string _BankName;
        private PaymentAccount _DefaultPaymentAccount;
        private List<PaymentMethodDetails> _Details;
        private string _EiPaymentMethod;
        private bool _flagBankBeneficiary;
        private bool _flagBankIban;
        private bool _flagBankName;
        private bool _flagDefaultPaymentAccount;
        private bool _flagDetails;
        private bool _flagEiPaymentMethod;
        private bool _flagId;
        private bool _flagIsDefault;
        private bool _flagName;
        private bool _flagType;
        private int? _Id;
        private bool? _IsDefault;
        private string _Name;
        private PaymentMethodType? _Type;

        /// <summary>
        ///     Initializes a new instance of the <see cref="PaymentMethod" /> class.
        /// </summary>
        /// <param name="id">Unique identifier.</param>
        /// <param name="name">Name of the payment method.</param>
        /// <param name="type">type.</param>
        /// <param name="isDefault">Determines if this is the default payment method..</param>
        /// <param name="defaultPaymentAccount">defaultPaymentAccount.</param>
        /// <param name="details">Method details rows.</param>
        /// <param name="bankIban">Bank iban.</param>
        /// <param name="bankName">Bank name.</param>
        /// <param name="bankBeneficiary">Bank beneficiary.</param>
        /// <param name="eiPaymentMethod">E-invoice payment method.</param>
        public PaymentMethod(int? id = default(int?), string name = default(string),
            PaymentMethodType? type = default(PaymentMethodType?), bool? isDefault = default(bool?),
            PaymentAccount defaultPaymentAccount = default,
            List<PaymentMethodDetails> details = default(List<PaymentMethodDetails>), string bankIban = default(string),
            string bankName = default(string), string bankBeneficiary = default(string),
            string eiPaymentMethod = default(string))
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _Name = name;
            if (Name != null) _flagName = true;
            _Type = type;
            if (Type != null) _flagType = true;
            _IsDefault = isDefault;
            if (IsDefault != null) _flagIsDefault = true;
            _DefaultPaymentAccount = defaultPaymentAccount;
            if (DefaultPaymentAccount != null) _flagDefaultPaymentAccount = true;
            _Details = details;
            if (Details != null) _flagDetails = true;
            _BankIban = bankIban;
            if (BankIban != null) _flagBankIban = true;
            _BankName = bankName;
            if (BankName != null) _flagBankName = true;
            _BankBeneficiary = bankBeneficiary;
            if (BankBeneficiary != null) _flagBankBeneficiary = true;
            _EiPaymentMethod = eiPaymentMethod;
            if (EiPaymentMethod != null) _flagEiPaymentMethod = true;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = false)]
        public PaymentMethodType? Type
        {
            get => _Type;
            set
            {
                _Type = value;
                _flagType = true;
            }
        }

        /// <summary>
        ///     Unique identifier
        /// </summary>
        /// <value>Unique identifier</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Name of the payment method
        /// </summary>
        /// <value>Name of the payment method</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get => _Name;
            set
            {
                _Name = value;
                _flagName = true;
            }
        }

        /// <summary>
        ///     Determines if this is the default payment method.
        /// </summary>
        /// <value>Determines if this is the default payment method.</value>
        [DataMember(Name = "is_default", EmitDefaultValue = true)]
        public bool? IsDefault
        {
            get => _IsDefault;
            set
            {
                _IsDefault = value;
                _flagIsDefault = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DefaultPaymentAccount
        /// </summary>
        [DataMember(Name = "default_payment_account", EmitDefaultValue = true)]
        public PaymentAccount DefaultPaymentAccount
        {
            get => _DefaultPaymentAccount;
            set
            {
                _DefaultPaymentAccount = value;
                _flagDefaultPaymentAccount = true;
            }
        }

        /// <summary>
        ///     Method details rows
        /// </summary>
        /// <value>Method details rows</value>
        [DataMember(Name = "details", EmitDefaultValue = true)]
        public List<PaymentMethodDetails> Details
        {
            get => _Details;
            set
            {
                _Details = value;
                _flagDetails = true;
            }
        }

        /// <summary>
        ///     Bank iban
        /// </summary>
        /// <value>Bank iban</value>
        [DataMember(Name = "bank_iban", EmitDefaultValue = true)]
        public string BankIban
        {
            get => _BankIban;
            set
            {
                _BankIban = value;
                _flagBankIban = true;
            }
        }

        /// <summary>
        ///     Bank name
        /// </summary>
        /// <value>Bank name</value>
        [DataMember(Name = "bank_name", EmitDefaultValue = true)]
        public string BankName
        {
            get => _BankName;
            set
            {
                _BankName = value;
                _flagBankName = true;
            }
        }

        /// <summary>
        ///     Bank beneficiary
        /// </summary>
        /// <value>Bank beneficiary</value>
        [DataMember(Name = "bank_beneficiary", EmitDefaultValue = true)]
        public string BankBeneficiary
        {
            get => _BankBeneficiary;
            set
            {
                _BankBeneficiary = value;
                _flagBankBeneficiary = true;
            }
        }

        /// <summary>
        ///     E-invoice payment method
        /// </summary>
        /// <value>E-invoice payment method</value>
        [DataMember(Name = "ei_payment_method", EmitDefaultValue = true)]
        public string EiPaymentMethod
        {
            get => _EiPaymentMethod;
            set
            {
                _EiPaymentMethod = value;
                _flagEiPaymentMethod = true;
            }
        }

        /// <summary>
        ///     Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }

        /// <summary>
        ///     Returns false as IsDefault should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsDefault()
        {
            return _flagIsDefault;
        }

        /// <summary>
        ///     Returns false as DefaultPaymentAccount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultPaymentAccount()
        {
            return _flagDefaultPaymentAccount;
        }

        /// <summary>
        ///     Returns false as Details should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDetails()
        {
            return _flagDetails;
        }

        /// <summary>
        ///     Returns false as BankIban should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBankIban()
        {
            return _flagBankIban;
        }

        /// <summary>
        ///     Returns false as BankName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBankName()
        {
            return _flagBankName;
        }

        /// <summary>
        ///     Returns false as BankBeneficiary should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBankBeneficiary()
        {
            return _flagBankBeneficiary;
        }

        /// <summary>
        ///     Returns false as EiPaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiPaymentMethod()
        {
            return _flagEiPaymentMethod;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethod {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  DefaultPaymentAccount: ").Append(DefaultPaymentAccount).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  BankIban: ").Append(BankIban).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankBeneficiary: ").Append(BankBeneficiary).Append("\n");
            sb.Append("  EiPaymentMethod: ").Append(EiPaymentMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PaymentMethod);
        }

        /// <summary>
        ///     Returns true if PaymentMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethod input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    IsDefault == input.IsDefault ||
                    (IsDefault != null &&
                     IsDefault.Equals(input.IsDefault))
                ) &&
                (
                    DefaultPaymentAccount == input.DefaultPaymentAccount ||
                    (DefaultPaymentAccount != null &&
                     DefaultPaymentAccount.Equals(input.DefaultPaymentAccount))
                ) &&
                (
                    Details == input.Details ||
                    (Details != null &&
                     input.Details != null &&
                     Details.SequenceEqual(input.Details))
                ) &&
                (
                    BankIban == input.BankIban ||
                    (BankIban != null &&
                     BankIban.Equals(input.BankIban))
                ) &&
                (
                    BankName == input.BankName ||
                    (BankName != null &&
                     BankName.Equals(input.BankName))
                ) &&
                (
                    BankBeneficiary == input.BankBeneficiary ||
                    (BankBeneficiary != null &&
                     BankBeneficiary.Equals(input.BankBeneficiary))
                ) &&
                (
                    EiPaymentMethod == input.EiPaymentMethod ||
                    (EiPaymentMethod != null &&
                     EiPaymentMethod.Equals(input.EiPaymentMethod))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
                hashCode = hashCode * 59 + Type.GetHashCode();
                if (IsDefault != null) hashCode = hashCode * 59 + IsDefault.GetHashCode();
                if (DefaultPaymentAccount != null) hashCode = hashCode * 59 + DefaultPaymentAccount.GetHashCode();
                if (Details != null) hashCode = hashCode * 59 + Details.GetHashCode();
                if (BankIban != null) hashCode = hashCode * 59 + BankIban.GetHashCode();
                if (BankName != null) hashCode = hashCode * 59 + BankName.GetHashCode();
                if (BankBeneficiary != null) hashCode = hashCode * 59 + BankBeneficiary.GetHashCode();
                if (EiPaymentMethod != null) hashCode = hashCode * 59 + EiPaymentMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}