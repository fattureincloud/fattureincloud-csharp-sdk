// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// PaymentMethod
    /// </summary>
    public partial class PaymentMethod : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethod" /> class.
        /// </summary>
        /// <param name="id">Payment method id</param>
        /// <param name="name">Payment method name</param>
        /// <param name="type">type</param>
        /// <param name="isDefault">Payment method is default</param>
        /// <param name="defaultPaymentAccount">defaultPaymentAccount</param>
        /// <param name="details">Payment method details</param>
        /// <param name="bankIban">Payment method bank iban</param>
        /// <param name="bankName">Payment method bank name</param>
        /// <param name="bankBeneficiary">Payment method bank beneficiary</param>
        /// <param name="eiPaymentMethod">E-invoice payment method</param>
        [JsonConstructor]
        public PaymentMethod(Option<int?> id = default, Option<string> name = default, Option<PaymentMethodType?> type = default, Option<bool?> isDefault = default, Option<PaymentAccount> defaultPaymentAccount = default, Option<List<PaymentMethodDetails>> details = default, Option<string> bankIban = default, Option<string> bankName = default, Option<string> bankBeneficiary = default, Option<string> eiPaymentMethod = default)
        {
            IdOption = id;
            NameOption = name;
            TypeOption = type;
            IsDefaultOption = isDefault;
            DefaultPaymentAccountOption = defaultPaymentAccount;
            DetailsOption = details;
            BankIbanOption = bankIban;
            BankNameOption = bankName;
            BankBeneficiaryOption = bankBeneficiary;
            EiPaymentMethodOption = eiPaymentMethod;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentMethodType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public PaymentMethodType? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<PaymentMethodType?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Payment method id
        /// </summary>
        /// <value>Payment method id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Payment method name
        /// </summary>
        /// <value>Payment method name</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsDefault
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDefaultOption { get; private set; }

        /// <summary>
        /// Payment method is default
        /// </summary>
        /// <value>Payment method is default</value>
        [JsonPropertyName("is_default")]
        public bool? IsDefault { get { return this.IsDefaultOption; } set { this.IsDefaultOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultPaymentAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentAccount> DefaultPaymentAccountOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultPaymentAccount
        /// </summary>
        [JsonPropertyName("default_payment_account")]
        public PaymentAccount DefaultPaymentAccount { get { return this.DefaultPaymentAccountOption; } set { this.DefaultPaymentAccountOption = new Option<PaymentAccount>(value); } }

        /// <summary>
        /// Used to track the state of Details
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PaymentMethodDetails>> DetailsOption { get; private set; }

        /// <summary>
        /// Payment method details
        /// </summary>
        /// <value>Payment method details</value>
        [JsonPropertyName("details")]
        public List<PaymentMethodDetails> Details { get { return this.DetailsOption; } set { this.DetailsOption = new Option<List<PaymentMethodDetails>>(value); } }

        /// <summary>
        /// Used to track the state of BankIban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankIbanOption { get; private set; }

        /// <summary>
        /// Payment method bank iban
        /// </summary>
        /// <value>Payment method bank iban</value>
        [JsonPropertyName("bank_iban")]
        public string BankIban { get { return this.BankIbanOption; } set { this.BankIbanOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BankName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankNameOption { get; private set; }

        /// <summary>
        /// Payment method bank name
        /// </summary>
        /// <value>Payment method bank name</value>
        [JsonPropertyName("bank_name")]
        public string BankName { get { return this.BankNameOption; } set { this.BankNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BankBeneficiary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankBeneficiaryOption { get; private set; }

        /// <summary>
        /// Payment method bank beneficiary
        /// </summary>
        /// <value>Payment method bank beneficiary</value>
        [JsonPropertyName("bank_beneficiary")]
        public string BankBeneficiary { get { return this.BankBeneficiaryOption; } set { this.BankBeneficiaryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EiPaymentMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EiPaymentMethodOption { get; private set; }

        /// <summary>
        /// E-invoice payment method
        /// </summary>
        /// <value>E-invoice payment method</value>
        [JsonPropertyName("ei_payment_method")]
        public string EiPaymentMethod { get { return this.EiPaymentMethodOption; } set { this.EiPaymentMethodOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMethod {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  DefaultPaymentAccount: ").Append(DefaultPaymentAccount).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  BankIban: ").Append(BankIban).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankBeneficiary: ").Append(BankBeneficiary).Append("\n");
            sb.Append("  EiPaymentMethod: ").Append(EiPaymentMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="PaymentMethod" />
    /// </summary>
    public class PaymentMethodJsonConverter : JsonConverter<PaymentMethod>
    {
        /// <summary>
        /// Deserializes json to <see cref="PaymentMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string> name = default;
            Option<PaymentMethodType?> type = default;
            Option<bool?> isDefault = default;
            Option<PaymentAccount> defaultPaymentAccount = default;
            Option<List<PaymentMethodDetails>> details = default;
            Option<string> bankIban = default;
            Option<string> bankName = default;
            Option<string> bankBeneficiary = default;
            Option<string> eiPaymentMethod = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<PaymentMethodType?>(PaymentMethodTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "is_default":
                            isDefault = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "default_payment_account":
                            defaultPaymentAccount = new Option<PaymentAccount>(JsonSerializer.Deserialize<PaymentAccount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "details":
                            details = new Option<List<PaymentMethodDetails>>(JsonSerializer.Deserialize<List<PaymentMethodDetails>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bank_iban":
                            bankIban = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bank_name":
                            bankName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bank_beneficiary":
                            bankBeneficiary = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ei_payment_method":
                            eiPaymentMethod = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PaymentMethod.");

            return new PaymentMethod(id, name, type, isDefault, defaultPaymentAccount, details, bankIban, bankName, bankBeneficiary, eiPaymentMethod);
        }

        /// <summary>
        /// Serializes a <see cref="PaymentMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentMethod paymentMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentMethod paymentMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (paymentMethod.IdOption.IsSet)
                if (paymentMethod.IdOption.Value != null)
                    writer.WriteNumber("id", paymentMethod.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (paymentMethod.NameOption.IsSet)
                if (paymentMethod.NameOption.Value != null)
                    writer.WriteString("name", paymentMethod.Name);
                else
                    writer.WriteNull("name");

            if (paymentMethod.TypeOption.IsSet)
            {
                var typeRawValue = PaymentMethodTypeValueConverter.ToJsonValue(paymentMethod.Type.Value);
                writer.WriteString("type", typeRawValue);
            }
            if (paymentMethod.IsDefaultOption.IsSet)
                if (paymentMethod.IsDefaultOption.Value != null)
                    writer.WriteBoolean("is_default", paymentMethod.IsDefaultOption.Value.Value);
                else
                    writer.WriteNull("is_default");

            if (paymentMethod.DefaultPaymentAccountOption.IsSet)
                if (paymentMethod.DefaultPaymentAccountOption.Value != null)
                {
                    writer.WritePropertyName("default_payment_account");
                    JsonSerializer.Serialize(writer, paymentMethod.DefaultPaymentAccount, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("default_payment_account");
            if (paymentMethod.DetailsOption.IsSet)
                if (paymentMethod.DetailsOption.Value != null)
                {
                    writer.WritePropertyName("details");
                    JsonSerializer.Serialize(writer, paymentMethod.Details, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("details");
            if (paymentMethod.BankIbanOption.IsSet)
                if (paymentMethod.BankIbanOption.Value != null)
                    writer.WriteString("bank_iban", paymentMethod.BankIban);
                else
                    writer.WriteNull("bank_iban");

            if (paymentMethod.BankNameOption.IsSet)
                if (paymentMethod.BankNameOption.Value != null)
                    writer.WriteString("bank_name", paymentMethod.BankName);
                else
                    writer.WriteNull("bank_name");

            if (paymentMethod.BankBeneficiaryOption.IsSet)
                if (paymentMethod.BankBeneficiaryOption.Value != null)
                    writer.WriteString("bank_beneficiary", paymentMethod.BankBeneficiary);
                else
                    writer.WriteNull("bank_beneficiary");

            if (paymentMethod.EiPaymentMethodOption.IsSet)
                if (paymentMethod.EiPaymentMethodOption.Value != null)
                    writer.WriteString("ei_payment_method", paymentMethod.EiPaymentMethod);
                else
                    writer.WriteNull("ei_payment_method");
        }
    }
}
