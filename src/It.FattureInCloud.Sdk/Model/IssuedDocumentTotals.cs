/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     IssuedDocumentTotals
    /// </summary>
    [DataContract(Name = "IssuedDocumentTotals")]
    public class IssuedDocumentTotals : IEquatable<IssuedDocumentTotals>, IValidatableObject
    {
        private decimal? _AmountCassa;
        private decimal? _AmountDue;
        private decimal? _AmountGross;
        private decimal? _AmountNet;
        private decimal? _AmountNetWithRivalsa;
        private decimal? _AmountOtherWithholdingTax;
        private decimal? _AmountRivalsa;
        private decimal? _AmountVat;
        private decimal? _AmountWithholdingTax;
        private bool _flagAmountCassa;
        private bool _flagAmountDue;
        private bool _flagAmountGross;
        private bool _flagAmountNet;
        private bool _flagAmountNetWithRivalsa;
        private bool _flagAmountOtherWithholdingTax;
        private bool _flagAmountRivalsa;
        private bool _flagAmountVat;
        private bool _flagAmountWithholdingTax;
        private bool _flagIsEnasarcoMaximalExceeded;
        private bool _flagNotTaxableAmount;
        private bool _flagPaymentsSum;
        private bool _flagStampDuty;
        private bool _flagTaxableAmount;
        private bool _flagTaxableAmountOtherWithholdingTax;
        private bool _flagTaxableAmountWithholdingTax;
        private bool _flagVatList;
        private bool? _IsEnasarcoMaximalExceeded;
        private decimal? _NotTaxableAmount;
        private decimal? _PaymentsSum;
        private decimal? _StampDuty;
        private decimal? _TaxableAmount;
        private decimal? _TaxableAmountOtherWithholdingTax;
        private decimal? _TaxableAmountWithholdingTax;
        private Dictionary<string, VatItem> _VatList;

        /// <summary>
        ///     Initializes a new instance of the <see cref="IssuedDocumentTotals" /> class.
        /// </summary>
        /// <param name="amountNet">Total net amount..</param>
        /// <param name="amountRivalsa">Rivalsa amount..</param>
        /// <param name="amountNetWithRivalsa">Net amount with rivalsa..</param>
        /// <param name="amountCassa">Cassa amount..</param>
        /// <param name="taxableAmount">Taxable amount..</param>
        /// <param name="notTaxableAmount">Not taxable amount..</param>
        /// <param name="amountVat">Total vat amount..</param>
        /// <param name="amountGross">Total grosas amount..</param>
        /// <param name="taxableAmountWithholdingTax">Taxable withholding tax amount..</param>
        /// <param name="amountWithholdingTax">Withholding tax amount..</param>
        /// <param name="taxableAmountOtherWithholdingTax">Other withholding tax taxable amount..</param>
        /// <param name="amountOtherWithholdingTax">Other withholding tax amount..</param>
        /// <param name="stampDuty">Stamp duty value [0 if not present]..</param>
        /// <param name="amountDue">Total amount due..</param>
        /// <param name="isEnasarcoMaximalExceeded">isEnasarcoMaximalExceeded.</param>
        /// <param name="paymentsSum">Payments sum..</param>
        /// <param name="vatList">vatList.</param>
        public IssuedDocumentTotals(decimal? amountNet = default(decimal?), decimal? amountRivalsa = default(decimal?),
            decimal? amountNetWithRivalsa = default(decimal?), decimal? amountCassa = default(decimal?),
            decimal? taxableAmount = default(decimal?), decimal? notTaxableAmount = default(decimal?),
            decimal? amountVat = default(decimal?), decimal? amountGross = default(decimal?),
            decimal? taxableAmountWithholdingTax = default(decimal?), decimal? amountWithholdingTax = default(decimal?),
            decimal? taxableAmountOtherWithholdingTax = default(decimal?),
            decimal? amountOtherWithholdingTax = default(decimal?), decimal? stampDuty = default(decimal?),
            decimal? amountDue = default(decimal?), bool? isEnasarcoMaximalExceeded = default(bool?),
            decimal? paymentsSum = default(decimal?),
            Dictionary<string, VatItem> vatList = default(Dictionary<string, VatItem>))
        {
            _AmountNet = amountNet;
            if (AmountNet != null) _flagAmountNet = true;
            _AmountRivalsa = amountRivalsa;
            if (AmountRivalsa != null) _flagAmountRivalsa = true;
            _AmountNetWithRivalsa = amountNetWithRivalsa;
            if (AmountNetWithRivalsa != null) _flagAmountNetWithRivalsa = true;
            _AmountCassa = amountCassa;
            if (AmountCassa != null) _flagAmountCassa = true;
            _TaxableAmount = taxableAmount;
            if (TaxableAmount != null) _flagTaxableAmount = true;
            _NotTaxableAmount = notTaxableAmount;
            if (NotTaxableAmount != null) _flagNotTaxableAmount = true;
            _AmountVat = amountVat;
            if (AmountVat != null) _flagAmountVat = true;
            _AmountGross = amountGross;
            if (AmountGross != null) _flagAmountGross = true;
            _TaxableAmountWithholdingTax = taxableAmountWithholdingTax;
            if (TaxableAmountWithholdingTax != null) _flagTaxableAmountWithholdingTax = true;
            _AmountWithholdingTax = amountWithholdingTax;
            if (AmountWithholdingTax != null) _flagAmountWithholdingTax = true;
            _TaxableAmountOtherWithholdingTax = taxableAmountOtherWithholdingTax;
            if (TaxableAmountOtherWithholdingTax != null) _flagTaxableAmountOtherWithholdingTax = true;
            _AmountOtherWithholdingTax = amountOtherWithholdingTax;
            if (AmountOtherWithholdingTax != null) _flagAmountOtherWithholdingTax = true;
            _StampDuty = stampDuty;
            if (StampDuty != null) _flagStampDuty = true;
            _AmountDue = amountDue;
            if (AmountDue != null) _flagAmountDue = true;
            _IsEnasarcoMaximalExceeded = isEnasarcoMaximalExceeded;
            if (IsEnasarcoMaximalExceeded != null) _flagIsEnasarcoMaximalExceeded = true;
            _PaymentsSum = paymentsSum;
            if (PaymentsSum != null) _flagPaymentsSum = true;
            _VatList = vatList;
            if (VatList != null) _flagVatList = true;
        }

        /// <summary>
        ///     Total net amount.
        /// </summary>
        /// <value>Total net amount.</value>
        [DataMember(Name = "amount_net", EmitDefaultValue = true)]
        public decimal? AmountNet
        {
            get => _AmountNet;
            set
            {
                _AmountNet = value;
                _flagAmountNet = true;
            }
        }

        /// <summary>
        ///     Rivalsa amount.
        /// </summary>
        /// <value>Rivalsa amount.</value>
        [DataMember(Name = "amount_rivalsa", EmitDefaultValue = true)]
        public decimal? AmountRivalsa
        {
            get => _AmountRivalsa;
            set
            {
                _AmountRivalsa = value;
                _flagAmountRivalsa = true;
            }
        }

        /// <summary>
        ///     Net amount with rivalsa.
        /// </summary>
        /// <value>Net amount with rivalsa.</value>
        [DataMember(Name = "amount_net_with_rivalsa", EmitDefaultValue = true)]
        public decimal? AmountNetWithRivalsa
        {
            get => _AmountNetWithRivalsa;
            set
            {
                _AmountNetWithRivalsa = value;
                _flagAmountNetWithRivalsa = true;
            }
        }

        /// <summary>
        ///     Cassa amount.
        /// </summary>
        /// <value>Cassa amount.</value>
        [DataMember(Name = "amount_cassa", EmitDefaultValue = true)]
        public decimal? AmountCassa
        {
            get => _AmountCassa;
            set
            {
                _AmountCassa = value;
                _flagAmountCassa = true;
            }
        }

        /// <summary>
        ///     Taxable amount.
        /// </summary>
        /// <value>Taxable amount.</value>
        [DataMember(Name = "taxable_amount", EmitDefaultValue = true)]
        public decimal? TaxableAmount
        {
            get => _TaxableAmount;
            set
            {
                _TaxableAmount = value;
                _flagTaxableAmount = true;
            }
        }

        /// <summary>
        ///     Not taxable amount.
        /// </summary>
        /// <value>Not taxable amount.</value>
        [DataMember(Name = "not_taxable_amount", EmitDefaultValue = true)]
        public decimal? NotTaxableAmount
        {
            get => _NotTaxableAmount;
            set
            {
                _NotTaxableAmount = value;
                _flagNotTaxableAmount = true;
            }
        }

        /// <summary>
        ///     Total vat amount.
        /// </summary>
        /// <value>Total vat amount.</value>
        [DataMember(Name = "amount_vat", EmitDefaultValue = true)]
        public decimal? AmountVat
        {
            get => _AmountVat;
            set
            {
                _AmountVat = value;
                _flagAmountVat = true;
            }
        }

        /// <summary>
        ///     Total grosas amount.
        /// </summary>
        /// <value>Total grosas amount.</value>
        [DataMember(Name = "amount_gross", EmitDefaultValue = true)]
        public decimal? AmountGross
        {
            get => _AmountGross;
            set
            {
                _AmountGross = value;
                _flagAmountGross = true;
            }
        }

        /// <summary>
        ///     Taxable withholding tax amount.
        /// </summary>
        /// <value>Taxable withholding tax amount.</value>
        [DataMember(Name = "taxable_amount_withholding_tax", EmitDefaultValue = true)]
        public decimal? TaxableAmountWithholdingTax
        {
            get => _TaxableAmountWithholdingTax;
            set
            {
                _TaxableAmountWithholdingTax = value;
                _flagTaxableAmountWithholdingTax = true;
            }
        }

        /// <summary>
        ///     Withholding tax amount.
        /// </summary>
        /// <value>Withholding tax amount.</value>
        [DataMember(Name = "amount_withholding_tax", EmitDefaultValue = true)]
        public decimal? AmountWithholdingTax
        {
            get => _AmountWithholdingTax;
            set
            {
                _AmountWithholdingTax = value;
                _flagAmountWithholdingTax = true;
            }
        }

        /// <summary>
        ///     Other withholding tax taxable amount.
        /// </summary>
        /// <value>Other withholding tax taxable amount.</value>
        [DataMember(Name = "taxable_amount_other_withholding_tax", EmitDefaultValue = true)]
        public decimal? TaxableAmountOtherWithholdingTax
        {
            get => _TaxableAmountOtherWithholdingTax;
            set
            {
                _TaxableAmountOtherWithholdingTax = value;
                _flagTaxableAmountOtherWithholdingTax = true;
            }
        }

        /// <summary>
        ///     Other withholding tax amount.
        /// </summary>
        /// <value>Other withholding tax amount.</value>
        [DataMember(Name = "amount_other_withholding_tax", EmitDefaultValue = true)]
        public decimal? AmountOtherWithholdingTax
        {
            get => _AmountOtherWithholdingTax;
            set
            {
                _AmountOtherWithholdingTax = value;
                _flagAmountOtherWithholdingTax = true;
            }
        }

        /// <summary>
        ///     Stamp duty value [0 if not present].
        /// </summary>
        /// <value>Stamp duty value [0 if not present].</value>
        [DataMember(Name = "stamp_duty", EmitDefaultValue = true)]
        public decimal? StampDuty
        {
            get => _StampDuty;
            set
            {
                _StampDuty = value;
                _flagStampDuty = true;
            }
        }

        /// <summary>
        ///     Total amount due.
        /// </summary>
        /// <value>Total amount due.</value>
        [DataMember(Name = "amount_due", EmitDefaultValue = true)]
        public decimal? AmountDue
        {
            get => _AmountDue;
            set
            {
                _AmountDue = value;
                _flagAmountDue = true;
            }
        }

        /// <summary>
        ///     Gets or Sets IsEnasarcoMaximalExceeded
        /// </summary>
        [DataMember(Name = "is_enasarco_maximal_exceeded", EmitDefaultValue = true)]
        public bool? IsEnasarcoMaximalExceeded
        {
            get => _IsEnasarcoMaximalExceeded;
            set
            {
                _IsEnasarcoMaximalExceeded = value;
                _flagIsEnasarcoMaximalExceeded = true;
            }
        }

        /// <summary>
        ///     Payments sum.
        /// </summary>
        /// <value>Payments sum.</value>
        [DataMember(Name = "payments_sum", EmitDefaultValue = true)]
        public decimal? PaymentsSum
        {
            get => _PaymentsSum;
            set
            {
                _PaymentsSum = value;
                _flagPaymentsSum = true;
            }
        }

        /// <summary>
        ///     Gets or Sets VatList
        /// </summary>
        [DataMember(Name = "vat_list", EmitDefaultValue = false)]
        public Dictionary<string, VatItem> VatList
        {
            get => _VatList;
            set
            {
                _VatList = value;
                _flagVatList = true;
            }
        }

        /// <summary>
        ///     Returns false as AmountNet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountNet()
        {
            return _flagAmountNet;
        }

        /// <summary>
        ///     Returns false as AmountRivalsa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountRivalsa()
        {
            return _flagAmountRivalsa;
        }

        /// <summary>
        ///     Returns false as AmountNetWithRivalsa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountNetWithRivalsa()
        {
            return _flagAmountNetWithRivalsa;
        }

        /// <summary>
        ///     Returns false as AmountCassa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassa()
        {
            return _flagAmountCassa;
        }

        /// <summary>
        ///     Returns false as TaxableAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTaxableAmount()
        {
            return _flagTaxableAmount;
        }

        /// <summary>
        ///     Returns false as NotTaxableAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotTaxableAmount()
        {
            return _flagNotTaxableAmount;
        }

        /// <summary>
        ///     Returns false as AmountVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountVat()
        {
            return _flagAmountVat;
        }

        /// <summary>
        ///     Returns false as AmountGross should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountGross()
        {
            return _flagAmountGross;
        }

        /// <summary>
        ///     Returns false as TaxableAmountWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTaxableAmountWithholdingTax()
        {
            return _flagTaxableAmountWithholdingTax;
        }

        /// <summary>
        ///     Returns false as AmountWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountWithholdingTax()
        {
            return _flagAmountWithholdingTax;
        }

        /// <summary>
        ///     Returns false as TaxableAmountOtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTaxableAmountOtherWithholdingTax()
        {
            return _flagTaxableAmountOtherWithholdingTax;
        }

        /// <summary>
        ///     Returns false as AmountOtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOtherWithholdingTax()
        {
            return _flagAmountOtherWithholdingTax;
        }

        /// <summary>
        ///     Returns false as StampDuty should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStampDuty()
        {
            return _flagStampDuty;
        }

        /// <summary>
        ///     Returns false as AmountDue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountDue()
        {
            return _flagAmountDue;
        }

        /// <summary>
        ///     Returns false as IsEnasarcoMaximalExceeded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsEnasarcoMaximalExceeded()
        {
            return _flagIsEnasarcoMaximalExceeded;
        }

        /// <summary>
        ///     Returns false as PaymentsSum should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentsSum()
        {
            return _flagPaymentsSum;
        }

        /// <summary>
        ///     Returns false as VatList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVatList()
        {
            return _flagVatList;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentTotals {\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountRivalsa: ").Append(AmountRivalsa).Append("\n");
            sb.Append("  AmountNetWithRivalsa: ").Append(AmountNetWithRivalsa).Append("\n");
            sb.Append("  AmountCassa: ").Append(AmountCassa).Append("\n");
            sb.Append("  TaxableAmount: ").Append(TaxableAmount).Append("\n");
            sb.Append("  NotTaxableAmount: ").Append(NotTaxableAmount).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  TaxableAmountWithholdingTax: ").Append(TaxableAmountWithholdingTax).Append("\n");
            sb.Append("  AmountWithholdingTax: ").Append(AmountWithholdingTax).Append("\n");
            sb.Append("  TaxableAmountOtherWithholdingTax: ").Append(TaxableAmountOtherWithholdingTax).Append("\n");
            sb.Append("  AmountOtherWithholdingTax: ").Append(AmountOtherWithholdingTax).Append("\n");
            sb.Append("  StampDuty: ").Append(StampDuty).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  IsEnasarcoMaximalExceeded: ").Append(IsEnasarcoMaximalExceeded).Append("\n");
            sb.Append("  PaymentsSum: ").Append(PaymentsSum).Append("\n");
            sb.Append("  VatList: ").Append(VatList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as IssuedDocumentTotals);
        }

        /// <summary>
        ///     Returns true if IssuedDocumentTotals instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentTotals to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentTotals input)
        {
            if (input == null) return false;
            return
                (
                    AmountNet == input.AmountNet ||
                    (AmountNet != null &&
                     AmountNet.Equals(input.AmountNet))
                ) &&
                (
                    AmountRivalsa == input.AmountRivalsa ||
                    (AmountRivalsa != null &&
                     AmountRivalsa.Equals(input.AmountRivalsa))
                ) &&
                (
                    AmountNetWithRivalsa == input.AmountNetWithRivalsa ||
                    (AmountNetWithRivalsa != null &&
                     AmountNetWithRivalsa.Equals(input.AmountNetWithRivalsa))
                ) &&
                (
                    AmountCassa == input.AmountCassa ||
                    (AmountCassa != null &&
                     AmountCassa.Equals(input.AmountCassa))
                ) &&
                (
                    TaxableAmount == input.TaxableAmount ||
                    (TaxableAmount != null &&
                     TaxableAmount.Equals(input.TaxableAmount))
                ) &&
                (
                    NotTaxableAmount == input.NotTaxableAmount ||
                    (NotTaxableAmount != null &&
                     NotTaxableAmount.Equals(input.NotTaxableAmount))
                ) &&
                (
                    AmountVat == input.AmountVat ||
                    (AmountVat != null &&
                     AmountVat.Equals(input.AmountVat))
                ) &&
                (
                    AmountGross == input.AmountGross ||
                    (AmountGross != null &&
                     AmountGross.Equals(input.AmountGross))
                ) &&
                (
                    TaxableAmountWithholdingTax == input.TaxableAmountWithholdingTax ||
                    (TaxableAmountWithholdingTax != null &&
                     TaxableAmountWithholdingTax.Equals(input.TaxableAmountWithholdingTax))
                ) &&
                (
                    AmountWithholdingTax == input.AmountWithholdingTax ||
                    (AmountWithholdingTax != null &&
                     AmountWithholdingTax.Equals(input.AmountWithholdingTax))
                ) &&
                (
                    TaxableAmountOtherWithholdingTax == input.TaxableAmountOtherWithholdingTax ||
                    (TaxableAmountOtherWithholdingTax != null &&
                     TaxableAmountOtherWithholdingTax.Equals(input.TaxableAmountOtherWithholdingTax))
                ) &&
                (
                    AmountOtherWithholdingTax == input.AmountOtherWithholdingTax ||
                    (AmountOtherWithholdingTax != null &&
                     AmountOtherWithholdingTax.Equals(input.AmountOtherWithholdingTax))
                ) &&
                (
                    StampDuty == input.StampDuty ||
                    (StampDuty != null &&
                     StampDuty.Equals(input.StampDuty))
                ) &&
                (
                    AmountDue == input.AmountDue ||
                    (AmountDue != null &&
                     AmountDue.Equals(input.AmountDue))
                ) &&
                (
                    IsEnasarcoMaximalExceeded == input.IsEnasarcoMaximalExceeded ||
                    (IsEnasarcoMaximalExceeded != null &&
                     IsEnasarcoMaximalExceeded.Equals(input.IsEnasarcoMaximalExceeded))
                ) &&
                (
                    PaymentsSum == input.PaymentsSum ||
                    (PaymentsSum != null &&
                     PaymentsSum.Equals(input.PaymentsSum))
                ) &&
                (
                    VatList == input.VatList ||
                    (VatList != null &&
                     input.VatList != null &&
                     VatList.SequenceEqual(input.VatList))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (AmountNet != null) hashCode = hashCode * 59 + AmountNet.GetHashCode();
                if (AmountRivalsa != null) hashCode = hashCode * 59 + AmountRivalsa.GetHashCode();
                if (AmountNetWithRivalsa != null) hashCode = hashCode * 59 + AmountNetWithRivalsa.GetHashCode();
                if (AmountCassa != null) hashCode = hashCode * 59 + AmountCassa.GetHashCode();
                if (TaxableAmount != null) hashCode = hashCode * 59 + TaxableAmount.GetHashCode();
                if (NotTaxableAmount != null) hashCode = hashCode * 59 + NotTaxableAmount.GetHashCode();
                if (AmountVat != null) hashCode = hashCode * 59 + AmountVat.GetHashCode();
                if (AmountGross != null) hashCode = hashCode * 59 + AmountGross.GetHashCode();
                if (TaxableAmountWithholdingTax != null)
                    hashCode = hashCode * 59 + TaxableAmountWithholdingTax.GetHashCode();
                if (AmountWithholdingTax != null) hashCode = hashCode * 59 + AmountWithholdingTax.GetHashCode();
                if (TaxableAmountOtherWithholdingTax != null)
                    hashCode = hashCode * 59 + TaxableAmountOtherWithholdingTax.GetHashCode();
                if (AmountOtherWithholdingTax != null)
                    hashCode = hashCode * 59 + AmountOtherWithholdingTax.GetHashCode();
                if (StampDuty != null) hashCode = hashCode * 59 + StampDuty.GetHashCode();
                if (AmountDue != null) hashCode = hashCode * 59 + AmountDue.GetHashCode();
                if (IsEnasarcoMaximalExceeded != null)
                    hashCode = hashCode * 59 + IsEnasarcoMaximalExceeded.GetHashCode();
                if (PaymentsSum != null) hashCode = hashCode * 59 + PaymentsSum.GetHashCode();
                if (VatList != null) hashCode = hashCode * 59 + VatList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}