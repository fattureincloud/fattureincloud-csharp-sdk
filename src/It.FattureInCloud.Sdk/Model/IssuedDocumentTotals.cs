/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.6
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// IssuedDocumentTotals
    /// </summary>
    [DataContract(Name = "IssuedDocumentTotals")]
    public partial class IssuedDocumentTotals : IEquatable<IssuedDocumentTotals>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentTotals" /> class.
        /// </summary>
        /// <param name="amountNet">Total net amount..</param>
        /// <param name="amountRivalsa">Rivalsa amount..</param>
        /// <param name="amountNetWithRivalsa">Net amount with rivalsa..</param>
        /// <param name="amountCassa">Cassa amount..</param>
        /// <param name="taxableAmount">Taxable amount..</param>
        /// <param name="notTaxableAmount">Not taxable amount..</param>
        /// <param name="amountVat">Total vat amount..</param>
        /// <param name="amountGross">Total grosas amount..</param>
        /// <param name="taxableAmountWithholdingTax">Taxable withholding tax amount..</param>
        /// <param name="amountWithholdingTax">Withholding tax amount..</param>
        /// <param name="taxableAmountOtherWithholdingTax">Other withholding tax taxable amount..</param>
        /// <param name="amountOtherWithholdingTax">Other withholding tax amount..</param>
        /// <param name="stampDuty">Stamp duty value [0 if not present]..</param>
        /// <param name="amountDue">Total amount due..</param>
        /// <param name="isEnasarcoMaximalExceeded">isEnasarcoMaximalExceeded.</param>
        /// <param name="paymentsSum">Payments sum..</param>
        /// <param name="vatList">vatList.</param>
        public IssuedDocumentTotals(decimal amountNet = default(decimal), decimal amountRivalsa = default(decimal), decimal amountNetWithRivalsa = default(decimal), decimal amountCassa = default(decimal), decimal taxableAmount = default(decimal), decimal notTaxableAmount = default(decimal), decimal amountVat = default(decimal), decimal amountGross = default(decimal), decimal taxableAmountWithholdingTax = default(decimal), decimal amountWithholdingTax = default(decimal), decimal taxableAmountOtherWithholdingTax = default(decimal), decimal amountOtherWithholdingTax = default(decimal), decimal stampDuty = default(decimal), decimal amountDue = default(decimal), bool isEnasarcoMaximalExceeded = default(bool), decimal paymentsSum = default(decimal), IssuedDocumentTotalsVatList vatList = default(IssuedDocumentTotalsVatList))
        {
            this.AmountNet = amountNet;
            this.AmountRivalsa = amountRivalsa;
            this.AmountNetWithRivalsa = amountNetWithRivalsa;
            this.AmountCassa = amountCassa;
            this.TaxableAmount = taxableAmount;
            this.NotTaxableAmount = notTaxableAmount;
            this.AmountVat = amountVat;
            this.AmountGross = amountGross;
            this.TaxableAmountWithholdingTax = taxableAmountWithholdingTax;
            this.AmountWithholdingTax = amountWithholdingTax;
            this.TaxableAmountOtherWithholdingTax = taxableAmountOtherWithholdingTax;
            this.AmountOtherWithholdingTax = amountOtherWithholdingTax;
            this.StampDuty = stampDuty;
            this.AmountDue = amountDue;
            this.IsEnasarcoMaximalExceeded = isEnasarcoMaximalExceeded;
            this.PaymentsSum = paymentsSum;
            this.VatList = vatList;
        }

        /// <summary>
        /// Total net amount.
        /// </summary>
        /// <value>Total net amount.</value>
        [DataMember(Name = "amount_net", EmitDefaultValue = false)]
        public decimal AmountNet { get; set; }

        /// <summary>
        /// Rivalsa amount.
        /// </summary>
        /// <value>Rivalsa amount.</value>
        [DataMember(Name = "amount_rivalsa", EmitDefaultValue = false)]
        public decimal AmountRivalsa { get; set; }

        /// <summary>
        /// Net amount with rivalsa.
        /// </summary>
        /// <value>Net amount with rivalsa.</value>
        [DataMember(Name = "amount_net_with_rivalsa", EmitDefaultValue = false)]
        public decimal AmountNetWithRivalsa { get; set; }

        /// <summary>
        /// Cassa amount.
        /// </summary>
        /// <value>Cassa amount.</value>
        [DataMember(Name = "amount_cassa", EmitDefaultValue = false)]
        public decimal AmountCassa { get; set; }

        /// <summary>
        /// Taxable amount.
        /// </summary>
        /// <value>Taxable amount.</value>
        [DataMember(Name = "taxable_amount", EmitDefaultValue = false)]
        public decimal TaxableAmount { get; set; }

        /// <summary>
        /// Not taxable amount.
        /// </summary>
        /// <value>Not taxable amount.</value>
        [DataMember(Name = "not_taxable_amount", EmitDefaultValue = false)]
        public decimal NotTaxableAmount { get; set; }

        /// <summary>
        /// Total vat amount.
        /// </summary>
        /// <value>Total vat amount.</value>
        [DataMember(Name = "amount_vat", EmitDefaultValue = false)]
        public decimal AmountVat { get; set; }

        /// <summary>
        /// Total grosas amount.
        /// </summary>
        /// <value>Total grosas amount.</value>
        [DataMember(Name = "amount_gross", EmitDefaultValue = false)]
        public decimal AmountGross { get; set; }

        /// <summary>
        /// Taxable withholding tax amount.
        /// </summary>
        /// <value>Taxable withholding tax amount.</value>
        [DataMember(Name = "taxable_amount_withholding_tax", EmitDefaultValue = false)]
        public decimal TaxableAmountWithholdingTax { get; set; }

        /// <summary>
        /// Withholding tax amount.
        /// </summary>
        /// <value>Withholding tax amount.</value>
        [DataMember(Name = "amount_withholding_tax", EmitDefaultValue = false)]
        public decimal AmountWithholdingTax { get; set; }

        /// <summary>
        /// Other withholding tax taxable amount.
        /// </summary>
        /// <value>Other withholding tax taxable amount.</value>
        [DataMember(Name = "taxable_amount_other_withholding_tax", EmitDefaultValue = false)]
        public decimal TaxableAmountOtherWithholdingTax { get; set; }

        /// <summary>
        /// Other withholding tax amount.
        /// </summary>
        /// <value>Other withholding tax amount.</value>
        [DataMember(Name = "amount_other_withholding_tax", EmitDefaultValue = false)]
        public decimal AmountOtherWithholdingTax { get; set; }

        /// <summary>
        /// Stamp duty value [0 if not present].
        /// </summary>
        /// <value>Stamp duty value [0 if not present].</value>
        [DataMember(Name = "stamp_duty", EmitDefaultValue = false)]
        public decimal StampDuty { get; set; }

        /// <summary>
        /// Total amount due.
        /// </summary>
        /// <value>Total amount due.</value>
        [DataMember(Name = "amount_due", EmitDefaultValue = false)]
        public decimal AmountDue { get; set; }

        /// <summary>
        /// Gets or Sets IsEnasarcoMaximalExceeded
        /// </summary>
        [DataMember(Name = "is_enasarco_maximal_exceeded", EmitDefaultValue = true)]
        public bool IsEnasarcoMaximalExceeded { get; set; }

        /// <summary>
        /// Payments sum.
        /// </summary>
        /// <value>Payments sum.</value>
        [DataMember(Name = "payments_sum", EmitDefaultValue = false)]
        public decimal PaymentsSum { get; set; }

        /// <summary>
        /// Gets or Sets VatList
        /// </summary>
        [DataMember(Name = "vat_list", EmitDefaultValue = true)]
        public IssuedDocumentTotalsVatList VatList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssuedDocumentTotals {\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountRivalsa: ").Append(AmountRivalsa).Append("\n");
            sb.Append("  AmountNetWithRivalsa: ").Append(AmountNetWithRivalsa).Append("\n");
            sb.Append("  AmountCassa: ").Append(AmountCassa).Append("\n");
            sb.Append("  TaxableAmount: ").Append(TaxableAmount).Append("\n");
            sb.Append("  NotTaxableAmount: ").Append(NotTaxableAmount).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  TaxableAmountWithholdingTax: ").Append(TaxableAmountWithholdingTax).Append("\n");
            sb.Append("  AmountWithholdingTax: ").Append(AmountWithholdingTax).Append("\n");
            sb.Append("  TaxableAmountOtherWithholdingTax: ").Append(TaxableAmountOtherWithholdingTax).Append("\n");
            sb.Append("  AmountOtherWithholdingTax: ").Append(AmountOtherWithholdingTax).Append("\n");
            sb.Append("  StampDuty: ").Append(StampDuty).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  IsEnasarcoMaximalExceeded: ").Append(IsEnasarcoMaximalExceeded).Append("\n");
            sb.Append("  PaymentsSum: ").Append(PaymentsSum).Append("\n");
            sb.Append("  VatList: ").Append(VatList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocumentTotals);
        }

        /// <summary>
        /// Returns true if IssuedDocumentTotals instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentTotals to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentTotals input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AmountNet == input.AmountNet ||
                    this.AmountNet.Equals(input.AmountNet)
                ) && 
                (
                    this.AmountRivalsa == input.AmountRivalsa ||
                    this.AmountRivalsa.Equals(input.AmountRivalsa)
                ) && 
                (
                    this.AmountNetWithRivalsa == input.AmountNetWithRivalsa ||
                    this.AmountNetWithRivalsa.Equals(input.AmountNetWithRivalsa)
                ) && 
                (
                    this.AmountCassa == input.AmountCassa ||
                    this.AmountCassa.Equals(input.AmountCassa)
                ) && 
                (
                    this.TaxableAmount == input.TaxableAmount ||
                    this.TaxableAmount.Equals(input.TaxableAmount)
                ) && 
                (
                    this.NotTaxableAmount == input.NotTaxableAmount ||
                    this.NotTaxableAmount.Equals(input.NotTaxableAmount)
                ) && 
                (
                    this.AmountVat == input.AmountVat ||
                    this.AmountVat.Equals(input.AmountVat)
                ) && 
                (
                    this.AmountGross == input.AmountGross ||
                    this.AmountGross.Equals(input.AmountGross)
                ) && 
                (
                    this.TaxableAmountWithholdingTax == input.TaxableAmountWithholdingTax ||
                    this.TaxableAmountWithholdingTax.Equals(input.TaxableAmountWithholdingTax)
                ) && 
                (
                    this.AmountWithholdingTax == input.AmountWithholdingTax ||
                    this.AmountWithholdingTax.Equals(input.AmountWithholdingTax)
                ) && 
                (
                    this.TaxableAmountOtherWithholdingTax == input.TaxableAmountOtherWithholdingTax ||
                    this.TaxableAmountOtherWithholdingTax.Equals(input.TaxableAmountOtherWithholdingTax)
                ) && 
                (
                    this.AmountOtherWithholdingTax == input.AmountOtherWithholdingTax ||
                    this.AmountOtherWithholdingTax.Equals(input.AmountOtherWithholdingTax)
                ) && 
                (
                    this.StampDuty == input.StampDuty ||
                    this.StampDuty.Equals(input.StampDuty)
                ) && 
                (
                    this.AmountDue == input.AmountDue ||
                    this.AmountDue.Equals(input.AmountDue)
                ) && 
                (
                    this.IsEnasarcoMaximalExceeded == input.IsEnasarcoMaximalExceeded ||
                    this.IsEnasarcoMaximalExceeded.Equals(input.IsEnasarcoMaximalExceeded)
                ) && 
                (
                    this.PaymentsSum == input.PaymentsSum ||
                    this.PaymentsSum.Equals(input.PaymentsSum)
                ) && 
                (
                    this.VatList == input.VatList ||
                    (this.VatList != null &&
                    this.VatList.Equals(input.VatList))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AmountNet.GetHashCode();
                hashCode = hashCode * 59 + this.AmountRivalsa.GetHashCode();
                hashCode = hashCode * 59 + this.AmountNetWithRivalsa.GetHashCode();
                hashCode = hashCode * 59 + this.AmountCassa.GetHashCode();
                hashCode = hashCode * 59 + this.TaxableAmount.GetHashCode();
                hashCode = hashCode * 59 + this.NotTaxableAmount.GetHashCode();
                hashCode = hashCode * 59 + this.AmountVat.GetHashCode();
                hashCode = hashCode * 59 + this.AmountGross.GetHashCode();
                hashCode = hashCode * 59 + this.TaxableAmountWithholdingTax.GetHashCode();
                hashCode = hashCode * 59 + this.AmountWithholdingTax.GetHashCode();
                hashCode = hashCode * 59 + this.TaxableAmountOtherWithholdingTax.GetHashCode();
                hashCode = hashCode * 59 + this.AmountOtherWithholdingTax.GetHashCode();
                hashCode = hashCode * 59 + this.StampDuty.GetHashCode();
                hashCode = hashCode * 59 + this.AmountDue.GetHashCode();
                hashCode = hashCode * 59 + this.IsEnasarcoMaximalExceeded.GetHashCode();
                hashCode = hashCode * 59 + this.PaymentsSum.GetHashCode();
                if (this.VatList != null)
                    hashCode = hashCode * 59 + this.VatList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
