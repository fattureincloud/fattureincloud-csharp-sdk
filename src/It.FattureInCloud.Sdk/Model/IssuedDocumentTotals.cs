// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// IssuedDocumentTotals
    /// </summary>
    public partial class IssuedDocumentTotals : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentTotals" /> class.
        /// </summary>
        /// <param name="amountNet">Issued document total net amount</param>
        /// <param name="amountRivalsa">Issued document rivalsa amount</param>
        /// <param name="amountNetWithRivalsa">Issued document net amount with rivalsa</param>
        /// <param name="amountCassa">Issued document cassa amount</param>
        /// <param name="taxableAmount">Issued document taxable amount</param>
        /// <param name="notTaxableAmount">Issued document not taxable amount</param>
        /// <param name="amountVat">Issued document total vat amount</param>
        /// <param name="amountGross">Issued document total gross amount</param>
        /// <param name="taxableAmountWithholdingTax">Issued document Taxable withholding tax amount</param>
        /// <param name="amountWithholdingTax">Issued document withholding tax amount</param>
        /// <param name="taxableAmountOtherWithholdingTax">Issued document other withholding tax taxable amount</param>
        /// <param name="amountOtherWithholdingTax">Issued document other withholding tax amount</param>
        /// <param name="stampDuty">Issued document stamp duty value [0 if not present].</param>
        /// <param name="amountDue">Issued document total amount due</param>
        /// <param name="isEnasarcoMaximalExceeded">Is enasarco maximal excedeed</param>
        /// <param name="paymentsSum">Issued document payments sum</param>
        /// <param name="vatList">vatList</param>
        [JsonConstructor]
        public IssuedDocumentTotals(Option<decimal?> amountNet = default, Option<decimal?> amountRivalsa = default, Option<decimal?> amountNetWithRivalsa = default, Option<decimal?> amountCassa = default, Option<decimal?> taxableAmount = default, Option<decimal?> notTaxableAmount = default, Option<decimal?> amountVat = default, Option<decimal?> amountGross = default, Option<decimal?> taxableAmountWithholdingTax = default, Option<decimal?> amountWithholdingTax = default, Option<decimal?> taxableAmountOtherWithholdingTax = default, Option<decimal?> amountOtherWithholdingTax = default, Option<decimal?> stampDuty = default, Option<decimal?> amountDue = default, Option<bool?> isEnasarcoMaximalExceeded = default, Option<decimal?> paymentsSum = default, Option<Dictionary<string, VatItem>> vatList = default)
        {
            AmountNetOption = amountNet;
            AmountRivalsaOption = amountRivalsa;
            AmountNetWithRivalsaOption = amountNetWithRivalsa;
            AmountCassaOption = amountCassa;
            TaxableAmountOption = taxableAmount;
            NotTaxableAmountOption = notTaxableAmount;
            AmountVatOption = amountVat;
            AmountGrossOption = amountGross;
            TaxableAmountWithholdingTaxOption = taxableAmountWithholdingTax;
            AmountWithholdingTaxOption = amountWithholdingTax;
            TaxableAmountOtherWithholdingTaxOption = taxableAmountOtherWithholdingTax;
            AmountOtherWithholdingTaxOption = amountOtherWithholdingTax;
            StampDutyOption = stampDuty;
            AmountDueOption = amountDue;
            IsEnasarcoMaximalExceededOption = isEnasarcoMaximalExceeded;
            PaymentsSumOption = paymentsSum;
            VatListOption = vatList;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AmountNet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountNetOption { get; private set; }

        /// <summary>
        /// Issued document total net amount
        /// </summary>
        /// <value>Issued document total net amount</value>
        [JsonPropertyName("amount_net")]
        public decimal? AmountNet { get { return this.AmountNetOption; } set { this.AmountNetOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountRivalsa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountRivalsaOption { get; private set; }

        /// <summary>
        /// Issued document rivalsa amount
        /// </summary>
        /// <value>Issued document rivalsa amount</value>
        [JsonPropertyName("amount_rivalsa")]
        public decimal? AmountRivalsa { get { return this.AmountRivalsaOption; } set { this.AmountRivalsaOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountNetWithRivalsa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountNetWithRivalsaOption { get; private set; }

        /// <summary>
        /// Issued document net amount with rivalsa
        /// </summary>
        /// <value>Issued document net amount with rivalsa</value>
        [JsonPropertyName("amount_net_with_rivalsa")]
        public decimal? AmountNetWithRivalsa { get { return this.AmountNetWithRivalsaOption; } set { this.AmountNetWithRivalsaOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountCassa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountCassaOption { get; private set; }

        /// <summary>
        /// Issued document cassa amount
        /// </summary>
        /// <value>Issued document cassa amount</value>
        [JsonPropertyName("amount_cassa")]
        public decimal? AmountCassa { get { return this.AmountCassaOption; } set { this.AmountCassaOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of TaxableAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TaxableAmountOption { get; private set; }

        /// <summary>
        /// Issued document taxable amount
        /// </summary>
        /// <value>Issued document taxable amount</value>
        [JsonPropertyName("taxable_amount")]
        public decimal? TaxableAmount { get { return this.TaxableAmountOption; } set { this.TaxableAmountOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of NotTaxableAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> NotTaxableAmountOption { get; private set; }

        /// <summary>
        /// Issued document not taxable amount
        /// </summary>
        /// <value>Issued document not taxable amount</value>
        [JsonPropertyName("not_taxable_amount")]
        public decimal? NotTaxableAmount { get { return this.NotTaxableAmountOption; } set { this.NotTaxableAmountOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountVat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountVatOption { get; private set; }

        /// <summary>
        /// Issued document total vat amount
        /// </summary>
        /// <value>Issued document total vat amount</value>
        [JsonPropertyName("amount_vat")]
        public decimal? AmountVat { get { return this.AmountVatOption; } set { this.AmountVatOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountGross
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountGrossOption { get; private set; }

        /// <summary>
        /// Issued document total gross amount
        /// </summary>
        /// <value>Issued document total gross amount</value>
        [JsonPropertyName("amount_gross")]
        public decimal? AmountGross { get { return this.AmountGrossOption; } set { this.AmountGrossOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of TaxableAmountWithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TaxableAmountWithholdingTaxOption { get; private set; }

        /// <summary>
        /// Issued document Taxable withholding tax amount
        /// </summary>
        /// <value>Issued document Taxable withholding tax amount</value>
        [JsonPropertyName("taxable_amount_withholding_tax")]
        public decimal? TaxableAmountWithholdingTax { get { return this.TaxableAmountWithholdingTaxOption; } set { this.TaxableAmountWithholdingTaxOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountWithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountWithholdingTaxOption { get; private set; }

        /// <summary>
        /// Issued document withholding tax amount
        /// </summary>
        /// <value>Issued document withholding tax amount</value>
        [JsonPropertyName("amount_withholding_tax")]
        public decimal? AmountWithholdingTax { get { return this.AmountWithholdingTaxOption; } set { this.AmountWithholdingTaxOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of TaxableAmountOtherWithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TaxableAmountOtherWithholdingTaxOption { get; private set; }

        /// <summary>
        /// Issued document other withholding tax taxable amount
        /// </summary>
        /// <value>Issued document other withholding tax taxable amount</value>
        [JsonPropertyName("taxable_amount_other_withholding_tax")]
        public decimal? TaxableAmountOtherWithholdingTax { get { return this.TaxableAmountOtherWithholdingTaxOption; } set { this.TaxableAmountOtherWithholdingTaxOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountOtherWithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountOtherWithholdingTaxOption { get; private set; }

        /// <summary>
        /// Issued document other withholding tax amount
        /// </summary>
        /// <value>Issued document other withholding tax amount</value>
        [JsonPropertyName("amount_other_withholding_tax")]
        public decimal? AmountOtherWithholdingTax { get { return this.AmountOtherWithholdingTaxOption; } set { this.AmountOtherWithholdingTaxOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of StampDuty
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StampDutyOption { get; private set; }

        /// <summary>
        /// Issued document stamp duty value [0 if not present].
        /// </summary>
        /// <value>Issued document stamp duty value [0 if not present].</value>
        [JsonPropertyName("stamp_duty")]
        public decimal? StampDuty { get { return this.StampDutyOption; } set { this.StampDutyOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountDue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountDueOption { get; private set; }

        /// <summary>
        /// Issued document total amount due
        /// </summary>
        /// <value>Issued document total amount due</value>
        [JsonPropertyName("amount_due")]
        public decimal? AmountDue { get { return this.AmountDueOption; } set { this.AmountDueOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of IsEnasarcoMaximalExceeded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsEnasarcoMaximalExceededOption { get; private set; }

        /// <summary>
        /// Is enasarco maximal excedeed
        /// </summary>
        /// <value>Is enasarco maximal excedeed</value>
        [JsonPropertyName("is_enasarco_maximal_exceeded")]
        public bool? IsEnasarcoMaximalExceeded { get { return this.IsEnasarcoMaximalExceededOption; } set { this.IsEnasarcoMaximalExceededOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of PaymentsSum
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> PaymentsSumOption { get; private set; }

        /// <summary>
        /// Issued document payments sum
        /// </summary>
        /// <value>Issued document payments sum</value>
        [JsonPropertyName("payments_sum")]
        public decimal? PaymentsSum { get { return this.PaymentsSumOption; } set { this.PaymentsSumOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of VatList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, VatItem>> VatListOption { get; private set; }

        /// <summary>
        /// Gets or Sets VatList
        /// </summary>
        [JsonPropertyName("vat_list")]
        public Dictionary<string, VatItem> VatList { get { return this.VatListOption; } set { this.VatListOption = new Option<Dictionary<string, VatItem>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentTotals {\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountRivalsa: ").Append(AmountRivalsa).Append("\n");
            sb.Append("  AmountNetWithRivalsa: ").Append(AmountNetWithRivalsa).Append("\n");
            sb.Append("  AmountCassa: ").Append(AmountCassa).Append("\n");
            sb.Append("  TaxableAmount: ").Append(TaxableAmount).Append("\n");
            sb.Append("  NotTaxableAmount: ").Append(NotTaxableAmount).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  TaxableAmountWithholdingTax: ").Append(TaxableAmountWithholdingTax).Append("\n");
            sb.Append("  AmountWithholdingTax: ").Append(AmountWithholdingTax).Append("\n");
            sb.Append("  TaxableAmountOtherWithholdingTax: ").Append(TaxableAmountOtherWithholdingTax).Append("\n");
            sb.Append("  AmountOtherWithholdingTax: ").Append(AmountOtherWithholdingTax).Append("\n");
            sb.Append("  StampDuty: ").Append(StampDuty).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  IsEnasarcoMaximalExceeded: ").Append(IsEnasarcoMaximalExceeded).Append("\n");
            sb.Append("  PaymentsSum: ").Append(PaymentsSum).Append("\n");
            sb.Append("  VatList: ").Append(VatList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentTotals" />
    /// </summary>
    public class IssuedDocumentTotalsJsonConverter : JsonConverter<IssuedDocumentTotals>
    {
        /// <summary>
        /// Deserializes json to <see cref="IssuedDocumentTotals" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocumentTotals Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> amountNet = default;
            Option<decimal?> amountRivalsa = default;
            Option<decimal?> amountNetWithRivalsa = default;
            Option<decimal?> amountCassa = default;
            Option<decimal?> taxableAmount = default;
            Option<decimal?> notTaxableAmount = default;
            Option<decimal?> amountVat = default;
            Option<decimal?> amountGross = default;
            Option<decimal?> taxableAmountWithholdingTax = default;
            Option<decimal?> amountWithholdingTax = default;
            Option<decimal?> taxableAmountOtherWithholdingTax = default;
            Option<decimal?> amountOtherWithholdingTax = default;
            Option<decimal?> stampDuty = default;
            Option<decimal?> amountDue = default;
            Option<bool?> isEnasarcoMaximalExceeded = default;
            Option<decimal?> paymentsSum = default;
            Option<Dictionary<string, VatItem>> vatList = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount_net":
                            amountNet = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_rivalsa":
                            amountRivalsa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_net_with_rivalsa":
                            amountNetWithRivalsa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_cassa":
                            amountCassa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "taxable_amount":
                            taxableAmount = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "not_taxable_amount":
                            notTaxableAmount = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_vat":
                            amountVat = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_gross":
                            amountGross = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "taxable_amount_withholding_tax":
                            taxableAmountWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_withholding_tax":
                            amountWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "taxable_amount_other_withholding_tax":
                            taxableAmountOtherWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_other_withholding_tax":
                            amountOtherWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "stamp_duty":
                            stampDuty = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_due":
                            amountDue = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "is_enasarco_maximal_exceeded":
                            isEnasarcoMaximalExceeded = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "payments_sum":
                            paymentsSum = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "vat_list":
                            vatList = new Option<Dictionary<string, VatItem>>(JsonSerializer.Deserialize<Dictionary<string, VatItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (vatList.IsSet && vatList.Value == null)
                throw new ArgumentNullException(nameof(vatList), "Property is not nullable for class IssuedDocumentTotals.");

            return new IssuedDocumentTotals(amountNet, amountRivalsa, amountNetWithRivalsa, amountCassa, taxableAmount, notTaxableAmount, amountVat, amountGross, taxableAmountWithholdingTax, amountWithholdingTax, taxableAmountOtherWithholdingTax, amountOtherWithholdingTax, stampDuty, amountDue, isEnasarcoMaximalExceeded, paymentsSum, vatList);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocumentTotals" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentTotals"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentTotals issuedDocumentTotals, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocumentTotals, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocumentTotals" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentTotals"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocumentTotals issuedDocumentTotals, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocumentTotals.VatListOption.IsSet && issuedDocumentTotals.VatList == null)
                throw new ArgumentNullException(nameof(issuedDocumentTotals.VatList), "Property is required for class IssuedDocumentTotals.");

            if (issuedDocumentTotals.AmountNetOption.IsSet)
                if (issuedDocumentTotals.AmountNetOption.Value != null)
                    writer.WriteNumber("amount_net", issuedDocumentTotals.AmountNetOption.Value.Value);
                else
                    writer.WriteNull("amount_net");

            if (issuedDocumentTotals.AmountRivalsaOption.IsSet)
                if (issuedDocumentTotals.AmountRivalsaOption.Value != null)
                    writer.WriteNumber("amount_rivalsa", issuedDocumentTotals.AmountRivalsaOption.Value.Value);
                else
                    writer.WriteNull("amount_rivalsa");

            if (issuedDocumentTotals.AmountNetWithRivalsaOption.IsSet)
                if (issuedDocumentTotals.AmountNetWithRivalsaOption.Value != null)
                    writer.WriteNumber("amount_net_with_rivalsa", issuedDocumentTotals.AmountNetWithRivalsaOption.Value.Value);
                else
                    writer.WriteNull("amount_net_with_rivalsa");

            if (issuedDocumentTotals.AmountCassaOption.IsSet)
                if (issuedDocumentTotals.AmountCassaOption.Value != null)
                    writer.WriteNumber("amount_cassa", issuedDocumentTotals.AmountCassaOption.Value.Value);
                else
                    writer.WriteNull("amount_cassa");

            if (issuedDocumentTotals.TaxableAmountOption.IsSet)
                if (issuedDocumentTotals.TaxableAmountOption.Value != null)
                    writer.WriteNumber("taxable_amount", issuedDocumentTotals.TaxableAmountOption.Value.Value);
                else
                    writer.WriteNull("taxable_amount");

            if (issuedDocumentTotals.NotTaxableAmountOption.IsSet)
                if (issuedDocumentTotals.NotTaxableAmountOption.Value != null)
                    writer.WriteNumber("not_taxable_amount", issuedDocumentTotals.NotTaxableAmountOption.Value.Value);
                else
                    writer.WriteNull("not_taxable_amount");

            if (issuedDocumentTotals.AmountVatOption.IsSet)
                if (issuedDocumentTotals.AmountVatOption.Value != null)
                    writer.WriteNumber("amount_vat", issuedDocumentTotals.AmountVatOption.Value.Value);
                else
                    writer.WriteNull("amount_vat");

            if (issuedDocumentTotals.AmountGrossOption.IsSet)
                if (issuedDocumentTotals.AmountGrossOption.Value != null)
                    writer.WriteNumber("amount_gross", issuedDocumentTotals.AmountGrossOption.Value.Value);
                else
                    writer.WriteNull("amount_gross");

            if (issuedDocumentTotals.TaxableAmountWithholdingTaxOption.IsSet)
                if (issuedDocumentTotals.TaxableAmountWithholdingTaxOption.Value != null)
                    writer.WriteNumber("taxable_amount_withholding_tax", issuedDocumentTotals.TaxableAmountWithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("taxable_amount_withholding_tax");

            if (issuedDocumentTotals.AmountWithholdingTaxOption.IsSet)
                if (issuedDocumentTotals.AmountWithholdingTaxOption.Value != null)
                    writer.WriteNumber("amount_withholding_tax", issuedDocumentTotals.AmountWithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("amount_withholding_tax");

            if (issuedDocumentTotals.TaxableAmountOtherWithholdingTaxOption.IsSet)
                if (issuedDocumentTotals.TaxableAmountOtherWithholdingTaxOption.Value != null)
                    writer.WriteNumber("taxable_amount_other_withholding_tax", issuedDocumentTotals.TaxableAmountOtherWithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("taxable_amount_other_withholding_tax");

            if (issuedDocumentTotals.AmountOtherWithholdingTaxOption.IsSet)
                if (issuedDocumentTotals.AmountOtherWithholdingTaxOption.Value != null)
                    writer.WriteNumber("amount_other_withholding_tax", issuedDocumentTotals.AmountOtherWithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("amount_other_withholding_tax");

            if (issuedDocumentTotals.StampDutyOption.IsSet)
                if (issuedDocumentTotals.StampDutyOption.Value != null)
                    writer.WriteNumber("stamp_duty", issuedDocumentTotals.StampDutyOption.Value.Value);
                else
                    writer.WriteNull("stamp_duty");

            if (issuedDocumentTotals.AmountDueOption.IsSet)
                if (issuedDocumentTotals.AmountDueOption.Value != null)
                    writer.WriteNumber("amount_due", issuedDocumentTotals.AmountDueOption.Value.Value);
                else
                    writer.WriteNull("amount_due");

            if (issuedDocumentTotals.IsEnasarcoMaximalExceededOption.IsSet)
                if (issuedDocumentTotals.IsEnasarcoMaximalExceededOption.Value != null)
                    writer.WriteBoolean("is_enasarco_maximal_exceeded", issuedDocumentTotals.IsEnasarcoMaximalExceededOption.Value.Value);
                else
                    writer.WriteNull("is_enasarco_maximal_exceeded");

            if (issuedDocumentTotals.PaymentsSumOption.IsSet)
                if (issuedDocumentTotals.PaymentsSumOption.Value != null)
                    writer.WriteNumber("payments_sum", issuedDocumentTotals.PaymentsSumOption.Value.Value);
                else
                    writer.WriteNull("payments_sum");

            if (issuedDocumentTotals.VatListOption.IsSet)
            {
                writer.WritePropertyName("vat_list");
                JsonSerializer.Serialize(writer, issuedDocumentTotals.VatList, jsonSerializerOptions);
            }
        }
    }
}
