/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     PermissionsFicIssuedDocumentsDetailed
    /// </summary>
    [DataContract(Name = "Permissions_fic_issued_documents_detailed")]
    public class PermissionsFicIssuedDocumentsDetailed : IEquatable<PermissionsFicIssuedDocumentsDetailed>,
        IValidatableObject
    {
        private PermissionLevel? _CreditNotes;
        private PermissionLevel? _DeliveryNotes;
        private bool _flagCreditNotes;
        private bool _flagDeliveryNotes;
        private bool _flagInvoices;
        private bool _flagOrders;
        private bool _flagProformas;
        private bool _flagQuotes;
        private bool _flagReceipts;
        private bool _flagSelfInvoices;
        private bool _flagSupplierOrders;
        private bool _flagWorkReports;
        private PermissionLevel? _Invoices;
        private PermissionLevel? _Orders;
        private PermissionLevel? _Proformas;
        private PermissionLevel? _Quotes;
        private PermissionLevel? _Receipts;
        private PermissionLevel? _SelfInvoices;
        private PermissionLevel? _SupplierOrders;
        private PermissionLevel? _WorkReports;

        /// <summary>
        ///     Initializes a new instance of the <see cref="PermissionsFicIssuedDocumentsDetailed" /> class.
        /// </summary>
        /// <param name="quotes">quotes.</param>
        /// <param name="proformas">proformas.</param>
        /// <param name="invoices">invoices.</param>
        /// <param name="receipts">receipts.</param>
        /// <param name="deliveryNotes">deliveryNotes.</param>
        /// <param name="creditNotes">creditNotes.</param>
        /// <param name="orders">orders.</param>
        /// <param name="workReports">workReports.</param>
        /// <param name="supplierOrders">supplierOrders.</param>
        /// <param name="selfInvoices">selfInvoices.</param>
        public PermissionsFicIssuedDocumentsDetailed(PermissionLevel? quotes = default(PermissionLevel?),
            PermissionLevel? proformas = default(PermissionLevel?),
            PermissionLevel? invoices = default(PermissionLevel?),
            PermissionLevel? receipts = default(PermissionLevel?),
            PermissionLevel? deliveryNotes = default(PermissionLevel?),
            PermissionLevel? creditNotes = default(PermissionLevel?),
            PermissionLevel? orders = default(PermissionLevel?),
            PermissionLevel? workReports = default(PermissionLevel?),
            PermissionLevel? supplierOrders = default(PermissionLevel?),
            PermissionLevel? selfInvoices = default(PermissionLevel?))
        {
            _Quotes = quotes;
            if (Quotes != null) _flagQuotes = true;
            _Proformas = proformas;
            if (Proformas != null) _flagProformas = true;
            _Invoices = invoices;
            if (Invoices != null) _flagInvoices = true;
            _Receipts = receipts;
            if (Receipts != null) _flagReceipts = true;
            _DeliveryNotes = deliveryNotes;
            if (DeliveryNotes != null) _flagDeliveryNotes = true;
            _CreditNotes = creditNotes;
            if (CreditNotes != null) _flagCreditNotes = true;
            _Orders = orders;
            if (Orders != null) _flagOrders = true;
            _WorkReports = workReports;
            if (WorkReports != null) _flagWorkReports = true;
            _SupplierOrders = supplierOrders;
            if (SupplierOrders != null) _flagSupplierOrders = true;
            _SelfInvoices = selfInvoices;
            if (SelfInvoices != null) _flagSelfInvoices = true;
        }

        /// <summary>
        ///     Gets or Sets Quotes
        /// </summary>

        [DataMember(Name = "quotes", EmitDefaultValue = false)]
        public PermissionLevel? Quotes
        {
            get => _Quotes;
            set
            {
                _Quotes = value;
                _flagQuotes = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Proformas
        /// </summary>

        [DataMember(Name = "proformas", EmitDefaultValue = false)]
        public PermissionLevel? Proformas
        {
            get => _Proformas;
            set
            {
                _Proformas = value;
                _flagProformas = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Invoices
        /// </summary>

        [DataMember(Name = "invoices", EmitDefaultValue = false)]
        public PermissionLevel? Invoices
        {
            get => _Invoices;
            set
            {
                _Invoices = value;
                _flagInvoices = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Receipts
        /// </summary>

        [DataMember(Name = "receipts", EmitDefaultValue = false)]
        public PermissionLevel? Receipts
        {
            get => _Receipts;
            set
            {
                _Receipts = value;
                _flagReceipts = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DeliveryNotes
        /// </summary>

        [DataMember(Name = "delivery_notes", EmitDefaultValue = false)]
        public PermissionLevel? DeliveryNotes
        {
            get => _DeliveryNotes;
            set
            {
                _DeliveryNotes = value;
                _flagDeliveryNotes = true;
            }
        }

        /// <summary>
        ///     Gets or Sets CreditNotes
        /// </summary>

        [DataMember(Name = "credit_notes", EmitDefaultValue = false)]
        public PermissionLevel? CreditNotes
        {
            get => _CreditNotes;
            set
            {
                _CreditNotes = value;
                _flagCreditNotes = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Orders
        /// </summary>

        [DataMember(Name = "orders", EmitDefaultValue = false)]
        public PermissionLevel? Orders
        {
            get => _Orders;
            set
            {
                _Orders = value;
                _flagOrders = true;
            }
        }

        /// <summary>
        ///     Gets or Sets WorkReports
        /// </summary>

        [DataMember(Name = "work_reports", EmitDefaultValue = false)]
        public PermissionLevel? WorkReports
        {
            get => _WorkReports;
            set
            {
                _WorkReports = value;
                _flagWorkReports = true;
            }
        }

        /// <summary>
        ///     Gets or Sets SupplierOrders
        /// </summary>

        [DataMember(Name = "supplier_orders", EmitDefaultValue = false)]
        public PermissionLevel? SupplierOrders
        {
            get => _SupplierOrders;
            set
            {
                _SupplierOrders = value;
                _flagSupplierOrders = true;
            }
        }

        /// <summary>
        ///     Gets or Sets SelfInvoices
        /// </summary>

        [DataMember(Name = "self_invoices", EmitDefaultValue = false)]
        public PermissionLevel? SelfInvoices
        {
            get => _SelfInvoices;
            set
            {
                _SelfInvoices = value;
                _flagSelfInvoices = true;
            }
        }

        /// <summary>
        ///     Returns false as Quotes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQuotes()
        {
            return _flagQuotes;
        }

        /// <summary>
        ///     Returns false as Proformas should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProformas()
        {
            return _flagProformas;
        }

        /// <summary>
        ///     Returns false as Invoices should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInvoices()
        {
            return _flagInvoices;
        }

        /// <summary>
        ///     Returns false as Receipts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReceipts()
        {
            return _flagReceipts;
        }

        /// <summary>
        ///     Returns false as DeliveryNotes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeliveryNotes()
        {
            return _flagDeliveryNotes;
        }

        /// <summary>
        ///     Returns false as CreditNotes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreditNotes()
        {
            return _flagCreditNotes;
        }

        /// <summary>
        ///     Returns false as Orders should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrders()
        {
            return _flagOrders;
        }

        /// <summary>
        ///     Returns false as WorkReports should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWorkReports()
        {
            return _flagWorkReports;
        }

        /// <summary>
        ///     Returns false as SupplierOrders should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSupplierOrders()
        {
            return _flagSupplierOrders;
        }

        /// <summary>
        ///     Returns false as SelfInvoices should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSelfInvoices()
        {
            return _flagSelfInvoices;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PermissionsFicIssuedDocumentsDetailed {\n");
            sb.Append("  Quotes: ").Append(Quotes).Append("\n");
            sb.Append("  Proformas: ").Append(Proformas).Append("\n");
            sb.Append("  Invoices: ").Append(Invoices).Append("\n");
            sb.Append("  Receipts: ").Append(Receipts).Append("\n");
            sb.Append("  DeliveryNotes: ").Append(DeliveryNotes).Append("\n");
            sb.Append("  CreditNotes: ").Append(CreditNotes).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  WorkReports: ").Append(WorkReports).Append("\n");
            sb.Append("  SupplierOrders: ").Append(SupplierOrders).Append("\n");
            sb.Append("  SelfInvoices: ").Append(SelfInvoices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PermissionsFicIssuedDocumentsDetailed);
        }

        /// <summary>
        ///     Returns true if PermissionsFicIssuedDocumentsDetailed instances are equal
        /// </summary>
        /// <param name="input">Instance of PermissionsFicIssuedDocumentsDetailed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PermissionsFicIssuedDocumentsDetailed input)
        {
            if (input == null) return false;
            return
                (
                    Quotes == input.Quotes ||
                    Quotes.Equals(input.Quotes)
                ) &&
                (
                    Proformas == input.Proformas ||
                    Proformas.Equals(input.Proformas)
                ) &&
                (
                    Invoices == input.Invoices ||
                    Invoices.Equals(input.Invoices)
                ) &&
                (
                    Receipts == input.Receipts ||
                    Receipts.Equals(input.Receipts)
                ) &&
                (
                    DeliveryNotes == input.DeliveryNotes ||
                    DeliveryNotes.Equals(input.DeliveryNotes)
                ) &&
                (
                    CreditNotes == input.CreditNotes ||
                    CreditNotes.Equals(input.CreditNotes)
                ) &&
                (
                    Orders == input.Orders ||
                    Orders.Equals(input.Orders)
                ) &&
                (
                    WorkReports == input.WorkReports ||
                    WorkReports.Equals(input.WorkReports)
                ) &&
                (
                    SupplierOrders == input.SupplierOrders ||
                    SupplierOrders.Equals(input.SupplierOrders)
                ) &&
                (
                    SelfInvoices == input.SelfInvoices ||
                    SelfInvoices.Equals(input.SelfInvoices)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + Quotes.GetHashCode();
                hashCode = hashCode * 59 + Proformas.GetHashCode();
                hashCode = hashCode * 59 + Invoices.GetHashCode();
                hashCode = hashCode * 59 + Receipts.GetHashCode();
                hashCode = hashCode * 59 + DeliveryNotes.GetHashCode();
                hashCode = hashCode * 59 + CreditNotes.GetHashCode();
                hashCode = hashCode * 59 + Orders.GetHashCode();
                hashCode = hashCode * 59 + WorkReports.GetHashCode();
                hashCode = hashCode * 59 + SupplierOrders.GetHashCode();
                hashCode = hashCode * 59 + SelfInvoices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}