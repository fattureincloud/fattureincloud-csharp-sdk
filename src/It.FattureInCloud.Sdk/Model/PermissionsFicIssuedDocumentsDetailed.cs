// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// PermissionsFicIssuedDocumentsDetailed
    /// </summary>
    public partial class PermissionsFicIssuedDocumentsDetailed : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsFicIssuedDocumentsDetailed" /> class.
        /// </summary>
        /// <param name="quotes">quotes</param>
        /// <param name="proformas">proformas</param>
        /// <param name="invoices">invoices</param>
        /// <param name="receipts">receipts</param>
        /// <param name="deliveryNotes">deliveryNotes</param>
        /// <param name="creditNotes">creditNotes</param>
        /// <param name="orders">orders</param>
        /// <param name="workReports">workReports</param>
        /// <param name="supplierOrders">supplierOrders</param>
        /// <param name="selfInvoices">selfInvoices</param>
        [JsonConstructor]
        public PermissionsFicIssuedDocumentsDetailed(Option<PermissionLevel?> quotes = default, Option<PermissionLevel?> proformas = default, Option<PermissionLevel?> invoices = default, Option<PermissionLevel?> receipts = default, Option<PermissionLevel?> deliveryNotes = default, Option<PermissionLevel?> creditNotes = default, Option<PermissionLevel?> orders = default, Option<PermissionLevel?> workReports = default, Option<PermissionLevel?> supplierOrders = default, Option<PermissionLevel?> selfInvoices = default)
        {
            QuotesOption = quotes;
            ProformasOption = proformas;
            InvoicesOption = invoices;
            ReceiptsOption = receipts;
            DeliveryNotesOption = deliveryNotes;
            CreditNotesOption = creditNotes;
            OrdersOption = orders;
            WorkReportsOption = workReports;
            SupplierOrdersOption = supplierOrders;
            SelfInvoicesOption = selfInvoices;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Quotes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> QuotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Quotes
        /// </summary>
        [JsonPropertyName("quotes")]
        public PermissionLevel? Quotes { get { return this.QuotesOption; } set { this.QuotesOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of Proformas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> ProformasOption { get; private set; }

        /// <summary>
        /// Gets or Sets Proformas
        /// </summary>
        [JsonPropertyName("proformas")]
        public PermissionLevel? Proformas { get { return this.ProformasOption; } set { this.ProformasOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of Invoices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> InvoicesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Invoices
        /// </summary>
        [JsonPropertyName("invoices")]
        public PermissionLevel? Invoices { get { return this.InvoicesOption; } set { this.InvoicesOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of Receipts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> ReceiptsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Receipts
        /// </summary>
        [JsonPropertyName("receipts")]
        public PermissionLevel? Receipts { get { return this.ReceiptsOption; } set { this.ReceiptsOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryNotes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> DeliveryNotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryNotes
        /// </summary>
        [JsonPropertyName("delivery_notes")]
        public PermissionLevel? DeliveryNotes { get { return this.DeliveryNotesOption; } set { this.DeliveryNotesOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of CreditNotes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> CreditNotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreditNotes
        /// </summary>
        [JsonPropertyName("credit_notes")]
        public PermissionLevel? CreditNotes { get { return this.CreditNotesOption; } set { this.CreditNotesOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of Orders
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> OrdersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Orders
        /// </summary>
        [JsonPropertyName("orders")]
        public PermissionLevel? Orders { get { return this.OrdersOption; } set { this.OrdersOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of WorkReports
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> WorkReportsOption { get; private set; }

        /// <summary>
        /// Gets or Sets WorkReports
        /// </summary>
        [JsonPropertyName("work_reports")]
        public PermissionLevel? WorkReports { get { return this.WorkReportsOption; } set { this.WorkReportsOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of SupplierOrders
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> SupplierOrdersOption { get; private set; }

        /// <summary>
        /// Gets or Sets SupplierOrders
        /// </summary>
        [JsonPropertyName("supplier_orders")]
        public PermissionLevel? SupplierOrders { get { return this.SupplierOrdersOption; } set { this.SupplierOrdersOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Used to track the state of SelfInvoices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PermissionLevel?> SelfInvoicesOption { get; private set; }

        /// <summary>
        /// Gets or Sets SelfInvoices
        /// </summary>
        [JsonPropertyName("self_invoices")]
        public PermissionLevel? SelfInvoices { get { return this.SelfInvoicesOption; } set { this.SelfInvoicesOption = new Option<PermissionLevel?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PermissionsFicIssuedDocumentsDetailed {\n");
            sb.Append("  Quotes: ").Append(Quotes).Append("\n");
            sb.Append("  Proformas: ").Append(Proformas).Append("\n");
            sb.Append("  Invoices: ").Append(Invoices).Append("\n");
            sb.Append("  Receipts: ").Append(Receipts).Append("\n");
            sb.Append("  DeliveryNotes: ").Append(DeliveryNotes).Append("\n");
            sb.Append("  CreditNotes: ").Append(CreditNotes).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  WorkReports: ").Append(WorkReports).Append("\n");
            sb.Append("  SupplierOrders: ").Append(SupplierOrders).Append("\n");
            sb.Append("  SelfInvoices: ").Append(SelfInvoices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="PermissionsFicIssuedDocumentsDetailed" />
    /// </summary>
    public class PermissionsFicIssuedDocumentsDetailedJsonConverter : JsonConverter<PermissionsFicIssuedDocumentsDetailed>
    {
        /// <summary>
        /// Deserializes json to <see cref="PermissionsFicIssuedDocumentsDetailed" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PermissionsFicIssuedDocumentsDetailed Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<PermissionLevel?> quotes = default;
            Option<PermissionLevel?> proformas = default;
            Option<PermissionLevel?> invoices = default;
            Option<PermissionLevel?> receipts = default;
            Option<PermissionLevel?> deliveryNotes = default;
            Option<PermissionLevel?> creditNotes = default;
            Option<PermissionLevel?> orders = default;
            Option<PermissionLevel?> workReports = default;
            Option<PermissionLevel?> supplierOrders = default;
            Option<PermissionLevel?> selfInvoices = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "quotes":
                            string quotesRawValue = utf8JsonReader.GetString();
                            if (quotesRawValue != null)
                                quotes = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(quotesRawValue));
                            break;
                        case "proformas":
                            string proformasRawValue = utf8JsonReader.GetString();
                            if (proformasRawValue != null)
                                proformas = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(proformasRawValue));
                            break;
                        case "invoices":
                            string invoicesRawValue = utf8JsonReader.GetString();
                            if (invoicesRawValue != null)
                                invoices = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(invoicesRawValue));
                            break;
                        case "receipts":
                            string receiptsRawValue = utf8JsonReader.GetString();
                            if (receiptsRawValue != null)
                                receipts = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(receiptsRawValue));
                            break;
                        case "delivery_notes":
                            string deliveryNotesRawValue = utf8JsonReader.GetString();
                            if (deliveryNotesRawValue != null)
                                deliveryNotes = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(deliveryNotesRawValue));
                            break;
                        case "credit_notes":
                            string creditNotesRawValue = utf8JsonReader.GetString();
                            if (creditNotesRawValue != null)
                                creditNotes = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(creditNotesRawValue));
                            break;
                        case "orders":
                            string ordersRawValue = utf8JsonReader.GetString();
                            if (ordersRawValue != null)
                                orders = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(ordersRawValue));
                            break;
                        case "work_reports":
                            string workReportsRawValue = utf8JsonReader.GetString();
                            if (workReportsRawValue != null)
                                workReports = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(workReportsRawValue));
                            break;
                        case "supplier_orders":
                            string supplierOrdersRawValue = utf8JsonReader.GetString();
                            if (supplierOrdersRawValue != null)
                                supplierOrders = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(supplierOrdersRawValue));
                            break;
                        case "self_invoices":
                            string selfInvoicesRawValue = utf8JsonReader.GetString();
                            if (selfInvoicesRawValue != null)
                                selfInvoices = new Option<PermissionLevel?>(PermissionLevelValueConverter.FromStringOrDefault(selfInvoicesRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (quotes.IsSet && quotes.Value == null)
                throw new ArgumentNullException(nameof(quotes), "Property is not nullable for class PermissionsFicIssuedDocumentsDetailed.");

            if (proformas.IsSet && proformas.Value == null)
                throw new ArgumentNullException(nameof(proformas), "Property is not nullable for class PermissionsFicIssuedDocumentsDetailed.");

            if (invoices.IsSet && invoices.Value == null)
                throw new ArgumentNullException(nameof(invoices), "Property is not nullable for class PermissionsFicIssuedDocumentsDetailed.");

            if (receipts.IsSet && receipts.Value == null)
                throw new ArgumentNullException(nameof(receipts), "Property is not nullable for class PermissionsFicIssuedDocumentsDetailed.");

            if (deliveryNotes.IsSet && deliveryNotes.Value == null)
                throw new ArgumentNullException(nameof(deliveryNotes), "Property is not nullable for class PermissionsFicIssuedDocumentsDetailed.");

            if (creditNotes.IsSet && creditNotes.Value == null)
                throw new ArgumentNullException(nameof(creditNotes), "Property is not nullable for class PermissionsFicIssuedDocumentsDetailed.");

            if (orders.IsSet && orders.Value == null)
                throw new ArgumentNullException(nameof(orders), "Property is not nullable for class PermissionsFicIssuedDocumentsDetailed.");

            if (workReports.IsSet && workReports.Value == null)
                throw new ArgumentNullException(nameof(workReports), "Property is not nullable for class PermissionsFicIssuedDocumentsDetailed.");

            if (supplierOrders.IsSet && supplierOrders.Value == null)
                throw new ArgumentNullException(nameof(supplierOrders), "Property is not nullable for class PermissionsFicIssuedDocumentsDetailed.");

            if (selfInvoices.IsSet && selfInvoices.Value == null)
                throw new ArgumentNullException(nameof(selfInvoices), "Property is not nullable for class PermissionsFicIssuedDocumentsDetailed.");

            return new PermissionsFicIssuedDocumentsDetailed(quotes, proformas, invoices, receipts, deliveryNotes, creditNotes, orders, workReports, supplierOrders, selfInvoices);
        }

        /// <summary>
        /// Serializes a <see cref="PermissionsFicIssuedDocumentsDetailed" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="permissionsFicIssuedDocumentsDetailed"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PermissionsFicIssuedDocumentsDetailed permissionsFicIssuedDocumentsDetailed, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, permissionsFicIssuedDocumentsDetailed, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PermissionsFicIssuedDocumentsDetailed" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="permissionsFicIssuedDocumentsDetailed"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PermissionsFicIssuedDocumentsDetailed permissionsFicIssuedDocumentsDetailed, JsonSerializerOptions jsonSerializerOptions)
        {
            if (permissionsFicIssuedDocumentsDetailed.QuotesOption.IsSet)
            {
                var quotesRawValue = PermissionLevelValueConverter.ToJsonValue(permissionsFicIssuedDocumentsDetailed.Quotes.Value);
                writer.WriteString("quotes", quotesRawValue);
            }
            if (permissionsFicIssuedDocumentsDetailed.ProformasOption.IsSet)
            {
                var proformasRawValue = PermissionLevelValueConverter.ToJsonValue(permissionsFicIssuedDocumentsDetailed.Proformas.Value);
                writer.WriteString("proformas", proformasRawValue);
            }
            if (permissionsFicIssuedDocumentsDetailed.InvoicesOption.IsSet)
            {
                var invoicesRawValue = PermissionLevelValueConverter.ToJsonValue(permissionsFicIssuedDocumentsDetailed.Invoices.Value);
                writer.WriteString("invoices", invoicesRawValue);
            }
            if (permissionsFicIssuedDocumentsDetailed.ReceiptsOption.IsSet)
            {
                var receiptsRawValue = PermissionLevelValueConverter.ToJsonValue(permissionsFicIssuedDocumentsDetailed.Receipts.Value);
                writer.WriteString("receipts", receiptsRawValue);
            }
            if (permissionsFicIssuedDocumentsDetailed.DeliveryNotesOption.IsSet)
            {
                var deliveryNotesRawValue = PermissionLevelValueConverter.ToJsonValue(permissionsFicIssuedDocumentsDetailed.DeliveryNotes.Value);
                writer.WriteString("delivery_notes", deliveryNotesRawValue);
            }
            if (permissionsFicIssuedDocumentsDetailed.CreditNotesOption.IsSet)
            {
                var creditNotesRawValue = PermissionLevelValueConverter.ToJsonValue(permissionsFicIssuedDocumentsDetailed.CreditNotes.Value);
                writer.WriteString("credit_notes", creditNotesRawValue);
            }
            if (permissionsFicIssuedDocumentsDetailed.OrdersOption.IsSet)
            {
                var ordersRawValue = PermissionLevelValueConverter.ToJsonValue(permissionsFicIssuedDocumentsDetailed.Orders.Value);
                writer.WriteString("orders", ordersRawValue);
            }
            if (permissionsFicIssuedDocumentsDetailed.WorkReportsOption.IsSet)
            {
                var workReportsRawValue = PermissionLevelValueConverter.ToJsonValue(permissionsFicIssuedDocumentsDetailed.WorkReports.Value);
                writer.WriteString("work_reports", workReportsRawValue);
            }
            if (permissionsFicIssuedDocumentsDetailed.SupplierOrdersOption.IsSet)
            {
                var supplierOrdersRawValue = PermissionLevelValueConverter.ToJsonValue(permissionsFicIssuedDocumentsDetailed.SupplierOrders.Value);
                writer.WriteString("supplier_orders", supplierOrdersRawValue);
            }
            if (permissionsFicIssuedDocumentsDetailed.SelfInvoicesOption.IsSet)
            {
                var selfInvoicesRawValue = PermissionLevelValueConverter.ToJsonValue(permissionsFicIssuedDocumentsDetailed.SelfInvoices.Value);
                writer.WriteString("self_invoices", selfInvoicesRawValue);
            }
        }
    }
}
