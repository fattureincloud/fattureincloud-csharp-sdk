// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// EmailAttachment
    /// </summary>
    public partial class EmailAttachment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAttachment" /> class.
        /// </summary>
        /// <param name="filename">Email attachment filename</param>
        /// <param name="url">Email attachment url</param>
        [JsonConstructor]
        public EmailAttachment(Option<string> filename = default, Option<string> url = default)
        {
            FilenameOption = filename;
            UrlOption = url;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Filename
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FilenameOption { get; private set; }

        /// <summary>
        /// Email attachment filename
        /// </summary>
        /// <value>Email attachment filename</value>
        [JsonPropertyName("filename")]
        public string Filename { get { return this.FilenameOption; } set { this.FilenameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UrlOption { get; private set; }

        /// <summary>
        /// Email attachment url
        /// </summary>
        /// <value>Email attachment url</value>
        [JsonPropertyName("url")]
        public string Url { get { return this.UrlOption; } set { this.UrlOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailAttachment {\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="EmailAttachment" />
    /// </summary>
    public class EmailAttachmentJsonConverter : JsonConverter<EmailAttachment>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailAttachment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailAttachment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> filename = default;
            Option<string> url = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "filename":
                            filename = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "url":
                            url = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename), "Property is not nullable for class EmailAttachment.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class EmailAttachment.");

            return new EmailAttachment(filename, url);
        }

        /// <summary>
        /// Serializes a <see cref="EmailAttachment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailAttachment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailAttachment emailAttachment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailAttachment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailAttachment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailAttachment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailAttachment emailAttachment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailAttachment.FilenameOption.IsSet && emailAttachment.Filename == null)
                throw new ArgumentNullException(nameof(emailAttachment.Filename), "Property is required for class EmailAttachment.");

            if (emailAttachment.UrlOption.IsSet && emailAttachment.Url == null)
                throw new ArgumentNullException(nameof(emailAttachment.Url), "Property is required for class EmailAttachment.");

            if (emailAttachment.FilenameOption.IsSet)
                writer.WriteString("filename", emailAttachment.Filename);

            if (emailAttachment.UrlOption.IsSet)
                writer.WriteString("url", emailAttachment.Url);
        }
    }
}
