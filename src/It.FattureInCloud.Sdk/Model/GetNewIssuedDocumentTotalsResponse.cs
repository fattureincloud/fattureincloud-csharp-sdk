// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// GetNewIssuedDocumentTotalsResponse
    /// </summary>
    public partial class GetNewIssuedDocumentTotalsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetNewIssuedDocumentTotalsResponse" /> class.
        /// </summary>
        /// <param name="data">data</param>
        [JsonConstructor]
        public GetNewIssuedDocumentTotalsResponse(Option<IssuedDocumentTotals> data = default)
        {
            DataOption = data;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IssuedDocumentTotals> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public IssuedDocumentTotals Data { get { return this.DataOption; } set { this.DataOption = new Option<IssuedDocumentTotals>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetNewIssuedDocumentTotalsResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="GetNewIssuedDocumentTotalsResponse" />
    /// </summary>
    public class GetNewIssuedDocumentTotalsResponseJsonConverter : JsonConverter<GetNewIssuedDocumentTotalsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetNewIssuedDocumentTotalsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetNewIssuedDocumentTotalsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<IssuedDocumentTotals> data = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "data":
                            data = new Option<IssuedDocumentTotals>(JsonSerializer.Deserialize<IssuedDocumentTotals>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class GetNewIssuedDocumentTotalsResponse.");

            return new GetNewIssuedDocumentTotalsResponse(data);
        }

        /// <summary>
        /// Serializes a <see cref="GetNewIssuedDocumentTotalsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getNewIssuedDocumentTotalsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetNewIssuedDocumentTotalsResponse getNewIssuedDocumentTotalsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getNewIssuedDocumentTotalsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetNewIssuedDocumentTotalsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getNewIssuedDocumentTotalsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetNewIssuedDocumentTotalsResponse getNewIssuedDocumentTotalsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getNewIssuedDocumentTotalsResponse.DataOption.IsSet && getNewIssuedDocumentTotalsResponse.Data == null)
                throw new ArgumentNullException(nameof(getNewIssuedDocumentTotalsResponse.Data), "Property is required for class GetNewIssuedDocumentTotalsResponse.");

            if (getNewIssuedDocumentTotalsResponse.DataOption.IsSet)
            {
                writer.WritePropertyName("data");
                JsonSerializer.Serialize(writer, getNewIssuedDocumentTotalsResponse.Data, jsonSerializerOptions);
            }
        }
    }
}
