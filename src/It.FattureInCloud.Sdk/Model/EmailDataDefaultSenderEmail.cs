/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     Default sender email. (Other emails can be found in &#x60;sender_emails_list&#x60;)
    /// </summary>
    [DataContract(Name = "EmailData_default_sender_email")]
    public class EmailDataDefaultSenderEmail : IEquatable<EmailDataDefaultSenderEmail>, IValidatableObject
    {
        private string _Email;
        private bool _flagEmail;
        private bool _flagId;
        private int? _Id;

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailDataDefaultSenderEmail" /> class.
        /// </summary>
        /// <param name="id">Id.</param>
        /// <param name="email">Email address.</param>
        public EmailDataDefaultSenderEmail(int? id = default(int?), string email = default(string))
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _Email = email;
            if (Email != null) _flagEmail = true;
        }

        /// <summary>
        ///     Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Email address
        /// </summary>
        /// <value>Email address</value>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email
        {
            get => _Email;
            set
            {
                _Email = value;
                _flagEmail = true;
            }
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as Email should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmail()
        {
            return _flagEmail;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailDataDefaultSenderEmail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailDataDefaultSenderEmail);
        }

        /// <summary>
        ///     Returns true if EmailDataDefaultSenderEmail instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailDataDefaultSenderEmail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailDataDefaultSenderEmail input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Email == input.Email ||
                    (Email != null &&
                     Email.Equals(input.Email))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (Email != null) hashCode = hashCode * 59 + Email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}