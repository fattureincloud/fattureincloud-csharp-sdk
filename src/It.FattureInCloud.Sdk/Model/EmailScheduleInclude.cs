// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// EmailScheduleInclude
    /// </summary>
    public partial class EmailScheduleInclude : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailScheduleInclude" /> class.
        /// </summary>
        /// <param name="document">Include a button to view the document</param>
        /// <param name="deliveryNote">Include a button to view the delivery note</param>
        /// <param name="attachment">Include a button to view the attachment</param>
        /// <param name="accompanyingInvoice">Include a button to view the accompanying invoice</param>
        [JsonConstructor]
        public EmailScheduleInclude(Option<bool?> document = default, Option<bool?> deliveryNote = default, Option<bool?> attachment = default, Option<bool?> accompanyingInvoice = default)
        {
            DocumentOption = document;
            DeliveryNoteOption = deliveryNote;
            AttachmentOption = attachment;
            AccompanyingInvoiceOption = accompanyingInvoice;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Document
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DocumentOption { get; private set; }

        /// <summary>
        /// Include a button to view the document
        /// </summary>
        /// <value>Include a button to view the document</value>
        [JsonPropertyName("document")]
        public bool? Document { get { return this.DocumentOption; } set { this.DocumentOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryNote
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeliveryNoteOption { get; private set; }

        /// <summary>
        /// Include a button to view the delivery note
        /// </summary>
        /// <value>Include a button to view the delivery note</value>
        [JsonPropertyName("delivery_note")]
        public bool? DeliveryNote { get { return this.DeliveryNoteOption; } set { this.DeliveryNoteOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Attachment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AttachmentOption { get; private set; }

        /// <summary>
        /// Include a button to view the attachment
        /// </summary>
        /// <value>Include a button to view the attachment</value>
        [JsonPropertyName("attachment")]
        public bool? Attachment { get { return this.AttachmentOption; } set { this.AttachmentOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of AccompanyingInvoice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AccompanyingInvoiceOption { get; private set; }

        /// <summary>
        /// Include a button to view the accompanying invoice
        /// </summary>
        /// <value>Include a button to view the accompanying invoice</value>
        [JsonPropertyName("accompanying_invoice")]
        public bool? AccompanyingInvoice { get { return this.AccompanyingInvoiceOption; } set { this.AccompanyingInvoiceOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailScheduleInclude {\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  DeliveryNote: ").Append(DeliveryNote).Append("\n");
            sb.Append("  Attachment: ").Append(Attachment).Append("\n");
            sb.Append("  AccompanyingInvoice: ").Append(AccompanyingInvoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="EmailScheduleInclude" />
    /// </summary>
    public class EmailScheduleIncludeJsonConverter : JsonConverter<EmailScheduleInclude>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailScheduleInclude" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailScheduleInclude Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> document = default;
            Option<bool?> deliveryNote = default;
            Option<bool?> attachment = default;
            Option<bool?> accompanyingInvoice = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "document":
                            document = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "delivery_note":
                            deliveryNote = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "attachment":
                            attachment = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "accompanying_invoice":
                            accompanyingInvoice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new EmailScheduleInclude(document, deliveryNote, attachment, accompanyingInvoice);
        }

        /// <summary>
        /// Serializes a <see cref="EmailScheduleInclude" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailScheduleInclude"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailScheduleInclude emailScheduleInclude, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailScheduleInclude, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailScheduleInclude" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailScheduleInclude"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailScheduleInclude emailScheduleInclude, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailScheduleInclude.DocumentOption.IsSet)
                if (emailScheduleInclude.DocumentOption.Value != null)
                    writer.WriteBoolean("document", emailScheduleInclude.DocumentOption.Value.Value);
                else
                    writer.WriteNull("document");

            if (emailScheduleInclude.DeliveryNoteOption.IsSet)
                if (emailScheduleInclude.DeliveryNoteOption.Value != null)
                    writer.WriteBoolean("delivery_note", emailScheduleInclude.DeliveryNoteOption.Value.Value);
                else
                    writer.WriteNull("delivery_note");

            if (emailScheduleInclude.AttachmentOption.IsSet)
                if (emailScheduleInclude.AttachmentOption.Value != null)
                    writer.WriteBoolean("attachment", emailScheduleInclude.AttachmentOption.Value.Value);
                else
                    writer.WriteNull("attachment");

            if (emailScheduleInclude.AccompanyingInvoiceOption.IsSet)
                if (emailScheduleInclude.AccompanyingInvoiceOption.Value != null)
                    writer.WriteBoolean("accompanying_invoice", emailScheduleInclude.AccompanyingInvoiceOption.Value.Value);
                else
                    writer.WriteNull("accompanying_invoice");
        }
    }
}
