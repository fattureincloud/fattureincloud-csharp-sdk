/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     EmailScheduleInclude
    /// </summary>
    [DataContract(Name = "EmailSchedule_include")]
    public class EmailScheduleInclude : IEquatable<EmailScheduleInclude>, IValidatableObject
    {
        private bool? _AccompanyingInvoice;
        private bool? _Attachment;
        private bool? _DeliveryNote;
        private bool? _Document;
        private bool _flagAccompanyingInvoice;
        private bool _flagAttachment;
        private bool _flagDeliveryNote;
        private bool _flagDocument;

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailScheduleInclude" /> class.
        /// </summary>
        /// <param name="document">If set to true, the email will have a button to view the document.</param>
        /// <param name="deliveryNote">If set to true, the email will have a button to view the delivery note.</param>
        /// <param name="attachment">If set to true, the email will have a button to view the attachment.</param>
        /// <param name="accompanyingInvoice">If set to true, the email will have a button to view the accompanying invoice.</param>
        public EmailScheduleInclude(bool? document = default(bool?), bool? deliveryNote = default(bool?),
            bool? attachment = default(bool?), bool? accompanyingInvoice = default(bool?))
        {
            _Document = document;
            if (Document != null) _flagDocument = true;
            _DeliveryNote = deliveryNote;
            if (DeliveryNote != null) _flagDeliveryNote = true;
            _Attachment = attachment;
            if (Attachment != null) _flagAttachment = true;
            _AccompanyingInvoice = accompanyingInvoice;
            if (AccompanyingInvoice != null) _flagAccompanyingInvoice = true;
        }

        /// <summary>
        ///     If set to true, the email will have a button to view the document
        /// </summary>
        /// <value>If set to true, the email will have a button to view the document</value>
        [DataMember(Name = "document", EmitDefaultValue = true)]
        public bool? Document
        {
            get => _Document;
            set
            {
                _Document = value;
                _flagDocument = true;
            }
        }

        /// <summary>
        ///     If set to true, the email will have a button to view the delivery note
        /// </summary>
        /// <value>If set to true, the email will have a button to view the delivery note</value>
        [DataMember(Name = "delivery_note", EmitDefaultValue = true)]
        public bool? DeliveryNote
        {
            get => _DeliveryNote;
            set
            {
                _DeliveryNote = value;
                _flagDeliveryNote = true;
            }
        }

        /// <summary>
        ///     If set to true, the email will have a button to view the attachment
        /// </summary>
        /// <value>If set to true, the email will have a button to view the attachment</value>
        [DataMember(Name = "attachment", EmitDefaultValue = true)]
        public bool? Attachment
        {
            get => _Attachment;
            set
            {
                _Attachment = value;
                _flagAttachment = true;
            }
        }

        /// <summary>
        ///     If set to true, the email will have a button to view the accompanying invoice
        /// </summary>
        /// <value>If set to true, the email will have a button to view the accompanying invoice</value>
        [DataMember(Name = "accompanying_invoice", EmitDefaultValue = true)]
        public bool? AccompanyingInvoice
        {
            get => _AccompanyingInvoice;
            set
            {
                _AccompanyingInvoice = value;
                _flagAccompanyingInvoice = true;
            }
        }

        /// <summary>
        ///     Returns false as Document should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDocument()
        {
            return _flagDocument;
        }

        /// <summary>
        ///     Returns false as DeliveryNote should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeliveryNote()
        {
            return _flagDeliveryNote;
        }

        /// <summary>
        ///     Returns false as Attachment should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachment()
        {
            return _flagAttachment;
        }

        /// <summary>
        ///     Returns false as AccompanyingInvoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccompanyingInvoice()
        {
            return _flagAccompanyingInvoice;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailScheduleInclude {\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  DeliveryNote: ").Append(DeliveryNote).Append("\n");
            sb.Append("  Attachment: ").Append(Attachment).Append("\n");
            sb.Append("  AccompanyingInvoice: ").Append(AccompanyingInvoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailScheduleInclude);
        }

        /// <summary>
        ///     Returns true if EmailScheduleInclude instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailScheduleInclude to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailScheduleInclude input)
        {
            if (input == null) return false;
            return
                (
                    Document == input.Document ||
                    (Document != null &&
                     Document.Equals(input.Document))
                ) &&
                (
                    DeliveryNote == input.DeliveryNote ||
                    (DeliveryNote != null &&
                     DeliveryNote.Equals(input.DeliveryNote))
                ) &&
                (
                    Attachment == input.Attachment ||
                    (Attachment != null &&
                     Attachment.Equals(input.Attachment))
                ) &&
                (
                    AccompanyingInvoice == input.AccompanyingInvoice ||
                    (AccompanyingInvoice != null &&
                     AccompanyingInvoice.Equals(input.AccompanyingInvoice))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Document != null) hashCode = hashCode * 59 + Document.GetHashCode();
                if (DeliveryNote != null) hashCode = hashCode * 59 + DeliveryNote.GetHashCode();
                if (Attachment != null) hashCode = hashCode * 59 + Attachment.GetHashCode();
                if (AccompanyingInvoice != null) hashCode = hashCode * 59 + AccompanyingInvoice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}