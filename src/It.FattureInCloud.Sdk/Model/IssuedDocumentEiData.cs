// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Issued document e-invoice data [Only if e_invoice&#x3D;true]
    /// </summary>
    public partial class IssuedDocumentEiData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentEiData" /> class.
        /// </summary>
        /// <param name="vatKind">vatKind</param>
        /// <param name="originalDocumentType">originalDocumentType</param>
        /// <param name="odNumber">E-invoice original document number</param>
        /// <param name="odDate">E-invoice original document date</param>
        /// <param name="cig">E-invoice CIG</param>
        /// <param name="cup">E-invoice CUP</param>
        /// <param name="paymentMethod">E-invoice payment method [required for e-invoices] (see [here](https://www.fatturapa.gov.it/export/documenti/fatturapa/v1.2.2/Rappresentazione_Tabellare_FattOrdinaria_V1.2.2.pdf) for the accepted values of ModalitaPagamento)</param>
        /// <param name="bankName">E-invoice bank name</param>
        /// <param name="bankIban">E-invoice bank IBAN</param>
        /// <param name="bankBeneficiary">E-invoice bank beneficiary</param>
        /// <param name="invoiceNumber">E-invoice invoice number</param>
        /// <param name="invoiceDate">E-invoice invoice date</param>
        [JsonConstructor]
        public IssuedDocumentEiData(Option<VatKind?> vatKind = default, Option<OriginalDocumentType?> originalDocumentType = default, Option<string> odNumber = default, Option<DateTimeOffset?> odDate = default, Option<string> cig = default, Option<string> cup = default, Option<string> paymentMethod = default, Option<string> bankName = default, Option<string> bankIban = default, Option<string> bankBeneficiary = default, Option<string> invoiceNumber = default, Option<DateTimeOffset?> invoiceDate = default)
        {
            VatKindOption = vatKind;
            OriginalDocumentTypeOption = originalDocumentType;
            OdNumberOption = odNumber;
            OdDateOption = odDate;
            CigOption = cig;
            CupOption = cup;
            PaymentMethodOption = paymentMethod;
            BankNameOption = bankName;
            BankIbanOption = bankIban;
            BankBeneficiaryOption = bankBeneficiary;
            InvoiceNumberOption = invoiceNumber;
            InvoiceDateOption = invoiceDate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VatKind
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatKind?> VatKindOption { get; private set; }

        /// <summary>
        /// Gets or Sets VatKind
        /// </summary>
        [JsonPropertyName("vat_kind")]
        public VatKind? VatKind { get { return this.VatKindOption; } set { this.VatKindOption = new Option<VatKind?>(value); } }

        /// <summary>
        /// Used to track the state of OriginalDocumentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OriginalDocumentType?> OriginalDocumentTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriginalDocumentType
        /// </summary>
        [JsonPropertyName("original_document_type")]
        public OriginalDocumentType? OriginalDocumentType { get { return this.OriginalDocumentTypeOption; } set { this.OriginalDocumentTypeOption = new Option<OriginalDocumentType?>(value); } }

        /// <summary>
        /// Used to track the state of OdNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OdNumberOption { get; private set; }

        /// <summary>
        /// E-invoice original document number
        /// </summary>
        /// <value>E-invoice original document number</value>
        [JsonPropertyName("od_number")]
        public string OdNumber { get { return this.OdNumberOption; } set { this.OdNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OdDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> OdDateOption { get; private set; }

        /// <summary>
        /// E-invoice original document date
        /// </summary>
        /// <value>E-invoice original document date</value>
        [JsonPropertyName("od_date")]
        public DateTimeOffset? OdDate { get { return this.OdDateOption; } set { this.OdDateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of Cig
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CigOption { get; private set; }

        /// <summary>
        /// E-invoice CIG
        /// </summary>
        /// <value>E-invoice CIG</value>
        [JsonPropertyName("cig")]
        public string Cig { get { return this.CigOption; } set { this.CigOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Cup
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CupOption { get; private set; }

        /// <summary>
        /// E-invoice CUP
        /// </summary>
        /// <value>E-invoice CUP</value>
        [JsonPropertyName("cup")]
        public string Cup { get { return this.CupOption; } set { this.CupOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaymentMethodOption { get; private set; }

        /// <summary>
        /// E-invoice payment method [required for e-invoices] (see [here](https://www.fatturapa.gov.it/export/documenti/fatturapa/v1.2.2/Rappresentazione_Tabellare_FattOrdinaria_V1.2.2.pdf) for the accepted values of ModalitaPagamento)
        /// </summary>
        /// <value>E-invoice payment method [required for e-invoices] (see [here](https://www.fatturapa.gov.it/export/documenti/fatturapa/v1.2.2/Rappresentazione_Tabellare_FattOrdinaria_V1.2.2.pdf) for the accepted values of ModalitaPagamento)</value>
        [JsonPropertyName("payment_method")]
        public string PaymentMethod { get { return this.PaymentMethodOption; } set { this.PaymentMethodOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BankName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankNameOption { get; private set; }

        /// <summary>
        /// E-invoice bank name
        /// </summary>
        /// <value>E-invoice bank name</value>
        [JsonPropertyName("bank_name")]
        public string BankName { get { return this.BankNameOption; } set { this.BankNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BankIban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankIbanOption { get; private set; }

        /// <summary>
        /// E-invoice bank IBAN
        /// </summary>
        /// <value>E-invoice bank IBAN</value>
        [JsonPropertyName("bank_iban")]
        public string BankIban { get { return this.BankIbanOption; } set { this.BankIbanOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BankBeneficiary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankBeneficiaryOption { get; private set; }

        /// <summary>
        /// E-invoice bank beneficiary
        /// </summary>
        /// <value>E-invoice bank beneficiary</value>
        [JsonPropertyName("bank_beneficiary")]
        public string BankBeneficiary { get { return this.BankBeneficiaryOption; } set { this.BankBeneficiaryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InvoiceNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InvoiceNumberOption { get; private set; }

        /// <summary>
        /// E-invoice invoice number
        /// </summary>
        /// <value>E-invoice invoice number</value>
        [JsonPropertyName("invoice_number")]
        public string InvoiceNumber { get { return this.InvoiceNumberOption; } set { this.InvoiceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InvoiceDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> InvoiceDateOption { get; private set; }

        /// <summary>
        /// E-invoice invoice date
        /// </summary>
        /// <value>E-invoice invoice date</value>
        [JsonPropertyName("invoice_date")]
        public DateTimeOffset? InvoiceDate { get { return this.InvoiceDateOption; } set { this.InvoiceDateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentEiData {\n");
            sb.Append("  VatKind: ").Append(VatKind).Append("\n");
            sb.Append("  OriginalDocumentType: ").Append(OriginalDocumentType).Append("\n");
            sb.Append("  OdNumber: ").Append(OdNumber).Append("\n");
            sb.Append("  OdDate: ").Append(OdDate).Append("\n");
            sb.Append("  Cig: ").Append(Cig).Append("\n");
            sb.Append("  Cup: ").Append(Cup).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankIban: ").Append(BankIban).Append("\n");
            sb.Append("  BankBeneficiary: ").Append(BankBeneficiary).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentEiData" />
    /// </summary>
    public class IssuedDocumentEiDataJsonConverter : JsonConverter<IssuedDocumentEiData>
    {
        /// <summary>
        /// The format to use to serialize OdDate
        /// </summary>
        public static string OdDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize InvoiceDate
        /// </summary>
        public static string InvoiceDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="IssuedDocumentEiData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocumentEiData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<VatKind?> vatKind = default;
            Option<OriginalDocumentType?> originalDocumentType = default;
            Option<string> odNumber = default;
            Option<DateTimeOffset?> odDate = default;
            Option<string> cig = default;
            Option<string> cup = default;
            Option<string> paymentMethod = default;
            Option<string> bankName = default;
            Option<string> bankIban = default;
            Option<string> bankBeneficiary = default;
            Option<string> invoiceNumber = default;
            Option<DateTimeOffset?> invoiceDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "vat_kind":
                            string vatKindRawValue = utf8JsonReader.GetString();
                            if (vatKindRawValue != null)
                                vatKind = new Option<VatKind?>(VatKindValueConverter.FromStringOrDefault(vatKindRawValue));
                            break;
                        case "original_document_type":
                            string originalDocumentTypeRawValue = utf8JsonReader.GetString();
                            if (originalDocumentTypeRawValue != null)
                                originalDocumentType = new Option<OriginalDocumentType?>(OriginalDocumentTypeValueConverter.FromStringOrDefault(originalDocumentTypeRawValue));
                            break;
                        case "od_number":
                            odNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "od_date":
                            odDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cig":
                            cig = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cup":
                            cup = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "payment_method":
                            paymentMethod = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bank_name":
                            bankName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bank_iban":
                            bankIban = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bank_beneficiary":
                            bankBeneficiary = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "invoice_number":
                            invoiceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "invoice_date":
                            invoiceDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new IssuedDocumentEiData(vatKind, originalDocumentType, odNumber, odDate, cig, cup, paymentMethod, bankName, bankIban, bankBeneficiary, invoiceNumber, invoiceDate);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocumentEiData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentEiData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentEiData issuedDocumentEiData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocumentEiData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocumentEiData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentEiData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocumentEiData issuedDocumentEiData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocumentEiData.VatKindOption.IsSet)
                if (issuedDocumentEiData.VatKindOption.Value != null)
                {
                    var vatKindRawValue = VatKindValueConverter.ToJsonValue(issuedDocumentEiData.VatKindOption.Value.Value);
                    writer.WriteString("vat_kind", vatKindRawValue);
                }
                else
                    writer.WriteNull("vat_kind");
            if (issuedDocumentEiData.OriginalDocumentTypeOption.IsSet)
                if (issuedDocumentEiData.OriginalDocumentTypeOption.Value != null)
                {
                    var originalDocumentTypeRawValue = OriginalDocumentTypeValueConverter.ToJsonValue(issuedDocumentEiData.OriginalDocumentTypeOption.Value.Value);
                    writer.WriteString("original_document_type", originalDocumentTypeRawValue);
                }
                else
                    writer.WriteNull("original_document_type");
            if (issuedDocumentEiData.OdNumberOption.IsSet)
                if (issuedDocumentEiData.OdNumberOption.Value != null)
                    writer.WriteString("od_number", issuedDocumentEiData.OdNumber);
                else
                    writer.WriteNull("od_number");

            if (issuedDocumentEiData.OdDateOption.IsSet)
                if (issuedDocumentEiData.OdDateOption.Value != null)
                    writer.WriteString("od_date", issuedDocumentEiData.OdDateOption.Value.Value.ToString(OdDateFormat));
                else
                    writer.WriteNull("od_date");

            if (issuedDocumentEiData.CigOption.IsSet)
                if (issuedDocumentEiData.CigOption.Value != null)
                    writer.WriteString("cig", issuedDocumentEiData.Cig);
                else
                    writer.WriteNull("cig");

            if (issuedDocumentEiData.CupOption.IsSet)
                if (issuedDocumentEiData.CupOption.Value != null)
                    writer.WriteString("cup", issuedDocumentEiData.Cup);
                else
                    writer.WriteNull("cup");

            if (issuedDocumentEiData.PaymentMethodOption.IsSet)
                if (issuedDocumentEiData.PaymentMethodOption.Value != null)
                    writer.WriteString("payment_method", issuedDocumentEiData.PaymentMethod);
                else
                    writer.WriteNull("payment_method");

            if (issuedDocumentEiData.BankNameOption.IsSet)
                if (issuedDocumentEiData.BankNameOption.Value != null)
                    writer.WriteString("bank_name", issuedDocumentEiData.BankName);
                else
                    writer.WriteNull("bank_name");

            if (issuedDocumentEiData.BankIbanOption.IsSet)
                if (issuedDocumentEiData.BankIbanOption.Value != null)
                    writer.WriteString("bank_iban", issuedDocumentEiData.BankIban);
                else
                    writer.WriteNull("bank_iban");

            if (issuedDocumentEiData.BankBeneficiaryOption.IsSet)
                if (issuedDocumentEiData.BankBeneficiaryOption.Value != null)
                    writer.WriteString("bank_beneficiary", issuedDocumentEiData.BankBeneficiary);
                else
                    writer.WriteNull("bank_beneficiary");

            if (issuedDocumentEiData.InvoiceNumberOption.IsSet)
                if (issuedDocumentEiData.InvoiceNumberOption.Value != null)
                    writer.WriteString("invoice_number", issuedDocumentEiData.InvoiceNumber);
                else
                    writer.WriteNull("invoice_number");

            if (issuedDocumentEiData.InvoiceDateOption.IsSet)
                if (issuedDocumentEiData.InvoiceDateOption.Value != null)
                    writer.WriteString("invoice_date", issuedDocumentEiData.InvoiceDateOption.Value.Value.ToString(InvoiceDateFormat));
                else
                    writer.WriteNull("invoice_date");
        }
    }
}
