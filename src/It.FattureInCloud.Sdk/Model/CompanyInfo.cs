/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     CompanyInfo
    /// </summary>
    [DataContract(Name = "CompanyInfo")]
    public class CompanyInfo : IEquatable<CompanyInfo>, IValidatableObject
    {
        private CompanyInfoAccessInfo _AccessInfo;
        private int? _AccountantId;
        private string _Email;
        private bool _flagAccessInfo;
        private bool _flagAccountantId;
        private bool _flagEmail;
        private bool _flagId;
        private bool _flagIsAccountant;
        private bool _flagName;
        private bool _flagPlanInfo;
        private bool _flagType;
        private int? _Id;
        private bool? _IsAccountant;
        private string _Name;
        private CompanyInfoPlanInfo _PlanInfo;
        private CompanyType? _Type;

        /// <summary>
        ///     Initializes a new instance of the <see cref="CompanyInfo" /> class.
        /// </summary>
        /// <param name="id">Company unique identifier..</param>
        /// <param name="name">Company name..</param>
        /// <param name="email">Company email..</param>
        /// <param name="type">type.</param>
        /// <param name="accessInfo">accessInfo.</param>
        /// <param name="planInfo">planInfo.</param>
        /// <param name="accountantId">Accountant unique identifier..</param>
        /// <param name="isAccountant">Determine if the logged account is an accountant..</param>
        public CompanyInfo(int? id = default(int?), string name = default(string), string email = default(string),
            CompanyType? type = default(CompanyType?), CompanyInfoAccessInfo accessInfo = default,
            CompanyInfoPlanInfo planInfo = default, int? accountantId = default(int?),
            bool? isAccountant = default(bool?))
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _Name = name;
            if (Name != null) _flagName = true;
            _Email = email;
            if (Email != null) _flagEmail = true;
            _Type = type;
            if (Type != null) _flagType = true;
            _AccessInfo = accessInfo;
            if (AccessInfo != null) _flagAccessInfo = true;
            _PlanInfo = planInfo;
            if (PlanInfo != null) _flagPlanInfo = true;
            _AccountantId = accountantId;
            if (AccountantId != null) _flagAccountantId = true;
            _IsAccountant = isAccountant;
            if (IsAccountant != null) _flagIsAccountant = true;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = false)]
        public CompanyType? Type
        {
            get => _Type;
            set
            {
                _Type = value;
                _flagType = true;
            }
        }

        /// <summary>
        ///     Company unique identifier.
        /// </summary>
        /// <value>Company unique identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Company name.
        /// </summary>
        /// <value>Company name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get => _Name;
            set
            {
                _Name = value;
                _flagName = true;
            }
        }

        /// <summary>
        ///     Company email.
        /// </summary>
        /// <value>Company email.</value>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email
        {
            get => _Email;
            set
            {
                _Email = value;
                _flagEmail = true;
            }
        }

        /// <summary>
        ///     Gets or Sets AccessInfo
        /// </summary>
        [DataMember(Name = "access_info", EmitDefaultValue = true)]
        public CompanyInfoAccessInfo AccessInfo
        {
            get => _AccessInfo;
            set
            {
                _AccessInfo = value;
                _flagAccessInfo = true;
            }
        }

        /// <summary>
        ///     Gets or Sets PlanInfo
        /// </summary>
        [DataMember(Name = "plan_info", EmitDefaultValue = true)]
        public CompanyInfoPlanInfo PlanInfo
        {
            get => _PlanInfo;
            set
            {
                _PlanInfo = value;
                _flagPlanInfo = true;
            }
        }

        /// <summary>
        ///     Accountant unique identifier.
        /// </summary>
        /// <value>Accountant unique identifier.</value>
        [DataMember(Name = "accountant_id", EmitDefaultValue = true)]
        public int? AccountantId
        {
            get => _AccountantId;
            set
            {
                _AccountantId = value;
                _flagAccountantId = true;
            }
        }

        /// <summary>
        ///     Determine if the logged account is an accountant.
        /// </summary>
        /// <value>Determine if the logged account is an accountant.</value>
        [DataMember(Name = "is_accountant", EmitDefaultValue = true)]
        public bool? IsAccountant
        {
            get => _IsAccountant;
            set
            {
                _IsAccountant = value;
                _flagIsAccountant = true;
            }
        }

        /// <summary>
        ///     Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }

        /// <summary>
        ///     Returns false as Email should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmail()
        {
            return _flagEmail;
        }

        /// <summary>
        ///     Returns false as AccessInfo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccessInfo()
        {
            return _flagAccessInfo;
        }

        /// <summary>
        ///     Returns false as PlanInfo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePlanInfo()
        {
            return _flagPlanInfo;
        }

        /// <summary>
        ///     Returns false as AccountantId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccountantId()
        {
            return _flagAccountantId;
        }

        /// <summary>
        ///     Returns false as IsAccountant should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsAccountant()
        {
            return _flagIsAccountant;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AccessInfo: ").Append(AccessInfo).Append("\n");
            sb.Append("  PlanInfo: ").Append(PlanInfo).Append("\n");
            sb.Append("  AccountantId: ").Append(AccountantId).Append("\n");
            sb.Append("  IsAccountant: ").Append(IsAccountant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CompanyInfo);
        }

        /// <summary>
        ///     Returns true if CompanyInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyInfo input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Email == input.Email ||
                    (Email != null &&
                     Email.Equals(input.Email))
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    AccessInfo == input.AccessInfo ||
                    (AccessInfo != null &&
                     AccessInfo.Equals(input.AccessInfo))
                ) &&
                (
                    PlanInfo == input.PlanInfo ||
                    (PlanInfo != null &&
                     PlanInfo.Equals(input.PlanInfo))
                ) &&
                (
                    AccountantId == input.AccountantId ||
                    (AccountantId != null &&
                     AccountantId.Equals(input.AccountantId))
                ) &&
                (
                    IsAccountant == input.IsAccountant ||
                    (IsAccountant != null &&
                     IsAccountant.Equals(input.IsAccountant))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
                if (Email != null) hashCode = hashCode * 59 + Email.GetHashCode();
                hashCode = hashCode * 59 + Type.GetHashCode();
                if (AccessInfo != null) hashCode = hashCode * 59 + AccessInfo.GetHashCode();
                if (PlanInfo != null) hashCode = hashCode * 59 + PlanInfo.GetHashCode();
                if (AccountantId != null) hashCode = hashCode * 59 + AccountantId.GetHashCode();
                if (IsAccountant != null) hashCode = hashCode * 59 + IsAccountant.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}