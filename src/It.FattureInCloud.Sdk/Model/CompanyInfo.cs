// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// CompanyInfo
    /// </summary>
    public partial class CompanyInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyInfo" /> class.
        /// </summary>
        /// <param name="id">Company id</param>
        /// <param name="name">Company name</param>
        /// <param name="email">Company email</param>
        /// <param name="type">type</param>
        /// <param name="accessInfo">accessInfo</param>
        /// <param name="ficLicenseExpire">ficLicenseExpire</param>
        /// <param name="ficPlanName">ficPlanName</param>
        /// <param name="planInfo">planInfo</param>
        /// <param name="accountantId">Company accountant id</param>
        /// <param name="isAccountant">Is the logged account an accountant.</param>
        [JsonConstructor]
        public CompanyInfo(Option<int?> id = default, Option<string> name = default, Option<string> email = default, Option<CompanyType?> type = default, Option<CompanyInfoAccessInfo> accessInfo = default, Option<DateTimeOffset?> ficLicenseExpire = default, Option<FattureInCloudPlanType?> ficPlanName = default, Option<CompanyInfoPlanInfo> planInfo = default, Option<int?> accountantId = default, Option<bool?> isAccountant = default)
        {
            IdOption = id;
            NameOption = name;
            EmailOption = email;
            TypeOption = type;
            AccessInfoOption = accessInfo;
            FicLicenseExpireOption = ficLicenseExpire;
            FicPlanNameOption = ficPlanName;
            PlanInfoOption = planInfo;
            AccountantIdOption = accountantId;
            IsAccountantOption = isAccountant;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CompanyType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public CompanyType? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<CompanyType?>(value); } }

        /// <summary>
        /// Used to track the state of FicPlanName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FattureInCloudPlanType?> FicPlanNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicPlanName
        /// </summary>
        [JsonPropertyName("fic_plan_name")]
        public FattureInCloudPlanType? FicPlanName { get { return this.FicPlanNameOption; } set { this.FicPlanNameOption = new Option<FattureInCloudPlanType?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Company id
        /// </summary>
        /// <value>Company id</value>
        /* <example>12345</example> */
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Company name
        /// </summary>
        /// <value>Company name</value>
        /* <example>Mario Rossi S.r.l.</example> */
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EmailOption { get; private set; }

        /// <summary>
        /// Company email
        /// </summary>
        /// <value>Company email</value>
        /* <example>mario@rossi-example.it</example> */
        [JsonPropertyName("email")]
        public string Email { get { return this.EmailOption; } set { this.EmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AccessInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CompanyInfoAccessInfo> AccessInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccessInfo
        /// </summary>
        [JsonPropertyName("access_info")]
        public CompanyInfoAccessInfo AccessInfo { get { return this.AccessInfoOption; } set { this.AccessInfoOption = new Option<CompanyInfoAccessInfo>(value); } }

        /// <summary>
        /// Used to track the state of FicLicenseExpire
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> FicLicenseExpireOption { get; private set; }

        /// <summary>
        /// Gets or Sets FicLicenseExpire
        /// </summary>
        [JsonPropertyName("fic_license_expire")]
        public DateTimeOffset? FicLicenseExpire { get { return this.FicLicenseExpireOption; } set { this.FicLicenseExpireOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of PlanInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CompanyInfoPlanInfo> PlanInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets PlanInfo
        /// </summary>
        [JsonPropertyName("plan_info")]
        public CompanyInfoPlanInfo PlanInfo { get { return this.PlanInfoOption; } set { this.PlanInfoOption = new Option<CompanyInfoPlanInfo>(value); } }

        /// <summary>
        /// Used to track the state of AccountantId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AccountantIdOption { get; private set; }

        /// <summary>
        /// Company accountant id
        /// </summary>
        /// <value>Company accountant id</value>
        [JsonPropertyName("accountant_id")]
        public int? AccountantId { get { return this.AccountantIdOption; } set { this.AccountantIdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of IsAccountant
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAccountantOption { get; private set; }

        /// <summary>
        /// Is the logged account an accountant.
        /// </summary>
        /// <value>Is the logged account an accountant.</value>
        [JsonPropertyName("is_accountant")]
        public bool? IsAccountant { get { return this.IsAccountantOption; } set { this.IsAccountantOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AccessInfo: ").Append(AccessInfo).Append("\n");
            sb.Append("  FicLicenseExpire: ").Append(FicLicenseExpire).Append("\n");
            sb.Append("  FicPlanName: ").Append(FicPlanName).Append("\n");
            sb.Append("  PlanInfo: ").Append(PlanInfo).Append("\n");
            sb.Append("  AccountantId: ").Append(AccountantId).Append("\n");
            sb.Append("  IsAccountant: ").Append(IsAccountant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="CompanyInfo" />
    /// </summary>
    public class CompanyInfoJsonConverter : JsonConverter<CompanyInfo>
    {
        /// <summary>
        /// The format to use to serialize FicLicenseExpire
        /// </summary>
        public static string FicLicenseExpireFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="CompanyInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CompanyInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string> name = default;
            Option<string> email = default;
            Option<CompanyType?> type = default;
            Option<CompanyInfoAccessInfo> accessInfo = default;
            Option<DateTimeOffset?> ficLicenseExpire = default;
            Option<FattureInCloudPlanType?> ficPlanName = default;
            Option<CompanyInfoPlanInfo> planInfo = default;
            Option<int?> accountantId = default;
            Option<bool?> isAccountant = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CompanyType?>(CompanyTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "access_info":
                            accessInfo = new Option<CompanyInfoAccessInfo>(JsonSerializer.Deserialize<CompanyInfoAccessInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fic_license_expire":
                            ficLicenseExpire = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fic_plan_name":
                            string ficPlanNameRawValue = utf8JsonReader.GetString();
                            if (ficPlanNameRawValue != null)
                                ficPlanName = new Option<FattureInCloudPlanType?>(FattureInCloudPlanTypeValueConverter.FromStringOrDefault(ficPlanNameRawValue));
                            break;
                        case "plan_info":
                            planInfo = new Option<CompanyInfoPlanInfo>(JsonSerializer.Deserialize<CompanyInfoPlanInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "accountant_id":
                            accountantId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_accountant":
                            isAccountant = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CompanyInfo.");

            if (ficPlanName.IsSet && ficPlanName.Value == null)
                throw new ArgumentNullException(nameof(ficPlanName), "Property is not nullable for class CompanyInfo.");

            return new CompanyInfo(id, name, email, type, accessInfo, ficLicenseExpire, ficPlanName, planInfo, accountantId, isAccountant);
        }

        /// <summary>
        /// Serializes a <see cref="CompanyInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="companyInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CompanyInfo companyInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, companyInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CompanyInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="companyInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CompanyInfo companyInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (companyInfo.IdOption.IsSet)
                if (companyInfo.IdOption.Value != null)
                    writer.WriteNumber("id", companyInfo.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (companyInfo.NameOption.IsSet)
                if (companyInfo.NameOption.Value != null)
                    writer.WriteString("name", companyInfo.Name);
                else
                    writer.WriteNull("name");

            if (companyInfo.EmailOption.IsSet)
                if (companyInfo.EmailOption.Value != null)
                    writer.WriteString("email", companyInfo.Email);
                else
                    writer.WriteNull("email");

            if (companyInfo.TypeOption.IsSet)
            {
                var typeRawValue = CompanyTypeValueConverter.ToJsonValue(companyInfo.Type.Value);
                writer.WriteString("type", typeRawValue);
            }
            if (companyInfo.AccessInfoOption.IsSet)
                if (companyInfo.AccessInfoOption.Value != null)
                {
                    writer.WritePropertyName("access_info");
                    JsonSerializer.Serialize(writer, companyInfo.AccessInfo, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("access_info");
            if (companyInfo.FicLicenseExpireOption.IsSet)
                if (companyInfo.FicLicenseExpireOption.Value != null)
                    writer.WriteString("fic_license_expire", companyInfo.FicLicenseExpireOption.Value.Value.ToString(FicLicenseExpireFormat));
                else
                    writer.WriteNull("fic_license_expire");

            if (companyInfo.FicPlanNameOption.IsSet)
            {
                var ficPlanNameRawValue = FattureInCloudPlanTypeValueConverter.ToJsonValue(companyInfo.FicPlanName.Value);
                writer.WriteString("fic_plan_name", ficPlanNameRawValue);
            }
            if (companyInfo.PlanInfoOption.IsSet)
                if (companyInfo.PlanInfoOption.Value != null)
                {
                    writer.WritePropertyName("plan_info");
                    JsonSerializer.Serialize(writer, companyInfo.PlanInfo, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("plan_info");
            if (companyInfo.AccountantIdOption.IsSet)
                if (companyInfo.AccountantIdOption.Value != null)
                    writer.WriteNumber("accountant_id", companyInfo.AccountantIdOption.Value.Value);
                else
                    writer.WriteNull("accountant_id");

            if (companyInfo.IsAccountantOption.IsSet)
                if (companyInfo.IsAccountantOption.Value != null)
                    writer.WriteBoolean("is_accountant", companyInfo.IsAccountantOption.Value.Value);
                else
                    writer.WriteNull("is_accountant");
        }
    }
}
