/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Detailed information for the company.
    /// </summary>
    [DataContract(Name = "CompanyInfo")]
    public partial class CompanyInfo : IEquatable<CompanyInfo>, IValidatableObject
    {
        /// <summary>
        /// Company type.
        /// </summary>
        /// <value>Company type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Company for value: company
            /// </summary>
            [EnumMember(Value = "company")]
            Company = 1,

            /// <summary>
            /// Enum Accountant for value: accountant
            /// </summary>
            [EnumMember(Value = "accountant")]
            Accountant = 2

        }


        /// <summary>
        /// Company type.
        /// </summary>
        /// <value>Company type.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Company FIC account plan.
        /// </summary>
        /// <value>Company FIC account plan.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FicPlanNameEnum
        {
            /// <summary>
            /// Enum Trial for value: trial
            /// </summary>
            [EnumMember(Value = "trial")]
            Trial = 1,

            /// <summary>
            /// Enum Standard for value: standard
            /// </summary>
            [EnumMember(Value = "standard")]
            Standard = 2,

            /// <summary>
            /// Enum Premium for value: premium
            /// </summary>
            [EnumMember(Value = "premium")]
            Premium = 3,

            /// <summary>
            /// Enum PremiumPlus for value: premium_plus
            /// </summary>
            [EnumMember(Value = "premium_plus")]
            PremiumPlus = 4

        }


        /// <summary>
        /// Company FIC account plan.
        /// </summary>
        /// <value>Company FIC account plan.</value>
        [DataMember(Name = "fic_plan_name", EmitDefaultValue = false)]
        public FicPlanNameEnum? FicPlanName { get; set; }
        /// <summary>
        /// Company DIC account plan.
        /// </summary>
        /// <value>Company DIC account plan.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DicPlanEnum
        {
            /// <summary>
            /// Enum Trial for value: trial
            /// </summary>
            [EnumMember(Value = "trial")]
            Trial = 1

        }


        /// <summary>
        /// Company DIC account plan.
        /// </summary>
        /// <value>Company DIC account plan.</value>
        [DataMember(Name = "dic_plan", EmitDefaultValue = false)]
        public DicPlanEnum? DicPlan { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyInfo" /> class.
        /// </summary>
        /// <param name="id">Company unique identifier..</param>
        /// <param name="name">Company name..</param>
        /// <param name="email">Company email..</param>
        /// <param name="type">Company type..</param>
        /// <param name="fic">Determine if the company has a FIC account..</param>
        /// <param name="ficPlanName">Company FIC account plan..</param>
        /// <param name="ficLicenseType">Company FIC account plan. .</param>
        /// <param name="ficPaymentSubject">Company FIC account payment subject..</param>
        /// <param name="ficLicenseExpire">Company FIC license expiration date..</param>
        /// <param name="ficSignupDate">FIC account sign up date..</param>
        /// <param name="useFic">Determine if the FIC account is actually used. If type&#x3D;\&quot;company\&quot; this is always true; if type&#x3D;\&quot;accountant\&quot; it can be true or false. If false, it means that the accountant uses FIC only to control other companies and not to control itself..</param>
        /// <param name="ficNeedSetup">Indicate that the initial setup for FIC is required..</param>
        /// <param name="dic">Determine if the company has a DIC account..</param>
        /// <param name="dicPlan">Company DIC account plan..</param>
        /// <param name="dicLicenseExpire">Company FIC license expiration date..</param>
        /// <param name="useDic">Determine if the DIC account is actually used. If type&#x3D;“company” this is always true; if type&#x3D;“accountant” it can be true or false. If false, it means that the accountant uses DIC only to control other companies and not to control itself..</param>
        /// <param name="dicNeedSetup">Indicate that the initial setup for DIC is required..</param>
        /// <param name="accessInfo">accessInfo.</param>
        /// <param name="planInfo">planInfo.</param>
        /// <param name="canUseCoupon">Determine if a coupon can be used..</param>
        /// <param name="accountantId">Accountant unique identifier..</param>
        /// <param name="dicLicenseType">Company DIC account license type..</param>
        /// <param name="dicPaymentSubject">Company DIC account payment subject..</param>
        /// <param name="dicPlanName">Company DIC account plan name..</param>
        /// <param name="dicSignupDate">DIC account sign up date..</param>
        /// <param name="isAccountant">Determine if the logged account is an accountant..</param>
        /// <param name="registrationService">registrationService.</param>
        public CompanyInfo(int id = default(int), string name = default(string), string email = default(string), TypeEnum? type = default(TypeEnum?), bool fic = default(bool), FicPlanNameEnum? ficPlanName = default(FicPlanNameEnum?), string ficLicenseType = default(string), string ficPaymentSubject = default(string), DateTime? ficLicenseExpire = default(DateTime?), string ficSignupDate = default(string), bool useFic = default(bool), bool ficNeedSetup = default(bool), bool dic = default(bool), DicPlanEnum? dicPlan = default(DicPlanEnum?), DateTime? dicLicenseExpire = default(DateTime?), bool useDic = default(bool), bool dicNeedSetup = default(bool), CompanyInfoAccessInfo accessInfo = default(CompanyInfoAccessInfo), CompanyInfoPlanInfo planInfo = default(CompanyInfoPlanInfo), bool canUseCoupon = default(bool), int? accountantId = default(int?), string dicLicenseType = default(string), string dicPaymentSubject = default(string), string dicPlanName = default(string), string dicSignupDate = default(string), bool isAccountant = default(bool), string registrationService = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.Email = email;
            this.Type = type;
            this.Fic = fic;
            this.FicPlanName = ficPlanName;
            this.FicLicenseType = ficLicenseType;
            this.FicPaymentSubject = ficPaymentSubject;
            this.FicLicenseExpire = ficLicenseExpire;
            this.FicSignupDate = ficSignupDate;
            this.UseFic = useFic;
            this.FicNeedSetup = ficNeedSetup;
            this.Dic = dic;
            this.DicPlan = dicPlan;
            this.DicLicenseExpire = dicLicenseExpire;
            this.UseDic = useDic;
            this.DicNeedSetup = dicNeedSetup;
            this.AccessInfo = accessInfo;
            this.PlanInfo = planInfo;
            this.CanUseCoupon = canUseCoupon;
            this.AccountantId = accountantId;
            this.DicLicenseType = dicLicenseType;
            this.DicPaymentSubject = dicPaymentSubject;
            this.DicPlanName = dicPlanName;
            this.DicSignupDate = dicSignupDate;
            this.IsAccountant = isAccountant;
            this.RegistrationService = registrationService;
        }

        /// <summary>
        /// Company unique identifier.
        /// </summary>
        /// <value>Company unique identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Company name.
        /// </summary>
        /// <value>Company name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Company email.
        /// </summary>
        /// <value>Company email.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Determine if the company has a FIC account.
        /// </summary>
        /// <value>Determine if the company has a FIC account.</value>
        [DataMember(Name = "fic", EmitDefaultValue = true)]
        public bool Fic { get; set; }

        /// <summary>
        /// Company FIC account plan. 
        /// </summary>
        /// <value>Company FIC account plan. </value>
        [DataMember(Name = "fic_license_type", EmitDefaultValue = false)]
        public string FicLicenseType { get; set; }

        /// <summary>
        /// Company FIC account payment subject.
        /// </summary>
        /// <value>Company FIC account payment subject.</value>
        [DataMember(Name = "fic_payment_subject", EmitDefaultValue = false)]
        public string FicPaymentSubject { get; set; }

        /// <summary>
        /// Company FIC license expiration date.
        /// </summary>
        /// <value>Company FIC license expiration date.</value>
        [DataMember(Name = "fic_license_expire", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? FicLicenseExpire { get; set; }

        /// <summary>
        /// FIC account sign up date.
        /// </summary>
        /// <value>FIC account sign up date.</value>
        [DataMember(Name = "fic_signup_date", EmitDefaultValue = false)]
        public string FicSignupDate { get; set; }

        /// <summary>
        /// Determine if the FIC account is actually used. If type&#x3D;\&quot;company\&quot; this is always true; if type&#x3D;\&quot;accountant\&quot; it can be true or false. If false, it means that the accountant uses FIC only to control other companies and not to control itself.
        /// </summary>
        /// <value>Determine if the FIC account is actually used. If type&#x3D;\&quot;company\&quot; this is always true; if type&#x3D;\&quot;accountant\&quot; it can be true or false. If false, it means that the accountant uses FIC only to control other companies and not to control itself.</value>
        [DataMember(Name = "use_fic", EmitDefaultValue = true)]
        public bool UseFic { get; set; }

        /// <summary>
        /// Indicate that the initial setup for FIC is required.
        /// </summary>
        /// <value>Indicate that the initial setup for FIC is required.</value>
        [DataMember(Name = "fic_need_setup", EmitDefaultValue = true)]
        public bool FicNeedSetup { get; set; }

        /// <summary>
        /// Determine if the company has a DIC account.
        /// </summary>
        /// <value>Determine if the company has a DIC account.</value>
        [DataMember(Name = "dic", EmitDefaultValue = true)]
        public bool Dic { get; set; }

        /// <summary>
        /// Company FIC license expiration date.
        /// </summary>
        /// <value>Company FIC license expiration date.</value>
        [DataMember(Name = "dic_license_expire", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DicLicenseExpire { get; set; }

        /// <summary>
        /// Determine if the DIC account is actually used. If type&#x3D;“company” this is always true; if type&#x3D;“accountant” it can be true or false. If false, it means that the accountant uses DIC only to control other companies and not to control itself.
        /// </summary>
        /// <value>Determine if the DIC account is actually used. If type&#x3D;“company” this is always true; if type&#x3D;“accountant” it can be true or false. If false, it means that the accountant uses DIC only to control other companies and not to control itself.</value>
        [DataMember(Name = "use_dic", EmitDefaultValue = true)]
        public bool UseDic { get; set; }

        /// <summary>
        /// Indicate that the initial setup for DIC is required.
        /// </summary>
        /// <value>Indicate that the initial setup for DIC is required.</value>
        [DataMember(Name = "dic_need_setup", EmitDefaultValue = true)]
        public bool DicNeedSetup { get; set; }

        /// <summary>
        /// Gets or Sets AccessInfo
        /// </summary>
        [DataMember(Name = "access_info", EmitDefaultValue = false)]
        public CompanyInfoAccessInfo AccessInfo { get; set; }

        /// <summary>
        /// Gets or Sets PlanInfo
        /// </summary>
        [DataMember(Name = "plan_info", EmitDefaultValue = false)]
        public CompanyInfoPlanInfo PlanInfo { get; set; }

        /// <summary>
        /// Determine if a coupon can be used.
        /// </summary>
        /// <value>Determine if a coupon can be used.</value>
        [DataMember(Name = "can_use_coupon", EmitDefaultValue = true)]
        public bool CanUseCoupon { get; set; }

        /// <summary>
        /// Accountant unique identifier.
        /// </summary>
        /// <value>Accountant unique identifier.</value>
        [DataMember(Name = "accountant_id", EmitDefaultValue = true)]
        public int? AccountantId { get; set; }

        /// <summary>
        /// Company DIC account license type.
        /// </summary>
        /// <value>Company DIC account license type.</value>
        [DataMember(Name = "dic_license_type", EmitDefaultValue = true)]
        public string DicLicenseType { get; set; }

        /// <summary>
        /// Company DIC account payment subject.
        /// </summary>
        /// <value>Company DIC account payment subject.</value>
        [DataMember(Name = "dic_payment_subject", EmitDefaultValue = false)]
        public string DicPaymentSubject { get; set; }

        /// <summary>
        /// Company DIC account plan name.
        /// </summary>
        /// <value>Company DIC account plan name.</value>
        [DataMember(Name = "dic_plan_name", EmitDefaultValue = false)]
        public string DicPlanName { get; set; }

        /// <summary>
        /// DIC account sign up date.
        /// </summary>
        /// <value>DIC account sign up date.</value>
        [DataMember(Name = "dic_signup_date", EmitDefaultValue = true)]
        public string DicSignupDate { get; set; }

        /// <summary>
        /// Determine if the logged account is an accountant.
        /// </summary>
        /// <value>Determine if the logged account is an accountant.</value>
        [DataMember(Name = "is_accountant", EmitDefaultValue = true)]
        public bool IsAccountant { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationService
        /// </summary>
        [DataMember(Name = "registration_service", EmitDefaultValue = false)]
        public string RegistrationService { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Fic: ").Append(Fic).Append("\n");
            sb.Append("  FicPlanName: ").Append(FicPlanName).Append("\n");
            sb.Append("  FicLicenseType: ").Append(FicLicenseType).Append("\n");
            sb.Append("  FicPaymentSubject: ").Append(FicPaymentSubject).Append("\n");
            sb.Append("  FicLicenseExpire: ").Append(FicLicenseExpire).Append("\n");
            sb.Append("  FicSignupDate: ").Append(FicSignupDate).Append("\n");
            sb.Append("  UseFic: ").Append(UseFic).Append("\n");
            sb.Append("  FicNeedSetup: ").Append(FicNeedSetup).Append("\n");
            sb.Append("  Dic: ").Append(Dic).Append("\n");
            sb.Append("  DicPlan: ").Append(DicPlan).Append("\n");
            sb.Append("  DicLicenseExpire: ").Append(DicLicenseExpire).Append("\n");
            sb.Append("  UseDic: ").Append(UseDic).Append("\n");
            sb.Append("  DicNeedSetup: ").Append(DicNeedSetup).Append("\n");
            sb.Append("  AccessInfo: ").Append(AccessInfo).Append("\n");
            sb.Append("  PlanInfo: ").Append(PlanInfo).Append("\n");
            sb.Append("  CanUseCoupon: ").Append(CanUseCoupon).Append("\n");
            sb.Append("  AccountantId: ").Append(AccountantId).Append("\n");
            sb.Append("  DicLicenseType: ").Append(DicLicenseType).Append("\n");
            sb.Append("  DicPaymentSubject: ").Append(DicPaymentSubject).Append("\n");
            sb.Append("  DicPlanName: ").Append(DicPlanName).Append("\n");
            sb.Append("  DicSignupDate: ").Append(DicSignupDate).Append("\n");
            sb.Append("  IsAccountant: ").Append(IsAccountant).Append("\n");
            sb.Append("  RegistrationService: ").Append(RegistrationService).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyInfo);
        }

        /// <summary>
        /// Returns true if CompanyInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Fic == input.Fic ||
                    this.Fic.Equals(input.Fic)
                ) && 
                (
                    this.FicPlanName == input.FicPlanName ||
                    this.FicPlanName.Equals(input.FicPlanName)
                ) && 
                (
                    this.FicLicenseType == input.FicLicenseType ||
                    (this.FicLicenseType != null &&
                    this.FicLicenseType.Equals(input.FicLicenseType))
                ) && 
                (
                    this.FicPaymentSubject == input.FicPaymentSubject ||
                    (this.FicPaymentSubject != null &&
                    this.FicPaymentSubject.Equals(input.FicPaymentSubject))
                ) && 
                (
                    this.FicLicenseExpire == input.FicLicenseExpire ||
                    (this.FicLicenseExpire != null &&
                    this.FicLicenseExpire.Equals(input.FicLicenseExpire))
                ) && 
                (
                    this.FicSignupDate == input.FicSignupDate ||
                    (this.FicSignupDate != null &&
                    this.FicSignupDate.Equals(input.FicSignupDate))
                ) && 
                (
                    this.UseFic == input.UseFic ||
                    this.UseFic.Equals(input.UseFic)
                ) && 
                (
                    this.FicNeedSetup == input.FicNeedSetup ||
                    this.FicNeedSetup.Equals(input.FicNeedSetup)
                ) && 
                (
                    this.Dic == input.Dic ||
                    this.Dic.Equals(input.Dic)
                ) && 
                (
                    this.DicPlan == input.DicPlan ||
                    this.DicPlan.Equals(input.DicPlan)
                ) && 
                (
                    this.DicLicenseExpire == input.DicLicenseExpire ||
                    (this.DicLicenseExpire != null &&
                    this.DicLicenseExpire.Equals(input.DicLicenseExpire))
                ) && 
                (
                    this.UseDic == input.UseDic ||
                    this.UseDic.Equals(input.UseDic)
                ) && 
                (
                    this.DicNeedSetup == input.DicNeedSetup ||
                    this.DicNeedSetup.Equals(input.DicNeedSetup)
                ) && 
                (
                    this.AccessInfo == input.AccessInfo ||
                    (this.AccessInfo != null &&
                    this.AccessInfo.Equals(input.AccessInfo))
                ) && 
                (
                    this.PlanInfo == input.PlanInfo ||
                    (this.PlanInfo != null &&
                    this.PlanInfo.Equals(input.PlanInfo))
                ) && 
                (
                    this.CanUseCoupon == input.CanUseCoupon ||
                    this.CanUseCoupon.Equals(input.CanUseCoupon)
                ) && 
                (
                    this.AccountantId == input.AccountantId ||
                    (this.AccountantId != null &&
                    this.AccountantId.Equals(input.AccountantId))
                ) && 
                (
                    this.DicLicenseType == input.DicLicenseType ||
                    (this.DicLicenseType != null &&
                    this.DicLicenseType.Equals(input.DicLicenseType))
                ) && 
                (
                    this.DicPaymentSubject == input.DicPaymentSubject ||
                    (this.DicPaymentSubject != null &&
                    this.DicPaymentSubject.Equals(input.DicPaymentSubject))
                ) && 
                (
                    this.DicPlanName == input.DicPlanName ||
                    (this.DicPlanName != null &&
                    this.DicPlanName.Equals(input.DicPlanName))
                ) && 
                (
                    this.DicSignupDate == input.DicSignupDate ||
                    (this.DicSignupDate != null &&
                    this.DicSignupDate.Equals(input.DicSignupDate))
                ) && 
                (
                    this.IsAccountant == input.IsAccountant ||
                    this.IsAccountant.Equals(input.IsAccountant)
                ) && 
                (
                    this.RegistrationService == input.RegistrationService ||
                    (this.RegistrationService != null &&
                    this.RegistrationService.Equals(input.RegistrationService))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Fic.GetHashCode();
                hashCode = hashCode * 59 + this.FicPlanName.GetHashCode();
                if (this.FicLicenseType != null)
                    hashCode = hashCode * 59 + this.FicLicenseType.GetHashCode();
                if (this.FicPaymentSubject != null)
                    hashCode = hashCode * 59 + this.FicPaymentSubject.GetHashCode();
                if (this.FicLicenseExpire != null)
                    hashCode = hashCode * 59 + this.FicLicenseExpire.GetHashCode();
                if (this.FicSignupDate != null)
                    hashCode = hashCode * 59 + this.FicSignupDate.GetHashCode();
                hashCode = hashCode * 59 + this.UseFic.GetHashCode();
                hashCode = hashCode * 59 + this.FicNeedSetup.GetHashCode();
                hashCode = hashCode * 59 + this.Dic.GetHashCode();
                hashCode = hashCode * 59 + this.DicPlan.GetHashCode();
                if (this.DicLicenseExpire != null)
                    hashCode = hashCode * 59 + this.DicLicenseExpire.GetHashCode();
                hashCode = hashCode * 59 + this.UseDic.GetHashCode();
                hashCode = hashCode * 59 + this.DicNeedSetup.GetHashCode();
                if (this.AccessInfo != null)
                    hashCode = hashCode * 59 + this.AccessInfo.GetHashCode();
                if (this.PlanInfo != null)
                    hashCode = hashCode * 59 + this.PlanInfo.GetHashCode();
                hashCode = hashCode * 59 + this.CanUseCoupon.GetHashCode();
                if (this.AccountantId != null)
                    hashCode = hashCode * 59 + this.AccountantId.GetHashCode();
                if (this.DicLicenseType != null)
                    hashCode = hashCode * 59 + this.DicLicenseType.GetHashCode();
                if (this.DicPaymentSubject != null)
                    hashCode = hashCode * 59 + this.DicPaymentSubject.GetHashCode();
                if (this.DicPlanName != null)
                    hashCode = hashCode * 59 + this.DicPlanName.GetHashCode();
                if (this.DicSignupDate != null)
                    hashCode = hashCode * 59 + this.DicSignupDate.GetHashCode();
                hashCode = hashCode * 59 + this.IsAccountant.GetHashCode();
                if (this.RegistrationService != null)
                    hashCode = hashCode * 59 + this.RegistrationService.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
