/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.11
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// CompanyInfo
    /// </summary>
    [DataContract(Name = "CompanyInfo")]
    public partial class CompanyInfo : IEquatable<CompanyInfo>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public CompanyType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyInfo" /> class.
        /// </summary>
        /// <param name="id">Company unique identifier..</param>
        /// <param name="name">Company name..</param>
        /// <param name="email">Company email..</param>
        /// <param name="type">type.</param>
        /// <param name="accessInfo">accessInfo.</param>
        /// <param name="planInfo">planInfo.</param>
        /// <param name="accountantId">Accountant unique identifier..</param>
        /// <param name="isAccountant">Determine if the logged account is an accountant..</param>
        public CompanyInfo(int? id = default(int?), string name = default(string), string email = default(string), CompanyType? type = default(CompanyType?), CompanyInfoAccessInfo accessInfo = default(CompanyInfoAccessInfo), CompanyInfoPlanInfo planInfo = default(CompanyInfoPlanInfo), int? accountantId = default(int?), bool? isAccountant = default(bool?))
        {
            this.Id = id;
            this.Name = name;
            this.Email = email;
            this.Type = type;
            this.AccessInfo = accessInfo;
            this.PlanInfo = planInfo;
            this.AccountantId = accountantId;
            this.IsAccountant = isAccountant;
        }

        /// <summary>
        /// Company unique identifier.
        /// </summary>
        /// <value>Company unique identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id { get; set; }

        /// <summary>
        /// Company name.
        /// </summary>
        /// <value>Company name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Company email.
        /// </summary>
        /// <value>Company email.</value>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets AccessInfo
        /// </summary>
        [DataMember(Name = "access_info", EmitDefaultValue = true)]
        public CompanyInfoAccessInfo AccessInfo { get; set; }

        /// <summary>
        /// Gets or Sets PlanInfo
        /// </summary>
        [DataMember(Name = "plan_info", EmitDefaultValue = true)]
        public CompanyInfoPlanInfo PlanInfo { get; set; }

        /// <summary>
        /// Accountant unique identifier.
        /// </summary>
        /// <value>Accountant unique identifier.</value>
        [DataMember(Name = "accountant_id", EmitDefaultValue = true)]
        public int? AccountantId { get; set; }

        /// <summary>
        /// Determine if the logged account is an accountant.
        /// </summary>
        /// <value>Determine if the logged account is an accountant.</value>
        [DataMember(Name = "is_accountant", EmitDefaultValue = true)]
        public bool? IsAccountant { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AccessInfo: ").Append(AccessInfo).Append("\n");
            sb.Append("  PlanInfo: ").Append(PlanInfo).Append("\n");
            sb.Append("  AccountantId: ").Append(AccountantId).Append("\n");
            sb.Append("  IsAccountant: ").Append(IsAccountant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyInfo);
        }

        /// <summary>
        /// Returns true if CompanyInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.AccessInfo == input.AccessInfo ||
                    (this.AccessInfo != null &&
                    this.AccessInfo.Equals(input.AccessInfo))
                ) && 
                (
                    this.PlanInfo == input.PlanInfo ||
                    (this.PlanInfo != null &&
                    this.PlanInfo.Equals(input.PlanInfo))
                ) && 
                (
                    this.AccountantId == input.AccountantId ||
                    (this.AccountantId != null &&
                    this.AccountantId.Equals(input.AccountantId))
                ) && 
                (
                    this.IsAccountant == input.IsAccountant ||
                    (this.IsAccountant != null &&
                    this.IsAccountant.Equals(input.IsAccountant))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.AccessInfo != null)
                {
                    hashCode = (hashCode * 59) + this.AccessInfo.GetHashCode();
                }
                if (this.PlanInfo != null)
                {
                    hashCode = (hashCode * 59) + this.PlanInfo.GetHashCode();
                }
                if (this.AccountantId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountantId.GetHashCode();
                }
                if (this.IsAccountant != null)
                {
                    hashCode = (hashCode * 59) + this.IsAccountant.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
