// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Email
    /// </summary>
    public partial class Email : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Email" /> class.
        /// </summary>
        /// <param name="id">Email id</param>
        /// <param name="status">status</param>
        /// <param name="sentDate">Email sent date</param>
        /// <param name="errorsCount">Email errors count</param>
        /// <param name="errorLog">Email errors log</param>
        /// <param name="fromEmail">Email sender email</param>
        /// <param name="fromName">Email sender name</param>
        /// <param name="toEmail">Email recipient email</param>
        /// <param name="toName">Email receipient name</param>
        /// <param name="subject">Email subject</param>
        /// <param name="content">Email content</param>
        /// <param name="copyTo">Email cc</param>
        /// <param name="recipientStatus">recipientStatus</param>
        /// <param name="recipientDate">Email recipient date</param>
        /// <param name="kind">Email kind</param>
        /// <param name="attachments">Email attachments</param>
        [JsonConstructor]
        public Email(Option<int?> id = default, Option<EmailStatus?> status = default, Option<string> sentDate = default, Option<int?> errorsCount = default, Option<string> errorLog = default, Option<string> fromEmail = default, Option<string> fromName = default, Option<string> toEmail = default, Option<string> toName = default, Option<string> subject = default, Option<string> content = default, Option<string> copyTo = default, Option<EmailRecipientStatus?> recipientStatus = default, Option<DateTimeOffset?> recipientDate = default, Option<string> kind = default, Option<List<EmailAttachment>> attachments = default)
        {
            IdOption = id;
            StatusOption = status;
            SentDateOption = sentDate;
            ErrorsCountOption = errorsCount;
            ErrorLogOption = errorLog;
            FromEmailOption = fromEmail;
            FromNameOption = fromName;
            ToEmailOption = toEmail;
            ToNameOption = toName;
            SubjectOption = subject;
            ContentOption = content;
            CopyToOption = copyTo;
            RecipientStatusOption = recipientStatus;
            RecipientDateOption = recipientDate;
            KindOption = kind;
            AttachmentsOption = attachments;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmailStatus?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public EmailStatus? Status { get { return this.StatusOption; } set { this.StatusOption = new Option<EmailStatus?>(value); } }

        /// <summary>
        /// Used to track the state of RecipientStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmailRecipientStatus?> RecipientStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets RecipientStatus
        /// </summary>
        [JsonPropertyName("recipient_status")]
        public EmailRecipientStatus? RecipientStatus { get { return this.RecipientStatusOption; } set { this.RecipientStatusOption = new Option<EmailRecipientStatus?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Email id
        /// </summary>
        /// <value>Email id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of SentDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SentDateOption { get; private set; }

        /// <summary>
        /// Email sent date
        /// </summary>
        /// <value>Email sent date</value>
        [JsonPropertyName("sent_date")]
        public string SentDate { get { return this.SentDateOption; } set { this.SentDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ErrorsCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ErrorsCountOption { get; private set; }

        /// <summary>
        /// Email errors count
        /// </summary>
        /// <value>Email errors count</value>
        [JsonPropertyName("errors_count")]
        public int? ErrorsCount { get { return this.ErrorsCountOption; } set { this.ErrorsCountOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ErrorLog
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorLogOption { get; private set; }

        /// <summary>
        /// Email errors log
        /// </summary>
        /// <value>Email errors log</value>
        [JsonPropertyName("error_log")]
        public string ErrorLog { get { return this.ErrorLogOption; } set { this.ErrorLogOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FromEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromEmailOption { get; private set; }

        /// <summary>
        /// Email sender email
        /// </summary>
        /// <value>Email sender email</value>
        [JsonPropertyName("from_email")]
        public string FromEmail { get { return this.FromEmailOption; } set { this.FromEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FromName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromNameOption { get; private set; }

        /// <summary>
        /// Email sender name
        /// </summary>
        /// <value>Email sender name</value>
        [JsonPropertyName("from_name")]
        public string FromName { get { return this.FromNameOption; } set { this.FromNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ToEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ToEmailOption { get; private set; }

        /// <summary>
        /// Email recipient email
        /// </summary>
        /// <value>Email recipient email</value>
        [JsonPropertyName("to_email")]
        public string ToEmail { get { return this.ToEmailOption; } set { this.ToEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ToName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ToNameOption { get; private set; }

        /// <summary>
        /// Email receipient name
        /// </summary>
        /// <value>Email receipient name</value>
        [JsonPropertyName("to_name")]
        public string ToName { get { return this.ToNameOption; } set { this.ToNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Email subject
        /// </summary>
        /// <value>Email subject</value>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Content
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContentOption { get; private set; }

        /// <summary>
        /// Email content
        /// </summary>
        /// <value>Email content</value>
        [JsonPropertyName("content")]
        public string Content { get { return this.ContentOption; } set { this.ContentOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CopyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CopyToOption { get; private set; }

        /// <summary>
        /// Email cc
        /// </summary>
        /// <value>Email cc</value>
        [JsonPropertyName("copy_to")]
        public string CopyTo { get { return this.CopyToOption; } set { this.CopyToOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecipientDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> RecipientDateOption { get; private set; }

        /// <summary>
        /// Email recipient date
        /// </summary>
        /// <value>Email recipient date</value>
        [JsonPropertyName("recipient_date")]
        public DateTimeOffset? RecipientDate { get { return this.RecipientDateOption; } set { this.RecipientDateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of Kind
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> KindOption { get; private set; }

        /// <summary>
        /// Email kind
        /// </summary>
        /// <value>Email kind</value>
        [JsonPropertyName("kind")]
        public string Kind { get { return this.KindOption; } set { this.KindOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EmailAttachment>> AttachmentsOption { get; private set; }

        /// <summary>
        /// Email attachments
        /// </summary>
        /// <value>Email attachments</value>
        [JsonPropertyName("attachments")]
        public List<EmailAttachment> Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new Option<List<EmailAttachment>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Email {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SentDate: ").Append(SentDate).Append("\n");
            sb.Append("  ErrorsCount: ").Append(ErrorsCount).Append("\n");
            sb.Append("  ErrorLog: ").Append(ErrorLog).Append("\n");
            sb.Append("  FromEmail: ").Append(FromEmail).Append("\n");
            sb.Append("  FromName: ").Append(FromName).Append("\n");
            sb.Append("  ToEmail: ").Append(ToEmail).Append("\n");
            sb.Append("  ToName: ").Append(ToName).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  CopyTo: ").Append(CopyTo).Append("\n");
            sb.Append("  RecipientStatus: ").Append(RecipientStatus).Append("\n");
            sb.Append("  RecipientDate: ").Append(RecipientDate).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="Email" />
    /// </summary>
    public class EmailJsonConverter : JsonConverter<Email>
    {
        /// <summary>
        /// The format to use to serialize RecipientDate
        /// </summary>
        public static string RecipientDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Email" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Email Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<EmailStatus?> status = default;
            Option<string> sentDate = default;
            Option<int?> errorsCount = default;
            Option<string> errorLog = default;
            Option<string> fromEmail = default;
            Option<string> fromName = default;
            Option<string> toEmail = default;
            Option<string> toName = default;
            Option<string> subject = default;
            Option<string> content = default;
            Option<string> copyTo = default;
            Option<EmailRecipientStatus?> recipientStatus = default;
            Option<DateTimeOffset?> recipientDate = default;
            Option<string> kind = default;
            Option<List<EmailAttachment>> attachments = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<EmailStatus?>(EmailStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "sent_date":
                            sentDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "errors_count":
                            errorsCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "error_log":
                            errorLog = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "from_email":
                            fromEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "from_name":
                            fromName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "to_email":
                            toEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "to_name":
                            toName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "content":
                            content = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "copy_to":
                            copyTo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recipient_status":
                            string recipientStatusRawValue = utf8JsonReader.GetString();
                            if (recipientStatusRawValue != null)
                                recipientStatus = new Option<EmailRecipientStatus?>(EmailRecipientStatusValueConverter.FromStringOrDefault(recipientStatusRawValue));
                            break;
                        case "recipient_date":
                            recipientDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "kind":
                            kind = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "attachments":
                            attachments = new Option<List<EmailAttachment>>(JsonSerializer.Deserialize<List<EmailAttachment>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Email.");

            if (recipientStatus.IsSet && recipientStatus.Value == null)
                throw new ArgumentNullException(nameof(recipientStatus), "Property is not nullable for class Email.");

            return new Email(id, status, sentDate, errorsCount, errorLog, fromEmail, fromName, toEmail, toName, subject, content, copyTo, recipientStatus, recipientDate, kind, attachments);
        }

        /// <summary>
        /// Serializes a <see cref="Email" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="email"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Email email, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, email, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Email" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="email"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Email email, JsonSerializerOptions jsonSerializerOptions)
        {
            if (email.IdOption.IsSet)
                if (email.IdOption.Value != null)
                    writer.WriteNumber("id", email.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (email.StatusOption.IsSet)
            {
                var statusRawValue = EmailStatusValueConverter.ToJsonValue(email.Status.Value);
                writer.WriteString("status", statusRawValue);
            }
            if (email.SentDateOption.IsSet)
                if (email.SentDateOption.Value != null)
                    writer.WriteString("sent_date", email.SentDate);
                else
                    writer.WriteNull("sent_date");

            if (email.ErrorsCountOption.IsSet)
                if (email.ErrorsCountOption.Value != null)
                    writer.WriteNumber("errors_count", email.ErrorsCountOption.Value.Value);
                else
                    writer.WriteNull("errors_count");

            if (email.ErrorLogOption.IsSet)
                if (email.ErrorLogOption.Value != null)
                    writer.WriteString("error_log", email.ErrorLog);
                else
                    writer.WriteNull("error_log");

            if (email.FromEmailOption.IsSet)
                if (email.FromEmailOption.Value != null)
                    writer.WriteString("from_email", email.FromEmail);
                else
                    writer.WriteNull("from_email");

            if (email.FromNameOption.IsSet)
                if (email.FromNameOption.Value != null)
                    writer.WriteString("from_name", email.FromName);
                else
                    writer.WriteNull("from_name");

            if (email.ToEmailOption.IsSet)
                if (email.ToEmailOption.Value != null)
                    writer.WriteString("to_email", email.ToEmail);
                else
                    writer.WriteNull("to_email");

            if (email.ToNameOption.IsSet)
                if (email.ToNameOption.Value != null)
                    writer.WriteString("to_name", email.ToName);
                else
                    writer.WriteNull("to_name");

            if (email.SubjectOption.IsSet)
                if (email.SubjectOption.Value != null)
                    writer.WriteString("subject", email.Subject);
                else
                    writer.WriteNull("subject");

            if (email.ContentOption.IsSet)
                if (email.ContentOption.Value != null)
                    writer.WriteString("content", email.Content);
                else
                    writer.WriteNull("content");

            if (email.CopyToOption.IsSet)
                if (email.CopyToOption.Value != null)
                    writer.WriteString("copy_to", email.CopyTo);
                else
                    writer.WriteNull("copy_to");

            if (email.RecipientStatusOption.IsSet)
            {
                var recipientStatusRawValue = EmailRecipientStatusValueConverter.ToJsonValue(email.RecipientStatus.Value);
                writer.WriteString("recipient_status", recipientStatusRawValue);
            }
            if (email.RecipientDateOption.IsSet)
                if (email.RecipientDateOption.Value != null)
                    writer.WriteString("recipient_date", email.RecipientDateOption.Value.Value.ToString(RecipientDateFormat));
                else
                    writer.WriteNull("recipient_date");

            if (email.KindOption.IsSet)
                if (email.KindOption.Value != null)
                    writer.WriteString("kind", email.Kind);
                else
                    writer.WriteNull("kind");

            if (email.AttachmentsOption.IsSet)
                if (email.AttachmentsOption.Value != null)
                {
                    writer.WritePropertyName("attachments");
                    JsonSerializer.Serialize(writer, email.Attachments, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attachments");
        }
    }
}
