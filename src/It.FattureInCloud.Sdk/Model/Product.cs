/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.30
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Product
    /// </summary>
    [DataContract(Name = "Product")]
    public partial class Product : IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="id">Product id.</param>
        /// <param name="name">Product name.</param>
        /// <param name="code">Product code.</param>
        /// <param name="netPrice">Product net price.</param>
        /// <param name="grossPrice">Product gross price.</param>
        /// <param name="useGrossPrice">Product uses gross prices.</param>
        /// <param name="defaultVat">defaultVat.</param>
        /// <param name="netCost">Product net cost.</param>
        /// <param name="measure">Product measure.</param>
        /// <param name="description">Product description.</param>
        /// <param name="category">Product category.</param>
        /// <param name="notes">Product extra notes.</param>
        /// <param name="inStock">Product has stock.</param>
        /// <param name="stockInitial">Product initial stock.</param>
        /// <param name="averageCost">Product average cost.</param>
        /// <param name="averagePrice">Product average price.</param>
        /// <param name="createdAt">Product creation date.</param>
        /// <param name="updatedAt">Product last update date.</param>
        public Product(int? id = default(int?), string name = default(string), string code = default(string), decimal? netPrice = default(decimal?), decimal? grossPrice = default(decimal?), bool? useGrossPrice = default(bool?), VatType defaultVat = default(VatType), decimal? netCost = default(decimal?), string measure = default(string), string description = default(string), string category = default(string), string notes = default(string), bool? inStock = default(bool?), decimal? stockInitial = default(decimal?), decimal? averageCost = default(decimal?), decimal? averagePrice = default(decimal?), string createdAt = default(string), string updatedAt = default(string))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Code = code;
            if (this.Code != null)
            {
                this._flagCode = true;
            }
            this._NetPrice = netPrice;
            if (this.NetPrice != null)
            {
                this._flagNetPrice = true;
            }
            this._GrossPrice = grossPrice;
            if (this.GrossPrice != null)
            {
                this._flagGrossPrice = true;
            }
            this._UseGrossPrice = useGrossPrice;
            if (this.UseGrossPrice != null)
            {
                this._flagUseGrossPrice = true;
            }
            this._DefaultVat = defaultVat;
            if (this.DefaultVat != null)
            {
                this._flagDefaultVat = true;
            }
            this._NetCost = netCost;
            if (this.NetCost != null)
            {
                this._flagNetCost = true;
            }
            this._Measure = measure;
            if (this.Measure != null)
            {
                this._flagMeasure = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._Category = category;
            if (this.Category != null)
            {
                this._flagCategory = true;
            }
            this._Notes = notes;
            if (this.Notes != null)
            {
                this._flagNotes = true;
            }
            this._InStock = inStock;
            if (this.InStock != null)
            {
                this._flagInStock = true;
            }
            this._StockInitial = stockInitial;
            if (this.StockInitial != null)
            {
                this._flagStockInitial = true;
            }
            this._AverageCost = averageCost;
            if (this.AverageCost != null)
            {
                this._flagAverageCost = true;
            }
            this._AveragePrice = averagePrice;
            if (this.AveragePrice != null)
            {
                this._flagAveragePrice = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
        }

        /// <summary>
        /// Product id
        /// </summary>
        /// <value>Product id</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get { return _Id; }
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private int? _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Product name
        /// </summary>
        /// <value>Product name</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get { return _Name; }
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Product code
        /// </summary>
        /// <value>Product code</value>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code
        {
            get { return _Code; }
            set
            {
                _Code = value;
                _flagCode = true;
            }
        }
        private string _Code;
        private bool _flagCode;

        /// <summary>
        /// Returns false as Code should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCode()
        {
            return _flagCode;
        }
        /// <summary>
        /// Product net price
        /// </summary>
        /// <value>Product net price</value>
        [DataMember(Name = "net_price", EmitDefaultValue = true)]
        public decimal? NetPrice
        {
            get { return _NetPrice; }
            set
            {
                _NetPrice = value;
                _flagNetPrice = true;
            }
        }
        private decimal? _NetPrice;
        private bool _flagNetPrice;

        /// <summary>
        /// Returns false as NetPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNetPrice()
        {
            return _flagNetPrice;
        }
        /// <summary>
        /// Product gross price
        /// </summary>
        /// <value>Product gross price</value>
        [DataMember(Name = "gross_price", EmitDefaultValue = true)]
        public decimal? GrossPrice
        {
            get { return _GrossPrice; }
            set
            {
                _GrossPrice = value;
                _flagGrossPrice = true;
            }
        }
        private decimal? _GrossPrice;
        private bool _flagGrossPrice;

        /// <summary>
        /// Returns false as GrossPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGrossPrice()
        {
            return _flagGrossPrice;
        }
        /// <summary>
        /// Product uses gross prices
        /// </summary>
        /// <value>Product uses gross prices</value>
        [DataMember(Name = "use_gross_price", EmitDefaultValue = true)]
        public bool? UseGrossPrice
        {
            get { return _UseGrossPrice; }
            set
            {
                _UseGrossPrice = value;
                _flagUseGrossPrice = true;
            }
        }
        private bool? _UseGrossPrice;
        private bool _flagUseGrossPrice;

        /// <summary>
        /// Returns false as UseGrossPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseGrossPrice()
        {
            return _flagUseGrossPrice;
        }
        /// <summary>
        /// Gets or Sets DefaultVat
        /// </summary>
        [DataMember(Name = "default_vat", EmitDefaultValue = true)]
        public VatType DefaultVat
        {
            get { return _DefaultVat; }
            set
            {
                _DefaultVat = value;
                _flagDefaultVat = true;
            }
        }
        private VatType _DefaultVat;
        private bool _flagDefaultVat;

        /// <summary>
        /// Returns false as DefaultVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultVat()
        {
            return _flagDefaultVat;
        }
        /// <summary>
        /// Product net cost
        /// </summary>
        /// <value>Product net cost</value>
        [DataMember(Name = "net_cost", EmitDefaultValue = true)]
        public decimal? NetCost
        {
            get { return _NetCost; }
            set
            {
                _NetCost = value;
                _flagNetCost = true;
            }
        }
        private decimal? _NetCost;
        private bool _flagNetCost;

        /// <summary>
        /// Returns false as NetCost should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNetCost()
        {
            return _flagNetCost;
        }
        /// <summary>
        /// Product measure
        /// </summary>
        /// <value>Product measure</value>
        [DataMember(Name = "measure", EmitDefaultValue = true)]
        public string Measure
        {
            get { return _Measure; }
            set
            {
                _Measure = value;
                _flagMeasure = true;
            }
        }
        private string _Measure;
        private bool _flagMeasure;

        /// <summary>
        /// Returns false as Measure should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMeasure()
        {
            return _flagMeasure;
        }
        /// <summary>
        /// Product description
        /// </summary>
        /// <value>Product description</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get { return _Description; }
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// Product category
        /// </summary>
        /// <value>Product category</value>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category
        {
            get { return _Category; }
            set
            {
                _Category = value;
                _flagCategory = true;
            }
        }
        private string _Category;
        private bool _flagCategory;

        /// <summary>
        /// Returns false as Category should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategory()
        {
            return _flagCategory;
        }
        /// <summary>
        /// Product extra notes
        /// </summary>
        /// <value>Product extra notes</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes
        {
            get { return _Notes; }
            set
            {
                _Notes = value;
                _flagNotes = true;
            }
        }
        private string _Notes;
        private bool _flagNotes;

        /// <summary>
        /// Returns false as Notes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotes()
        {
            return _flagNotes;
        }
        /// <summary>
        /// Product has stock
        /// </summary>
        /// <value>Product has stock</value>
        [DataMember(Name = "in_stock", EmitDefaultValue = true)]
        public bool? InStock
        {
            get { return _InStock; }
            set
            {
                _InStock = value;
                _flagInStock = true;
            }
        }
        private bool? _InStock;
        private bool _flagInStock;

        /// <summary>
        /// Returns false as InStock should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInStock()
        {
            return _flagInStock;
        }
        /// <summary>
        /// Product initial stock
        /// </summary>
        /// <value>Product initial stock</value>
        [DataMember(Name = "stock_initial", EmitDefaultValue = true)]
        public decimal? StockInitial
        {
            get { return _StockInitial; }
            set
            {
                _StockInitial = value;
                _flagStockInitial = true;
            }
        }
        private decimal? _StockInitial;
        private bool _flagStockInitial;

        /// <summary>
        /// Returns false as StockInitial should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStockInitial()
        {
            return _flagStockInitial;
        }
        /// <summary>
        /// [Read Only] Product current stock
        /// </summary>
        /// <value>[Read Only] Product current stock</value>
        [DataMember(Name = "stock_current", EmitDefaultValue = true)]
        public decimal? StockCurrent { get; private set; }

        /// <summary>
        /// Returns false as StockCurrent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStockCurrent()
        {
            return false;
        }
        /// <summary>
        /// Product average cost
        /// </summary>
        /// <value>Product average cost</value>
        [DataMember(Name = "average_cost", EmitDefaultValue = true)]
        public decimal? AverageCost
        {
            get { return _AverageCost; }
            set
            {
                _AverageCost = value;
                _flagAverageCost = true;
            }
        }
        private decimal? _AverageCost;
        private bool _flagAverageCost;

        /// <summary>
        /// Returns false as AverageCost should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAverageCost()
        {
            return _flagAverageCost;
        }
        /// <summary>
        /// Product average price
        /// </summary>
        /// <value>Product average price</value>
        [DataMember(Name = "average_price", EmitDefaultValue = true)]
        public decimal? AveragePrice
        {
            get { return _AveragePrice; }
            set
            {
                _AveragePrice = value;
                _flagAveragePrice = true;
            }
        }
        private decimal? _AveragePrice;
        private bool _flagAveragePrice;

        /// <summary>
        /// Returns false as AveragePrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAveragePrice()
        {
            return _flagAveragePrice;
        }
        /// <summary>
        /// Product creation date
        /// </summary>
        /// <value>Product creation date</value>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt
        {
            get { return _CreatedAt; }
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private string _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Product last update date
        /// </summary>
        /// <value>Product last update date</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt
        {
            get { return _UpdatedAt; }
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private string _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  GrossPrice: ").Append(GrossPrice).Append("\n");
            sb.Append("  UseGrossPrice: ").Append(UseGrossPrice).Append("\n");
            sb.Append("  DefaultVat: ").Append(DefaultVat).Append("\n");
            sb.Append("  NetCost: ").Append(NetCost).Append("\n");
            sb.Append("  Measure: ").Append(Measure).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  InStock: ").Append(InStock).Append("\n");
            sb.Append("  StockInitial: ").Append(StockInitial).Append("\n");
            sb.Append("  StockCurrent: ").Append(StockCurrent).Append("\n");
            sb.Append("  AverageCost: ").Append(AverageCost).Append("\n");
            sb.Append("  AveragePrice: ").Append(AveragePrice).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) &&
                (
                    this.NetPrice == input.NetPrice ||
                    (this.NetPrice != null &&
                    this.NetPrice.Equals(input.NetPrice))
                ) &&
                (
                    this.GrossPrice == input.GrossPrice ||
                    (this.GrossPrice != null &&
                    this.GrossPrice.Equals(input.GrossPrice))
                ) &&
                (
                    this.UseGrossPrice == input.UseGrossPrice ||
                    (this.UseGrossPrice != null &&
                    this.UseGrossPrice.Equals(input.UseGrossPrice))
                ) &&
                (
                    this.DefaultVat == input.DefaultVat ||
                    (this.DefaultVat != null &&
                    this.DefaultVat.Equals(input.DefaultVat))
                ) &&
                (
                    this.NetCost == input.NetCost ||
                    (this.NetCost != null &&
                    this.NetCost.Equals(input.NetCost))
                ) &&
                (
                    this.Measure == input.Measure ||
                    (this.Measure != null &&
                    this.Measure.Equals(input.Measure))
                ) &&
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) &&
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) &&
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) &&
                (
                    this.InStock == input.InStock ||
                    (this.InStock != null &&
                    this.InStock.Equals(input.InStock))
                ) &&
                (
                    this.StockInitial == input.StockInitial ||
                    (this.StockInitial != null &&
                    this.StockInitial.Equals(input.StockInitial))
                ) &&
                (
                    this.StockCurrent == input.StockCurrent ||
                    (this.StockCurrent != null &&
                    this.StockCurrent.Equals(input.StockCurrent))
                ) &&
                (
                    this.AverageCost == input.AverageCost ||
                    (this.AverageCost != null &&
                    this.AverageCost.Equals(input.AverageCost))
                ) &&
                (
                    this.AveragePrice == input.AveragePrice ||
                    (this.AveragePrice != null &&
                    this.AveragePrice.Equals(input.AveragePrice))
                ) &&
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) &&
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.NetPrice != null)
                {
                    hashCode = (hashCode * 59) + this.NetPrice.GetHashCode();
                }
                if (this.GrossPrice != null)
                {
                    hashCode = (hashCode * 59) + this.GrossPrice.GetHashCode();
                }
                if (this.UseGrossPrice != null)
                {
                    hashCode = (hashCode * 59) + this.UseGrossPrice.GetHashCode();
                }
                if (this.DefaultVat != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultVat.GetHashCode();
                }
                if (this.NetCost != null)
                {
                    hashCode = (hashCode * 59) + this.NetCost.GetHashCode();
                }
                if (this.Measure != null)
                {
                    hashCode = (hashCode * 59) + this.Measure.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.InStock != null)
                {
                    hashCode = (hashCode * 59) + this.InStock.GetHashCode();
                }
                if (this.StockInitial != null)
                {
                    hashCode = (hashCode * 59) + this.StockInitial.GetHashCode();
                }
                if (this.StockCurrent != null)
                {
                    hashCode = (hashCode * 59) + this.StockCurrent.GetHashCode();
                }
                if (this.AverageCost != null)
                {
                    hashCode = (hashCode * 59) + this.AverageCost.GetHashCode();
                }
                if (this.AveragePrice != null)
                {
                    hashCode = (hashCode * 59) + this.AveragePrice.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
