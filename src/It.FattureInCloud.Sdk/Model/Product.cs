// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Product
    /// </summary>
    public partial class Product : IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="id">Product id</param>
        /// <param name="name">Product name</param>
        /// <param name="code">Product code</param>
        /// <param name="netPrice">Product net price</param>
        /// <param name="grossPrice">Product gross price</param>
        /// <param name="useGrossPrice">Product uses gross prices</param>
        /// <param name="defaultVat">defaultVat</param>
        /// <param name="netCost">Product net cost</param>
        /// <param name="measure">Product measure</param>
        /// <param name="description">Product description</param>
        /// <param name="category">Product category</param>
        /// <param name="notes">Product extra notes</param>
        /// <param name="inStock">Product has stock</param>
        /// <param name="stockInitial">Product initial stock</param>
        /// <param name="stockCurrent">[Read Only] Product current stock</param>
        /// <param name="averageCost">Product average cost</param>
        /// <param name="averagePrice">Product average price</param>
        /// <param name="createdAt">Product creation date</param>
        /// <param name="updatedAt">Product last update date</param>
        [JsonConstructor]
        public Product(Option<int?> id = default, Option<string> name = default, Option<string> code = default, Option<decimal?> netPrice = default, Option<decimal?> grossPrice = default, Option<bool?> useGrossPrice = default, Option<VatType> defaultVat = default, Option<decimal?> netCost = default, Option<string> measure = default, Option<string> description = default, Option<string> category = default, Option<string> notes = default, Option<bool?> inStock = default, Option<decimal?> stockInitial = default, Option<decimal?> stockCurrent = default, Option<decimal?> averageCost = default, Option<decimal?> averagePrice = default, Option<string> createdAt = default, Option<string> updatedAt = default)
        {
            IdOption = id;
            NameOption = name;
            CodeOption = code;
            NetPriceOption = netPrice;
            GrossPriceOption = grossPrice;
            UseGrossPriceOption = useGrossPrice;
            DefaultVatOption = defaultVat;
            NetCostOption = netCost;
            MeasureOption = measure;
            DescriptionOption = description;
            CategoryOption = category;
            NotesOption = notes;
            InStockOption = inStock;
            StockInitialOption = stockInitial;
            StockCurrentOption = stockCurrent;
            AverageCostOption = averageCost;
            AveragePriceOption = averagePrice;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Product id
        /// </summary>
        /// <value>Product id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Product name
        /// </summary>
        /// <value>Product name</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodeOption { get; private set; }

        /// <summary>
        /// Product code
        /// </summary>
        /// <value>Product code</value>
        [JsonPropertyName("code")]
        public string Code { get { return this.CodeOption; } set { this.CodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NetPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> NetPriceOption { get; private set; }

        /// <summary>
        /// Product net price
        /// </summary>
        /// <value>Product net price</value>
        [JsonPropertyName("net_price")]
        public decimal? NetPrice { get { return this.NetPriceOption; } set { this.NetPriceOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of GrossPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> GrossPriceOption { get; private set; }

        /// <summary>
        /// Product gross price
        /// </summary>
        /// <value>Product gross price</value>
        [JsonPropertyName("gross_price")]
        public decimal? GrossPrice { get { return this.GrossPriceOption; } set { this.GrossPriceOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of UseGrossPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseGrossPriceOption { get; private set; }

        /// <summary>
        /// Product uses gross prices
        /// </summary>
        /// <value>Product uses gross prices</value>
        [JsonPropertyName("use_gross_price")]
        public bool? UseGrossPrice { get { return this.UseGrossPriceOption; } set { this.UseGrossPriceOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultVat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatType> DefaultVatOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultVat
        /// </summary>
        [JsonPropertyName("default_vat")]
        public VatType DefaultVat { get { return this.DefaultVatOption; } set { this.DefaultVatOption = new Option<VatType>(value); } }

        /// <summary>
        /// Used to track the state of NetCost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> NetCostOption { get; private set; }

        /// <summary>
        /// Product net cost
        /// </summary>
        /// <value>Product net cost</value>
        [JsonPropertyName("net_cost")]
        public decimal? NetCost { get { return this.NetCostOption; } set { this.NetCostOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Measure
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MeasureOption { get; private set; }

        /// <summary>
        /// Product measure
        /// </summary>
        /// <value>Product measure</value>
        [JsonPropertyName("measure")]
        public string Measure { get { return this.MeasureOption; } set { this.MeasureOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Product description
        /// </summary>
        /// <value>Product description</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Category
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CategoryOption { get; private set; }

        /// <summary>
        /// Product category
        /// </summary>
        /// <value>Product category</value>
        [JsonPropertyName("category")]
        public string Category { get { return this.CategoryOption; } set { this.CategoryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NotesOption { get; private set; }

        /// <summary>
        /// Product extra notes
        /// </summary>
        /// <value>Product extra notes</value>
        [JsonPropertyName("notes")]
        public string Notes { get { return this.NotesOption; } set { this.NotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InStock
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InStockOption { get; private set; }

        /// <summary>
        /// Product has stock
        /// </summary>
        /// <value>Product has stock</value>
        [JsonPropertyName("in_stock")]
        public bool? InStock { get { return this.InStockOption; } set { this.InStockOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of StockInitial
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StockInitialOption { get; private set; }

        /// <summary>
        /// Product initial stock
        /// </summary>
        /// <value>Product initial stock</value>
        [JsonPropertyName("stock_initial")]
        public decimal? StockInitial { get { return this.StockInitialOption; } set { this.StockInitialOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of StockCurrent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StockCurrentOption { get; }

        /// <summary>
        /// [Read Only] Product current stock
        /// </summary>
        /// <value>[Read Only] Product current stock</value>
        [JsonPropertyName("stock_current")]
        public decimal? StockCurrent { get { return this.StockCurrentOption; } }

        /// <summary>
        /// Used to track the state of AverageCost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AverageCostOption { get; private set; }

        /// <summary>
        /// Product average cost
        /// </summary>
        /// <value>Product average cost</value>
        [JsonPropertyName("average_cost")]
        public decimal? AverageCost { get { return this.AverageCostOption; } set { this.AverageCostOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AveragePrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AveragePriceOption { get; private set; }

        /// <summary>
        /// Product average price
        /// </summary>
        /// <value>Product average price</value>
        [JsonPropertyName("average_price")]
        public decimal? AveragePrice { get { return this.AveragePriceOption; } set { this.AveragePriceOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CreatedAtOption { get; private set; }

        /// <summary>
        /// Product creation date
        /// </summary>
        /// <value>Product creation date</value>
        [JsonPropertyName("created_at")]
        public string CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Product last update date
        /// </summary>
        /// <value>Product last update date</value>
        [JsonPropertyName("updated_at")]
        public string UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  GrossPrice: ").Append(GrossPrice).Append("\n");
            sb.Append("  UseGrossPrice: ").Append(UseGrossPrice).Append("\n");
            sb.Append("  DefaultVat: ").Append(DefaultVat).Append("\n");
            sb.Append("  NetCost: ").Append(NetCost).Append("\n");
            sb.Append("  Measure: ").Append(Measure).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  InStock: ").Append(InStock).Append("\n");
            sb.Append("  StockInitial: ").Append(StockInitial).Append("\n");
            sb.Append("  StockCurrent: ").Append(StockCurrent).Append("\n");
            sb.Append("  AverageCost: ").Append(AverageCost).Append("\n");
            sb.Append("  AveragePrice: ").Append(AveragePrice).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
                return false;

            return 
                (
                    StockCurrent == input.StockCurrent ||
                    StockCurrent.Equals(input.StockCurrent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (StockCurrent != null)
                    hashCode = (hashCode * 59) + StockCurrent.GetHashCode();


                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="Product" />
    /// </summary>
    public class ProductJsonConverter : JsonConverter<Product>
    {
        /// <summary>
        /// Deserializes json to <see cref="Product" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Product Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string> name = default;
            Option<string> code = default;
            Option<decimal?> netPrice = default;
            Option<decimal?> grossPrice = default;
            Option<bool?> useGrossPrice = default;
            Option<VatType> defaultVat = default;
            Option<decimal?> netCost = default;
            Option<string> measure = default;
            Option<string> description = default;
            Option<string> category = default;
            Option<string> notes = default;
            Option<bool?> inStock = default;
            Option<decimal?> stockInitial = default;
            Option<decimal?> stockCurrent = default;
            Option<decimal?> averageCost = default;
            Option<decimal?> averagePrice = default;
            Option<string> createdAt = default;
            Option<string> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "code":
                            code = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "net_price":
                            netPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "gross_price":
                            grossPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "use_gross_price":
                            useGrossPrice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "default_vat":
                            defaultVat = new Option<VatType>(JsonSerializer.Deserialize<VatType>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "net_cost":
                            netCost = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "measure":
                            measure = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "category":
                            category = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "notes":
                            notes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "in_stock":
                            inStock = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "stock_initial":
                            stockInitial = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "stock_current":
                            stockCurrent = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "average_cost":
                            averageCost = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "average_price":
                            averagePrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "created_at":
                            createdAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new Product(id, name, code, netPrice, grossPrice, useGrossPrice, defaultVat, netCost, measure, description, category, notes, inStock, stockInitial, stockCurrent, averageCost, averagePrice, createdAt, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="Product" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="product"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Product product, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, product, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Product" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="product"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Product product, JsonSerializerOptions jsonSerializerOptions)
        {
            if (product.IdOption.IsSet)
                if (product.IdOption.Value != null)
                    writer.WriteNumber("id", product.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (product.NameOption.IsSet)
                if (product.NameOption.Value != null)
                    writer.WriteString("name", product.Name);
                else
                    writer.WriteNull("name");

            if (product.CodeOption.IsSet)
                if (product.CodeOption.Value != null)
                    writer.WriteString("code", product.Code);
                else
                    writer.WriteNull("code");

            if (product.NetPriceOption.IsSet)
                if (product.NetPriceOption.Value != null)
                    writer.WriteNumber("net_price", product.NetPriceOption.Value.Value);
                else
                    writer.WriteNull("net_price");

            if (product.GrossPriceOption.IsSet)
                if (product.GrossPriceOption.Value != null)
                    writer.WriteNumber("gross_price", product.GrossPriceOption.Value.Value);
                else
                    writer.WriteNull("gross_price");

            if (product.UseGrossPriceOption.IsSet)
                if (product.UseGrossPriceOption.Value != null)
                    writer.WriteBoolean("use_gross_price", product.UseGrossPriceOption.Value.Value);
                else
                    writer.WriteNull("use_gross_price");

            if (product.DefaultVatOption.IsSet)
                if (product.DefaultVatOption.Value != null)
                {
                    writer.WritePropertyName("default_vat");
                    JsonSerializer.Serialize(writer, product.DefaultVat, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("default_vat");
            if (product.NetCostOption.IsSet)
                if (product.NetCostOption.Value != null)
                    writer.WriteNumber("net_cost", product.NetCostOption.Value.Value);
                else
                    writer.WriteNull("net_cost");

            if (product.MeasureOption.IsSet)
                if (product.MeasureOption.Value != null)
                    writer.WriteString("measure", product.Measure);
                else
                    writer.WriteNull("measure");

            if (product.DescriptionOption.IsSet)
                if (product.DescriptionOption.Value != null)
                    writer.WriteString("description", product.Description);
                else
                    writer.WriteNull("description");

            if (product.CategoryOption.IsSet)
                if (product.CategoryOption.Value != null)
                    writer.WriteString("category", product.Category);
                else
                    writer.WriteNull("category");

            if (product.NotesOption.IsSet)
                if (product.NotesOption.Value != null)
                    writer.WriteString("notes", product.Notes);
                else
                    writer.WriteNull("notes");

            if (product.InStockOption.IsSet)
                if (product.InStockOption.Value != null)
                    writer.WriteBoolean("in_stock", product.InStockOption.Value.Value);
                else
                    writer.WriteNull("in_stock");

            if (product.StockInitialOption.IsSet)
                if (product.StockInitialOption.Value != null)
                    writer.WriteNumber("stock_initial", product.StockInitialOption.Value.Value);
                else
                    writer.WriteNull("stock_initial");

            if (product.StockCurrentOption.IsSet)
                if (product.StockCurrentOption.Value != null)
                    writer.WriteNumber("stock_current", product.StockCurrentOption.Value.Value);
                else
                    writer.WriteNull("stock_current");

            if (product.AverageCostOption.IsSet)
                if (product.AverageCostOption.Value != null)
                    writer.WriteNumber("average_cost", product.AverageCostOption.Value.Value);
                else
                    writer.WriteNull("average_cost");

            if (product.AveragePriceOption.IsSet)
                if (product.AveragePriceOption.Value != null)
                    writer.WriteNumber("average_price", product.AveragePriceOption.Value.Value);
                else
                    writer.WriteNull("average_price");

            if (product.CreatedAtOption.IsSet)
                if (product.CreatedAtOption.Value != null)
                    writer.WriteString("created_at", product.CreatedAt);
                else
                    writer.WriteNull("created_at");

            if (product.UpdatedAtOption.IsSet)
                if (product.UpdatedAtOption.Value != null)
                    writer.WriteString("updated_at", product.UpdatedAt);
                else
                    writer.WriteNull("updated_at");
        }
    }
}
