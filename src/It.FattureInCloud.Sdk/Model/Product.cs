/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     Product
    /// </summary>
    [DataContract(Name = "Product")]
    public class Product : IEquatable<Product>, IValidatableObject
    {
        private decimal? _AverageCost;
        private decimal? _AveragePrice;
        private string _Category;
        private string _Code;
        private string _CreatedAt;
        private VatType _DefaultVat;
        private string _Description;
        private bool _flagAverageCost;
        private bool _flagAveragePrice;
        private bool _flagCategory;
        private bool _flagCode;
        private bool _flagCreatedAt;
        private bool _flagDefaultVat;
        private bool _flagDescription;
        private bool _flagGrossPrice;
        private bool _flagId;
        private bool _flagInStock;
        private bool _flagMeasure;
        private bool _flagName;
        private bool _flagNetCost;
        private bool _flagNetPrice;
        private bool _flagNotes;
        private bool _flagStockInitial;
        private bool _flagUpdatedAt;
        private bool _flagUseGrossPrice;
        private decimal? _GrossPrice;
        private int? _Id;
        private bool? _InStock;
        private string _Measure;
        private string _Name;
        private decimal? _NetCost;
        private decimal? _NetPrice;
        private string _Notes;
        private decimal? _StockInitial;
        private string _UpdatedAt;
        private bool? _UseGrossPrice;

        /// <summary>
        ///     Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="id">Unique identifier..</param>
        /// <param name="name">Product name..</param>
        /// <param name="code">Product code..</param>
        /// <param name="netPrice">Net sale price (used if use_gross_price is false, otherwise it&#39;s competed automatically)..</param>
        /// <param name="grossPrice">
        ///     Gross sale price (used if use_gross_price is false, otherwise it&#39;s competed
        ///     automatically)..
        /// </param>
        /// <param name="useGrossPrice">Determine which price to use for calculations..</param>
        /// <param name="defaultVat">defaultVat.</param>
        /// <param name="netCost">Net cost of the product (used for received documents)..</param>
        /// <param name="measure">Unit of measure..</param>
        /// <param name="description">Product description..</param>
        /// <param name="category">Product category..</param>
        /// <param name="notes">Extra notes..</param>
        /// <param name="inStock">Determine if the product is in stock..</param>
        /// <param name="stockInitial">Product initial stock..</param>
        /// <param name="averageCost">Product average cost..</param>
        /// <param name="averagePrice">Product average price..</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public Product(int? id = default(int?), string name = default(string), string code = default(string),
            decimal? netPrice = default(decimal?), decimal? grossPrice = default(decimal?),
            bool? useGrossPrice = default(bool?), VatType defaultVat = default, decimal? netCost = default(decimal?),
            string measure = default(string), string description = default(string), string category = default(string),
            string notes = default(string), bool? inStock = default(bool?), decimal? stockInitial = default(decimal?),
            decimal? averageCost = default(decimal?), decimal? averagePrice = default(decimal?),
            string createdAt = default(string), string updatedAt = default(string))
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _Name = name;
            if (Name != null) _flagName = true;
            _Code = code;
            if (Code != null) _flagCode = true;
            _NetPrice = netPrice;
            if (NetPrice != null) _flagNetPrice = true;
            _GrossPrice = grossPrice;
            if (GrossPrice != null) _flagGrossPrice = true;
            _UseGrossPrice = useGrossPrice;
            if (UseGrossPrice != null) _flagUseGrossPrice = true;
            _DefaultVat = defaultVat;
            if (DefaultVat != null) _flagDefaultVat = true;
            _NetCost = netCost;
            if (NetCost != null) _flagNetCost = true;
            _Measure = measure;
            if (Measure != null) _flagMeasure = true;
            _Description = description;
            if (Description != null) _flagDescription = true;
            _Category = category;
            if (Category != null) _flagCategory = true;
            _Notes = notes;
            if (Notes != null) _flagNotes = true;
            _InStock = inStock;
            if (InStock != null) _flagInStock = true;
            _StockInitial = stockInitial;
            if (StockInitial != null) _flagStockInitial = true;
            _AverageCost = averageCost;
            if (AverageCost != null) _flagAverageCost = true;
            _AveragePrice = averagePrice;
            if (AveragePrice != null) _flagAveragePrice = true;
            _CreatedAt = createdAt;
            if (CreatedAt != null) _flagCreatedAt = true;
            _UpdatedAt = updatedAt;
            if (UpdatedAt != null) _flagUpdatedAt = true;
        }

        /// <summary>
        ///     Unique identifier.
        /// </summary>
        /// <value>Unique identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Product name.
        /// </summary>
        /// <value>Product name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get => _Name;
            set
            {
                _Name = value;
                _flagName = true;
            }
        }

        /// <summary>
        ///     Product code.
        /// </summary>
        /// <value>Product code.</value>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code
        {
            get => _Code;
            set
            {
                _Code = value;
                _flagCode = true;
            }
        }

        /// <summary>
        ///     Net sale price (used if use_gross_price is false, otherwise it&#39;s competed automatically).
        /// </summary>
        /// <value>Net sale price (used if use_gross_price is false, otherwise it&#39;s competed automatically).</value>
        [DataMember(Name = "net_price", EmitDefaultValue = true)]
        public decimal? NetPrice
        {
            get => _NetPrice;
            set
            {
                _NetPrice = value;
                _flagNetPrice = true;
            }
        }

        /// <summary>
        ///     Gross sale price (used if use_gross_price is false, otherwise it&#39;s competed automatically).
        /// </summary>
        /// <value>Gross sale price (used if use_gross_price is false, otherwise it&#39;s competed automatically).</value>
        [DataMember(Name = "gross_price", EmitDefaultValue = true)]
        public decimal? GrossPrice
        {
            get => _GrossPrice;
            set
            {
                _GrossPrice = value;
                _flagGrossPrice = true;
            }
        }

        /// <summary>
        ///     Determine which price to use for calculations.
        /// </summary>
        /// <value>Determine which price to use for calculations.</value>
        [DataMember(Name = "use_gross_price", EmitDefaultValue = true)]
        public bool? UseGrossPrice
        {
            get => _UseGrossPrice;
            set
            {
                _UseGrossPrice = value;
                _flagUseGrossPrice = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DefaultVat
        /// </summary>
        [DataMember(Name = "default_vat", EmitDefaultValue = true)]
        public VatType DefaultVat
        {
            get => _DefaultVat;
            set
            {
                _DefaultVat = value;
                _flagDefaultVat = true;
            }
        }

        /// <summary>
        ///     Net cost of the product (used for received documents).
        /// </summary>
        /// <value>Net cost of the product (used for received documents).</value>
        [DataMember(Name = "net_cost", EmitDefaultValue = true)]
        public decimal? NetCost
        {
            get => _NetCost;
            set
            {
                _NetCost = value;
                _flagNetCost = true;
            }
        }

        /// <summary>
        ///     Unit of measure.
        /// </summary>
        /// <value>Unit of measure.</value>
        [DataMember(Name = "measure", EmitDefaultValue = true)]
        public string Measure
        {
            get => _Measure;
            set
            {
                _Measure = value;
                _flagMeasure = true;
            }
        }

        /// <summary>
        ///     Product description.
        /// </summary>
        /// <value>Product description.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get => _Description;
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }

        /// <summary>
        ///     Product category.
        /// </summary>
        /// <value>Product category.</value>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category
        {
            get => _Category;
            set
            {
                _Category = value;
                _flagCategory = true;
            }
        }

        /// <summary>
        ///     Extra notes.
        /// </summary>
        /// <value>Extra notes.</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes
        {
            get => _Notes;
            set
            {
                _Notes = value;
                _flagNotes = true;
            }
        }

        /// <summary>
        ///     Determine if the product is in stock.
        /// </summary>
        /// <value>Determine if the product is in stock.</value>
        [DataMember(Name = "in_stock", EmitDefaultValue = true)]
        public bool? InStock
        {
            get => _InStock;
            set
            {
                _InStock = value;
                _flagInStock = true;
            }
        }

        /// <summary>
        ///     Product initial stock.
        /// </summary>
        /// <value>Product initial stock.</value>
        [DataMember(Name = "stock_initial", EmitDefaultValue = true)]
        public decimal? StockInitial
        {
            get => _StockInitial;
            set
            {
                _StockInitial = value;
                _flagStockInitial = true;
            }
        }

        /// <summary>
        ///     [Read Only] Product current stock.
        /// </summary>
        /// <value>[Read Only] Product current stock.</value>
        [DataMember(Name = "stock_current", EmitDefaultValue = true)]
        public decimal? StockCurrent { get; private set; }

        /// <summary>
        ///     Product average cost.
        /// </summary>
        /// <value>Product average cost.</value>
        [DataMember(Name = "average_cost", EmitDefaultValue = true)]
        public decimal? AverageCost
        {
            get => _AverageCost;
            set
            {
                _AverageCost = value;
                _flagAverageCost = true;
            }
        }

        /// <summary>
        ///     Product average price.
        /// </summary>
        /// <value>Product average price.</value>
        [DataMember(Name = "average_price", EmitDefaultValue = true)]
        public decimal? AveragePrice
        {
            get => _AveragePrice;
            set
            {
                _AveragePrice = value;
                _flagAveragePrice = true;
            }
        }

        /// <summary>
        ///     Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt
        {
            get => _CreatedAt;
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }

        /// <summary>
        ///     Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt
        {
            get => _UpdatedAt;
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }

        /// <summary>
        ///     Returns false as Code should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCode()
        {
            return _flagCode;
        }

        /// <summary>
        ///     Returns false as NetPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNetPrice()
        {
            return _flagNetPrice;
        }

        /// <summary>
        ///     Returns false as GrossPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGrossPrice()
        {
            return _flagGrossPrice;
        }

        /// <summary>
        ///     Returns false as UseGrossPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseGrossPrice()
        {
            return _flagUseGrossPrice;
        }

        /// <summary>
        ///     Returns false as DefaultVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultVat()
        {
            return _flagDefaultVat;
        }

        /// <summary>
        ///     Returns false as NetCost should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNetCost()
        {
            return _flagNetCost;
        }

        /// <summary>
        ///     Returns false as Measure should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMeasure()
        {
            return _flagMeasure;
        }

        /// <summary>
        ///     Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }

        /// <summary>
        ///     Returns false as Category should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategory()
        {
            return _flagCategory;
        }

        /// <summary>
        ///     Returns false as Notes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotes()
        {
            return _flagNotes;
        }

        /// <summary>
        ///     Returns false as InStock should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInStock()
        {
            return _flagInStock;
        }

        /// <summary>
        ///     Returns false as StockInitial should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStockInitial()
        {
            return _flagStockInitial;
        }

        /// <summary>
        ///     Returns false as StockCurrent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStockCurrent()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as AverageCost should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAverageCost()
        {
            return _flagAverageCost;
        }

        /// <summary>
        ///     Returns false as AveragePrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAveragePrice()
        {
            return _flagAveragePrice;
        }

        /// <summary>
        ///     Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }

        /// <summary>
        ///     Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  GrossPrice: ").Append(GrossPrice).Append("\n");
            sb.Append("  UseGrossPrice: ").Append(UseGrossPrice).Append("\n");
            sb.Append("  DefaultVat: ").Append(DefaultVat).Append("\n");
            sb.Append("  NetCost: ").Append(NetCost).Append("\n");
            sb.Append("  Measure: ").Append(Measure).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  InStock: ").Append(InStock).Append("\n");
            sb.Append("  StockInitial: ").Append(StockInitial).Append("\n");
            sb.Append("  StockCurrent: ").Append(StockCurrent).Append("\n");
            sb.Append("  AverageCost: ").Append(AverageCost).Append("\n");
            sb.Append("  AveragePrice: ").Append(AveragePrice).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Product);
        }

        /// <summary>
        ///     Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Code == input.Code ||
                    (Code != null &&
                     Code.Equals(input.Code))
                ) &&
                (
                    NetPrice == input.NetPrice ||
                    (NetPrice != null &&
                     NetPrice.Equals(input.NetPrice))
                ) &&
                (
                    GrossPrice == input.GrossPrice ||
                    (GrossPrice != null &&
                     GrossPrice.Equals(input.GrossPrice))
                ) &&
                (
                    UseGrossPrice == input.UseGrossPrice ||
                    (UseGrossPrice != null &&
                     UseGrossPrice.Equals(input.UseGrossPrice))
                ) &&
                (
                    DefaultVat == input.DefaultVat ||
                    (DefaultVat != null &&
                     DefaultVat.Equals(input.DefaultVat))
                ) &&
                (
                    NetCost == input.NetCost ||
                    (NetCost != null &&
                     NetCost.Equals(input.NetCost))
                ) &&
                (
                    Measure == input.Measure ||
                    (Measure != null &&
                     Measure.Equals(input.Measure))
                ) &&
                (
                    Description == input.Description ||
                    (Description != null &&
                     Description.Equals(input.Description))
                ) &&
                (
                    Category == input.Category ||
                    (Category != null &&
                     Category.Equals(input.Category))
                ) &&
                (
                    Notes == input.Notes ||
                    (Notes != null &&
                     Notes.Equals(input.Notes))
                ) &&
                (
                    InStock == input.InStock ||
                    (InStock != null &&
                     InStock.Equals(input.InStock))
                ) &&
                (
                    StockInitial == input.StockInitial ||
                    (StockInitial != null &&
                     StockInitial.Equals(input.StockInitial))
                ) &&
                (
                    StockCurrent == input.StockCurrent ||
                    (StockCurrent != null &&
                     StockCurrent.Equals(input.StockCurrent))
                ) &&
                (
                    AverageCost == input.AverageCost ||
                    (AverageCost != null &&
                     AverageCost.Equals(input.AverageCost))
                ) &&
                (
                    AveragePrice == input.AveragePrice ||
                    (AveragePrice != null &&
                     AveragePrice.Equals(input.AveragePrice))
                ) &&
                (
                    CreatedAt == input.CreatedAt ||
                    (CreatedAt != null &&
                     CreatedAt.Equals(input.CreatedAt))
                ) &&
                (
                    UpdatedAt == input.UpdatedAt ||
                    (UpdatedAt != null &&
                     UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
                if (Code != null) hashCode = hashCode * 59 + Code.GetHashCode();
                if (NetPrice != null) hashCode = hashCode * 59 + NetPrice.GetHashCode();
                if (GrossPrice != null) hashCode = hashCode * 59 + GrossPrice.GetHashCode();
                if (UseGrossPrice != null) hashCode = hashCode * 59 + UseGrossPrice.GetHashCode();
                if (DefaultVat != null) hashCode = hashCode * 59 + DefaultVat.GetHashCode();
                if (NetCost != null) hashCode = hashCode * 59 + NetCost.GetHashCode();
                if (Measure != null) hashCode = hashCode * 59 + Measure.GetHashCode();
                if (Description != null) hashCode = hashCode * 59 + Description.GetHashCode();
                if (Category != null) hashCode = hashCode * 59 + Category.GetHashCode();
                if (Notes != null) hashCode = hashCode * 59 + Notes.GetHashCode();
                if (InStock != null) hashCode = hashCode * 59 + InStock.GetHashCode();
                if (StockInitial != null) hashCode = hashCode * 59 + StockInitial.GetHashCode();
                if (StockCurrent != null) hashCode = hashCode * 59 + StockCurrent.GetHashCode();
                if (AverageCost != null) hashCode = hashCode * 59 + AverageCost.GetHashCode();
                if (AveragePrice != null) hashCode = hashCode * 59 + AveragePrice.GetHashCode();
                if (CreatedAt != null) hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                if (UpdatedAt != null) hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}