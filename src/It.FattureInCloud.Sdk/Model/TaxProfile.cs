// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// TaxProfile
    /// </summary>
    public partial class TaxProfile : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxProfile" /> class.
        /// </summary>
        /// <param name="companyType">The company type</param>
        /// <param name="companySubtype">The company subtype</param>
        /// <param name="profession">The profession</param>
        /// <param name="regime">The applied regime</param>
        /// <param name="rivalsaName">The name of the rivalsa</param>
        /// <param name="defaultRivalsa">The default rivalsa amount</param>
        /// <param name="cassaName">The name of the cassa</param>
        /// <param name="defaultCassa">The default cassa amount</param>
        /// <param name="defaultCassaTaxable">The default taxable amount for the cassa</param>
        /// <param name="cassa2Name">The name of the second cassa</param>
        /// <param name="defaultCassa2">The default second cassa amount</param>
        /// <param name="defaultCassa2Taxable">The default taxable amount for the second cassa</param>
        /// <param name="defaultWithholdingTax">The default withholding tax</param>
        /// <param name="defaultWithholdingTaxTaxable">The default taxable amount for the withholding tax</param>
        /// <param name="defaultOtherWithholdingTax">The default other withholding tax</param>
        /// <param name="enasarco">If it has enasarco</param>
        /// <param name="enasarcoType">The enasarco type</param>
        /// <param name="contributionsPercentage">The contributions percentage</param>
        /// <param name="profitCoefficient">The profit coefficient</param>
        /// <param name="med">If the health card system is active</param>
        /// <param name="defaultVat">defaultVat</param>
        [JsonConstructor]
        public TaxProfile(Option<string> companyType = default, Option<string> companySubtype = default, Option<string> profession = default, Option<string> regime = default, Option<string> rivalsaName = default, Option<decimal?> defaultRivalsa = default, Option<string> cassaName = default, Option<decimal?> defaultCassa = default, Option<decimal?> defaultCassaTaxable = default, Option<string> cassa2Name = default, Option<decimal?> defaultCassa2 = default, Option<decimal?> defaultCassa2Taxable = default, Option<decimal?> defaultWithholdingTax = default, Option<decimal?> defaultWithholdingTaxTaxable = default, Option<decimal?> defaultOtherWithholdingTax = default, Option<bool?> enasarco = default, Option<string> enasarcoType = default, Option<decimal?> contributionsPercentage = default, Option<decimal?> profitCoefficient = default, Option<bool?> med = default, Option<VatType> defaultVat = default)
        {
            CompanyTypeOption = companyType;
            CompanySubtypeOption = companySubtype;
            ProfessionOption = profession;
            RegimeOption = regime;
            RivalsaNameOption = rivalsaName;
            DefaultRivalsaOption = defaultRivalsa;
            CassaNameOption = cassaName;
            DefaultCassaOption = defaultCassa;
            DefaultCassaTaxableOption = defaultCassaTaxable;
            Cassa2NameOption = cassa2Name;
            DefaultCassa2Option = defaultCassa2;
            DefaultCassa2TaxableOption = defaultCassa2Taxable;
            DefaultWithholdingTaxOption = defaultWithholdingTax;
            DefaultWithholdingTaxTaxableOption = defaultWithholdingTaxTaxable;
            DefaultOtherWithholdingTaxOption = defaultOtherWithholdingTax;
            EnasarcoOption = enasarco;
            EnasarcoTypeOption = enasarcoType;
            ContributionsPercentageOption = contributionsPercentage;
            ProfitCoefficientOption = profitCoefficient;
            MedOption = med;
            DefaultVatOption = defaultVat;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CompanyType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CompanyTypeOption { get; private set; }

        /// <summary>
        /// The company type
        /// </summary>
        /// <value>The company type</value>
        [JsonPropertyName("company_type")]
        public string CompanyType { get { return this.CompanyTypeOption; } set { this.CompanyTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CompanySubtype
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CompanySubtypeOption { get; private set; }

        /// <summary>
        /// The company subtype
        /// </summary>
        /// <value>The company subtype</value>
        [JsonPropertyName("company_subtype")]
        public string CompanySubtype { get { return this.CompanySubtypeOption; } set { this.CompanySubtypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Profession
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ProfessionOption { get; private set; }

        /// <summary>
        /// The profession
        /// </summary>
        /// <value>The profession</value>
        [JsonPropertyName("profession")]
        public string Profession { get { return this.ProfessionOption; } set { this.ProfessionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Regime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RegimeOption { get; private set; }

        /// <summary>
        /// The applied regime
        /// </summary>
        /// <value>The applied regime</value>
        [JsonPropertyName("regime")]
        public string Regime { get { return this.RegimeOption; } set { this.RegimeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RivalsaName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RivalsaNameOption { get; private set; }

        /// <summary>
        /// The name of the rivalsa
        /// </summary>
        /// <value>The name of the rivalsa</value>
        [JsonPropertyName("rivalsa_name")]
        public string RivalsaName { get { return this.RivalsaNameOption; } set { this.RivalsaNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DefaultRivalsa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> DefaultRivalsaOption { get; private set; }

        /// <summary>
        /// The default rivalsa amount
        /// </summary>
        /// <value>The default rivalsa amount</value>
        [JsonPropertyName("default_rivalsa")]
        public decimal? DefaultRivalsa { get { return this.DefaultRivalsaOption; } set { this.DefaultRivalsaOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of CassaName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CassaNameOption { get; private set; }

        /// <summary>
        /// The name of the cassa
        /// </summary>
        /// <value>The name of the cassa</value>
        [JsonPropertyName("cassa_name")]
        public string CassaName { get { return this.CassaNameOption; } set { this.CassaNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DefaultCassa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> DefaultCassaOption { get; private set; }

        /// <summary>
        /// The default cassa amount
        /// </summary>
        /// <value>The default cassa amount</value>
        [JsonPropertyName("default_cassa")]
        public decimal? DefaultCassa { get { return this.DefaultCassaOption; } set { this.DefaultCassaOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultCassaTaxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> DefaultCassaTaxableOption { get; private set; }

        /// <summary>
        /// The default taxable amount for the cassa
        /// </summary>
        /// <value>The default taxable amount for the cassa</value>
        [JsonPropertyName("default_cassa_taxable")]
        public decimal? DefaultCassaTaxable { get { return this.DefaultCassaTaxableOption; } set { this.DefaultCassaTaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Cassa2Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> Cassa2NameOption { get; private set; }

        /// <summary>
        /// The name of the second cassa
        /// </summary>
        /// <value>The name of the second cassa</value>
        [JsonPropertyName("cassa2_name")]
        public string Cassa2Name { get { return this.Cassa2NameOption; } set { this.Cassa2NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DefaultCassa2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> DefaultCassa2Option { get; private set; }

        /// <summary>
        /// The default second cassa amount
        /// </summary>
        /// <value>The default second cassa amount</value>
        [JsonPropertyName("default_cassa2")]
        public decimal? DefaultCassa2 { get { return this.DefaultCassa2Option; } set { this.DefaultCassa2Option = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultCassa2Taxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> DefaultCassa2TaxableOption { get; private set; }

        /// <summary>
        /// The default taxable amount for the second cassa
        /// </summary>
        /// <value>The default taxable amount for the second cassa</value>
        [JsonPropertyName("default_cassa2_taxable")]
        public decimal? DefaultCassa2Taxable { get { return this.DefaultCassa2TaxableOption; } set { this.DefaultCassa2TaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultWithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> DefaultWithholdingTaxOption { get; private set; }

        /// <summary>
        /// The default withholding tax
        /// </summary>
        /// <value>The default withholding tax</value>
        [JsonPropertyName("default_withholding_tax")]
        public decimal? DefaultWithholdingTax { get { return this.DefaultWithholdingTaxOption; } set { this.DefaultWithholdingTaxOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultWithholdingTaxTaxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> DefaultWithholdingTaxTaxableOption { get; private set; }

        /// <summary>
        /// The default taxable amount for the withholding tax
        /// </summary>
        /// <value>The default taxable amount for the withholding tax</value>
        [JsonPropertyName("default_withholding_tax_taxable")]
        public decimal? DefaultWithholdingTaxTaxable { get { return this.DefaultWithholdingTaxTaxableOption; } set { this.DefaultWithholdingTaxTaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultOtherWithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> DefaultOtherWithholdingTaxOption { get; private set; }

        /// <summary>
        /// The default other withholding tax
        /// </summary>
        /// <value>The default other withholding tax</value>
        [JsonPropertyName("default_other_withholding_tax")]
        public decimal? DefaultOtherWithholdingTax { get { return this.DefaultOtherWithholdingTaxOption; } set { this.DefaultOtherWithholdingTaxOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Enasarco
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnasarcoOption { get; private set; }

        /// <summary>
        /// If it has enasarco
        /// </summary>
        /// <value>If it has enasarco</value>
        [JsonPropertyName("enasarco")]
        public bool? Enasarco { get { return this.EnasarcoOption; } set { this.EnasarcoOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of EnasarcoType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EnasarcoTypeOption { get; private set; }

        /// <summary>
        /// The enasarco type
        /// </summary>
        /// <value>The enasarco type</value>
        [JsonPropertyName("enasarco_type")]
        public string EnasarcoType { get { return this.EnasarcoTypeOption; } set { this.EnasarcoTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ContributionsPercentage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ContributionsPercentageOption { get; private set; }

        /// <summary>
        /// The contributions percentage
        /// </summary>
        /// <value>The contributions percentage</value>
        [JsonPropertyName("contributions_percentage")]
        public decimal? ContributionsPercentage { get { return this.ContributionsPercentageOption; } set { this.ContributionsPercentageOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of ProfitCoefficient
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ProfitCoefficientOption { get; private set; }

        /// <summary>
        /// The profit coefficient
        /// </summary>
        /// <value>The profit coefficient</value>
        [JsonPropertyName("profit_coefficient")]
        public decimal? ProfitCoefficient { get { return this.ProfitCoefficientOption; } set { this.ProfitCoefficientOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Med
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MedOption { get; private set; }

        /// <summary>
        /// If the health card system is active
        /// </summary>
        /// <value>If the health card system is active</value>
        [JsonPropertyName("med")]
        public bool? Med { get { return this.MedOption; } set { this.MedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultVat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatType> DefaultVatOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultVat
        /// </summary>
        [JsonPropertyName("default_vat")]
        public VatType DefaultVat { get { return this.DefaultVatOption; } set { this.DefaultVatOption = new Option<VatType>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaxProfile {\n");
            sb.Append("  CompanyType: ").Append(CompanyType).Append("\n");
            sb.Append("  CompanySubtype: ").Append(CompanySubtype).Append("\n");
            sb.Append("  Profession: ").Append(Profession).Append("\n");
            sb.Append("  Regime: ").Append(Regime).Append("\n");
            sb.Append("  RivalsaName: ").Append(RivalsaName).Append("\n");
            sb.Append("  DefaultRivalsa: ").Append(DefaultRivalsa).Append("\n");
            sb.Append("  CassaName: ").Append(CassaName).Append("\n");
            sb.Append("  DefaultCassa: ").Append(DefaultCassa).Append("\n");
            sb.Append("  DefaultCassaTaxable: ").Append(DefaultCassaTaxable).Append("\n");
            sb.Append("  Cassa2Name: ").Append(Cassa2Name).Append("\n");
            sb.Append("  DefaultCassa2: ").Append(DefaultCassa2).Append("\n");
            sb.Append("  DefaultCassa2Taxable: ").Append(DefaultCassa2Taxable).Append("\n");
            sb.Append("  DefaultWithholdingTax: ").Append(DefaultWithholdingTax).Append("\n");
            sb.Append("  DefaultWithholdingTaxTaxable: ").Append(DefaultWithholdingTaxTaxable).Append("\n");
            sb.Append("  DefaultOtherWithholdingTax: ").Append(DefaultOtherWithholdingTax).Append("\n");
            sb.Append("  Enasarco: ").Append(Enasarco).Append("\n");
            sb.Append("  EnasarcoType: ").Append(EnasarcoType).Append("\n");
            sb.Append("  ContributionsPercentage: ").Append(ContributionsPercentage).Append("\n");
            sb.Append("  ProfitCoefficient: ").Append(ProfitCoefficient).Append("\n");
            sb.Append("  Med: ").Append(Med).Append("\n");
            sb.Append("  DefaultVat: ").Append(DefaultVat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="TaxProfile" />
    /// </summary>
    public class TaxProfileJsonConverter : JsonConverter<TaxProfile>
    {
        /// <summary>
        /// Deserializes json to <see cref="TaxProfile" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TaxProfile Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> companyType = default;
            Option<string> companySubtype = default;
            Option<string> profession = default;
            Option<string> regime = default;
            Option<string> rivalsaName = default;
            Option<decimal?> defaultRivalsa = default;
            Option<string> cassaName = default;
            Option<decimal?> defaultCassa = default;
            Option<decimal?> defaultCassaTaxable = default;
            Option<string> cassa2Name = default;
            Option<decimal?> defaultCassa2 = default;
            Option<decimal?> defaultCassa2Taxable = default;
            Option<decimal?> defaultWithholdingTax = default;
            Option<decimal?> defaultWithholdingTaxTaxable = default;
            Option<decimal?> defaultOtherWithholdingTax = default;
            Option<bool?> enasarco = default;
            Option<string> enasarcoType = default;
            Option<decimal?> contributionsPercentage = default;
            Option<decimal?> profitCoefficient = default;
            Option<bool?> med = default;
            Option<VatType> defaultVat = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "company_type":
                            companyType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "company_subtype":
                            companySubtype = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "profession":
                            profession = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "regime":
                            regime = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rivalsa_name":
                            rivalsaName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "default_rivalsa":
                            defaultRivalsa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "cassa_name":
                            cassaName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "default_cassa":
                            defaultCassa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "default_cassa_taxable":
                            defaultCassaTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "cassa2_name":
                            cassa2Name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "default_cassa2":
                            defaultCassa2 = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "default_cassa2_taxable":
                            defaultCassa2Taxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "default_withholding_tax":
                            defaultWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "default_withholding_tax_taxable":
                            defaultWithholdingTaxTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "default_other_withholding_tax":
                            defaultOtherWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "enasarco":
                            enasarco = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "enasarco_type":
                            enasarcoType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contributions_percentage":
                            contributionsPercentage = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "profit_coefficient":
                            profitCoefficient = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "med":
                            med = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "default_vat":
                            defaultVat = new Option<VatType>(JsonSerializer.Deserialize<VatType>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new TaxProfile(companyType, companySubtype, profession, regime, rivalsaName, defaultRivalsa, cassaName, defaultCassa, defaultCassaTaxable, cassa2Name, defaultCassa2, defaultCassa2Taxable, defaultWithholdingTax, defaultWithholdingTaxTaxable, defaultOtherWithholdingTax, enasarco, enasarcoType, contributionsPercentage, profitCoefficient, med, defaultVat);
        }

        /// <summary>
        /// Serializes a <see cref="TaxProfile" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="taxProfile"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TaxProfile taxProfile, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, taxProfile, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TaxProfile" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="taxProfile"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TaxProfile taxProfile, JsonSerializerOptions jsonSerializerOptions)
        {
            if (taxProfile.CompanyTypeOption.IsSet)
                if (taxProfile.CompanyTypeOption.Value != null)
                    writer.WriteString("company_type", taxProfile.CompanyType);
                else
                    writer.WriteNull("company_type");

            if (taxProfile.CompanySubtypeOption.IsSet)
                if (taxProfile.CompanySubtypeOption.Value != null)
                    writer.WriteString("company_subtype", taxProfile.CompanySubtype);
                else
                    writer.WriteNull("company_subtype");

            if (taxProfile.ProfessionOption.IsSet)
                if (taxProfile.ProfessionOption.Value != null)
                    writer.WriteString("profession", taxProfile.Profession);
                else
                    writer.WriteNull("profession");

            if (taxProfile.RegimeOption.IsSet)
                if (taxProfile.RegimeOption.Value != null)
                    writer.WriteString("regime", taxProfile.Regime);
                else
                    writer.WriteNull("regime");

            if (taxProfile.RivalsaNameOption.IsSet)
                if (taxProfile.RivalsaNameOption.Value != null)
                    writer.WriteString("rivalsa_name", taxProfile.RivalsaName);
                else
                    writer.WriteNull("rivalsa_name");

            if (taxProfile.DefaultRivalsaOption.IsSet)
                if (taxProfile.DefaultRivalsaOption.Value != null)
                    writer.WriteNumber("default_rivalsa", taxProfile.DefaultRivalsaOption.Value.Value);
                else
                    writer.WriteNull("default_rivalsa");

            if (taxProfile.CassaNameOption.IsSet)
                if (taxProfile.CassaNameOption.Value != null)
                    writer.WriteString("cassa_name", taxProfile.CassaName);
                else
                    writer.WriteNull("cassa_name");

            if (taxProfile.DefaultCassaOption.IsSet)
                if (taxProfile.DefaultCassaOption.Value != null)
                    writer.WriteNumber("default_cassa", taxProfile.DefaultCassaOption.Value.Value);
                else
                    writer.WriteNull("default_cassa");

            if (taxProfile.DefaultCassaTaxableOption.IsSet)
                if (taxProfile.DefaultCassaTaxableOption.Value != null)
                    writer.WriteNumber("default_cassa_taxable", taxProfile.DefaultCassaTaxableOption.Value.Value);
                else
                    writer.WriteNull("default_cassa_taxable");

            if (taxProfile.Cassa2NameOption.IsSet)
                if (taxProfile.Cassa2NameOption.Value != null)
                    writer.WriteString("cassa2_name", taxProfile.Cassa2Name);
                else
                    writer.WriteNull("cassa2_name");

            if (taxProfile.DefaultCassa2Option.IsSet)
                if (taxProfile.DefaultCassa2Option.Value != null)
                    writer.WriteNumber("default_cassa2", taxProfile.DefaultCassa2Option.Value.Value);
                else
                    writer.WriteNull("default_cassa2");

            if (taxProfile.DefaultCassa2TaxableOption.IsSet)
                if (taxProfile.DefaultCassa2TaxableOption.Value != null)
                    writer.WriteNumber("default_cassa2_taxable", taxProfile.DefaultCassa2TaxableOption.Value.Value);
                else
                    writer.WriteNull("default_cassa2_taxable");

            if (taxProfile.DefaultWithholdingTaxOption.IsSet)
                if (taxProfile.DefaultWithholdingTaxOption.Value != null)
                    writer.WriteNumber("default_withholding_tax", taxProfile.DefaultWithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("default_withholding_tax");

            if (taxProfile.DefaultWithholdingTaxTaxableOption.IsSet)
                if (taxProfile.DefaultWithholdingTaxTaxableOption.Value != null)
                    writer.WriteNumber("default_withholding_tax_taxable", taxProfile.DefaultWithholdingTaxTaxableOption.Value.Value);
                else
                    writer.WriteNull("default_withholding_tax_taxable");

            if (taxProfile.DefaultOtherWithholdingTaxOption.IsSet)
                if (taxProfile.DefaultOtherWithholdingTaxOption.Value != null)
                    writer.WriteNumber("default_other_withholding_tax", taxProfile.DefaultOtherWithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("default_other_withholding_tax");

            if (taxProfile.EnasarcoOption.IsSet)
                if (taxProfile.EnasarcoOption.Value != null)
                    writer.WriteBoolean("enasarco", taxProfile.EnasarcoOption.Value.Value);
                else
                    writer.WriteNull("enasarco");

            if (taxProfile.EnasarcoTypeOption.IsSet)
                if (taxProfile.EnasarcoTypeOption.Value != null)
                    writer.WriteString("enasarco_type", taxProfile.EnasarcoType);
                else
                    writer.WriteNull("enasarco_type");

            if (taxProfile.ContributionsPercentageOption.IsSet)
                if (taxProfile.ContributionsPercentageOption.Value != null)
                    writer.WriteNumber("contributions_percentage", taxProfile.ContributionsPercentageOption.Value.Value);
                else
                    writer.WriteNull("contributions_percentage");

            if (taxProfile.ProfitCoefficientOption.IsSet)
                if (taxProfile.ProfitCoefficientOption.Value != null)
                    writer.WriteNumber("profit_coefficient", taxProfile.ProfitCoefficientOption.Value.Value);
                else
                    writer.WriteNull("profit_coefficient");

            if (taxProfile.MedOption.IsSet)
                if (taxProfile.MedOption.Value != null)
                    writer.WriteBoolean("med", taxProfile.MedOption.Value.Value);
                else
                    writer.WriteNull("med");

            if (taxProfile.DefaultVatOption.IsSet)
                if (taxProfile.DefaultVatOption.Value != null)
                {
                    writer.WritePropertyName("default_vat");
                    JsonSerializer.Serialize(writer, taxProfile.DefaultVat, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("default_vat");
        }
    }
}
