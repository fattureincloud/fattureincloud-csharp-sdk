/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     ListUserCompaniesResponseData
    /// </summary>
    [DataContract(Name = "ListUserCompaniesResponse_data")]
    public class ListUserCompaniesResponseData : IEquatable<ListUserCompaniesResponseData>, IValidatableObject
    {
        private List<Company> _Companies;
        private bool _flagCompanies;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ListUserCompaniesResponseData" /> class.
        /// </summary>
        /// <param name="companies">companies.</param>
        public ListUserCompaniesResponseData(List<Company> companies = default(List<Company>))
        {
            _Companies = companies;
            if (Companies != null) _flagCompanies = true;
        }

        /// <summary>
        ///     Gets or Sets Companies
        /// </summary>
        [DataMember(Name = "companies", EmitDefaultValue = true)]
        public List<Company> Companies
        {
            get => _Companies;
            set
            {
                _Companies = value;
                _flagCompanies = true;
            }
        }

        /// <summary>
        ///     Returns false as Companies should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompanies()
        {
            return _flagCompanies;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListUserCompaniesResponseData {\n");
            sb.Append("  Companies: ").Append(Companies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ListUserCompaniesResponseData);
        }

        /// <summary>
        ///     Returns true if ListUserCompaniesResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of ListUserCompaniesResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListUserCompaniesResponseData input)
        {
            if (input == null) return false;
            return
                Companies == input.Companies ||
                (Companies != null &&
                 input.Companies != null &&
                 Companies.SequenceEqual(input.Companies));
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Companies != null) hashCode = hashCode * 59 + Companies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}