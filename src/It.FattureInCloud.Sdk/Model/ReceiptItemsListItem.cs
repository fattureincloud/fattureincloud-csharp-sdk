/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     ReceiptItemsListItem
    /// </summary>
    [DataContract(Name = "ReceiptItemsListItem")]
    public class ReceiptItemsListItem : IEquatable<ReceiptItemsListItem>, IValidatableObject
    {
        private decimal? _AmountGross;
        private decimal? _AmountNet;
        private string _Category;
        private bool _flagAmountGross;
        private bool _flagAmountNet;
        private bool _flagCategory;
        private bool _flagId;
        private bool _flagVat;
        private int? _Id;
        private VatType _Vat;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ReceiptItemsListItem" /> class.
        /// </summary>
        /// <param name="id">Item unique identifier..</param>
        /// <param name="amountNet">Item total net amount..</param>
        /// <param name="amountGross">Item total gross amount..</param>
        /// <param name="category">Item category..</param>
        /// <param name="vat">vat.</param>
        public ReceiptItemsListItem(int? id = default(int?), decimal? amountNet = default(decimal?),
            decimal? amountGross = default(decimal?), string category = default(string), VatType vat = default)
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _AmountNet = amountNet;
            if (AmountNet != null) _flagAmountNet = true;
            _AmountGross = amountGross;
            if (AmountGross != null) _flagAmountGross = true;
            _Category = category;
            if (Category != null) _flagCategory = true;
            _Vat = vat;
            if (Vat != null) _flagVat = true;
        }

        /// <summary>
        ///     Item unique identifier.
        /// </summary>
        /// <value>Item unique identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Item total net amount.
        /// </summary>
        /// <value>Item total net amount.</value>
        [DataMember(Name = "amount_net", EmitDefaultValue = true)]
        public decimal? AmountNet
        {
            get => _AmountNet;
            set
            {
                _AmountNet = value;
                _flagAmountNet = true;
            }
        }

        /// <summary>
        ///     Item total gross amount.
        /// </summary>
        /// <value>Item total gross amount.</value>
        [DataMember(Name = "amount_gross", EmitDefaultValue = true)]
        public decimal? AmountGross
        {
            get => _AmountGross;
            set
            {
                _AmountGross = value;
                _flagAmountGross = true;
            }
        }

        /// <summary>
        ///     Item category.
        /// </summary>
        /// <value>Item category.</value>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category
        {
            get => _Category;
            set
            {
                _Category = value;
                _flagCategory = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Vat
        /// </summary>
        [DataMember(Name = "vat", EmitDefaultValue = true)]
        public VatType Vat
        {
            get => _Vat;
            set
            {
                _Vat = value;
                _flagVat = true;
            }
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as AmountNet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountNet()
        {
            return _flagAmountNet;
        }

        /// <summary>
        ///     Returns false as AmountGross should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountGross()
        {
            return _flagAmountGross;
        }

        /// <summary>
        ///     Returns false as Category should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategory()
        {
            return _flagCategory;
        }

        /// <summary>
        ///     Returns false as Vat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVat()
        {
            return _flagVat;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceiptItemsListItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ReceiptItemsListItem);
        }

        /// <summary>
        ///     Returns true if ReceiptItemsListItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceiptItemsListItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceiptItemsListItem input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    AmountNet == input.AmountNet ||
                    (AmountNet != null &&
                     AmountNet.Equals(input.AmountNet))
                ) &&
                (
                    AmountGross == input.AmountGross ||
                    (AmountGross != null &&
                     AmountGross.Equals(input.AmountGross))
                ) &&
                (
                    Category == input.Category ||
                    (Category != null &&
                     Category.Equals(input.Category))
                ) &&
                (
                    Vat == input.Vat ||
                    (Vat != null &&
                     Vat.Equals(input.Vat))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (AmountNet != null) hashCode = hashCode * 59 + AmountNet.GetHashCode();
                if (AmountGross != null) hashCode = hashCode * 59 + AmountGross.GetHashCode();
                if (Category != null) hashCode = hashCode * 59 + Category.GetHashCode();
                if (Vat != null) hashCode = hashCode * 59 + Vat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}