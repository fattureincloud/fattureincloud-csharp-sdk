// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ReceiptItemsListItem
    /// </summary>
    public partial class ReceiptItemsListItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptItemsListItem" /> class.
        /// </summary>
        /// <param name="id">Receipt item id</param>
        /// <param name="amountNet">Receipt item total net amount</param>
        /// <param name="amountGross">Receipt item total gross amount</param>
        /// <param name="category">Receipt item category</param>
        /// <param name="vat">vat</param>
        [JsonConstructor]
        public ReceiptItemsListItem(Option<int?> id = default, Option<decimal?> amountNet = default, Option<decimal?> amountGross = default, Option<string> category = default, Option<VatType> vat = default)
        {
            IdOption = id;
            AmountNetOption = amountNet;
            AmountGrossOption = amountGross;
            CategoryOption = category;
            VatOption = vat;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Receipt item id
        /// </summary>
        /// <value>Receipt item id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of AmountNet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountNetOption { get; private set; }

        /// <summary>
        /// Receipt item total net amount
        /// </summary>
        /// <value>Receipt item total net amount</value>
        [JsonPropertyName("amount_net")]
        public decimal? AmountNet { get { return this.AmountNetOption; } set { this.AmountNetOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountGross
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountGrossOption { get; private set; }

        /// <summary>
        /// Receipt item total gross amount
        /// </summary>
        /// <value>Receipt item total gross amount</value>
        [JsonPropertyName("amount_gross")]
        public decimal? AmountGross { get { return this.AmountGrossOption; } set { this.AmountGrossOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Category
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CategoryOption { get; private set; }

        /// <summary>
        /// Receipt item category
        /// </summary>
        /// <value>Receipt item category</value>
        [JsonPropertyName("category")]
        public string Category { get { return this.CategoryOption; } set { this.CategoryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Vat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatType> VatOption { get; private set; }

        /// <summary>
        /// Gets or Sets Vat
        /// </summary>
        [JsonPropertyName("vat")]
        public VatType Vat { get { return this.VatOption; } set { this.VatOption = new Option<VatType>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceiptItemsListItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="ReceiptItemsListItem" />
    /// </summary>
    public class ReceiptItemsListItemJsonConverter : JsonConverter<ReceiptItemsListItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReceiptItemsListItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReceiptItemsListItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<decimal?> amountNet = default;
            Option<decimal?> amountGross = default;
            Option<string> category = default;
            Option<VatType> vat = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "amount_net":
                            amountNet = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_gross":
                            amountGross = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "category":
                            category = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vat":
                            vat = new Option<VatType>(JsonSerializer.Deserialize<VatType>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ReceiptItemsListItem(id, amountNet, amountGross, category, vat);
        }

        /// <summary>
        /// Serializes a <see cref="ReceiptItemsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receiptItemsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReceiptItemsListItem receiptItemsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, receiptItemsListItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReceiptItemsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receiptItemsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReceiptItemsListItem receiptItemsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (receiptItemsListItem.IdOption.IsSet)
                if (receiptItemsListItem.IdOption.Value != null)
                    writer.WriteNumber("id", receiptItemsListItem.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (receiptItemsListItem.AmountNetOption.IsSet)
                if (receiptItemsListItem.AmountNetOption.Value != null)
                    writer.WriteNumber("amount_net", receiptItemsListItem.AmountNetOption.Value.Value);
                else
                    writer.WriteNull("amount_net");

            if (receiptItemsListItem.AmountGrossOption.IsSet)
                if (receiptItemsListItem.AmountGrossOption.Value != null)
                    writer.WriteNumber("amount_gross", receiptItemsListItem.AmountGrossOption.Value.Value);
                else
                    writer.WriteNull("amount_gross");

            if (receiptItemsListItem.CategoryOption.IsSet)
                if (receiptItemsListItem.CategoryOption.Value != null)
                    writer.WriteString("category", receiptItemsListItem.Category);
                else
                    writer.WriteNull("category");

            if (receiptItemsListItem.VatOption.IsSet)
                if (receiptItemsListItem.VatOption.Value != null)
                {
                    writer.WritePropertyName("vat");
                    JsonSerializer.Serialize(writer, receiptItemsListItem.Vat, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("vat");
        }
    }
}
