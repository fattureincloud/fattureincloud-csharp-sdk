/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// IssuedDocumentTotalsVatListVatItem
    /// </summary>
    [DataContract(Name = "IssuedDocumentTotals_vat_list_vat_item")]
    public partial class IssuedDocumentTotalsVatListVatItem : IEquatable<IssuedDocumentTotalsVatListVatItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentTotalsVatListVatItem" /> class.
        /// </summary>
        /// <param name="amountNet">amountNet.</param>
        /// <param name="amountVat">amountVat.</param>
        public IssuedDocumentTotalsVatListVatItem(decimal amountNet = default(decimal), decimal amountVat = default(decimal))
        {
            this.AmountNet = amountNet;
            this.AmountVat = amountVat;
        }

        /// <summary>
        /// Gets or Sets AmountNet
        /// </summary>
        [DataMember(Name = "amount_net", EmitDefaultValue = false)]
        public decimal AmountNet { get; set; }

        /// <summary>
        /// Gets or Sets AmountVat
        /// </summary>
        [DataMember(Name = "amount_vat", EmitDefaultValue = false)]
        public decimal AmountVat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssuedDocumentTotalsVatListVatItem {\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocumentTotalsVatListVatItem);
        }

        /// <summary>
        /// Returns true if IssuedDocumentTotalsVatListVatItem instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentTotalsVatListVatItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentTotalsVatListVatItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AmountNet == input.AmountNet ||
                    this.AmountNet.Equals(input.AmountNet)
                ) && 
                (
                    this.AmountVat == input.AmountVat ||
                    this.AmountVat.Equals(input.AmountVat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AmountNet.GetHashCode();
                hashCode = hashCode * 59 + this.AmountVat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
