/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     Limits for this company.
    /// </summary>
    [DataContract(Name = "CompanyInfo_plan_info_limits")]
    public class CompanyInfoPlanInfoLimits : IEquatable<CompanyInfoPlanInfoLimits>, IValidatableObject
    {
        private int? _Clients;
        private int? _Documents;
        private bool _flagClients;
        private bool _flagDocuments;
        private bool _flagProducts;
        private bool _flagSuppliers;
        private int? _Products;
        private int? _Suppliers;

        /// <summary>
        ///     Initializes a new instance of the <see cref="CompanyInfoPlanInfoLimits" /> class.
        /// </summary>
        /// <param name="clients">clients.</param>
        /// <param name="suppliers">suppliers.</param>
        /// <param name="products">products.</param>
        /// <param name="documents">documents.</param>
        public CompanyInfoPlanInfoLimits(int? clients = default(int?), int? suppliers = default(int?),
            int? products = default(int?), int? documents = default(int?))
        {
            _Clients = clients;
            if (Clients != null) _flagClients = true;
            _Suppliers = suppliers;
            if (Suppliers != null) _flagSuppliers = true;
            _Products = products;
            if (Products != null) _flagProducts = true;
            _Documents = documents;
            if (Documents != null) _flagDocuments = true;
        }

        /// <summary>
        ///     Gets or Sets Clients
        /// </summary>
        [DataMember(Name = "clients", EmitDefaultValue = true)]
        public int? Clients
        {
            get => _Clients;
            set
            {
                _Clients = value;
                _flagClients = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Suppliers
        /// </summary>
        [DataMember(Name = "suppliers", EmitDefaultValue = true)]
        public int? Suppliers
        {
            get => _Suppliers;
            set
            {
                _Suppliers = value;
                _flagSuppliers = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Products
        /// </summary>
        [DataMember(Name = "products", EmitDefaultValue = true)]
        public int? Products
        {
            get => _Products;
            set
            {
                _Products = value;
                _flagProducts = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Documents
        /// </summary>
        [DataMember(Name = "documents", EmitDefaultValue = true)]
        public int? Documents
        {
            get => _Documents;
            set
            {
                _Documents = value;
                _flagDocuments = true;
            }
        }

        /// <summary>
        ///     Returns false as Clients should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClients()
        {
            return _flagClients;
        }

        /// <summary>
        ///     Returns false as Suppliers should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSuppliers()
        {
            return _flagSuppliers;
        }

        /// <summary>
        ///     Returns false as Products should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProducts()
        {
            return _flagProducts;
        }

        /// <summary>
        ///     Returns false as Documents should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDocuments()
        {
            return _flagDocuments;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyInfoPlanInfoLimits {\n");
            sb.Append("  Clients: ").Append(Clients).Append("\n");
            sb.Append("  Suppliers: ").Append(Suppliers).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CompanyInfoPlanInfoLimits);
        }

        /// <summary>
        ///     Returns true if CompanyInfoPlanInfoLimits instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyInfoPlanInfoLimits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyInfoPlanInfoLimits input)
        {
            if (input == null) return false;
            return
                (
                    Clients == input.Clients ||
                    (Clients != null &&
                     Clients.Equals(input.Clients))
                ) &&
                (
                    Suppliers == input.Suppliers ||
                    (Suppliers != null &&
                     Suppliers.Equals(input.Suppliers))
                ) &&
                (
                    Products == input.Products ||
                    (Products != null &&
                     Products.Equals(input.Products))
                ) &&
                (
                    Documents == input.Documents ||
                    (Documents != null &&
                     Documents.Equals(input.Documents))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Clients != null) hashCode = hashCode * 59 + Clients.GetHashCode();
                if (Suppliers != null) hashCode = hashCode * 59 + Suppliers.GetHashCode();
                if (Products != null) hashCode = hashCode * 59 + Products.GetHashCode();
                if (Documents != null) hashCode = hashCode * 59 + Documents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}