/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     User
    /// </summary>
    [DataContract(Name = "User")]
    public class User : IEquatable<User>, IValidatableObject
    {
        private string _Email;
        private string _FirstName;
        private bool _flagEmail;
        private bool _flagFirstName;
        private bool _flagHash;
        private bool _flagId;
        private bool _flagLastName;
        private bool _flagName;
        private bool _flagPicture;
        private string _Hash;
        private int? _Id;
        private string _LastName;
        private string _Name;
        private string _Picture;

        /// <summary>
        ///     Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="id">User identifier..</param>
        /// <param name="name">Full name of the user..</param>
        /// <param name="firstName">First name of the user..</param>
        /// <param name="lastName">Last name of the user..</param>
        /// <param name="email">Email of the user..</param>
        /// <param name="hash">hash.</param>
        /// <param name="picture">Picture of the user..</param>
        public User(int? id = default(int?), string name = default(string), string firstName = default(string),
            string lastName = default(string), string email = default(string), string hash = default(string),
            string picture = default(string))
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _Name = name;
            if (Name != null) _flagName = true;
            _FirstName = firstName;
            if (FirstName != null) _flagFirstName = true;
            _LastName = lastName;
            if (LastName != null) _flagLastName = true;
            _Email = email;
            if (Email != null) _flagEmail = true;
            _Hash = hash;
            if (Hash != null) _flagHash = true;
            _Picture = picture;
            if (Picture != null) _flagPicture = true;
        }

        /// <summary>
        ///     User identifier.
        /// </summary>
        /// <value>User identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Full name of the user.
        /// </summary>
        /// <value>Full name of the user.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get => _Name;
            set
            {
                _Name = value;
                _flagName = true;
            }
        }

        /// <summary>
        ///     First name of the user.
        /// </summary>
        /// <value>First name of the user.</value>
        [DataMember(Name = "first_name", EmitDefaultValue = true)]
        public string FirstName
        {
            get => _FirstName;
            set
            {
                _FirstName = value;
                _flagFirstName = true;
            }
        }

        /// <summary>
        ///     Last name of the user.
        /// </summary>
        /// <value>Last name of the user.</value>
        [DataMember(Name = "last_name", EmitDefaultValue = true)]
        public string LastName
        {
            get => _LastName;
            set
            {
                _LastName = value;
                _flagLastName = true;
            }
        }

        /// <summary>
        ///     Email of the user.
        /// </summary>
        /// <value>Email of the user.</value>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email
        {
            get => _Email;
            set
            {
                _Email = value;
                _flagEmail = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Hash
        /// </summary>
        [DataMember(Name = "hash", EmitDefaultValue = true)]
        public string Hash
        {
            get => _Hash;
            set
            {
                _Hash = value;
                _flagHash = true;
            }
        }

        /// <summary>
        ///     Picture of the user.
        /// </summary>
        /// <value>Picture of the user.</value>
        [DataMember(Name = "picture", EmitDefaultValue = true)]
        public string Picture
        {
            get => _Picture;
            set
            {
                _Picture = value;
                _flagPicture = true;
            }
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }

        /// <summary>
        ///     Returns false as FirstName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirstName()
        {
            return _flagFirstName;
        }

        /// <summary>
        ///     Returns false as LastName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastName()
        {
            return _flagLastName;
        }

        /// <summary>
        ///     Returns false as Email should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmail()
        {
            return _flagEmail;
        }

        /// <summary>
        ///     Returns false as Hash should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHash()
        {
            return _flagHash;
        }

        /// <summary>
        ///     Returns false as Picture should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePicture()
        {
            return _flagPicture;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as User);
        }

        /// <summary>
        ///     Returns true if User instances are equal
        /// </summary>
        /// <param name="input">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    FirstName == input.FirstName ||
                    (FirstName != null &&
                     FirstName.Equals(input.FirstName))
                ) &&
                (
                    LastName == input.LastName ||
                    (LastName != null &&
                     LastName.Equals(input.LastName))
                ) &&
                (
                    Email == input.Email ||
                    (Email != null &&
                     Email.Equals(input.Email))
                ) &&
                (
                    Hash == input.Hash ||
                    (Hash != null &&
                     Hash.Equals(input.Hash))
                ) &&
                (
                    Picture == input.Picture ||
                    (Picture != null &&
                     Picture.Equals(input.Picture))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
                if (FirstName != null) hashCode = hashCode * 59 + FirstName.GetHashCode();
                if (LastName != null) hashCode = hashCode * 59 + LastName.GetHashCode();
                if (Email != null) hashCode = hashCode * 59 + Email.GetHashCode();
                if (Hash != null) hashCode = hashCode * 59 + Hash.GetHashCode();
                if (Picture != null) hashCode = hashCode * 59 + Picture.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}