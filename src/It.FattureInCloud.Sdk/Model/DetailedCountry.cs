/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     DetailedCountry
    /// </summary>
    [DataContract(Name = "DetailedCountry")]
    public class DetailedCountry : IEquatable<DetailedCountry>, IValidatableObject
    {
        private string _FiscalIso;
        private bool _flagFiscalIso;
        private bool _flagIso;
        private bool _flagName;
        private bool _flagSettingsName;
        private bool _flagUic;
        private string _Iso;
        private string _Name;
        private string _SettingsName;
        private string _Uic;

        /// <summary>
        ///     Initializes a new instance of the <see cref="DetailedCountry" /> class.
        /// </summary>
        /// <param name="name">Country name..</param>
        /// <param name="settingsName">settingsName.</param>
        /// <param name="iso">Country iso..</param>
        /// <param name="fiscalIso">fiscalIso.</param>
        /// <param name="uic">Country uic..</param>
        public DetailedCountry(string name = default(string), string settingsName = default(string),
            string iso = default(string), string fiscalIso = default(string), string uic = default(string))
        {
            _Name = name;
            if (Name != null) _flagName = true;
            _SettingsName = settingsName;
            if (SettingsName != null) _flagSettingsName = true;
            _Iso = iso;
            if (Iso != null) _flagIso = true;
            _FiscalIso = fiscalIso;
            if (FiscalIso != null) _flagFiscalIso = true;
            _Uic = uic;
            if (Uic != null) _flagUic = true;
        }

        /// <summary>
        ///     Country name.
        /// </summary>
        /// <value>Country name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get => _Name;
            set
            {
                _Name = value;
                _flagName = true;
            }
        }

        /// <summary>
        ///     Gets or Sets SettingsName
        /// </summary>
        [DataMember(Name = "settings_name", EmitDefaultValue = true)]
        public string SettingsName
        {
            get => _SettingsName;
            set
            {
                _SettingsName = value;
                _flagSettingsName = true;
            }
        }

        /// <summary>
        ///     Country iso.
        /// </summary>
        /// <value>Country iso.</value>
        [DataMember(Name = "iso", EmitDefaultValue = true)]
        public string Iso
        {
            get => _Iso;
            set
            {
                _Iso = value;
                _flagIso = true;
            }
        }

        /// <summary>
        ///     Gets or Sets FiscalIso
        /// </summary>
        [DataMember(Name = "fiscal_iso", EmitDefaultValue = true)]
        public string FiscalIso
        {
            get => _FiscalIso;
            set
            {
                _FiscalIso = value;
                _flagFiscalIso = true;
            }
        }

        /// <summary>
        ///     Country uic.
        /// </summary>
        /// <value>Country uic.</value>
        [DataMember(Name = "uic", EmitDefaultValue = true)]
        public string Uic
        {
            get => _Uic;
            set
            {
                _Uic = value;
                _flagUic = true;
            }
        }

        /// <summary>
        ///     Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }

        /// <summary>
        ///     Returns false as SettingsName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSettingsName()
        {
            return _flagSettingsName;
        }

        /// <summary>
        ///     Returns false as Iso should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIso()
        {
            return _flagIso;
        }

        /// <summary>
        ///     Returns false as FiscalIso should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFiscalIso()
        {
            return _flagFiscalIso;
        }

        /// <summary>
        ///     Returns false as Uic should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUic()
        {
            return _flagUic;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DetailedCountry {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SettingsName: ").Append(SettingsName).Append("\n");
            sb.Append("  Iso: ").Append(Iso).Append("\n");
            sb.Append("  FiscalIso: ").Append(FiscalIso).Append("\n");
            sb.Append("  Uic: ").Append(Uic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as DetailedCountry);
        }

        /// <summary>
        ///     Returns true if DetailedCountry instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailedCountry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedCountry input)
        {
            if (input == null) return false;
            return
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    SettingsName == input.SettingsName ||
                    (SettingsName != null &&
                     SettingsName.Equals(input.SettingsName))
                ) &&
                (
                    Iso == input.Iso ||
                    (Iso != null &&
                     Iso.Equals(input.Iso))
                ) &&
                (
                    FiscalIso == input.FiscalIso ||
                    (FiscalIso != null &&
                     FiscalIso.Equals(input.FiscalIso))
                ) &&
                (
                    Uic == input.Uic ||
                    (Uic != null &&
                     Uic.Equals(input.Uic))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
                if (SettingsName != null) hashCode = hashCode * 59 + SettingsName.GetHashCode();
                if (Iso != null) hashCode = hashCode * 59 + Iso.GetHashCode();
                if (FiscalIso != null) hashCode = hashCode * 59 + FiscalIso.GetHashCode();
                if (Uic != null) hashCode = hashCode * 59 + Uic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}