// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// DetailedCountry
    /// </summary>
    public partial class DetailedCountry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedCountry" /> class.
        /// </summary>
        /// <param name="name">Country name</param>
        /// <param name="settingsName">Country settings name</param>
        /// <param name="iso">Country iso code</param>
        /// <param name="fiscalIso">Country fiscal iso code</param>
        /// <param name="uic">Country uic</param>
        [JsonConstructor]
        public DetailedCountry(Option<string> name = default, Option<string> settingsName = default, Option<string> iso = default, Option<string> fiscalIso = default, Option<string> uic = default)
        {
            NameOption = name;
            SettingsNameOption = settingsName;
            IsoOption = iso;
            FiscalIsoOption = fiscalIso;
            UicOption = uic;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Country name
        /// </summary>
        /// <value>Country name</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SettingsName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SettingsNameOption { get; private set; }

        /// <summary>
        /// Country settings name
        /// </summary>
        /// <value>Country settings name</value>
        [JsonPropertyName("settings_name")]
        public string SettingsName { get { return this.SettingsNameOption; } set { this.SettingsNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Iso
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IsoOption { get; private set; }

        /// <summary>
        /// Country iso code
        /// </summary>
        /// <value>Country iso code</value>
        [JsonPropertyName("iso")]
        public string Iso { get { return this.IsoOption; } set { this.IsoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FiscalIso
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FiscalIsoOption { get; private set; }

        /// <summary>
        /// Country fiscal iso code
        /// </summary>
        /// <value>Country fiscal iso code</value>
        [JsonPropertyName("fiscal_iso")]
        public string FiscalIso { get { return this.FiscalIsoOption; } set { this.FiscalIsoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Uic
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UicOption { get; private set; }

        /// <summary>
        /// Country uic
        /// </summary>
        /// <value>Country uic</value>
        [JsonPropertyName("uic")]
        public string Uic { get { return this.UicOption; } set { this.UicOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DetailedCountry {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SettingsName: ").Append(SettingsName).Append("\n");
            sb.Append("  Iso: ").Append(Iso).Append("\n");
            sb.Append("  FiscalIso: ").Append(FiscalIso).Append("\n");
            sb.Append("  Uic: ").Append(Uic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="DetailedCountry" />
    /// </summary>
    public class DetailedCountryJsonConverter : JsonConverter<DetailedCountry>
    {
        /// <summary>
        /// Deserializes json to <see cref="DetailedCountry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DetailedCountry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<string> settingsName = default;
            Option<string> iso = default;
            Option<string> fiscalIso = default;
            Option<string> uic = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "settings_name":
                            settingsName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "iso":
                            iso = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fiscal_iso":
                            fiscalIso = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "uic":
                            uic = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new DetailedCountry(name, settingsName, iso, fiscalIso, uic);
        }

        /// <summary>
        /// Serializes a <see cref="DetailedCountry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="detailedCountry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DetailedCountry detailedCountry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, detailedCountry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DetailedCountry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="detailedCountry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DetailedCountry detailedCountry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (detailedCountry.NameOption.IsSet)
                if (detailedCountry.NameOption.Value != null)
                    writer.WriteString("name", detailedCountry.Name);
                else
                    writer.WriteNull("name");

            if (detailedCountry.SettingsNameOption.IsSet)
                if (detailedCountry.SettingsNameOption.Value != null)
                    writer.WriteString("settings_name", detailedCountry.SettingsName);
                else
                    writer.WriteNull("settings_name");

            if (detailedCountry.IsoOption.IsSet)
                if (detailedCountry.IsoOption.Value != null)
                    writer.WriteString("iso", detailedCountry.Iso);
                else
                    writer.WriteNull("iso");

            if (detailedCountry.FiscalIsoOption.IsSet)
                if (detailedCountry.FiscalIsoOption.Value != null)
                    writer.WriteString("fiscal_iso", detailedCountry.FiscalIso);
                else
                    writer.WriteNull("fiscal_iso");

            if (detailedCountry.UicOption.IsSet)
                if (detailedCountry.UicOption.Value != null)
                    writer.WriteString("uic", detailedCountry.Uic);
                else
                    writer.WriteNull("uic");
        }
    }
}
