/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     Receipt
    /// </summary>
    [DataContract(Name = "Receipt")]
    public class Receipt : IEquatable<Receipt>, IValidatableObject
    {
        private decimal? _AmountGross;
        private decimal? _AmountNet;
        private decimal? _AmountVat;
        private string _CreatedAt;
        private DateTime? _Date;
        private string _Description;
        private bool _flagAmountGross;
        private bool _flagAmountNet;
        private bool _flagAmountVat;
        private bool _flagCreatedAt;
        private bool _flagDate;
        private bool _flagDescription;
        private bool _flagId;
        private bool _flagItemsList;
        private bool _flagNumber;
        private bool _flagNumeration;
        private bool _flagPaymentAccount;
        private bool _flagRcCenter;
        private bool _flagType;
        private bool _flagUpdatedAt;
        private bool _flagUseGrossPrices;
        private int? _Id;
        private List<ReceiptItemsListItem> _ItemsList;
        private decimal? _Number;
        private string _Numeration;
        private PaymentAccount _PaymentAccount;
        private string _RcCenter;
        private ReceiptType? _Type;
        private string _UpdatedAt;
        private bool? _UseGrossPrices;

        /// <summary>
        ///     Initializes a new instance of the <see cref="Receipt" /> class.
        /// </summary>
        /// <param name="id">Receipt unique identifier..</param>
        /// <param name="date">Receipt date..</param>
        /// <param name="number">Receipt number..</param>
        /// <param name="numeration">If it&#39;s null or empty string use the default numeration..</param>
        /// <param name="amountNet">Total net amount..</param>
        /// <param name="amountVat">Total vat amount..</param>
        /// <param name="amountGross">Total gross amount..</param>
        /// <param name="useGrossPrices">useGrossPrices.</param>
        /// <param name="type">type.</param>
        /// <param name="description">Receipt description..</param>
        /// <param name="rcCenter">Revenue center..</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="paymentAccount">paymentAccount.</param>
        /// <param name="itemsList">itemsList.</param>
        public Receipt(int? id = default(int?), DateTime? date = default(DateTime?),
            decimal? number = default(decimal?), string numeration = default(string),
            decimal? amountNet = default(decimal?), decimal? amountVat = default(decimal?),
            decimal? amountGross = default(decimal?), bool? useGrossPrices = default(bool?),
            ReceiptType? type = default(ReceiptType?), string description = default(string),
            string rcCenter = default(string), string createdAt = default(string), string updatedAt = default(string),
            PaymentAccount paymentAccount = default,
            List<ReceiptItemsListItem> itemsList = default(List<ReceiptItemsListItem>))
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _Date = date;
            if (Date != null) _flagDate = true;
            _Number = number;
            if (Number != null) _flagNumber = true;
            _Numeration = numeration;
            if (Numeration != null) _flagNumeration = true;
            _AmountNet = amountNet;
            if (AmountNet != null) _flagAmountNet = true;
            _AmountVat = amountVat;
            if (AmountVat != null) _flagAmountVat = true;
            _AmountGross = amountGross;
            if (AmountGross != null) _flagAmountGross = true;
            _UseGrossPrices = useGrossPrices;
            if (UseGrossPrices != null) _flagUseGrossPrices = true;
            _Type = type;
            if (Type != null) _flagType = true;
            _Description = description;
            if (Description != null) _flagDescription = true;
            _RcCenter = rcCenter;
            if (RcCenter != null) _flagRcCenter = true;
            _CreatedAt = createdAt;
            if (CreatedAt != null) _flagCreatedAt = true;
            _UpdatedAt = updatedAt;
            if (UpdatedAt != null) _flagUpdatedAt = true;
            _PaymentAccount = paymentAccount;
            if (PaymentAccount != null) _flagPaymentAccount = true;
            _ItemsList = itemsList;
            if (ItemsList != null) _flagItemsList = true;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = false)]
        public ReceiptType? Type
        {
            get => _Type;
            set
            {
                _Type = value;
                _flagType = true;
            }
        }

        /// <summary>
        ///     Receipt unique identifier.
        /// </summary>
        /// <value>Receipt unique identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Receipt date.
        /// </summary>
        /// <value>Receipt date.</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateTime? Date
        {
            get => _Date;
            set
            {
                _Date = value;
                _flagDate = true;
            }
        }

        /// <summary>
        ///     Receipt number.
        /// </summary>
        /// <value>Receipt number.</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public decimal? Number
        {
            get => _Number;
            set
            {
                _Number = value;
                _flagNumber = true;
            }
        }

        /// <summary>
        ///     If it&#39;s null or empty string use the default numeration.
        /// </summary>
        /// <value>If it&#39;s null or empty string use the default numeration.</value>
        [DataMember(Name = "numeration", EmitDefaultValue = true)]
        public string Numeration
        {
            get => _Numeration;
            set
            {
                _Numeration = value;
                _flagNumeration = true;
            }
        }

        /// <summary>
        ///     Total net amount.
        /// </summary>
        /// <value>Total net amount.</value>
        [DataMember(Name = "amount_net", EmitDefaultValue = true)]
        public decimal? AmountNet
        {
            get => _AmountNet;
            set
            {
                _AmountNet = value;
                _flagAmountNet = true;
            }
        }

        /// <summary>
        ///     Total vat amount.
        /// </summary>
        /// <value>Total vat amount.</value>
        [DataMember(Name = "amount_vat", EmitDefaultValue = true)]
        public decimal? AmountVat
        {
            get => _AmountVat;
            set
            {
                _AmountVat = value;
                _flagAmountVat = true;
            }
        }

        /// <summary>
        ///     Total gross amount.
        /// </summary>
        /// <value>Total gross amount.</value>
        [DataMember(Name = "amount_gross", EmitDefaultValue = true)]
        public decimal? AmountGross
        {
            get => _AmountGross;
            set
            {
                _AmountGross = value;
                _flagAmountGross = true;
            }
        }

        /// <summary>
        ///     Gets or Sets UseGrossPrices
        /// </summary>
        [DataMember(Name = "use_gross_prices", EmitDefaultValue = true)]
        public bool? UseGrossPrices
        {
            get => _UseGrossPrices;
            set
            {
                _UseGrossPrices = value;
                _flagUseGrossPrices = true;
            }
        }

        /// <summary>
        ///     Receipt description.
        /// </summary>
        /// <value>Receipt description.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get => _Description;
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }

        /// <summary>
        ///     Revenue center.
        /// </summary>
        /// <value>Revenue center.</value>
        [DataMember(Name = "rc_center", EmitDefaultValue = true)]
        public string RcCenter
        {
            get => _RcCenter;
            set
            {
                _RcCenter = value;
                _flagRcCenter = true;
            }
        }

        /// <summary>
        ///     Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt
        {
            get => _CreatedAt;
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }

        /// <summary>
        ///     Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt
        {
            get => _UpdatedAt;
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }

        /// <summary>
        ///     Gets or Sets PaymentAccount
        /// </summary>
        [DataMember(Name = "payment_account", EmitDefaultValue = true)]
        public PaymentAccount PaymentAccount
        {
            get => _PaymentAccount;
            set
            {
                _PaymentAccount = value;
                _flagPaymentAccount = true;
            }
        }

        /// <summary>
        ///     Gets or Sets ItemsList
        /// </summary>
        [DataMember(Name = "items_list", EmitDefaultValue = true)]
        public List<ReceiptItemsListItem> ItemsList
        {
            get => _ItemsList;
            set
            {
                _ItemsList = value;
                _flagItemsList = true;
            }
        }

        /// <summary>
        ///     Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as Date should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDate()
        {
            return _flagDate;
        }

        /// <summary>
        ///     Returns false as Number should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumber()
        {
            return _flagNumber;
        }

        /// <summary>
        ///     Returns false as Numeration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumeration()
        {
            return _flagNumeration;
        }

        /// <summary>
        ///     Returns false as AmountNet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountNet()
        {
            return _flagAmountNet;
        }

        /// <summary>
        ///     Returns false as AmountVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountVat()
        {
            return _flagAmountVat;
        }

        /// <summary>
        ///     Returns false as AmountGross should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountGross()
        {
            return _flagAmountGross;
        }

        /// <summary>
        ///     Returns false as UseGrossPrices should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseGrossPrices()
        {
            return _flagUseGrossPrices;
        }

        /// <summary>
        ///     Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }

        /// <summary>
        ///     Returns false as RcCenter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRcCenter()
        {
            return _flagRcCenter;
        }

        /// <summary>
        ///     Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }

        /// <summary>
        ///     Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }

        /// <summary>
        ///     Returns false as PaymentAccount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccount()
        {
            return _flagPaymentAccount;
        }

        /// <summary>
        ///     Returns false as ItemsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItemsList()
        {
            return _flagItemsList;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Receipt {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Numeration: ").Append(Numeration).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  UseGrossPrices: ").Append(UseGrossPrices).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RcCenter: ").Append(RcCenter).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  PaymentAccount: ").Append(PaymentAccount).Append("\n");
            sb.Append("  ItemsList: ").Append(ItemsList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Receipt);
        }

        /// <summary>
        ///     Returns true if Receipt instances are equal
        /// </summary>
        /// <param name="input">Instance of Receipt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Receipt input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Date == input.Date ||
                    (Date != null &&
                     Date.Equals(input.Date))
                ) &&
                (
                    Number == input.Number ||
                    (Number != null &&
                     Number.Equals(input.Number))
                ) &&
                (
                    Numeration == input.Numeration ||
                    (Numeration != null &&
                     Numeration.Equals(input.Numeration))
                ) &&
                (
                    AmountNet == input.AmountNet ||
                    (AmountNet != null &&
                     AmountNet.Equals(input.AmountNet))
                ) &&
                (
                    AmountVat == input.AmountVat ||
                    (AmountVat != null &&
                     AmountVat.Equals(input.AmountVat))
                ) &&
                (
                    AmountGross == input.AmountGross ||
                    (AmountGross != null &&
                     AmountGross.Equals(input.AmountGross))
                ) &&
                (
                    UseGrossPrices == input.UseGrossPrices ||
                    (UseGrossPrices != null &&
                     UseGrossPrices.Equals(input.UseGrossPrices))
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    Description == input.Description ||
                    (Description != null &&
                     Description.Equals(input.Description))
                ) &&
                (
                    RcCenter == input.RcCenter ||
                    (RcCenter != null &&
                     RcCenter.Equals(input.RcCenter))
                ) &&
                (
                    CreatedAt == input.CreatedAt ||
                    (CreatedAt != null &&
                     CreatedAt.Equals(input.CreatedAt))
                ) &&
                (
                    UpdatedAt == input.UpdatedAt ||
                    (UpdatedAt != null &&
                     UpdatedAt.Equals(input.UpdatedAt))
                ) &&
                (
                    PaymentAccount == input.PaymentAccount ||
                    (PaymentAccount != null &&
                     PaymentAccount.Equals(input.PaymentAccount))
                ) &&
                (
                    ItemsList == input.ItemsList ||
                    (ItemsList != null &&
                     input.ItemsList != null &&
                     ItemsList.SequenceEqual(input.ItemsList))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (Date != null) hashCode = hashCode * 59 + Date.GetHashCode();
                if (Number != null) hashCode = hashCode * 59 + Number.GetHashCode();
                if (Numeration != null) hashCode = hashCode * 59 + Numeration.GetHashCode();
                if (AmountNet != null) hashCode = hashCode * 59 + AmountNet.GetHashCode();
                if (AmountVat != null) hashCode = hashCode * 59 + AmountVat.GetHashCode();
                if (AmountGross != null) hashCode = hashCode * 59 + AmountGross.GetHashCode();
                if (UseGrossPrices != null) hashCode = hashCode * 59 + UseGrossPrices.GetHashCode();
                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Description != null) hashCode = hashCode * 59 + Description.GetHashCode();
                if (RcCenter != null) hashCode = hashCode * 59 + RcCenter.GetHashCode();
                if (CreatedAt != null) hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                if (UpdatedAt != null) hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                if (PaymentAccount != null) hashCode = hashCode * 59 + PaymentAccount.GetHashCode();
                if (ItemsList != null) hashCode = hashCode * 59 + ItemsList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}