// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Receipt
    /// </summary>
    public partial class Receipt : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Receipt" /> class.
        /// </summary>
        /// <param name="id">Receipt id</param>
        /// <param name="date">Receipt date</param>
        /// <param name="number">Receipt number</param>
        /// <param name="numeration">Receipt numeration</param>
        /// <param name="amountNet">Receipt total net amount</param>
        /// <param name="amountVat">Receipt total vat amount</param>
        /// <param name="amountGross">Receipt total gross amount</param>
        /// <param name="useGrossPrices">Receipt uses gross prices</param>
        /// <param name="type">type</param>
        /// <param name="description">Receipt description</param>
        /// <param name="rcCenter">Receipt revenue center</param>
        /// <param name="createdAt">Receipt creation date</param>
        /// <param name="updatedAt">Receipt last update date</param>
        /// <param name="paymentAccount">paymentAccount</param>
        /// <param name="itemsList">itemsList</param>
        [JsonConstructor]
        public Receipt(Option<int?> id = default, Option<DateTimeOffset?> date = default, Option<decimal?> number = default, Option<string> numeration = default, Option<decimal?> amountNet = default, Option<decimal?> amountVat = default, Option<decimal?> amountGross = default, Option<bool?> useGrossPrices = default, Option<ReceiptType?> type = default, Option<string> description = default, Option<string> rcCenter = default, Option<string> createdAt = default, Option<string> updatedAt = default, Option<PaymentAccount> paymentAccount = default, Option<List<ReceiptItemsListItem>> itemsList = default)
        {
            IdOption = id;
            DateOption = date;
            NumberOption = number;
            NumerationOption = numeration;
            AmountNetOption = amountNet;
            AmountVatOption = amountVat;
            AmountGrossOption = amountGross;
            UseGrossPricesOption = useGrossPrices;
            TypeOption = type;
            DescriptionOption = description;
            RcCenterOption = rcCenter;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            PaymentAccountOption = paymentAccount;
            ItemsListOption = itemsList;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReceiptType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public ReceiptType? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<ReceiptType?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Receipt id
        /// </summary>
        /// <value>Receipt id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> DateOption { get; private set; }

        /// <summary>
        /// Receipt date
        /// </summary>
        /// <value>Receipt date</value>
        [JsonPropertyName("date")]
        public DateTimeOffset? Date { get { return this.DateOption; } set { this.DateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> NumberOption { get; private set; }

        /// <summary>
        /// Receipt number
        /// </summary>
        /// <value>Receipt number</value>
        [JsonPropertyName("number")]
        public decimal? Number { get { return this.NumberOption; } set { this.NumberOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Numeration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NumerationOption { get; private set; }

        /// <summary>
        /// Receipt numeration
        /// </summary>
        /// <value>Receipt numeration</value>
        [JsonPropertyName("numeration")]
        public string Numeration { get { return this.NumerationOption; } set { this.NumerationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AmountNet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountNetOption { get; private set; }

        /// <summary>
        /// Receipt total net amount
        /// </summary>
        /// <value>Receipt total net amount</value>
        [JsonPropertyName("amount_net")]
        public decimal? AmountNet { get { return this.AmountNetOption; } set { this.AmountNetOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountVat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountVatOption { get; private set; }

        /// <summary>
        /// Receipt total vat amount
        /// </summary>
        /// <value>Receipt total vat amount</value>
        [JsonPropertyName("amount_vat")]
        public decimal? AmountVat { get { return this.AmountVatOption; } set { this.AmountVatOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountGross
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountGrossOption { get; private set; }

        /// <summary>
        /// Receipt total gross amount
        /// </summary>
        /// <value>Receipt total gross amount</value>
        [JsonPropertyName("amount_gross")]
        public decimal? AmountGross { get { return this.AmountGrossOption; } set { this.AmountGrossOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of UseGrossPrices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseGrossPricesOption { get; private set; }

        /// <summary>
        /// Receipt uses gross prices
        /// </summary>
        /// <value>Receipt uses gross prices</value>
        [JsonPropertyName("use_gross_prices")]
        public bool? UseGrossPrices { get { return this.UseGrossPricesOption; } set { this.UseGrossPricesOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Receipt description
        /// </summary>
        /// <value>Receipt description</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RcCenter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RcCenterOption { get; private set; }

        /// <summary>
        /// Receipt revenue center
        /// </summary>
        /// <value>Receipt revenue center</value>
        [JsonPropertyName("rc_center")]
        public string RcCenter { get { return this.RcCenterOption; } set { this.RcCenterOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CreatedAtOption { get; private set; }

        /// <summary>
        /// Receipt creation date
        /// </summary>
        /// <value>Receipt creation date</value>
        [JsonPropertyName("created_at")]
        public string CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Receipt last update date
        /// </summary>
        /// <value>Receipt last update date</value>
        [JsonPropertyName("updated_at")]
        public string UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaymentAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentAccount> PaymentAccountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentAccount
        /// </summary>
        [JsonPropertyName("payment_account")]
        public PaymentAccount PaymentAccount { get { return this.PaymentAccountOption; } set { this.PaymentAccountOption = new Option<PaymentAccount>(value); } }

        /// <summary>
        /// Used to track the state of ItemsList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ReceiptItemsListItem>> ItemsListOption { get; private set; }

        /// <summary>
        /// Gets or Sets ItemsList
        /// </summary>
        [JsonPropertyName("items_list")]
        public List<ReceiptItemsListItem> ItemsList { get { return this.ItemsListOption; } set { this.ItemsListOption = new Option<List<ReceiptItemsListItem>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Receipt {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Numeration: ").Append(Numeration).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  UseGrossPrices: ").Append(UseGrossPrices).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RcCenter: ").Append(RcCenter).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  PaymentAccount: ").Append(PaymentAccount).Append("\n");
            sb.Append("  ItemsList: ").Append(ItemsList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="Receipt" />
    /// </summary>
    public class ReceiptJsonConverter : JsonConverter<Receipt>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="Receipt" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Receipt Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<DateTimeOffset?> date = default;
            Option<decimal?> number = default;
            Option<string> numeration = default;
            Option<decimal?> amountNet = default;
            Option<decimal?> amountVat = default;
            Option<decimal?> amountGross = default;
            Option<bool?> useGrossPrices = default;
            Option<ReceiptType?> type = default;
            Option<string> description = default;
            Option<string> rcCenter = default;
            Option<string> createdAt = default;
            Option<string> updatedAt = default;
            Option<PaymentAccount> paymentAccount = default;
            Option<List<ReceiptItemsListItem>> itemsList = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "date":
                            date = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "number":
                            number = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "numeration":
                            numeration = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "amount_net":
                            amountNet = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_vat":
                            amountVat = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_gross":
                            amountGross = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "use_gross_prices":
                            useGrossPrices = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ReceiptType?>(ReceiptTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rc_center":
                            rcCenter = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "created_at":
                            createdAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "payment_account":
                            paymentAccount = new Option<PaymentAccount>(JsonSerializer.Deserialize<PaymentAccount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "items_list":
                            itemsList = new Option<List<ReceiptItemsListItem>>(JsonSerializer.Deserialize<List<ReceiptItemsListItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Receipt.");

            return new Receipt(id, date, number, numeration, amountNet, amountVat, amountGross, useGrossPrices, type, description, rcCenter, createdAt, updatedAt, paymentAccount, itemsList);
        }

        /// <summary>
        /// Serializes a <see cref="Receipt" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receipt"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Receipt receipt, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, receipt, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Receipt" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receipt"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Receipt receipt, JsonSerializerOptions jsonSerializerOptions)
        {
            if (receipt.IdOption.IsSet)
                if (receipt.IdOption.Value != null)
                    writer.WriteNumber("id", receipt.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (receipt.DateOption.IsSet)
                if (receipt.DateOption.Value != null)
                    writer.WriteString("date", receipt.DateOption.Value.Value.ToString(DateFormat));
                else
                    writer.WriteNull("date");

            if (receipt.NumberOption.IsSet)
                if (receipt.NumberOption.Value != null)
                    writer.WriteNumber("number", receipt.NumberOption.Value.Value);
                else
                    writer.WriteNull("number");

            if (receipt.NumerationOption.IsSet)
                if (receipt.NumerationOption.Value != null)
                    writer.WriteString("numeration", receipt.Numeration);
                else
                    writer.WriteNull("numeration");

            if (receipt.AmountNetOption.IsSet)
                if (receipt.AmountNetOption.Value != null)
                    writer.WriteNumber("amount_net", receipt.AmountNetOption.Value.Value);
                else
                    writer.WriteNull("amount_net");

            if (receipt.AmountVatOption.IsSet)
                if (receipt.AmountVatOption.Value != null)
                    writer.WriteNumber("amount_vat", receipt.AmountVatOption.Value.Value);
                else
                    writer.WriteNull("amount_vat");

            if (receipt.AmountGrossOption.IsSet)
                if (receipt.AmountGrossOption.Value != null)
                    writer.WriteNumber("amount_gross", receipt.AmountGrossOption.Value.Value);
                else
                    writer.WriteNull("amount_gross");

            if (receipt.UseGrossPricesOption.IsSet)
                if (receipt.UseGrossPricesOption.Value != null)
                    writer.WriteBoolean("use_gross_prices", receipt.UseGrossPricesOption.Value.Value);
                else
                    writer.WriteNull("use_gross_prices");

            if (receipt.TypeOption.IsSet)
            {
                var typeRawValue = ReceiptTypeValueConverter.ToJsonValue(receipt.Type.Value);
                writer.WriteString("type", typeRawValue);
            }
            if (receipt.DescriptionOption.IsSet)
                if (receipt.DescriptionOption.Value != null)
                    writer.WriteString("description", receipt.Description);
                else
                    writer.WriteNull("description");

            if (receipt.RcCenterOption.IsSet)
                if (receipt.RcCenterOption.Value != null)
                    writer.WriteString("rc_center", receipt.RcCenter);
                else
                    writer.WriteNull("rc_center");

            if (receipt.CreatedAtOption.IsSet)
                if (receipt.CreatedAtOption.Value != null)
                    writer.WriteString("created_at", receipt.CreatedAt);
                else
                    writer.WriteNull("created_at");

            if (receipt.UpdatedAtOption.IsSet)
                if (receipt.UpdatedAtOption.Value != null)
                    writer.WriteString("updated_at", receipt.UpdatedAt);
                else
                    writer.WriteNull("updated_at");

            if (receipt.PaymentAccountOption.IsSet)
                if (receipt.PaymentAccountOption.Value != null)
                {
                    writer.WritePropertyName("payment_account");
                    JsonSerializer.Serialize(writer, receipt.PaymentAccount, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_account");
            if (receipt.ItemsListOption.IsSet)
                if (receipt.ItemsListOption.Value != null)
                {
                    writer.WritePropertyName("items_list");
                    JsonSerializer.Serialize(writer, receipt.ItemsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items_list");
        }
    }
}
