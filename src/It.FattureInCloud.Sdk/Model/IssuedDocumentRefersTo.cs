/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Link to another document (e.g. the original proforma or the quote from which this has been created).
    /// </summary>
    [DataContract(Name = "IssuedDocument_refers_to")]
    public partial class IssuedDocumentRefersTo : IEquatable<IssuedDocumentRefersTo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentRefersTo" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the linked document (can be null if the document has been deleted or other reasons)..</param>
        /// <param name="date">Date of the linked document..</param>
        /// <param name="number">Number of the linked document..</param>
        /// <param name="numeration">Numeration of the linked document..</param>
        /// <param name="description">Description to show..</param>
        public IssuedDocumentRefersTo(int id = default(int), DateTimeOffset date = default(DateTimeOffset), int number = default(int), string numeration = default(string), string description = default(string))
        {
            this.Id = id;
            this.Date = date;
            this.Number = number;
            this.Numeration = numeration;
            this.Description = description;
        }

        /// <summary>
        /// Unique identifier of the linked document (can be null if the document has been deleted or other reasons).
        /// </summary>
        /// <value>Unique identifier of the linked document (can be null if the document has been deleted or other reasons).</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Date of the linked document.
        /// </summary>
        /// <value>Date of the linked document.</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset Date { get; set; }

        /// <summary>
        /// Number of the linked document.
        /// </summary>
        /// <value>Number of the linked document.</value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public int Number { get; set; }

        /// <summary>
        /// Numeration of the linked document.
        /// </summary>
        /// <value>Numeration of the linked document.</value>
        [DataMember(Name = "numeration", EmitDefaultValue = false)]
        public string Numeration { get; set; }

        /// <summary>
        /// Description to show.
        /// </summary>
        /// <value>Description to show.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssuedDocumentRefersTo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Numeration: ").Append(Numeration).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocumentRefersTo);
        }

        /// <summary>
        /// Returns true if IssuedDocumentRefersTo instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentRefersTo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentRefersTo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                ) && 
                (
                    this.Numeration == input.Numeration ||
                    (this.Numeration != null &&
                    this.Numeration.Equals(input.Numeration))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Numeration != null)
                    hashCode = hashCode * 59 + this.Numeration.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
