// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// WebhooksSubscription
    /// </summary>
    public partial class WebhooksSubscription : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksSubscription" /> class.
        /// </summary>
        /// <param name="id">Webhooks subscription id</param>
        /// <param name="sink">Webhooks callback uri.</param>
        /// <param name="verified">[Read Only] True if the webhooks subscription has been verified.</param>
        /// <param name="types">Webhooks events types.</param>
        /// <param name="config">config</param>
        /// <param name="verificationMethod">verificationMethod</param>
        [JsonConstructor]
        public WebhooksSubscription(Option<string> id = default, Option<string> sink = default, Option<bool?> verified = default, Option<List<EventType>> types = default, Option<WebhooksSubscriptionConfig> config = default, Option<WebhooksSubscriptionVerificationMethod?> verificationMethod = default)
        {
            IdOption = id;
            SinkOption = sink;
            VerifiedOption = verified;
            TypesOption = types;
            ConfigOption = config;
            VerificationMethodOption = verificationMethod;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VerificationMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebhooksSubscriptionVerificationMethod?> VerificationMethodOption { get; private set; }

        /// <summary>
        /// Gets or Sets VerificationMethod
        /// </summary>
        [JsonPropertyName("verification_method")]
        public WebhooksSubscriptionVerificationMethod? VerificationMethod { get { return this.VerificationMethodOption; } set { this.VerificationMethodOption = new Option<WebhooksSubscriptionVerificationMethod?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// Webhooks subscription id
        /// </summary>
        /// <value>Webhooks subscription id</value>
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Sink
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SinkOption { get; private set; }

        /// <summary>
        /// Webhooks callback uri.
        /// </summary>
        /// <value>Webhooks callback uri.</value>
        [JsonPropertyName("sink")]
        public string Sink { get { return this.SinkOption; } set { this.SinkOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Verified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> VerifiedOption { get; private set; }

        /// <summary>
        /// [Read Only] True if the webhooks subscription has been verified.
        /// </summary>
        /// <value>[Read Only] True if the webhooks subscription has been verified.</value>
        [JsonPropertyName("verified")]
        public bool? Verified { get { return this.VerifiedOption; } set { this.VerifiedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Types
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EventType>> TypesOption { get; private set; }

        /// <summary>
        /// Webhooks events types.
        /// </summary>
        /// <value>Webhooks events types.</value>
        [JsonPropertyName("types")]
        public List<EventType> Types { get { return this.TypesOption; } set { this.TypesOption = new Option<List<EventType>>(value); } }

        /// <summary>
        /// Used to track the state of Config
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebhooksSubscriptionConfig> ConfigOption { get; private set; }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [JsonPropertyName("config")]
        public WebhooksSubscriptionConfig Config { get { return this.ConfigOption; } set { this.ConfigOption = new Option<WebhooksSubscriptionConfig>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhooksSubscription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sink: ").Append(Sink).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  VerificationMethod: ").Append(VerificationMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="WebhooksSubscription" />
    /// </summary>
    public class WebhooksSubscriptionJsonConverter : JsonConverter<WebhooksSubscription>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebhooksSubscription" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhooksSubscription Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> id = default;
            Option<string> sink = default;
            Option<bool?> verified = default;
            Option<List<EventType>> types = default;
            Option<WebhooksSubscriptionConfig> config = default;
            Option<WebhooksSubscriptionVerificationMethod?> verificationMethod = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sink":
                            sink = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "verified":
                            verified = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "types":
                            types = new Option<List<EventType>>(JsonSerializer.Deserialize<List<EventType>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "config":
                            config = new Option<WebhooksSubscriptionConfig>(JsonSerializer.Deserialize<WebhooksSubscriptionConfig>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "verification_method":
                            string verificationMethodRawValue = utf8JsonReader.GetString();
                            if (verificationMethodRawValue != null)
                                verificationMethod = new Option<WebhooksSubscriptionVerificationMethod?>(WebhooksSubscriptionVerificationMethodValueConverter.FromStringOrDefault(verificationMethodRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (config.IsSet && config.Value == null)
                throw new ArgumentNullException(nameof(config), "Property is not nullable for class WebhooksSubscription.");

            if (verificationMethod.IsSet && verificationMethod.Value == null)
                throw new ArgumentNullException(nameof(verificationMethod), "Property is not nullable for class WebhooksSubscription.");

            return new WebhooksSubscription(id, sink, verified, types, config, verificationMethod);
        }

        /// <summary>
        /// Serializes a <see cref="WebhooksSubscription" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhooksSubscription"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhooksSubscription webhooksSubscription, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhooksSubscription, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhooksSubscription" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhooksSubscription"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhooksSubscription webhooksSubscription, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhooksSubscription.ConfigOption.IsSet && webhooksSubscription.Config == null)
                throw new ArgumentNullException(nameof(webhooksSubscription.Config), "Property is required for class WebhooksSubscription.");

            if (webhooksSubscription.IdOption.IsSet)
                if (webhooksSubscription.IdOption.Value != null)
                    writer.WriteString("id", webhooksSubscription.Id);
                else
                    writer.WriteNull("id");

            if (webhooksSubscription.SinkOption.IsSet)
                if (webhooksSubscription.SinkOption.Value != null)
                    writer.WriteString("sink", webhooksSubscription.Sink);
                else
                    writer.WriteNull("sink");

            if (webhooksSubscription.VerifiedOption.IsSet)
                if (webhooksSubscription.VerifiedOption.Value != null)
                    writer.WriteBoolean("verified", webhooksSubscription.VerifiedOption.Value.Value);
                else
                    writer.WriteNull("verified");

            if (webhooksSubscription.TypesOption.IsSet)
                if (webhooksSubscription.TypesOption.Value != null)
                {
                    writer.WritePropertyName("types");
                    JsonSerializer.Serialize(writer, webhooksSubscription.Types, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("types");
            if (webhooksSubscription.ConfigOption.IsSet)
            {
                writer.WritePropertyName("config");
                JsonSerializer.Serialize(writer, webhooksSubscription.Config, jsonSerializerOptions);
            }
            if (webhooksSubscription.VerificationMethodOption.IsSet)
            {
                var verificationMethodRawValue = WebhooksSubscriptionVerificationMethodValueConverter.ToJsonValue(webhooksSubscription.VerificationMethod.Value);
                writer.WriteString("verification_method", verificationMethodRawValue);
            }
        }
    }
}
