// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// IssuedDocumentOptions
    /// </summary>
    public partial class IssuedDocumentOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentOptions" /> class.
        /// </summary>
        /// <param name="fixPayments">Fixes your last payment amount to match your document total</param>
        /// <param name="createFrom">Original documents ids [only for join/transform]</param>
        /// <param name="transform">Tranform a document [only for transform]</param>
        /// <param name="keepCopy">Keep original document [only for transform]</param>
        /// <param name="joinType">Join type [only for join]</param>
        [JsonConstructor]
        public IssuedDocumentOptions(Option<bool?> fixPayments = default, Option<List<string>> createFrom = default, Option<bool?> transform = default, Option<bool?> keepCopy = default, Option<string> joinType = default)
        {
            FixPaymentsOption = fixPayments;
            CreateFromOption = createFrom;
            TransformOption = transform;
            KeepCopyOption = keepCopy;
            JoinTypeOption = joinType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FixPayments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FixPaymentsOption { get; private set; }

        /// <summary>
        /// Fixes your last payment amount to match your document total
        /// </summary>
        /// <value>Fixes your last payment amount to match your document total</value>
        [JsonPropertyName("fix_payments")]
        public bool? FixPayments { get { return this.FixPaymentsOption; } set { this.FixPaymentsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CreateFrom
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CreateFromOption { get; private set; }

        /// <summary>
        /// Original documents ids [only for join/transform]
        /// </summary>
        /// <value>Original documents ids [only for join/transform]</value>
        [JsonPropertyName("create_from")]
        public List<string> CreateFrom { get { return this.CreateFromOption; } set { this.CreateFromOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Transform
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TransformOption { get; private set; }

        /// <summary>
        /// Tranform a document [only for transform]
        /// </summary>
        /// <value>Tranform a document [only for transform]</value>
        [JsonPropertyName("transform")]
        public bool? Transform { get { return this.TransformOption; } set { this.TransformOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of KeepCopy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> KeepCopyOption { get; private set; }

        /// <summary>
        /// Keep original document [only for transform]
        /// </summary>
        /// <value>Keep original document [only for transform]</value>
        [JsonPropertyName("keep_copy")]
        public bool? KeepCopy { get { return this.KeepCopyOption; } set { this.KeepCopyOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of JoinType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> JoinTypeOption { get; private set; }

        /// <summary>
        /// Join type [only for join]
        /// </summary>
        /// <value>Join type [only for join]</value>
        [JsonPropertyName("join_type")]
        public string JoinType { get { return this.JoinTypeOption; } set { this.JoinTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentOptions {\n");
            sb.Append("  FixPayments: ").Append(FixPayments).Append("\n");
            sb.Append("  CreateFrom: ").Append(CreateFrom).Append("\n");
            sb.Append("  Transform: ").Append(Transform).Append("\n");
            sb.Append("  KeepCopy: ").Append(KeepCopy).Append("\n");
            sb.Append("  JoinType: ").Append(JoinType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentOptions" />
    /// </summary>
    public class IssuedDocumentOptionsJsonConverter : JsonConverter<IssuedDocumentOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="IssuedDocumentOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocumentOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> fixPayments = default;
            Option<List<string>> createFrom = default;
            Option<bool?> transform = default;
            Option<bool?> keepCopy = default;
            Option<string> joinType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "fix_payments":
                            fixPayments = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "create_from":
                            createFrom = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "transform":
                            transform = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "keep_copy":
                            keepCopy = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "join_type":
                            joinType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new IssuedDocumentOptions(fixPayments, createFrom, transform, keepCopy, joinType);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocumentOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentOptions issuedDocumentOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocumentOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocumentOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocumentOptions issuedDocumentOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocumentOptions.FixPaymentsOption.IsSet)
                if (issuedDocumentOptions.FixPaymentsOption.Value != null)
                    writer.WriteBoolean("fix_payments", issuedDocumentOptions.FixPaymentsOption.Value.Value);
                else
                    writer.WriteNull("fix_payments");

            if (issuedDocumentOptions.CreateFromOption.IsSet)
                if (issuedDocumentOptions.CreateFromOption.Value != null)
                {
                    writer.WritePropertyName("create_from");
                    JsonSerializer.Serialize(writer, issuedDocumentOptions.CreateFrom, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("create_from");
            if (issuedDocumentOptions.TransformOption.IsSet)
                if (issuedDocumentOptions.TransformOption.Value != null)
                    writer.WriteBoolean("transform", issuedDocumentOptions.TransformOption.Value.Value);
                else
                    writer.WriteNull("transform");

            if (issuedDocumentOptions.KeepCopyOption.IsSet)
                if (issuedDocumentOptions.KeepCopyOption.Value != null)
                    writer.WriteBoolean("keep_copy", issuedDocumentOptions.KeepCopyOption.Value.Value);
                else
                    writer.WriteNull("keep_copy");

            if (issuedDocumentOptions.JoinTypeOption.IsSet)
                if (issuedDocumentOptions.JoinTypeOption.Value != null)
                    writer.WriteString("join_type", issuedDocumentOptions.JoinType);
                else
                    writer.WriteNull("join_type");
        }
    }
}
