// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ModelClient
    /// </summary>
    public partial class ModelClient : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelClient" /> class.
        /// </summary>
        /// <param name="id">Client id</param>
        /// <param name="code">Client code</param>
        /// <param name="name">Client name</param>
        /// <param name="type">type</param>
        /// <param name="firstName">Client first name</param>
        /// <param name="lastName">Client last name</param>
        /// <param name="contactPerson">Client contact person</param>
        /// <param name="vatNumber">Client vat number</param>
        /// <param name="taxCode">Client tax code</param>
        /// <param name="addressStreet">Client address street</param>
        /// <param name="addressPostalCode">Client address postal code</param>
        /// <param name="addressCity">Client address city</param>
        /// <param name="addressProvince">Client address province</param>
        /// <param name="addressExtra">Client address extra info</param>
        /// <param name="country">Client country</param>
        /// <param name="countryIso">Client country iso code</param>
        /// <param name="email">Client email</param>
        /// <param name="certifiedEmail">Client certified email</param>
        /// <param name="phone">Client phone</param>
        /// <param name="fax">Client fax</param>
        /// <param name="notes">Client extra</param>
        /// <param name="defaultVat">defaultVat</param>
        /// <param name="defaultPaymentTerms">Client default payment terms</param>
        /// <param name="defaultPaymentTermsType">defaultPaymentTermsType</param>
        /// <param name="defaultPaymentMethod">defaultPaymentMethod</param>
        /// <param name="bankName">Client bank name</param>
        /// <param name="bankIban">Client bank iban</param>
        /// <param name="bankSwiftCode">Client bank swift code</param>
        /// <param name="shippingAddress">Client shipping address</param>
        /// <param name="eInvoice">Use e-invoices for this entity</param>
        /// <param name="discountHighlight">Highlight Discount</param>
        /// <param name="eiCode">Client e-invoice code </param>
        /// <param name="defaultDiscount">Client default discount</param>
        /// <param name="hasIntentDeclaration">Client has intent declaration</param>
        /// <param name="intentDeclarationProtocolNumber">Client intent declaration protocol number</param>
        /// <param name="intentDeclarationProtocolDate">Client intent declaration protocol date</param>
        /// <param name="priceListId">Price list id</param>
        /// <param name="createdAt">Client creation date</param>
        /// <param name="updatedAt">Client last update date</param>
        [JsonConstructor]
        public ModelClient(Option<int?> id = default, Option<string> code = default, Option<string> name = default, Option<ClientType?> type = default, Option<string> firstName = default, Option<string> lastName = default, Option<string> contactPerson = default, Option<string> vatNumber = default, Option<string> taxCode = default, Option<string> addressStreet = default, Option<string> addressPostalCode = default, Option<string> addressCity = default, Option<string> addressProvince = default, Option<string> addressExtra = default, Option<string> country = default, Option<string> countryIso = default, Option<string> email = default, Option<string> certifiedEmail = default, Option<string> phone = default, Option<string> fax = default, Option<string> notes = default, Option<VatType> defaultVat = default, Option<int?> defaultPaymentTerms = default, Option<PaymentTermsType?> defaultPaymentTermsType = default, Option<PaymentMethod> defaultPaymentMethod = default, Option<string> bankName = default, Option<string> bankIban = default, Option<string> bankSwiftCode = default, Option<string> shippingAddress = default, Option<bool?> eInvoice = default, Option<bool?> discountHighlight = default, Option<string> eiCode = default, Option<decimal?> defaultDiscount = default, Option<bool?> hasIntentDeclaration = default, Option<string> intentDeclarationProtocolNumber = default, Option<DateTimeOffset?> intentDeclarationProtocolDate = default, Option<string> priceListId = default, Option<string> createdAt = default, Option<string> updatedAt = default)
        {
            IdOption = id;
            CodeOption = code;
            NameOption = name;
            TypeOption = type;
            FirstNameOption = firstName;
            LastNameOption = lastName;
            ContactPersonOption = contactPerson;
            VatNumberOption = vatNumber;
            TaxCodeOption = taxCode;
            AddressStreetOption = addressStreet;
            AddressPostalCodeOption = addressPostalCode;
            AddressCityOption = addressCity;
            AddressProvinceOption = addressProvince;
            AddressExtraOption = addressExtra;
            CountryOption = country;
            CountryIsoOption = countryIso;
            EmailOption = email;
            CertifiedEmailOption = certifiedEmail;
            PhoneOption = phone;
            FaxOption = fax;
            NotesOption = notes;
            DefaultVatOption = defaultVat;
            DefaultPaymentTermsOption = defaultPaymentTerms;
            DefaultPaymentTermsTypeOption = defaultPaymentTermsType;
            DefaultPaymentMethodOption = defaultPaymentMethod;
            BankNameOption = bankName;
            BankIbanOption = bankIban;
            BankSwiftCodeOption = bankSwiftCode;
            ShippingAddressOption = shippingAddress;
            EInvoiceOption = eInvoice;
            DiscountHighlightOption = discountHighlight;
            EiCodeOption = eiCode;
            DefaultDiscountOption = defaultDiscount;
            HasIntentDeclarationOption = hasIntentDeclaration;
            IntentDeclarationProtocolNumberOption = intentDeclarationProtocolNumber;
            IntentDeclarationProtocolDateOption = intentDeclarationProtocolDate;
            PriceListIdOption = priceListId;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ClientType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public ClientType? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<ClientType?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultPaymentTermsType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentTermsType?> DefaultPaymentTermsTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultPaymentTermsType
        /// </summary>
        [JsonPropertyName("default_payment_terms_type")]
        public PaymentTermsType? DefaultPaymentTermsType { get { return this.DefaultPaymentTermsTypeOption; } set { this.DefaultPaymentTermsTypeOption = new Option<PaymentTermsType?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Client id
        /// </summary>
        /// <value>Client id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodeOption { get; private set; }

        /// <summary>
        /// Client code
        /// </summary>
        /// <value>Client code</value>
        /* <example>123</example> */
        [JsonPropertyName("code")]
        public string Code { get { return this.CodeOption; } set { this.CodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Client name
        /// </summary>
        /// <value>Client name</value>
        /* <example>Rossi S.r.l.</example> */
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FirstNameOption { get; private set; }

        /// <summary>
        /// Client first name
        /// </summary>
        /// <value>Client first name</value>
        [JsonPropertyName("first_name")]
        public string FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LastNameOption { get; private set; }

        /// <summary>
        /// Client last name
        /// </summary>
        /// <value>Client last name</value>
        [JsonPropertyName("last_name")]
        public string LastName { get { return this.LastNameOption; } set { this.LastNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ContactPerson
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContactPersonOption { get; private set; }

        /// <summary>
        /// Client contact person
        /// </summary>
        /// <value>Client contact person</value>
        [JsonPropertyName("contact_person")]
        public string ContactPerson { get { return this.ContactPersonOption; } set { this.ContactPersonOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VatNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> VatNumberOption { get; private set; }

        /// <summary>
        /// Client vat number
        /// </summary>
        /// <value>Client vat number</value>
        /* <example>IT01234567890</example> */
        [JsonPropertyName("vat_number")]
        public string VatNumber { get { return this.VatNumberOption; } set { this.VatNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TaxCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TaxCodeOption { get; private set; }

        /// <summary>
        /// Client tax code
        /// </summary>
        /// <value>Client tax code</value>
        /* <example>RSSMRA44A12E890Q</example> */
        [JsonPropertyName("tax_code")]
        public string TaxCode { get { return this.TaxCodeOption; } set { this.TaxCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressStreet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressStreetOption { get; private set; }

        /// <summary>
        /// Client address street
        /// </summary>
        /// <value>Client address street</value>
        /* <example>Via dei tigli, 12</example> */
        [JsonPropertyName("address_street")]
        public string AddressStreet { get { return this.AddressStreetOption; } set { this.AddressStreetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressPostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressPostalCodeOption { get; private set; }

        /// <summary>
        /// Client address postal code
        /// </summary>
        /// <value>Client address postal code</value>
        /* <example>24010</example> */
        [JsonPropertyName("address_postal_code")]
        public string AddressPostalCode { get { return this.AddressPostalCodeOption; } set { this.AddressPostalCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressCity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressCityOption { get; private set; }

        /// <summary>
        /// Client address city
        /// </summary>
        /// <value>Client address city</value>
        /* <example>Bergamo</example> */
        [JsonPropertyName("address_city")]
        public string AddressCity { get { return this.AddressCityOption; } set { this.AddressCityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressProvinceOption { get; private set; }

        /// <summary>
        /// Client address province
        /// </summary>
        /// <value>Client address province</value>
        /* <example>BG</example> */
        [JsonPropertyName("address_province")]
        public string AddressProvince { get { return this.AddressProvinceOption; } set { this.AddressProvinceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressExtra
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressExtraOption { get; private set; }

        /// <summary>
        /// Client address extra info
        /// </summary>
        /// <value>Client address extra info</value>
        [JsonPropertyName("address_extra")]
        public string AddressExtra { get { return this.AddressExtraOption; } set { this.AddressExtraOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Country
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryOption { get; private set; }

        /// <summary>
        /// Client country
        /// </summary>
        /// <value>Client country</value>
        /* <example>Italia</example> */
        [JsonPropertyName("country")]
        public string Country { get { return this.CountryOption; } set { this.CountryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CountryIso
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryIsoOption { get; private set; }

        /// <summary>
        /// Client country iso code
        /// </summary>
        /// <value>Client country iso code</value>
        /* <example>Italia</example> */
        [JsonPropertyName("country_iso")]
        public string CountryIso { get { return this.CountryIsoOption; } set { this.CountryIsoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EmailOption { get; private set; }

        /// <summary>
        /// Client email
        /// </summary>
        /// <value>Client email</value>
        /* <example>mario.rossi@example.it</example> */
        [JsonPropertyName("email")]
        public string Email { get { return this.EmailOption; } set { this.EmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CertifiedEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CertifiedEmailOption { get; private set; }

        /// <summary>
        /// Client certified email
        /// </summary>
        /// <value>Client certified email</value>
        /* <example>mario.rossi@pec.example.it</example> */
        [JsonPropertyName("certified_email")]
        public string CertifiedEmail { get { return this.CertifiedEmailOption; } set { this.CertifiedEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PhoneOption { get; private set; }

        /// <summary>
        /// Client phone
        /// </summary>
        /// <value>Client phone</value>
        [JsonPropertyName("phone")]
        public string Phone { get { return this.PhoneOption; } set { this.PhoneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Fax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FaxOption { get; private set; }

        /// <summary>
        /// Client fax
        /// </summary>
        /// <value>Client fax</value>
        [JsonPropertyName("fax")]
        public string Fax { get { return this.FaxOption; } set { this.FaxOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NotesOption { get; private set; }

        /// <summary>
        /// Client extra
        /// </summary>
        /// <value>Client extra</value>
        [JsonPropertyName("notes")]
        public string Notes { get { return this.NotesOption; } set { this.NotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DefaultVat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatType> DefaultVatOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultVat
        /// </summary>
        [JsonPropertyName("default_vat")]
        public VatType DefaultVat { get { return this.DefaultVatOption; } set { this.DefaultVatOption = new Option<VatType>(value); } }

        /// <summary>
        /// Used to track the state of DefaultPaymentTerms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DefaultPaymentTermsOption { get; private set; }

        /// <summary>
        /// Client default payment terms
        /// </summary>
        /// <value>Client default payment terms</value>
        /* <example>30</example> */
        [JsonPropertyName("default_payment_terms")]
        public int? DefaultPaymentTerms { get { return this.DefaultPaymentTermsOption; } set { this.DefaultPaymentTermsOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultPaymentMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentMethod> DefaultPaymentMethodOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultPaymentMethod
        /// </summary>
        [JsonPropertyName("default_payment_method")]
        public PaymentMethod DefaultPaymentMethod { get { return this.DefaultPaymentMethodOption; } set { this.DefaultPaymentMethodOption = new Option<PaymentMethod>(value); } }

        /// <summary>
        /// Used to track the state of BankName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankNameOption { get; private set; }

        /// <summary>
        /// Client bank name
        /// </summary>
        /// <value>Client bank name</value>
        [JsonPropertyName("bank_name")]
        public string BankName { get { return this.BankNameOption; } set { this.BankNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BankIban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankIbanOption { get; private set; }

        /// <summary>
        /// Client bank iban
        /// </summary>
        /// <value>Client bank iban</value>
        [JsonPropertyName("bank_iban")]
        public string BankIban { get { return this.BankIbanOption; } set { this.BankIbanOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BankSwiftCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BankSwiftCodeOption { get; private set; }

        /// <summary>
        /// Client bank swift code
        /// </summary>
        /// <value>Client bank swift code</value>
        [JsonPropertyName("bank_swift_code")]
        public string BankSwiftCode { get { return this.BankSwiftCodeOption; } set { this.BankSwiftCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShippingAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShippingAddressOption { get; private set; }

        /// <summary>
        /// Client shipping address
        /// </summary>
        /// <value>Client shipping address</value>
        [JsonPropertyName("shipping_address")]
        public string ShippingAddress { get { return this.ShippingAddressOption; } set { this.ShippingAddressOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EInvoice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EInvoiceOption { get; private set; }

        /// <summary>
        /// Use e-invoices for this entity
        /// </summary>
        /// <value>Use e-invoices for this entity</value>
        [JsonPropertyName("e_invoice")]
        public bool? EInvoice { get { return this.EInvoiceOption; } set { this.EInvoiceOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of DiscountHighlight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DiscountHighlightOption { get; private set; }

        /// <summary>
        /// Highlight Discount
        /// </summary>
        /// <value>Highlight Discount</value>
        [JsonPropertyName("discount_highlight")]
        public bool? DiscountHighlight { get { return this.DiscountHighlightOption; } set { this.DiscountHighlightOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of EiCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EiCodeOption { get; private set; }

        /// <summary>
        /// Client e-invoice code 
        /// </summary>
        /// <value>Client e-invoice code </value>
        [JsonPropertyName("ei_code")]
        public string EiCode { get { return this.EiCodeOption; } set { this.EiCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DefaultDiscount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> DefaultDiscountOption { get; private set; }

        /// <summary>
        /// Client default discount
        /// </summary>
        /// <value>Client default discount</value>
        [JsonPropertyName("default_discount")]
        public decimal? DefaultDiscount { get { return this.DefaultDiscountOption; } set { this.DefaultDiscountOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of HasIntentDeclaration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasIntentDeclarationOption { get; private set; }

        /// <summary>
        /// Client has intent declaration
        /// </summary>
        /// <value>Client has intent declaration</value>
        [JsonPropertyName("has_intent_declaration")]
        public bool? HasIntentDeclaration { get { return this.HasIntentDeclarationOption; } set { this.HasIntentDeclarationOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IntentDeclarationProtocolNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IntentDeclarationProtocolNumberOption { get; private set; }

        /// <summary>
        /// Client intent declaration protocol number
        /// </summary>
        /// <value>Client intent declaration protocol number</value>
        [JsonPropertyName("intent_declaration_protocol_number")]
        public string IntentDeclarationProtocolNumber { get { return this.IntentDeclarationProtocolNumberOption; } set { this.IntentDeclarationProtocolNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IntentDeclarationProtocolDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> IntentDeclarationProtocolDateOption { get; private set; }

        /// <summary>
        /// Client intent declaration protocol date
        /// </summary>
        /// <value>Client intent declaration protocol date</value>
        [JsonPropertyName("intent_declaration_protocol_date")]
        public DateTimeOffset? IntentDeclarationProtocolDate { get { return this.IntentDeclarationProtocolDateOption; } set { this.IntentDeclarationProtocolDateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of PriceListId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PriceListIdOption { get; private set; }

        /// <summary>
        /// Price list id
        /// </summary>
        /// <value>Price list id</value>
        [JsonPropertyName("price_list_id")]
        public string PriceListId { get { return this.PriceListIdOption; } set { this.PriceListIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CreatedAtOption { get; private set; }

        /// <summary>
        /// Client creation date
        /// </summary>
        /// <value>Client creation date</value>
        [JsonPropertyName("created_at")]
        public string CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Client last update date
        /// </summary>
        /// <value>Client last update date</value>
        [JsonPropertyName("updated_at")]
        public string UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelClient {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  AddressStreet: ").Append(AddressStreet).Append("\n");
            sb.Append("  AddressPostalCode: ").Append(AddressPostalCode).Append("\n");
            sb.Append("  AddressCity: ").Append(AddressCity).Append("\n");
            sb.Append("  AddressProvince: ").Append(AddressProvince).Append("\n");
            sb.Append("  AddressExtra: ").Append(AddressExtra).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryIso: ").Append(CountryIso).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CertifiedEmail: ").Append(CertifiedEmail).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  DefaultVat: ").Append(DefaultVat).Append("\n");
            sb.Append("  DefaultPaymentTerms: ").Append(DefaultPaymentTerms).Append("\n");
            sb.Append("  DefaultPaymentTermsType: ").Append(DefaultPaymentTermsType).Append("\n");
            sb.Append("  DefaultPaymentMethod: ").Append(DefaultPaymentMethod).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankIban: ").Append(BankIban).Append("\n");
            sb.Append("  BankSwiftCode: ").Append(BankSwiftCode).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  DiscountHighlight: ").Append(DiscountHighlight).Append("\n");
            sb.Append("  EiCode: ").Append(EiCode).Append("\n");
            sb.Append("  DefaultDiscount: ").Append(DefaultDiscount).Append("\n");
            sb.Append("  HasIntentDeclaration: ").Append(HasIntentDeclaration).Append("\n");
            sb.Append("  IntentDeclarationProtocolNumber: ").Append(IntentDeclarationProtocolNumber).Append("\n");
            sb.Append("  IntentDeclarationProtocolDate: ").Append(IntentDeclarationProtocolDate).Append("\n");
            sb.Append("  PriceListId: ").Append(PriceListId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="ModelClient" />
    /// </summary>
    public class ModelClientJsonConverter : JsonConverter<ModelClient>
    {
        /// <summary>
        /// The format to use to serialize IntentDeclarationProtocolDate
        /// </summary>
        public static string IntentDeclarationProtocolDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="ModelClient" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ModelClient Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string> code = default;
            Option<string> name = default;
            Option<ClientType?> type = default;
            Option<string> firstName = default;
            Option<string> lastName = default;
            Option<string> contactPerson = default;
            Option<string> vatNumber = default;
            Option<string> taxCode = default;
            Option<string> addressStreet = default;
            Option<string> addressPostalCode = default;
            Option<string> addressCity = default;
            Option<string> addressProvince = default;
            Option<string> addressExtra = default;
            Option<string> country = default;
            Option<string> countryIso = default;
            Option<string> email = default;
            Option<string> certifiedEmail = default;
            Option<string> phone = default;
            Option<string> fax = default;
            Option<string> notes = default;
            Option<VatType> defaultVat = default;
            Option<int?> defaultPaymentTerms = default;
            Option<PaymentTermsType?> defaultPaymentTermsType = default;
            Option<PaymentMethod> defaultPaymentMethod = default;
            Option<string> bankName = default;
            Option<string> bankIban = default;
            Option<string> bankSwiftCode = default;
            Option<string> shippingAddress = default;
            Option<bool?> eInvoice = default;
            Option<bool?> discountHighlight = default;
            Option<string> eiCode = default;
            Option<decimal?> defaultDiscount = default;
            Option<bool?> hasIntentDeclaration = default;
            Option<string> intentDeclarationProtocolNumber = default;
            Option<DateTimeOffset?> intentDeclarationProtocolDate = default;
            Option<string> priceListId = default;
            Option<string> createdAt = default;
            Option<string> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "code":
                            code = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ClientType?>(ClientTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "first_name":
                            firstName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "last_name":
                            lastName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contact_person":
                            contactPerson = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vat_number":
                            vatNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tax_code":
                            taxCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address_street":
                            addressStreet = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address_postal_code":
                            addressPostalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address_city":
                            addressCity = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address_province":
                            addressProvince = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address_extra":
                            addressExtra = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "country":
                            country = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "country_iso":
                            countryIso = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "certified_email":
                            certifiedEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phone":
                            phone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fax":
                            fax = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "notes":
                            notes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "default_vat":
                            defaultVat = new Option<VatType>(JsonSerializer.Deserialize<VatType>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "default_payment_terms":
                            defaultPaymentTerms = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "default_payment_terms_type":
                            string defaultPaymentTermsTypeRawValue = utf8JsonReader.GetString();
                            if (defaultPaymentTermsTypeRawValue != null)
                                defaultPaymentTermsType = new Option<PaymentTermsType?>(PaymentTermsTypeValueConverter.FromStringOrDefault(defaultPaymentTermsTypeRawValue));
                            break;
                        case "default_payment_method":
                            defaultPaymentMethod = new Option<PaymentMethod>(JsonSerializer.Deserialize<PaymentMethod>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bank_name":
                            bankName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bank_iban":
                            bankIban = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bank_swift_code":
                            bankSwiftCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shipping_address":
                            shippingAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "e_invoice":
                            eInvoice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "discount_highlight":
                            discountHighlight = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ei_code":
                            eiCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "default_discount":
                            defaultDiscount = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "has_intent_declaration":
                            hasIntentDeclaration = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "intent_declaration_protocol_number":
                            intentDeclarationProtocolNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "intent_declaration_protocol_date":
                            intentDeclarationProtocolDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "price_list_id":
                            priceListId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "created_at":
                            createdAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (defaultPaymentTermsType.IsSet && defaultPaymentTermsType.Value == null)
                throw new ArgumentNullException(nameof(defaultPaymentTermsType), "Property is not nullable for class ModelClient.");

            if (defaultPaymentMethod.IsSet && defaultPaymentMethod.Value == null)
                throw new ArgumentNullException(nameof(defaultPaymentMethod), "Property is not nullable for class ModelClient.");

            return new ModelClient(id, code, name, type, firstName, lastName, contactPerson, vatNumber, taxCode, addressStreet, addressPostalCode, addressCity, addressProvince, addressExtra, country, countryIso, email, certifiedEmail, phone, fax, notes, defaultVat, defaultPaymentTerms, defaultPaymentTermsType, defaultPaymentMethod, bankName, bankIban, bankSwiftCode, shippingAddress, eInvoice, discountHighlight, eiCode, defaultDiscount, hasIntentDeclaration, intentDeclarationProtocolNumber, intentDeclarationProtocolDate, priceListId, createdAt, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="ModelClient" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modelClient"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ModelClient modelClient, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, modelClient, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ModelClient" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modelClient"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ModelClient modelClient, JsonSerializerOptions jsonSerializerOptions)
        {
            if (modelClient.DefaultPaymentMethodOption.IsSet && modelClient.DefaultPaymentMethod == null)
                throw new ArgumentNullException(nameof(modelClient.DefaultPaymentMethod), "Property is required for class ModelClient.");

            if (modelClient.IdOption.IsSet)
                if (modelClient.IdOption.Value != null)
                    writer.WriteNumber("id", modelClient.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (modelClient.CodeOption.IsSet)
                if (modelClient.CodeOption.Value != null)
                    writer.WriteString("code", modelClient.Code);
                else
                    writer.WriteNull("code");

            if (modelClient.NameOption.IsSet)
                if (modelClient.NameOption.Value != null)
                    writer.WriteString("name", modelClient.Name);
                else
                    writer.WriteNull("name");

            if (modelClient.TypeOption.IsSet)
                if (modelClient.TypeOption.Value != null)
                {
                    var typeRawValue = ClientTypeValueConverter.ToJsonValue(modelClient.TypeOption.Value.Value);
                    writer.WriteString("type", typeRawValue);
                }
                else
                    writer.WriteNull("type");
            if (modelClient.FirstNameOption.IsSet)
                if (modelClient.FirstNameOption.Value != null)
                    writer.WriteString("first_name", modelClient.FirstName);
                else
                    writer.WriteNull("first_name");

            if (modelClient.LastNameOption.IsSet)
                if (modelClient.LastNameOption.Value != null)
                    writer.WriteString("last_name", modelClient.LastName);
                else
                    writer.WriteNull("last_name");

            if (modelClient.ContactPersonOption.IsSet)
                if (modelClient.ContactPersonOption.Value != null)
                    writer.WriteString("contact_person", modelClient.ContactPerson);
                else
                    writer.WriteNull("contact_person");

            if (modelClient.VatNumberOption.IsSet)
                if (modelClient.VatNumberOption.Value != null)
                    writer.WriteString("vat_number", modelClient.VatNumber);
                else
                    writer.WriteNull("vat_number");

            if (modelClient.TaxCodeOption.IsSet)
                if (modelClient.TaxCodeOption.Value != null)
                    writer.WriteString("tax_code", modelClient.TaxCode);
                else
                    writer.WriteNull("tax_code");

            if (modelClient.AddressStreetOption.IsSet)
                if (modelClient.AddressStreetOption.Value != null)
                    writer.WriteString("address_street", modelClient.AddressStreet);
                else
                    writer.WriteNull("address_street");

            if (modelClient.AddressPostalCodeOption.IsSet)
                if (modelClient.AddressPostalCodeOption.Value != null)
                    writer.WriteString("address_postal_code", modelClient.AddressPostalCode);
                else
                    writer.WriteNull("address_postal_code");

            if (modelClient.AddressCityOption.IsSet)
                if (modelClient.AddressCityOption.Value != null)
                    writer.WriteString("address_city", modelClient.AddressCity);
                else
                    writer.WriteNull("address_city");

            if (modelClient.AddressProvinceOption.IsSet)
                if (modelClient.AddressProvinceOption.Value != null)
                    writer.WriteString("address_province", modelClient.AddressProvince);
                else
                    writer.WriteNull("address_province");

            if (modelClient.AddressExtraOption.IsSet)
                if (modelClient.AddressExtraOption.Value != null)
                    writer.WriteString("address_extra", modelClient.AddressExtra);
                else
                    writer.WriteNull("address_extra");

            if (modelClient.CountryOption.IsSet)
                if (modelClient.CountryOption.Value != null)
                    writer.WriteString("country", modelClient.Country);
                else
                    writer.WriteNull("country");

            if (modelClient.CountryIsoOption.IsSet)
                if (modelClient.CountryIsoOption.Value != null)
                    writer.WriteString("country_iso", modelClient.CountryIso);
                else
                    writer.WriteNull("country_iso");

            if (modelClient.EmailOption.IsSet)
                if (modelClient.EmailOption.Value != null)
                    writer.WriteString("email", modelClient.Email);
                else
                    writer.WriteNull("email");

            if (modelClient.CertifiedEmailOption.IsSet)
                if (modelClient.CertifiedEmailOption.Value != null)
                    writer.WriteString("certified_email", modelClient.CertifiedEmail);
                else
                    writer.WriteNull("certified_email");

            if (modelClient.PhoneOption.IsSet)
                if (modelClient.PhoneOption.Value != null)
                    writer.WriteString("phone", modelClient.Phone);
                else
                    writer.WriteNull("phone");

            if (modelClient.FaxOption.IsSet)
                if (modelClient.FaxOption.Value != null)
                    writer.WriteString("fax", modelClient.Fax);
                else
                    writer.WriteNull("fax");

            if (modelClient.NotesOption.IsSet)
                if (modelClient.NotesOption.Value != null)
                    writer.WriteString("notes", modelClient.Notes);
                else
                    writer.WriteNull("notes");

            if (modelClient.DefaultVatOption.IsSet)
                if (modelClient.DefaultVatOption.Value != null)
                {
                    writer.WritePropertyName("default_vat");
                    JsonSerializer.Serialize(writer, modelClient.DefaultVat, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("default_vat");
            if (modelClient.DefaultPaymentTermsOption.IsSet)
                if (modelClient.DefaultPaymentTermsOption.Value != null)
                    writer.WriteNumber("default_payment_terms", modelClient.DefaultPaymentTermsOption.Value.Value);
                else
                    writer.WriteNull("default_payment_terms");

            if (modelClient.DefaultPaymentTermsTypeOption.IsSet)
            {
                var defaultPaymentTermsTypeRawValue = PaymentTermsTypeValueConverter.ToJsonValue(modelClient.DefaultPaymentTermsType.Value);
                writer.WriteString("default_payment_terms_type", defaultPaymentTermsTypeRawValue);
            }
            if (modelClient.DefaultPaymentMethodOption.IsSet)
            {
                writer.WritePropertyName("default_payment_method");
                JsonSerializer.Serialize(writer, modelClient.DefaultPaymentMethod, jsonSerializerOptions);
            }
            if (modelClient.BankNameOption.IsSet)
                if (modelClient.BankNameOption.Value != null)
                    writer.WriteString("bank_name", modelClient.BankName);
                else
                    writer.WriteNull("bank_name");

            if (modelClient.BankIbanOption.IsSet)
                if (modelClient.BankIbanOption.Value != null)
                    writer.WriteString("bank_iban", modelClient.BankIban);
                else
                    writer.WriteNull("bank_iban");

            if (modelClient.BankSwiftCodeOption.IsSet)
                if (modelClient.BankSwiftCodeOption.Value != null)
                    writer.WriteString("bank_swift_code", modelClient.BankSwiftCode);
                else
                    writer.WriteNull("bank_swift_code");

            if (modelClient.ShippingAddressOption.IsSet)
                if (modelClient.ShippingAddressOption.Value != null)
                    writer.WriteString("shipping_address", modelClient.ShippingAddress);
                else
                    writer.WriteNull("shipping_address");

            if (modelClient.EInvoiceOption.IsSet)
                if (modelClient.EInvoiceOption.Value != null)
                    writer.WriteBoolean("e_invoice", modelClient.EInvoiceOption.Value.Value);
                else
                    writer.WriteNull("e_invoice");

            if (modelClient.DiscountHighlightOption.IsSet)
                if (modelClient.DiscountHighlightOption.Value != null)
                    writer.WriteBoolean("discount_highlight", modelClient.DiscountHighlightOption.Value.Value);
                else
                    writer.WriteNull("discount_highlight");

            if (modelClient.EiCodeOption.IsSet)
                if (modelClient.EiCodeOption.Value != null)
                    writer.WriteString("ei_code", modelClient.EiCode);
                else
                    writer.WriteNull("ei_code");

            if (modelClient.DefaultDiscountOption.IsSet)
                if (modelClient.DefaultDiscountOption.Value != null)
                    writer.WriteNumber("default_discount", modelClient.DefaultDiscountOption.Value.Value);
                else
                    writer.WriteNull("default_discount");

            if (modelClient.HasIntentDeclarationOption.IsSet)
                if (modelClient.HasIntentDeclarationOption.Value != null)
                    writer.WriteBoolean("has_intent_declaration", modelClient.HasIntentDeclarationOption.Value.Value);
                else
                    writer.WriteNull("has_intent_declaration");

            if (modelClient.IntentDeclarationProtocolNumberOption.IsSet)
                if (modelClient.IntentDeclarationProtocolNumberOption.Value != null)
                    writer.WriteString("intent_declaration_protocol_number", modelClient.IntentDeclarationProtocolNumber);
                else
                    writer.WriteNull("intent_declaration_protocol_number");

            if (modelClient.IntentDeclarationProtocolDateOption.IsSet)
                if (modelClient.IntentDeclarationProtocolDateOption.Value != null)
                    writer.WriteString("intent_declaration_protocol_date", modelClient.IntentDeclarationProtocolDateOption.Value.Value.ToString(IntentDeclarationProtocolDateFormat));
                else
                    writer.WriteNull("intent_declaration_protocol_date");

            if (modelClient.PriceListIdOption.IsSet)
                if (modelClient.PriceListIdOption.Value != null)
                    writer.WriteString("price_list_id", modelClient.PriceListId);
                else
                    writer.WriteNull("price_list_id");

            if (modelClient.CreatedAtOption.IsSet)
                if (modelClient.CreatedAtOption.Value != null)
                    writer.WriteString("created_at", modelClient.CreatedAt);
                else
                    writer.WriteNull("created_at");

            if (modelClient.UpdatedAtOption.IsSet)
                if (modelClient.UpdatedAtOption.Value != null)
                    writer.WriteString("updated_at", modelClient.UpdatedAt);
                else
                    writer.WriteNull("updated_at");
        }
    }
}
