// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// EmailData
    /// </summary>
    public partial class EmailData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailData" /> class.
        /// </summary>
        /// <param name="recipientEmail">Email recipient</param>
        /// <param name="defaultSenderEmail">defaultSenderEmail</param>
        /// <param name="senderEmailsList">List of all emails from which the document can be sent</param>
        /// <param name="ccEmail">Email cc [by default is the logged company email]</param>
        /// <param name="subject">Email subject</param>
        /// <param name="body">Email body</param>
        /// <param name="documentExists">Document exists if it is not a delivery note</param>
        /// <param name="deliveryNoteExists">Document is a delivery note</param>
        /// <param name="attachmentExists">Document has attachment</param>
        /// <param name="accompanyingInvoiceExists">Document has accompanying invoice</param>
        /// <param name="defaultAttachPdf">Attach document pdf</param>
        [JsonConstructor]
        public EmailData(Option<string> recipientEmail = default, Option<EmailDataDefaultSenderEmail> defaultSenderEmail = default, Option<List<SenderEmail>> senderEmailsList = default, Option<string> ccEmail = default, Option<string> subject = default, Option<string> body = default, Option<bool?> documentExists = default, Option<bool?> deliveryNoteExists = default, Option<bool?> attachmentExists = default, Option<bool?> accompanyingInvoiceExists = default, Option<bool?> defaultAttachPdf = default)
        {
            RecipientEmailOption = recipientEmail;
            DefaultSenderEmailOption = defaultSenderEmail;
            SenderEmailsListOption = senderEmailsList;
            CcEmailOption = ccEmail;
            SubjectOption = subject;
            BodyOption = body;
            DocumentExistsOption = documentExists;
            DeliveryNoteExistsOption = deliveryNoteExists;
            AttachmentExistsOption = attachmentExists;
            AccompanyingInvoiceExistsOption = accompanyingInvoiceExists;
            DefaultAttachPdfOption = defaultAttachPdf;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of RecipientEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecipientEmailOption { get; private set; }

        /// <summary>
        /// Email recipient
        /// </summary>
        /// <value>Email recipient</value>
        [JsonPropertyName("recipient_email")]
        public string RecipientEmail { get { return this.RecipientEmailOption; } set { this.RecipientEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DefaultSenderEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmailDataDefaultSenderEmail> DefaultSenderEmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultSenderEmail
        /// </summary>
        [JsonPropertyName("default_sender_email")]
        public EmailDataDefaultSenderEmail DefaultSenderEmail { get { return this.DefaultSenderEmailOption; } set { this.DefaultSenderEmailOption = new Option<EmailDataDefaultSenderEmail>(value); } }

        /// <summary>
        /// Used to track the state of SenderEmailsList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SenderEmail>> SenderEmailsListOption { get; private set; }

        /// <summary>
        /// List of all emails from which the document can be sent
        /// </summary>
        /// <value>List of all emails from which the document can be sent</value>
        [JsonPropertyName("sender_emails_list")]
        public List<SenderEmail> SenderEmailsList { get { return this.SenderEmailsListOption; } set { this.SenderEmailsListOption = new Option<List<SenderEmail>>(value); } }

        /// <summary>
        /// Used to track the state of CcEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CcEmailOption { get; private set; }

        /// <summary>
        /// Email cc [by default is the logged company email]
        /// </summary>
        /// <value>Email cc [by default is the logged company email]</value>
        [JsonPropertyName("cc_email")]
        public string CcEmail { get { return this.CcEmailOption; } set { this.CcEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Email subject
        /// </summary>
        /// <value>Email subject</value>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyOption { get; private set; }

        /// <summary>
        /// Email body
        /// </summary>
        /// <value>Email body</value>
        [JsonPropertyName("body")]
        public string Body { get { return this.BodyOption; } set { this.BodyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DocumentExists
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DocumentExistsOption { get; private set; }

        /// <summary>
        /// Document exists if it is not a delivery note
        /// </summary>
        /// <value>Document exists if it is not a delivery note</value>
        [JsonPropertyName("document_exists")]
        public bool? DocumentExists { get { return this.DocumentExistsOption; } set { this.DocumentExistsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryNoteExists
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeliveryNoteExistsOption { get; private set; }

        /// <summary>
        /// Document is a delivery note
        /// </summary>
        /// <value>Document is a delivery note</value>
        [JsonPropertyName("delivery_note_exists")]
        public bool? DeliveryNoteExists { get { return this.DeliveryNoteExistsOption; } set { this.DeliveryNoteExistsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of AttachmentExists
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AttachmentExistsOption { get; private set; }

        /// <summary>
        /// Document has attachment
        /// </summary>
        /// <value>Document has attachment</value>
        [JsonPropertyName("attachment_exists")]
        public bool? AttachmentExists { get { return this.AttachmentExistsOption; } set { this.AttachmentExistsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of AccompanyingInvoiceExists
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AccompanyingInvoiceExistsOption { get; private set; }

        /// <summary>
        /// Document has accompanying invoice
        /// </summary>
        /// <value>Document has accompanying invoice</value>
        [JsonPropertyName("accompanying_invoice_exists")]
        public bool? AccompanyingInvoiceExists { get { return this.AccompanyingInvoiceExistsOption; } set { this.AccompanyingInvoiceExistsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultAttachPdf
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DefaultAttachPdfOption { get; private set; }

        /// <summary>
        /// Attach document pdf
        /// </summary>
        /// <value>Attach document pdf</value>
        [JsonPropertyName("default_attach_pdf")]
        public bool? DefaultAttachPdf { get { return this.DefaultAttachPdfOption; } set { this.DefaultAttachPdfOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailData {\n");
            sb.Append("  RecipientEmail: ").Append(RecipientEmail).Append("\n");
            sb.Append("  DefaultSenderEmail: ").Append(DefaultSenderEmail).Append("\n");
            sb.Append("  SenderEmailsList: ").Append(SenderEmailsList).Append("\n");
            sb.Append("  CcEmail: ").Append(CcEmail).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  DocumentExists: ").Append(DocumentExists).Append("\n");
            sb.Append("  DeliveryNoteExists: ").Append(DeliveryNoteExists).Append("\n");
            sb.Append("  AttachmentExists: ").Append(AttachmentExists).Append("\n");
            sb.Append("  AccompanyingInvoiceExists: ").Append(AccompanyingInvoiceExists).Append("\n");
            sb.Append("  DefaultAttachPdf: ").Append(DefaultAttachPdf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="EmailData" />
    /// </summary>
    public class EmailDataJsonConverter : JsonConverter<EmailData>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> recipientEmail = default;
            Option<EmailDataDefaultSenderEmail> defaultSenderEmail = default;
            Option<List<SenderEmail>> senderEmailsList = default;
            Option<string> ccEmail = default;
            Option<string> subject = default;
            Option<string> body = default;
            Option<bool?> documentExists = default;
            Option<bool?> deliveryNoteExists = default;
            Option<bool?> attachmentExists = default;
            Option<bool?> accompanyingInvoiceExists = default;
            Option<bool?> defaultAttachPdf = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "recipient_email":
                            recipientEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "default_sender_email":
                            defaultSenderEmail = new Option<EmailDataDefaultSenderEmail>(JsonSerializer.Deserialize<EmailDataDefaultSenderEmail>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sender_emails_list":
                            senderEmailsList = new Option<List<SenderEmail>>(JsonSerializer.Deserialize<List<SenderEmail>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cc_email":
                            ccEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "document_exists":
                            documentExists = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "delivery_note_exists":
                            deliveryNoteExists = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "attachment_exists":
                            attachmentExists = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "accompanying_invoice_exists":
                            accompanyingInvoiceExists = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "default_attach_pdf":
                            defaultAttachPdf = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new EmailData(recipientEmail, defaultSenderEmail, senderEmailsList, ccEmail, subject, body, documentExists, deliveryNoteExists, attachmentExists, accompanyingInvoiceExists, defaultAttachPdf);
        }

        /// <summary>
        /// Serializes a <see cref="EmailData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailData emailData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailData emailData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailData.RecipientEmailOption.IsSet)
                if (emailData.RecipientEmailOption.Value != null)
                    writer.WriteString("recipient_email", emailData.RecipientEmail);
                else
                    writer.WriteNull("recipient_email");

            if (emailData.DefaultSenderEmailOption.IsSet)
                if (emailData.DefaultSenderEmailOption.Value != null)
                {
                    writer.WritePropertyName("default_sender_email");
                    JsonSerializer.Serialize(writer, emailData.DefaultSenderEmail, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("default_sender_email");
            if (emailData.SenderEmailsListOption.IsSet)
                if (emailData.SenderEmailsListOption.Value != null)
                {
                    writer.WritePropertyName("sender_emails_list");
                    JsonSerializer.Serialize(writer, emailData.SenderEmailsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sender_emails_list");
            if (emailData.CcEmailOption.IsSet)
                if (emailData.CcEmailOption.Value != null)
                    writer.WriteString("cc_email", emailData.CcEmail);
                else
                    writer.WriteNull("cc_email");

            if (emailData.SubjectOption.IsSet)
                if (emailData.SubjectOption.Value != null)
                    writer.WriteString("subject", emailData.Subject);
                else
                    writer.WriteNull("subject");

            if (emailData.BodyOption.IsSet)
                if (emailData.BodyOption.Value != null)
                    writer.WriteString("body", emailData.Body);
                else
                    writer.WriteNull("body");

            if (emailData.DocumentExistsOption.IsSet)
                if (emailData.DocumentExistsOption.Value != null)
                    writer.WriteBoolean("document_exists", emailData.DocumentExistsOption.Value.Value);
                else
                    writer.WriteNull("document_exists");

            if (emailData.DeliveryNoteExistsOption.IsSet)
                if (emailData.DeliveryNoteExistsOption.Value != null)
                    writer.WriteBoolean("delivery_note_exists", emailData.DeliveryNoteExistsOption.Value.Value);
                else
                    writer.WriteNull("delivery_note_exists");

            if (emailData.AttachmentExistsOption.IsSet)
                if (emailData.AttachmentExistsOption.Value != null)
                    writer.WriteBoolean("attachment_exists", emailData.AttachmentExistsOption.Value.Value);
                else
                    writer.WriteNull("attachment_exists");

            if (emailData.AccompanyingInvoiceExistsOption.IsSet)
                if (emailData.AccompanyingInvoiceExistsOption.Value != null)
                    writer.WriteBoolean("accompanying_invoice_exists", emailData.AccompanyingInvoiceExistsOption.Value.Value);
                else
                    writer.WriteNull("accompanying_invoice_exists");

            if (emailData.DefaultAttachPdfOption.IsSet)
                if (emailData.DefaultAttachPdfOption.Value != null)
                    writer.WriteBoolean("default_attach_pdf", emailData.DefaultAttachPdfOption.Value.Value);
                else
                    writer.WriteNull("default_attach_pdf");
        }
    }
}
