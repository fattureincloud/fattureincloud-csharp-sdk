/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     EmailData
    /// </summary>
    [DataContract(Name = "EmailData")]
    public class EmailData : IEquatable<EmailData>, IValidatableObject
    {
        private bool? _AccompanyingInvoiceExists;
        private bool? _AttachmentExists;
        private string _Body;
        private string _CcEmail;
        private bool? _DefaultAttachPdf;
        private EmailDataDefaultSenderEmail _DefaultSenderEmail;
        private bool? _DeliveryNoteExists;
        private bool? _DocumentExists;
        private bool _flagAccompanyingInvoiceExists;
        private bool _flagAttachmentExists;
        private bool _flagBody;
        private bool _flagCcEmail;
        private bool _flagDefaultAttachPdf;
        private bool _flagDefaultSenderEmail;
        private bool _flagDeliveryNoteExists;
        private bool _flagDocumentExists;
        private bool _flagRecipientEmail;
        private bool _flagSenderEmailsList;
        private bool _flagSubject;
        private string _RecipientEmail;
        private List<SenderEmail> _SenderEmailsList;
        private string _Subject;

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailData" /> class.
        /// </summary>
        /// <param name="recipientEmail">Recipient&#39;s email.</param>
        /// <param name="defaultSenderEmail">defaultSenderEmail.</param>
        /// <param name="senderEmailsList">List of all emails from which the document can be sent.</param>
        /// <param name="ccEmail">By default is the logged company email. This is the email address to which a copy will be sent..</param>
        /// <param name="subject">Email subject.</param>
        /// <param name="body">Email body.</param>
        /// <param name="documentExists">If the document is not a delivery note, this flag will be set to true.</param>
        /// <param name="deliveryNoteExists">If the document is a delivery note, this flag will be set to true.</param>
        /// <param name="attachmentExists">If the document has one or more attachments, this flag will be set to true.</param>
        /// <param name="accompanyingInvoiceExists">If an accompanying invoice exists, this flag will be set to true.</param>
        /// <param name="defaultAttachPdf">If a pdf is attached, this flag will be set to true.</param>
        public EmailData(string recipientEmail = default(string),
            EmailDataDefaultSenderEmail defaultSenderEmail = default,
            List<SenderEmail> senderEmailsList = default(List<SenderEmail>), string ccEmail = default(string),
            string subject = default(string), string body = default(string), bool? documentExists = default(bool?),
            bool? deliveryNoteExists = default(bool?), bool? attachmentExists = default(bool?),
            bool? accompanyingInvoiceExists = default(bool?), bool? defaultAttachPdf = default(bool?))
        {
            _RecipientEmail = recipientEmail;
            if (RecipientEmail != null) _flagRecipientEmail = true;
            _DefaultSenderEmail = defaultSenderEmail;
            if (DefaultSenderEmail != null) _flagDefaultSenderEmail = true;
            _SenderEmailsList = senderEmailsList;
            if (SenderEmailsList != null) _flagSenderEmailsList = true;
            _CcEmail = ccEmail;
            if (CcEmail != null) _flagCcEmail = true;
            _Subject = subject;
            if (Subject != null) _flagSubject = true;
            _Body = body;
            if (Body != null) _flagBody = true;
            _DocumentExists = documentExists;
            if (DocumentExists != null) _flagDocumentExists = true;
            _DeliveryNoteExists = deliveryNoteExists;
            if (DeliveryNoteExists != null) _flagDeliveryNoteExists = true;
            _AttachmentExists = attachmentExists;
            if (AttachmentExists != null) _flagAttachmentExists = true;
            _AccompanyingInvoiceExists = accompanyingInvoiceExists;
            if (AccompanyingInvoiceExists != null) _flagAccompanyingInvoiceExists = true;
            _DefaultAttachPdf = defaultAttachPdf;
            if (DefaultAttachPdf != null) _flagDefaultAttachPdf = true;
        }

        /// <summary>
        ///     Recipient&#39;s email
        /// </summary>
        /// <value>Recipient&#39;s email</value>
        [DataMember(Name = "recipient_email", EmitDefaultValue = true)]
        public string RecipientEmail
        {
            get => _RecipientEmail;
            set
            {
                _RecipientEmail = value;
                _flagRecipientEmail = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DefaultSenderEmail
        /// </summary>
        [DataMember(Name = "default_sender_email", EmitDefaultValue = true)]
        public EmailDataDefaultSenderEmail DefaultSenderEmail
        {
            get => _DefaultSenderEmail;
            set
            {
                _DefaultSenderEmail = value;
                _flagDefaultSenderEmail = true;
            }
        }

        /// <summary>
        ///     List of all emails from which the document can be sent
        /// </summary>
        /// <value>List of all emails from which the document can be sent</value>
        [DataMember(Name = "sender_emails_list", EmitDefaultValue = true)]
        public List<SenderEmail> SenderEmailsList
        {
            get => _SenderEmailsList;
            set
            {
                _SenderEmailsList = value;
                _flagSenderEmailsList = true;
            }
        }

        /// <summary>
        ///     By default is the logged company email. This is the email address to which a copy will be sent.
        /// </summary>
        /// <value>By default is the logged company email. This is the email address to which a copy will be sent.</value>
        [DataMember(Name = "cc_email", EmitDefaultValue = true)]
        public string CcEmail
        {
            get => _CcEmail;
            set
            {
                _CcEmail = value;
                _flagCcEmail = true;
            }
        }

        /// <summary>
        ///     Email subject
        /// </summary>
        /// <value>Email subject</value>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject
        {
            get => _Subject;
            set
            {
                _Subject = value;
                _flagSubject = true;
            }
        }

        /// <summary>
        ///     Email body
        /// </summary>
        /// <value>Email body</value>
        [DataMember(Name = "body", EmitDefaultValue = true)]
        public string Body
        {
            get => _Body;
            set
            {
                _Body = value;
                _flagBody = true;
            }
        }

        /// <summary>
        ///     If the document is not a delivery note, this flag will be set to true
        /// </summary>
        /// <value>If the document is not a delivery note, this flag will be set to true</value>
        [DataMember(Name = "document_exists", EmitDefaultValue = true)]
        public bool? DocumentExists
        {
            get => _DocumentExists;
            set
            {
                _DocumentExists = value;
                _flagDocumentExists = true;
            }
        }

        /// <summary>
        ///     If the document is a delivery note, this flag will be set to true
        /// </summary>
        /// <value>If the document is a delivery note, this flag will be set to true</value>
        [DataMember(Name = "delivery_note_exists", EmitDefaultValue = true)]
        public bool? DeliveryNoteExists
        {
            get => _DeliveryNoteExists;
            set
            {
                _DeliveryNoteExists = value;
                _flagDeliveryNoteExists = true;
            }
        }

        /// <summary>
        ///     If the document has one or more attachments, this flag will be set to true
        /// </summary>
        /// <value>If the document has one or more attachments, this flag will be set to true</value>
        [DataMember(Name = "attachment_exists", EmitDefaultValue = true)]
        public bool? AttachmentExists
        {
            get => _AttachmentExists;
            set
            {
                _AttachmentExists = value;
                _flagAttachmentExists = true;
            }
        }

        /// <summary>
        ///     If an accompanying invoice exists, this flag will be set to true
        /// </summary>
        /// <value>If an accompanying invoice exists, this flag will be set to true</value>
        [DataMember(Name = "accompanying_invoice_exists", EmitDefaultValue = true)]
        public bool? AccompanyingInvoiceExists
        {
            get => _AccompanyingInvoiceExists;
            set
            {
                _AccompanyingInvoiceExists = value;
                _flagAccompanyingInvoiceExists = true;
            }
        }

        /// <summary>
        ///     If a pdf is attached, this flag will be set to true
        /// </summary>
        /// <value>If a pdf is attached, this flag will be set to true</value>
        [DataMember(Name = "default_attach_pdf", EmitDefaultValue = true)]
        public bool? DefaultAttachPdf
        {
            get => _DefaultAttachPdf;
            set
            {
                _DefaultAttachPdf = value;
                _flagDefaultAttachPdf = true;
            }
        }

        /// <summary>
        ///     Returns false as RecipientEmail should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecipientEmail()
        {
            return _flagRecipientEmail;
        }

        /// <summary>
        ///     Returns false as DefaultSenderEmail should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultSenderEmail()
        {
            return _flagDefaultSenderEmail;
        }

        /// <summary>
        ///     Returns false as SenderEmailsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSenderEmailsList()
        {
            return _flagSenderEmailsList;
        }

        /// <summary>
        ///     Returns false as CcEmail should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCcEmail()
        {
            return _flagCcEmail;
        }

        /// <summary>
        ///     Returns false as Subject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubject()
        {
            return _flagSubject;
        }

        /// <summary>
        ///     Returns false as Body should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBody()
        {
            return _flagBody;
        }

        /// <summary>
        ///     Returns false as DocumentExists should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDocumentExists()
        {
            return _flagDocumentExists;
        }

        /// <summary>
        ///     Returns false as DeliveryNoteExists should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeliveryNoteExists()
        {
            return _flagDeliveryNoteExists;
        }

        /// <summary>
        ///     Returns false as AttachmentExists should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachmentExists()
        {
            return _flagAttachmentExists;
        }

        /// <summary>
        ///     Returns false as AccompanyingInvoiceExists should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccompanyingInvoiceExists()
        {
            return _flagAccompanyingInvoiceExists;
        }

        /// <summary>
        ///     Returns false as DefaultAttachPdf should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultAttachPdf()
        {
            return _flagDefaultAttachPdf;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailData {\n");
            sb.Append("  RecipientEmail: ").Append(RecipientEmail).Append("\n");
            sb.Append("  DefaultSenderEmail: ").Append(DefaultSenderEmail).Append("\n");
            sb.Append("  SenderEmailsList: ").Append(SenderEmailsList).Append("\n");
            sb.Append("  CcEmail: ").Append(CcEmail).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  DocumentExists: ").Append(DocumentExists).Append("\n");
            sb.Append("  DeliveryNoteExists: ").Append(DeliveryNoteExists).Append("\n");
            sb.Append("  AttachmentExists: ").Append(AttachmentExists).Append("\n");
            sb.Append("  AccompanyingInvoiceExists: ").Append(AccompanyingInvoiceExists).Append("\n");
            sb.Append("  DefaultAttachPdf: ").Append(DefaultAttachPdf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailData);
        }

        /// <summary>
        ///     Returns true if EmailData instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailData input)
        {
            if (input == null) return false;
            return
                (
                    RecipientEmail == input.RecipientEmail ||
                    (RecipientEmail != null &&
                     RecipientEmail.Equals(input.RecipientEmail))
                ) &&
                (
                    DefaultSenderEmail == input.DefaultSenderEmail ||
                    (DefaultSenderEmail != null &&
                     DefaultSenderEmail.Equals(input.DefaultSenderEmail))
                ) &&
                (
                    SenderEmailsList == input.SenderEmailsList ||
                    (SenderEmailsList != null &&
                     input.SenderEmailsList != null &&
                     SenderEmailsList.SequenceEqual(input.SenderEmailsList))
                ) &&
                (
                    CcEmail == input.CcEmail ||
                    (CcEmail != null &&
                     CcEmail.Equals(input.CcEmail))
                ) &&
                (
                    Subject == input.Subject ||
                    (Subject != null &&
                     Subject.Equals(input.Subject))
                ) &&
                (
                    Body == input.Body ||
                    (Body != null &&
                     Body.Equals(input.Body))
                ) &&
                (
                    DocumentExists == input.DocumentExists ||
                    (DocumentExists != null &&
                     DocumentExists.Equals(input.DocumentExists))
                ) &&
                (
                    DeliveryNoteExists == input.DeliveryNoteExists ||
                    (DeliveryNoteExists != null &&
                     DeliveryNoteExists.Equals(input.DeliveryNoteExists))
                ) &&
                (
                    AttachmentExists == input.AttachmentExists ||
                    (AttachmentExists != null &&
                     AttachmentExists.Equals(input.AttachmentExists))
                ) &&
                (
                    AccompanyingInvoiceExists == input.AccompanyingInvoiceExists ||
                    (AccompanyingInvoiceExists != null &&
                     AccompanyingInvoiceExists.Equals(input.AccompanyingInvoiceExists))
                ) &&
                (
                    DefaultAttachPdf == input.DefaultAttachPdf ||
                    (DefaultAttachPdf != null &&
                     DefaultAttachPdf.Equals(input.DefaultAttachPdf))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (RecipientEmail != null) hashCode = hashCode * 59 + RecipientEmail.GetHashCode();
                if (DefaultSenderEmail != null) hashCode = hashCode * 59 + DefaultSenderEmail.GetHashCode();
                if (SenderEmailsList != null) hashCode = hashCode * 59 + SenderEmailsList.GetHashCode();
                if (CcEmail != null) hashCode = hashCode * 59 + CcEmail.GetHashCode();
                if (Subject != null) hashCode = hashCode * 59 + Subject.GetHashCode();
                if (Body != null) hashCode = hashCode * 59 + Body.GetHashCode();
                if (DocumentExists != null) hashCode = hashCode * 59 + DocumentExists.GetHashCode();
                if (DeliveryNoteExists != null) hashCode = hashCode * 59 + DeliveryNoteExists.GetHashCode();
                if (AttachmentExists != null) hashCode = hashCode * 59 + AttachmentExists.GetHashCode();
                if (AccompanyingInvoiceExists != null)
                    hashCode = hashCode * 59 + AccompanyingInvoiceExists.GetHashCode();
                if (DefaultAttachPdf != null) hashCode = hashCode * 59 + DefaultAttachPdf.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}