/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     ReceiptPreCreateInfo
    /// </summary>
    [DataContract(Name = "ReceiptPreCreateInfo")]
    public class ReceiptPreCreateInfo : IEquatable<ReceiptPreCreateInfo>, IValidatableObject
    {
        private List<string> _CategoriesList;
        private bool _flagCategoriesList;
        private bool _flagNumerations;
        private bool _flagNumerationsList;
        private bool _flagPaymentAccountsList;
        private bool _flagRcCentersList;
        private bool _flagVatTypesList;
        private Dictionary<string, Dictionary> _Numerations;
        private List<string> _NumerationsList;
        private List<PaymentAccount> _PaymentAccountsList;
        private List<string> _RcCentersList;
        private List<VatType> _VatTypesList;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ReceiptPreCreateInfo" /> class.
        /// </summary>
        /// <param name="numerations">numerations.</param>
        /// <param name="numerationsList">List of series used in the past..</param>
        /// <param name="rcCentersList">List of revenue centers used in the past..</param>
        /// <param name="paymentAccountsList">User payment accounts list..</param>
        /// <param name="categoriesList">List of categories used in the past..</param>
        /// <param name="vatTypesList">List of user vat types with the default 22%, 10%, 4% and 0% vats..</param>
        public ReceiptPreCreateInfo(
            Dictionary<string, Dictionary> numerations = default(Dictionary<string, Dictionary>),
            List<string> numerationsList = default(List<string>), List<string> rcCentersList = default(List<string>),
            List<PaymentAccount> paymentAccountsList = default(List<PaymentAccount>),
            List<string> categoriesList = default(List<string>), List<VatType> vatTypesList = default(List<VatType>))
        {
            _Numerations = numerations;
            if (Numerations != null) _flagNumerations = true;
            _NumerationsList = numerationsList;
            if (NumerationsList != null) _flagNumerationsList = true;
            _RcCentersList = rcCentersList;
            if (RcCentersList != null) _flagRcCentersList = true;
            _PaymentAccountsList = paymentAccountsList;
            if (PaymentAccountsList != null) _flagPaymentAccountsList = true;
            _CategoriesList = categoriesList;
            if (CategoriesList != null) _flagCategoriesList = true;
            _VatTypesList = vatTypesList;
            if (VatTypesList != null) _flagVatTypesList = true;
        }

        /// <summary>
        ///     Gets or Sets Numerations
        /// </summary>
        [DataMember(Name = "numerations", EmitDefaultValue = false)]
        public Dictionary<string, Dictionary> Numerations
        {
            get => _Numerations;
            set
            {
                _Numerations = value;
                _flagNumerations = true;
            }
        }

        /// <summary>
        ///     List of series used in the past.
        /// </summary>
        /// <value>List of series used in the past.</value>
        [DataMember(Name = "numerations_list", EmitDefaultValue = true)]
        public List<string> NumerationsList
        {
            get => _NumerationsList;
            set
            {
                _NumerationsList = value;
                _flagNumerationsList = true;
            }
        }

        /// <summary>
        ///     List of revenue centers used in the past.
        /// </summary>
        /// <value>List of revenue centers used in the past.</value>
        [DataMember(Name = "rc_centers_list", EmitDefaultValue = true)]
        public List<string> RcCentersList
        {
            get => _RcCentersList;
            set
            {
                _RcCentersList = value;
                _flagRcCentersList = true;
            }
        }

        /// <summary>
        ///     User payment accounts list.
        /// </summary>
        /// <value>User payment accounts list.</value>
        [DataMember(Name = "payment_accounts_list", EmitDefaultValue = true)]
        public List<PaymentAccount> PaymentAccountsList
        {
            get => _PaymentAccountsList;
            set
            {
                _PaymentAccountsList = value;
                _flagPaymentAccountsList = true;
            }
        }

        /// <summary>
        ///     List of categories used in the past.
        /// </summary>
        /// <value>List of categories used in the past.</value>
        [DataMember(Name = "categories_list", EmitDefaultValue = true)]
        public List<string> CategoriesList
        {
            get => _CategoriesList;
            set
            {
                _CategoriesList = value;
                _flagCategoriesList = true;
            }
        }

        /// <summary>
        ///     List of user vat types with the default 22%, 10%, 4% and 0% vats.
        /// </summary>
        /// <value>List of user vat types with the default 22%, 10%, 4% and 0% vats.</value>
        [DataMember(Name = "vat_types_list", EmitDefaultValue = true)]
        public List<VatType> VatTypesList
        {
            get => _VatTypesList;
            set
            {
                _VatTypesList = value;
                _flagVatTypesList = true;
            }
        }

        /// <summary>
        ///     Returns false as Numerations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumerations()
        {
            return _flagNumerations;
        }

        /// <summary>
        ///     Returns false as NumerationsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumerationsList()
        {
            return _flagNumerationsList;
        }

        /// <summary>
        ///     Returns false as RcCentersList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRcCentersList()
        {
            return _flagRcCentersList;
        }

        /// <summary>
        ///     Returns false as PaymentAccountsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccountsList()
        {
            return _flagPaymentAccountsList;
        }

        /// <summary>
        ///     Returns false as CategoriesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategoriesList()
        {
            return _flagCategoriesList;
        }

        /// <summary>
        ///     Returns false as VatTypesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVatTypesList()
        {
            return _flagVatTypesList;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceiptPreCreateInfo {\n");
            sb.Append("  Numerations: ").Append(Numerations).Append("\n");
            sb.Append("  NumerationsList: ").Append(NumerationsList).Append("\n");
            sb.Append("  RcCentersList: ").Append(RcCentersList).Append("\n");
            sb.Append("  PaymentAccountsList: ").Append(PaymentAccountsList).Append("\n");
            sb.Append("  CategoriesList: ").Append(CategoriesList).Append("\n");
            sb.Append("  VatTypesList: ").Append(VatTypesList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ReceiptPreCreateInfo);
        }

        /// <summary>
        ///     Returns true if ReceiptPreCreateInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceiptPreCreateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceiptPreCreateInfo input)
        {
            if (input == null) return false;
            return
                (
                    Numerations == input.Numerations ||
                    (Numerations != null &&
                     input.Numerations != null &&
                     Numerations.SequenceEqual(input.Numerations))
                ) &&
                (
                    NumerationsList == input.NumerationsList ||
                    (NumerationsList != null &&
                     input.NumerationsList != null &&
                     NumerationsList.SequenceEqual(input.NumerationsList))
                ) &&
                (
                    RcCentersList == input.RcCentersList ||
                    (RcCentersList != null &&
                     input.RcCentersList != null &&
                     RcCentersList.SequenceEqual(input.RcCentersList))
                ) &&
                (
                    PaymentAccountsList == input.PaymentAccountsList ||
                    (PaymentAccountsList != null &&
                     input.PaymentAccountsList != null &&
                     PaymentAccountsList.SequenceEqual(input.PaymentAccountsList))
                ) &&
                (
                    CategoriesList == input.CategoriesList ||
                    (CategoriesList != null &&
                     input.CategoriesList != null &&
                     CategoriesList.SequenceEqual(input.CategoriesList))
                ) &&
                (
                    VatTypesList == input.VatTypesList ||
                    (VatTypesList != null &&
                     input.VatTypesList != null &&
                     VatTypesList.SequenceEqual(input.VatTypesList))
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Numerations != null) hashCode = hashCode * 59 + Numerations.GetHashCode();
                if (NumerationsList != null) hashCode = hashCode * 59 + NumerationsList.GetHashCode();
                if (RcCentersList != null) hashCode = hashCode * 59 + RcCentersList.GetHashCode();
                if (PaymentAccountsList != null) hashCode = hashCode * 59 + PaymentAccountsList.GetHashCode();
                if (CategoriesList != null) hashCode = hashCode * 59 + CategoriesList.GetHashCode();
                if (VatTypesList != null) hashCode = hashCode * 59 + VatTypesList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}