// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ReceiptPreCreateInfo
    /// </summary>
    public partial class ReceiptPreCreateInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptPreCreateInfo" /> class.
        /// </summary>
        /// <param name="numerations">numerations</param>
        /// <param name="numerationsList">Receipt used numerations list</param>
        /// <param name="rcCentersList">Receipt used revenue centers list</param>
        /// <param name="paymentAccountsList">Payment accounts list</param>
        /// <param name="categoriesList">Receipt categories list</param>
        /// <param name="vatTypesList">Vat types list</param>
        [JsonConstructor]
        public ReceiptPreCreateInfo(Option<Dictionary<string, Dictionary<string, int>>> numerations = default, Option<List<string>> numerationsList = default, Option<List<string>> rcCentersList = default, Option<List<PaymentAccount>> paymentAccountsList = default, Option<List<string>> categoriesList = default, Option<List<VatType>> vatTypesList = default)
        {
            NumerationsOption = numerations;
            NumerationsListOption = numerationsList;
            RcCentersListOption = rcCentersList;
            PaymentAccountsListOption = paymentAccountsList;
            CategoriesListOption = categoriesList;
            VatTypesListOption = vatTypesList;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Numerations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Dictionary<string, int>>> NumerationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Numerations
        /// </summary>
        [JsonPropertyName("numerations")]
        public Dictionary<string, Dictionary<string, int>> Numerations { get { return this.NumerationsOption; } set { this.NumerationsOption = new Option<Dictionary<string, Dictionary<string, int>>>(value); } }

        /// <summary>
        /// Used to track the state of NumerationsList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> NumerationsListOption { get; private set; }

        /// <summary>
        /// Receipt used numerations list
        /// </summary>
        /// <value>Receipt used numerations list</value>
        [JsonPropertyName("numerations_list")]
        public List<string> NumerationsList { get { return this.NumerationsListOption; } set { this.NumerationsListOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of RcCentersList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> RcCentersListOption { get; private set; }

        /// <summary>
        /// Receipt used revenue centers list
        /// </summary>
        /// <value>Receipt used revenue centers list</value>
        [JsonPropertyName("rc_centers_list")]
        public List<string> RcCentersList { get { return this.RcCentersListOption; } set { this.RcCentersListOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of PaymentAccountsList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PaymentAccount>> PaymentAccountsListOption { get; private set; }

        /// <summary>
        /// Payment accounts list
        /// </summary>
        /// <value>Payment accounts list</value>
        [JsonPropertyName("payment_accounts_list")]
        public List<PaymentAccount> PaymentAccountsList { get { return this.PaymentAccountsListOption; } set { this.PaymentAccountsListOption = new Option<List<PaymentAccount>>(value); } }

        /// <summary>
        /// Used to track the state of CategoriesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CategoriesListOption { get; private set; }

        /// <summary>
        /// Receipt categories list
        /// </summary>
        /// <value>Receipt categories list</value>
        [JsonPropertyName("categories_list")]
        public List<string> CategoriesList { get { return this.CategoriesListOption; } set { this.CategoriesListOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of VatTypesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<VatType>> VatTypesListOption { get; private set; }

        /// <summary>
        /// Vat types list
        /// </summary>
        /// <value>Vat types list</value>
        [JsonPropertyName("vat_types_list")]
        public List<VatType> VatTypesList { get { return this.VatTypesListOption; } set { this.VatTypesListOption = new Option<List<VatType>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceiptPreCreateInfo {\n");
            sb.Append("  Numerations: ").Append(Numerations).Append("\n");
            sb.Append("  NumerationsList: ").Append(NumerationsList).Append("\n");
            sb.Append("  RcCentersList: ").Append(RcCentersList).Append("\n");
            sb.Append("  PaymentAccountsList: ").Append(PaymentAccountsList).Append("\n");
            sb.Append("  CategoriesList: ").Append(CategoriesList).Append("\n");
            sb.Append("  VatTypesList: ").Append(VatTypesList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="ReceiptPreCreateInfo" />
    /// </summary>
    public class ReceiptPreCreateInfoJsonConverter : JsonConverter<ReceiptPreCreateInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReceiptPreCreateInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReceiptPreCreateInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, Dictionary<string, int>>> numerations = default;
            Option<List<string>> numerationsList = default;
            Option<List<string>> rcCentersList = default;
            Option<List<PaymentAccount>> paymentAccountsList = default;
            Option<List<string>> categoriesList = default;
            Option<List<VatType>> vatTypesList = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "numerations":
                            numerations = new Option<Dictionary<string, Dictionary<string, int>>>(JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, int>>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "numerations_list":
                            numerationsList = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "rc_centers_list":
                            rcCentersList = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payment_accounts_list":
                            paymentAccountsList = new Option<List<PaymentAccount>>(JsonSerializer.Deserialize<List<PaymentAccount>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "categories_list":
                            categoriesList = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "vat_types_list":
                            vatTypesList = new Option<List<VatType>>(JsonSerializer.Deserialize<List<VatType>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (numerations.IsSet && numerations.Value == null)
                throw new ArgumentNullException(nameof(numerations), "Property is not nullable for class ReceiptPreCreateInfo.");

            return new ReceiptPreCreateInfo(numerations, numerationsList, rcCentersList, paymentAccountsList, categoriesList, vatTypesList);
        }

        /// <summary>
        /// Serializes a <see cref="ReceiptPreCreateInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receiptPreCreateInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReceiptPreCreateInfo receiptPreCreateInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, receiptPreCreateInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReceiptPreCreateInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receiptPreCreateInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReceiptPreCreateInfo receiptPreCreateInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (receiptPreCreateInfo.NumerationsOption.IsSet && receiptPreCreateInfo.Numerations == null)
                throw new ArgumentNullException(nameof(receiptPreCreateInfo.Numerations), "Property is required for class ReceiptPreCreateInfo.");

            if (receiptPreCreateInfo.NumerationsOption.IsSet)
            {
                writer.WritePropertyName("numerations");
                JsonSerializer.Serialize(writer, receiptPreCreateInfo.Numerations, jsonSerializerOptions);
            }
            if (receiptPreCreateInfo.NumerationsListOption.IsSet)
                if (receiptPreCreateInfo.NumerationsListOption.Value != null)
                {
                    writer.WritePropertyName("numerations_list");
                    JsonSerializer.Serialize(writer, receiptPreCreateInfo.NumerationsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("numerations_list");
            if (receiptPreCreateInfo.RcCentersListOption.IsSet)
                if (receiptPreCreateInfo.RcCentersListOption.Value != null)
                {
                    writer.WritePropertyName("rc_centers_list");
                    JsonSerializer.Serialize(writer, receiptPreCreateInfo.RcCentersList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("rc_centers_list");
            if (receiptPreCreateInfo.PaymentAccountsListOption.IsSet)
                if (receiptPreCreateInfo.PaymentAccountsListOption.Value != null)
                {
                    writer.WritePropertyName("payment_accounts_list");
                    JsonSerializer.Serialize(writer, receiptPreCreateInfo.PaymentAccountsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_accounts_list");
            if (receiptPreCreateInfo.CategoriesListOption.IsSet)
                if (receiptPreCreateInfo.CategoriesListOption.Value != null)
                {
                    writer.WritePropertyName("categories_list");
                    JsonSerializer.Serialize(writer, receiptPreCreateInfo.CategoriesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("categories_list");
            if (receiptPreCreateInfo.VatTypesListOption.IsSet)
                if (receiptPreCreateInfo.VatTypesListOption.Value != null)
                {
                    writer.WritePropertyName("vat_types_list");
                    JsonSerializer.Serialize(writer, receiptPreCreateInfo.VatTypesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("vat_types_list");
        }
    }
}
