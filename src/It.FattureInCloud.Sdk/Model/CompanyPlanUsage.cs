/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// CompanyPlanUsage
    /// </summary>
    [DataContract(Name = "CompanyPlanUsage")]
    public partial class CompanyPlanUsage : IEquatable<CompanyPlanUsage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyPlanUsage" /> class.
        /// </summary>
        /// <param name="limit">Plan limit.</param>
        /// <param name="usage">Plan usage.</param>
        public CompanyPlanUsage(decimal? limit = default(decimal?), decimal? usage = default(decimal?))
        {
            this._Limit = limit;
            if (this.Limit != null)
            {
                this._flagLimit = true;
            }
            this._Usage = usage;
            if (this.Usage != null)
            {
                this._flagUsage = true;
            }
        }

        /// <summary>
        /// Plan limit
        /// </summary>
        /// <value>Plan limit</value>
        [DataMember(Name = "limit", EmitDefaultValue = true)]
        public decimal? Limit
        {
            get { return _Limit; }
            set
            {
                _Limit = value;
                _flagLimit = true;
            }
        }
        private decimal? _Limit;
        private bool _flagLimit;

        /// <summary>
        /// Returns false as Limit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLimit()
        {
            return _flagLimit;
        }
        /// <summary>
        /// Plan usage
        /// </summary>
        /// <value>Plan usage</value>
        [DataMember(Name = "usage", EmitDefaultValue = true)]
        public decimal? Usage
        {
            get { return _Usage; }
            set
            {
                _Usage = value;
                _flagUsage = true;
            }
        }
        private decimal? _Usage;
        private bool _flagUsage;

        /// <summary>
        /// Returns false as Usage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUsage()
        {
            return _flagUsage;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyPlanUsage {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyPlanUsage);
        }

        /// <summary>
        /// Returns true if CompanyPlanUsage instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyPlanUsage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyPlanUsage input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) &&
                (
                    this.Usage == input.Usage ||
                    (this.Usage != null &&
                    this.Usage.Equals(input.Usage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Limit != null)
                {
                    hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                }
                if (this.Usage != null)
                {
                    hashCode = (hashCode * 59) + this.Usage.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
