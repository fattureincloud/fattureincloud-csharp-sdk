// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// VatType
    /// </summary>
    public partial class VatType : IEquatable<VatType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VatType" /> class.
        /// </summary>
        /// <param name="id">Vat type id</param>
        /// <param name="value">[Read Only] Vat type percentual value</param>
        /// <param name="description">Vat type short description</param>
        /// <param name="notes">Vat type notes shown in documents</param>
        /// <param name="eInvoice">Vat type is usable for e-invoices</param>
        /// <param name="eiType">Vat type e-invoice type (natura)</param>
        /// <param name="eiDescription">Vat type e-invoice description</param>
        /// <param name="editable">[Read Only] Is the vat type is editable.</param>
        /// <param name="isDisabled">Is the vat type disabled</param>
        /// <param name="default">If the vat type is default</param>
        [JsonConstructor]
        public VatType(Option<int?> id = default, Option<decimal?> value = default, Option<string> description = default, Option<string> notes = default, Option<bool?> eInvoice = default, Option<string> eiType = default, Option<string> eiDescription = default, Option<bool?> editable = default, Option<bool?> isDisabled = default, Option<bool?> @default = default)
        {
            IdOption = id;
            ValueOption = value;
            DescriptionOption = description;
            NotesOption = notes;
            EInvoiceOption = eInvoice;
            EiTypeOption = eiType;
            EiDescriptionOption = eiDescription;
            EditableOption = editable;
            IsDisabledOption = isDisabled;
            DefaultOption = @default;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Vat type id
        /// </summary>
        /// <value>Vat type id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ValueOption { get; private set; }

        /// <summary>
        /// [Read Only] Vat type percentual value
        /// </summary>
        /// <value>[Read Only] Vat type percentual value</value>
        /* <example>22</example> */
        [JsonPropertyName("value")]
        public decimal? Value { get { return this.ValueOption; } set { this.ValueOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Vat type short description
        /// </summary>
        /// <value>Vat type short description</value>
        /* <example>Non imponibile art. 123</example> */
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NotesOption { get; private set; }

        /// <summary>
        /// Vat type notes shown in documents
        /// </summary>
        /// <value>Vat type notes shown in documents</value>
        /* <example>IVA non imponibile ai sensi dell&#39;articolo 123, comma 2</example> */
        [JsonPropertyName("notes")]
        public string Notes { get { return this.NotesOption; } set { this.NotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EInvoice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EInvoiceOption { get; private set; }

        /// <summary>
        /// Vat type is usable for e-invoices
        /// </summary>
        /// <value>Vat type is usable for e-invoices</value>
        [JsonPropertyName("e_invoice")]
        public bool? EInvoice { get { return this.EInvoiceOption; } set { this.EInvoiceOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of EiType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EiTypeOption { get; private set; }

        /// <summary>
        /// Vat type e-invoice type (natura)
        /// </summary>
        /// <value>Vat type e-invoice type (natura)</value>
        /* <example>2</example> */
        [JsonPropertyName("ei_type")]
        public string EiType { get { return this.EiTypeOption; } set { this.EiTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EiDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EiDescriptionOption { get; private set; }

        /// <summary>
        /// Vat type e-invoice description
        /// </summary>
        /// <value>Vat type e-invoice description</value>
        [JsonPropertyName("ei_description")]
        public string EiDescription { get { return this.EiDescriptionOption; } set { this.EiDescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Editable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EditableOption { get; }

        /// <summary>
        /// [Read Only] Is the vat type is editable.
        /// </summary>
        /// <value>[Read Only] Is the vat type is editable.</value>
        [JsonPropertyName("editable")]
        public bool? Editable { get { return this.EditableOption; } }

        /// <summary>
        /// Used to track the state of IsDisabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDisabledOption { get; private set; }

        /// <summary>
        /// Is the vat type disabled
        /// </summary>
        /// <value>Is the vat type disabled</value>
        [JsonPropertyName("is_disabled")]
        public bool? IsDisabled { get { return this.IsDisabledOption; } set { this.IsDisabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Default
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DefaultOption { get; private set; }

        /// <summary>
        /// If the vat type is default
        /// </summary>
        /// <value>If the vat type is default</value>
        [JsonPropertyName("default")]
        public bool? Default { get { return this.DefaultOption; } set { this.DefaultOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VatType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  EiType: ").Append(EiType).Append("\n");
            sb.Append("  EiDescription: ").Append(EiDescription).Append("\n");
            sb.Append("  Editable: ").Append(Editable).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VatType);
        }

        /// <summary>
        /// Returns true if VatType instances are equal
        /// </summary>
        /// <param name="input">Instance of VatType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VatType input)
        {
            if (input == null)
                return false;

            return 
                (
                    Editable == input.Editable ||
                    Editable.Equals(input.Editable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Editable != null)
                    hashCode = (hashCode * 59) + Editable.GetHashCode();


                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="VatType" />
    /// </summary>
    public class VatTypeJsonConverter : JsonConverter<VatType>
    {
        /// <summary>
        /// Deserializes json to <see cref="VatType" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VatType Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<decimal?> value = default;
            Option<string> description = default;
            Option<string> notes = default;
            Option<bool?> eInvoice = default;
            Option<string> eiType = default;
            Option<string> eiDescription = default;
            Option<bool?> editable = default;
            Option<bool?> isDisabled = default;
            Option<bool?> varDefault = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "value":
                            value = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "notes":
                            notes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "e_invoice":
                            eInvoice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ei_type":
                            eiType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ei_description":
                            eiDescription = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "editable":
                            editable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_disabled":
                            isDisabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "default":
                            varDefault = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new VatType(id, value, description, notes, eInvoice, eiType, eiDescription, editable, isDisabled, varDefault);
        }

        /// <summary>
        /// Serializes a <see cref="VatType" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vatType"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VatType vatType, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, vatType, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VatType" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vatType"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VatType vatType, JsonSerializerOptions jsonSerializerOptions)
        {
            if (vatType.IdOption.IsSet)
                if (vatType.IdOption.Value != null)
                    writer.WriteNumber("id", vatType.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (vatType.ValueOption.IsSet)
                if (vatType.ValueOption.Value != null)
                    writer.WriteNumber("value", vatType.ValueOption.Value.Value);
                else
                    writer.WriteNull("value");

            if (vatType.DescriptionOption.IsSet)
                if (vatType.DescriptionOption.Value != null)
                    writer.WriteString("description", vatType.Description);
                else
                    writer.WriteNull("description");

            if (vatType.NotesOption.IsSet)
                if (vatType.NotesOption.Value != null)
                    writer.WriteString("notes", vatType.Notes);
                else
                    writer.WriteNull("notes");

            if (vatType.EInvoiceOption.IsSet)
                if (vatType.EInvoiceOption.Value != null)
                    writer.WriteBoolean("e_invoice", vatType.EInvoiceOption.Value.Value);
                else
                    writer.WriteNull("e_invoice");

            if (vatType.EiTypeOption.IsSet)
                if (vatType.EiTypeOption.Value != null)
                    writer.WriteString("ei_type", vatType.EiType);
                else
                    writer.WriteNull("ei_type");

            if (vatType.EiDescriptionOption.IsSet)
                if (vatType.EiDescriptionOption.Value != null)
                    writer.WriteString("ei_description", vatType.EiDescription);
                else
                    writer.WriteNull("ei_description");

            if (vatType.EditableOption.IsSet)
                if (vatType.EditableOption.Value != null)
                    writer.WriteBoolean("editable", vatType.EditableOption.Value.Value);
                else
                    writer.WriteNull("editable");

            if (vatType.IsDisabledOption.IsSet)
                if (vatType.IsDisabledOption.Value != null)
                    writer.WriteBoolean("is_disabled", vatType.IsDisabledOption.Value.Value);
                else
                    writer.WriteNull("is_disabled");

            if (vatType.DefaultOption.IsSet)
                if (vatType.DefaultOption.Value != null)
                    writer.WriteBoolean("default", vatType.DefaultOption.Value.Value);
                else
                    writer.WriteNull("default");
        }
    }
}
