/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// IssuedDocument
    /// </summary>
    [DataContract(Name = "IssuedDocument")]
    public partial class IssuedDocument : IEquatable<IssuedDocument>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public IssuedDocumentType? Type { get; set; }

        /// <summary>
        /// Gets or Sets ShowTotals
        /// </summary>
        [DataMember(Name = "show_totals", EmitDefaultValue = false)]
        public ShowTotalsMode? ShowTotals { get; set; }
        /// <summary>
        /// [Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the invoice, please wait up to 2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The invoice has yet to be sent   * &#x60;pending&#x60; - The checks for the digital signature and sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the customer   * &#x60;error&#x60; - An error occurred while handling the invoice, please try to resend it or contact support   * &#x60;discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * &#x60;not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer accepted the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   * &#x60;no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice 
        /// </summary>
        /// <value>[Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the invoice, please wait up to 2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The invoice has yet to be sent   * &#x60;pending&#x60; - The checks for the digital signature and sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the customer   * &#x60;error&#x60; - An error occurred while handling the invoice, please try to resend it or contact support   * &#x60;discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * &#x60;not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer accepted the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   * &#x60;no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EiStatusEnum
        {
            /// <summary>
            /// Enum Attempt for value: attempt
            /// </summary>
            [EnumMember(Value = "attempt")]
            Attempt = 1,

            /// <summary>
            /// Enum Missing for value: missing
            /// </summary>
            [EnumMember(Value = "missing")]
            Missing = 2,

            /// <summary>
            /// Enum NotSent for value: not_sent
            /// </summary>
            [EnumMember(Value = "not_sent")]
            NotSent = 3,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 4,

            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing = 5,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 6,

            /// <summary>
            /// Enum Discarded for value: discarded
            /// </summary>
            [EnumMember(Value = "discarded")]
            Discarded = 7,

            /// <summary>
            /// Enum NotDelivered for value: not_delivered
            /// </summary>
            [EnumMember(Value = "not_delivered")]
            NotDelivered = 8,

            /// <summary>
            /// Enum Accepted for value: accepted
            /// </summary>
            [EnumMember(Value = "accepted")]
            Accepted = 9,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            Rejected = 10,

            /// <summary>
            /// Enum NoResponse for value: no_response
            /// </summary>
            [EnumMember(Value = "no_response")]
            NoResponse = 11

        }


        /// <summary>
        /// [Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the invoice, please wait up to 2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The invoice has yet to be sent   * &#x60;pending&#x60; - The checks for the digital signature and sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the customer   * &#x60;error&#x60; - An error occurred while handling the invoice, please try to resend it or contact support   * &#x60;discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * &#x60;not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer accepted the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   * &#x60;no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice 
        /// </summary>
        /// <value>[Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the invoice, please wait up to 2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The invoice has yet to be sent   * &#x60;pending&#x60; - The checks for the digital signature and sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the customer   * &#x60;error&#x60; - An error occurred while handling the invoice, please try to resend it or contact support   * &#x60;discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * &#x60;not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer accepted the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   * &#x60;no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice </value>
        [DataMember(Name = "ei_status", EmitDefaultValue = false)]
        public EiStatusEnum? EiStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocument" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the document..</param>
        /// <param name="entity">entity.</param>
        /// <param name="type">type.</param>
        /// <param name="number">Number of the document [If not specified, next number is used].</param>
        /// <param name="numeration">Numeration of the document [Not available if type&#x3D;delivery_note].</param>
        /// <param name="date">Date of the document [If not specified, today date is used].</param>
        /// <param name="year">Invoice year..</param>
        /// <param name="currency">currency.</param>
        /// <param name="language">language.</param>
        /// <param name="subject">Issued document subject..</param>
        /// <param name="visibleSubject">Issued document visible subject..</param>
        /// <param name="rcCenter">Revenue center [or cost center if type&#x3D;supplier_order]..</param>
        /// <param name="notes">Issued document extra notes..</param>
        /// <param name="rivalsa">\&quot;Rivalsa INPS\&quot; percentual value.</param>
        /// <param name="cassa">\&quot;Cassa previdenziale\&quot; percentual value.</param>
        /// <param name="cassaTaxable">Cassa taxable percentage.</param>
        /// <param name="amountCassaTaxable">[Can be set only if cassa_taxable is NULL] Cassa2 taxable amount.</param>
        /// <param name="cassa2">\&quot;Cassa previdenziale 2\&quot; percentual value.</param>
        /// <param name="cassa2Taxable">Cassa2 taxable percentage.</param>
        /// <param name="amountCassa2Taxable">[Can be set only if cassa2_taxable is NULL] Cassa2 taxable amount.</param>
        /// <param name="globalCassaTaxable">Global cassa taxable percentage.</param>
        /// <param name="amountGlobalCassaTaxable">[Can be set only if global_cassa_taxable is NULL] Global cassa taxable amount.</param>
        /// <param name="withholdingTax">Withholding tax (ritenuta d&#39;acconto) percentual value.</param>
        /// <param name="withholdingTaxTaxable">Withholding tax taxable (imponibile) percentual value.</param>
        /// <param name="otherWithholdingTax">Other withholding tax (altra ritenuta) percentual value.</param>
        /// <param name="stampDuty">Stamp duty value [0 if not present].</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="useSplitPayment">Use split payment (default to false).</param>
        /// <param name="useGrossPrices">Use gross prices (default to false).</param>
        /// <param name="eInvoice">Indicates if this is an e-invoice. (default to false).</param>
        /// <param name="eiData">eiData.</param>
        /// <param name="eiCassaType">Einvoice cassa type.</param>
        /// <param name="eiCassa2Type">Einvoice cassa2 type.</param>
        /// <param name="eiWithholdingTaxCausal">Einvoice withholding tax causal.</param>
        /// <param name="eiOtherWithholdingTaxType">Einvoice other withholding tax type.</param>
        /// <param name="eiOtherWithholdingTaxCausal">Einvoice other withholding tax causal.</param>
        /// <param name="itemsList">itemsList.</param>
        /// <param name="paymentsList">paymentsList.</param>
        /// <param name="template">template.</param>
        /// <param name="deliveryNoteTemplate">deliveryNoteTemplate.</param>
        /// <param name="accInvTemplate">accInvTemplate.</param>
        /// <param name="hMargins">Horizontal margins..</param>
        /// <param name="vMargins">Vertical margins..</param>
        /// <param name="showPayments">Shows the expiration dates of the payments on the document..</param>
        /// <param name="showPaymentMethod">Show the payment method details on the document..</param>
        /// <param name="showTotals">showTotals.</param>
        /// <param name="showPaypalButton">Show paypal button (default to false).</param>
        /// <param name="showNotificationButton">Show notification button (default to false).</param>
        /// <param name="showTspayButton">Show ts pay button..</param>
        /// <param name="deliveryNote">deliveryNote.</param>
        /// <param name="accompanyingInvoice">Attach an accompanying invoice. (default to false).</param>
        /// <param name="dnNumber">Number (for the attached delivery note)..</param>
        /// <param name="dnDate">Date (for the attached delivery note)..</param>
        /// <param name="dnAiPackagesNumber">Number of packages (for the attached delivery note)..</param>
        /// <param name="dnAiWeight">Weight (for the attached delivery note)..</param>
        /// <param name="dnAiCausal">Causal (for the attached delivery note)..</param>
        /// <param name="dnAiDestination">Destination (for the attached delivery note)..</param>
        /// <param name="dnAiTransporter">Transporter (for the attached delivery note)..</param>
        /// <param name="dnAiNotes">Notes (for the attached delivery note)..</param>
        /// <param name="isMarked">This is true if the document is marked..</param>
        /// <param name="amountDueDiscount">Amount due discount.</param>
        /// <param name="amountRivalsaTaxable">Taxable rivalsa amount.</param>
        /// <param name="amountWithholdingTaxTaxable">Taxable withholding tax amount.</param>
        /// <param name="amountOtherWithholdingTaxTaxable">Taxable other withholding tax amount.</param>
        /// <param name="amountEnasarcoTaxable">Taxable enasarco amount.</param>
        /// <param name="extraData">extraData.</param>
        /// <param name="seenDate">Date when the client/supplier has seen the document..</param>
        /// <param name="nextDueDate">Date of the next not paid payment..</param>
        /// <param name="url">Public url of the document PDF file..</param>
        /// <param name="attachmentToken">[Write Only] Attachment token returned by POST /issued_documents/attachment. Used to attach the file already uploaded..</param>
        /// <param name="eiRaw">Advanced raw attributes for e-invoices..</param>
        /// <param name="eiStatus">[Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the invoice, please wait up to 2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The invoice has yet to be sent   * &#x60;pending&#x60; - The checks for the digital signature and sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the customer   * &#x60;error&#x60; - An error occurred while handling the invoice, please try to resend it or contact support   * &#x60;discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * &#x60;not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer accepted the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   * &#x60;no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice .</param>
        public IssuedDocument(int id = default(int), Entity entity = default(Entity), IssuedDocumentType? type = default(IssuedDocumentType?), int number = default(int), string numeration = default(string), DateTimeOffset date = default(DateTimeOffset), int year = default(int), Currency currency = default(Currency), Language language = default(Language), string subject = default(string), string visibleSubject = default(string), string rcCenter = default(string), string notes = default(string), decimal rivalsa = default(decimal), decimal cassa = default(decimal), decimal cassaTaxable = default(decimal), decimal? amountCassaTaxable = default(decimal?), decimal cassa2 = default(decimal), decimal cassa2Taxable = default(decimal), decimal? amountCassa2Taxable = default(decimal?), decimal globalCassaTaxable = default(decimal), decimal? amountGlobalCassaTaxable = default(decimal?), decimal withholdingTax = default(decimal), decimal withholdingTaxTaxable = default(decimal), decimal otherWithholdingTax = default(decimal), decimal stampDuty = default(decimal), PaymentMethod paymentMethod = default(PaymentMethod), bool useSplitPayment = false, bool useGrossPrices = false, bool eInvoice = false, IssuedDocumentEiData eiData = default(IssuedDocumentEiData), string eiCassaType = default(string), string eiCassa2Type = default(string), string eiWithholdingTaxCausal = default(string), string eiOtherWithholdingTaxType = default(string), string eiOtherWithholdingTaxCausal = default(string), List<IssuedDocumentItemsListItem> itemsList = default(List<IssuedDocumentItemsListItem>), List<IssuedDocumentPaymentsListItem> paymentsList = default(List<IssuedDocumentPaymentsListItem>), DocumentTemplate template = default(DocumentTemplate), DocumentTemplate deliveryNoteTemplate = default(DocumentTemplate), DocumentTemplate accInvTemplate = default(DocumentTemplate), int hMargins = default(int), int vMargins = default(int), bool showPayments = default(bool), bool showPaymentMethod = default(bool), ShowTotalsMode? showTotals = default(ShowTotalsMode?), bool showPaypalButton = false, bool showNotificationButton = false, bool? showTspayButton = default(bool?), bool deliveryNote = default(bool), bool accompanyingInvoice = false, int dnNumber = default(int), DateTimeOffset dnDate = default(DateTimeOffset), string dnAiPackagesNumber = default(string), string dnAiWeight = default(string), string dnAiCausal = default(string), string dnAiDestination = default(string), string dnAiTransporter = default(string), string dnAiNotes = default(string), bool isMarked = default(bool), decimal amountDueDiscount = default(decimal), decimal? amountRivalsaTaxable = default(decimal?), decimal? amountWithholdingTaxTaxable = default(decimal?), decimal? amountOtherWithholdingTaxTaxable = default(decimal?), decimal? amountEnasarcoTaxable = default(decimal?), IssuedDocumentExtraData extraData = default(IssuedDocumentExtraData), DateTime? seenDate = default(DateTime?), DateTime? nextDueDate = default(DateTime?), string url = default(string), string attachmentToken = default(string), Object eiRaw = default(Object), EiStatusEnum? eiStatus = default(EiStatusEnum?))
        {
            this.Id = id;
            this.Entity = entity;
            this.Type = type;
            this.Number = number;
            this.Numeration = numeration;
            this.Date = date;
            this.Year = year;
            this.Currency = currency;
            this.Language = language;
            this.Subject = subject;
            this.VisibleSubject = visibleSubject;
            this.RcCenter = rcCenter;
            this.Notes = notes;
            this.Rivalsa = rivalsa;
            this.Cassa = cassa;
            this.CassaTaxable = cassaTaxable;
            this.AmountCassaTaxable = amountCassaTaxable;
            this.Cassa2 = cassa2;
            this.Cassa2Taxable = cassa2Taxable;
            this.AmountCassa2Taxable = amountCassa2Taxable;
            this.GlobalCassaTaxable = globalCassaTaxable;
            this.AmountGlobalCassaTaxable = amountGlobalCassaTaxable;
            this.WithholdingTax = withholdingTax;
            this.WithholdingTaxTaxable = withholdingTaxTaxable;
            this.OtherWithholdingTax = otherWithholdingTax;
            this.StampDuty = stampDuty;
            this.PaymentMethod = paymentMethod;
            this.UseSplitPayment = useSplitPayment;
            this.UseGrossPrices = useGrossPrices;
            this.EInvoice = eInvoice;
            this.EiData = eiData;
            this.EiCassaType = eiCassaType;
            this.EiCassa2Type = eiCassa2Type;
            this.EiWithholdingTaxCausal = eiWithholdingTaxCausal;
            this.EiOtherWithholdingTaxType = eiOtherWithholdingTaxType;
            this.EiOtherWithholdingTaxCausal = eiOtherWithholdingTaxCausal;
            this.ItemsList = itemsList;
            this.PaymentsList = paymentsList;
            this.Template = template;
            this.DeliveryNoteTemplate = deliveryNoteTemplate;
            this.AccInvTemplate = accInvTemplate;
            this.HMargins = hMargins;
            this.VMargins = vMargins;
            this.ShowPayments = showPayments;
            this.ShowPaymentMethod = showPaymentMethod;
            this.ShowTotals = showTotals;
            this.ShowPaypalButton = showPaypalButton;
            this.ShowNotificationButton = showNotificationButton;
            this.ShowTspayButton = showTspayButton;
            this.DeliveryNote = deliveryNote;
            this.AccompanyingInvoice = accompanyingInvoice;
            this.DnNumber = dnNumber;
            this.DnDate = dnDate;
            this.DnAiPackagesNumber = dnAiPackagesNumber;
            this.DnAiWeight = dnAiWeight;
            this.DnAiCausal = dnAiCausal;
            this.DnAiDestination = dnAiDestination;
            this.DnAiTransporter = dnAiTransporter;
            this.DnAiNotes = dnAiNotes;
            this.IsMarked = isMarked;
            this.AmountDueDiscount = amountDueDiscount;
            this.AmountRivalsaTaxable = amountRivalsaTaxable;
            this.AmountWithholdingTaxTaxable = amountWithholdingTaxTaxable;
            this.AmountOtherWithholdingTaxTaxable = amountOtherWithholdingTaxTaxable;
            this.AmountEnasarcoTaxable = amountEnasarcoTaxable;
            this.ExtraData = extraData;
            this.SeenDate = seenDate;
            this.NextDueDate = nextDueDate;
            this.Url = url;
            this.AttachmentToken = attachmentToken;
            this.EiRaw = eiRaw;
            this.EiStatus = eiStatus;
        }

        /// <summary>
        /// Unique identifier of the document.
        /// </summary>
        /// <value>Unique identifier of the document.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public Entity Entity { get; set; }

        /// <summary>
        /// Number of the document [If not specified, next number is used]
        /// </summary>
        /// <value>Number of the document [If not specified, next number is used]</value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public int Number { get; set; }

        /// <summary>
        /// Numeration of the document [Not available if type&#x3D;delivery_note]
        /// </summary>
        /// <value>Numeration of the document [Not available if type&#x3D;delivery_note]</value>
        [DataMember(Name = "numeration", EmitDefaultValue = false)]
        public string Numeration { get; set; }

        /// <summary>
        /// Date of the document [If not specified, today date is used]
        /// </summary>
        /// <value>Date of the document [If not specified, today date is used]</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset Date { get; set; }

        /// <summary>
        /// Invoice year.
        /// </summary>
        /// <value>Invoice year.</value>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public Currency Currency { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public Language Language { get; set; }

        /// <summary>
        /// Issued document subject.
        /// </summary>
        /// <value>Issued document subject.</value>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Issued document visible subject.
        /// </summary>
        /// <value>Issued document visible subject.</value>
        [DataMember(Name = "visible_subject", EmitDefaultValue = false)]
        public string VisibleSubject { get; set; }

        /// <summary>
        /// Revenue center [or cost center if type&#x3D;supplier_order].
        /// </summary>
        /// <value>Revenue center [or cost center if type&#x3D;supplier_order].</value>
        [DataMember(Name = "rc_center", EmitDefaultValue = false)]
        public string RcCenter { get; set; }

        /// <summary>
        /// Issued document extra notes.
        /// </summary>
        /// <value>Issued document extra notes.</value>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// \&quot;Rivalsa INPS\&quot; percentual value
        /// </summary>
        /// <value>\&quot;Rivalsa INPS\&quot; percentual value</value>
        [DataMember(Name = "rivalsa", EmitDefaultValue = false)]
        public decimal Rivalsa { get; set; }

        /// <summary>
        /// \&quot;Cassa previdenziale\&quot; percentual value
        /// </summary>
        /// <value>\&quot;Cassa previdenziale\&quot; percentual value</value>
        [DataMember(Name = "cassa", EmitDefaultValue = false)]
        public decimal Cassa { get; set; }

        /// <summary>
        /// [Read Only] Cassa amount.
        /// </summary>
        /// <value>[Read Only] Cassa amount.</value>
        [DataMember(Name = "amount_cassa", EmitDefaultValue = false)]
        public decimal AmountCassa { get; private set; }

        /// <summary>
        /// Returns false as AmountCassa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassa()
        {
            return false;
        }
        /// <summary>
        /// Cassa taxable percentage
        /// </summary>
        /// <value>Cassa taxable percentage</value>
        [DataMember(Name = "cassa_taxable", EmitDefaultValue = false)]
        public decimal CassaTaxable { get; set; }

        /// <summary>
        /// [Can be set only if cassa_taxable is NULL] Cassa2 taxable amount
        /// </summary>
        /// <value>[Can be set only if cassa_taxable is NULL] Cassa2 taxable amount</value>
        [DataMember(Name = "amount_cassa_taxable", EmitDefaultValue = true)]
        public decimal? AmountCassaTaxable { get; set; }

        /// <summary>
        /// \&quot;Cassa previdenziale 2\&quot; percentual value
        /// </summary>
        /// <value>\&quot;Cassa previdenziale 2\&quot; percentual value</value>
        [DataMember(Name = "cassa2", EmitDefaultValue = false)]
        public decimal Cassa2 { get; set; }

        /// <summary>
        /// [Read Only] Cassa amount.
        /// </summary>
        /// <value>[Read Only] Cassa amount.</value>
        [DataMember(Name = "amount_cassa2", EmitDefaultValue = true)]
        public decimal? AmountCassa2 { get; private set; }

        /// <summary>
        /// Returns false as AmountCassa2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassa2()
        {
            return false;
        }
        /// <summary>
        /// Cassa2 taxable percentage
        /// </summary>
        /// <value>Cassa2 taxable percentage</value>
        [DataMember(Name = "cassa2_taxable", EmitDefaultValue = false)]
        public decimal Cassa2Taxable { get; set; }

        /// <summary>
        /// [Can be set only if cassa2_taxable is NULL] Cassa2 taxable amount
        /// </summary>
        /// <value>[Can be set only if cassa2_taxable is NULL] Cassa2 taxable amount</value>
        [DataMember(Name = "amount_cassa2_taxable", EmitDefaultValue = true)]
        public decimal? AmountCassa2Taxable { get; set; }

        /// <summary>
        /// Global cassa taxable percentage
        /// </summary>
        /// <value>Global cassa taxable percentage</value>
        [DataMember(Name = "global_cassa_taxable", EmitDefaultValue = false)]
        public decimal GlobalCassaTaxable { get; set; }

        /// <summary>
        /// [Can be set only if global_cassa_taxable is NULL] Global cassa taxable amount
        /// </summary>
        /// <value>[Can be set only if global_cassa_taxable is NULL] Global cassa taxable amount</value>
        [DataMember(Name = "amount_global_cassa_taxable", EmitDefaultValue = true)]
        public decimal? AmountGlobalCassaTaxable { get; set; }

        /// <summary>
        /// Withholding tax (ritenuta d&#39;acconto) percentual value
        /// </summary>
        /// <value>Withholding tax (ritenuta d&#39;acconto) percentual value</value>
        [DataMember(Name = "withholding_tax", EmitDefaultValue = false)]
        public decimal WithholdingTax { get; set; }

        /// <summary>
        /// Withholding tax taxable (imponibile) percentual value
        /// </summary>
        /// <value>Withholding tax taxable (imponibile) percentual value</value>
        [DataMember(Name = "withholding_tax_taxable", EmitDefaultValue = false)]
        public decimal WithholdingTaxTaxable { get; set; }

        /// <summary>
        /// Other withholding tax (altra ritenuta) percentual value
        /// </summary>
        /// <value>Other withholding tax (altra ritenuta) percentual value</value>
        [DataMember(Name = "other_withholding_tax", EmitDefaultValue = false)]
        public decimal OtherWithholdingTax { get; set; }

        /// <summary>
        /// Stamp duty value [0 if not present]
        /// </summary>
        /// <value>Stamp duty value [0 if not present]</value>
        [DataMember(Name = "stamp_duty", EmitDefaultValue = false)]
        public decimal StampDuty { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "payment_method", EmitDefaultValue = false)]
        public PaymentMethod PaymentMethod { get; set; }

        /// <summary>
        /// Use split payment
        /// </summary>
        /// <value>Use split payment</value>
        [DataMember(Name = "use_split_payment", EmitDefaultValue = true)]
        public bool UseSplitPayment { get; set; }

        /// <summary>
        /// Use gross prices
        /// </summary>
        /// <value>Use gross prices</value>
        [DataMember(Name = "use_gross_prices", EmitDefaultValue = true)]
        public bool UseGrossPrices { get; set; }

        /// <summary>
        /// Indicates if this is an e-invoice.
        /// </summary>
        /// <value>Indicates if this is an e-invoice.</value>
        [DataMember(Name = "e_invoice", EmitDefaultValue = true)]
        public bool EInvoice { get; set; }

        /// <summary>
        /// Gets or Sets EiData
        /// </summary>
        [DataMember(Name = "ei_data", EmitDefaultValue = true)]
        public IssuedDocumentEiData EiData { get; set; }

        /// <summary>
        /// Einvoice cassa type
        /// </summary>
        /// <value>Einvoice cassa type</value>
        [DataMember(Name = "ei_cassa_type", EmitDefaultValue = true)]
        public string EiCassaType { get; set; }

        /// <summary>
        /// Einvoice cassa2 type
        /// </summary>
        /// <value>Einvoice cassa2 type</value>
        [DataMember(Name = "ei_cassa2_type", EmitDefaultValue = true)]
        public string EiCassa2Type { get; set; }

        /// <summary>
        /// Einvoice withholding tax causal
        /// </summary>
        /// <value>Einvoice withholding tax causal</value>
        [DataMember(Name = "ei_withholding_tax_causal", EmitDefaultValue = true)]
        public string EiWithholdingTaxCausal { get; set; }

        /// <summary>
        /// Einvoice other withholding tax type
        /// </summary>
        /// <value>Einvoice other withholding tax type</value>
        [DataMember(Name = "ei_other_withholding_tax_type", EmitDefaultValue = true)]
        public string EiOtherWithholdingTaxType { get; set; }

        /// <summary>
        /// Einvoice other withholding tax causal
        /// </summary>
        /// <value>Einvoice other withholding tax causal</value>
        [DataMember(Name = "ei_other_withholding_tax_causal", EmitDefaultValue = true)]
        public string EiOtherWithholdingTaxCausal { get; set; }

        /// <summary>
        /// Gets or Sets ItemsList
        /// </summary>
        [DataMember(Name = "items_list", EmitDefaultValue = true)]
        public List<IssuedDocumentItemsListItem> ItemsList { get; set; }

        /// <summary>
        /// Gets or Sets PaymentsList
        /// </summary>
        [DataMember(Name = "payments_list", EmitDefaultValue = true)]
        public List<IssuedDocumentPaymentsListItem> PaymentsList { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public DocumentTemplate Template { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryNoteTemplate
        /// </summary>
        [DataMember(Name = "delivery_note_template", EmitDefaultValue = false)]
        public DocumentTemplate DeliveryNoteTemplate { get; set; }

        /// <summary>
        /// Gets or Sets AccInvTemplate
        /// </summary>
        [DataMember(Name = "acc_inv_template", EmitDefaultValue = false)]
        public DocumentTemplate AccInvTemplate { get; set; }

        /// <summary>
        /// Horizontal margins.
        /// </summary>
        /// <value>Horizontal margins.</value>
        [DataMember(Name = "h_margins", EmitDefaultValue = false)]
        public int HMargins { get; set; }

        /// <summary>
        /// Vertical margins.
        /// </summary>
        /// <value>Vertical margins.</value>
        [DataMember(Name = "v_margins", EmitDefaultValue = false)]
        public int VMargins { get; set; }

        /// <summary>
        /// Shows the expiration dates of the payments on the document.
        /// </summary>
        /// <value>Shows the expiration dates of the payments on the document.</value>
        [DataMember(Name = "show_payments", EmitDefaultValue = true)]
        public bool ShowPayments { get; set; }

        /// <summary>
        /// Show the payment method details on the document.
        /// </summary>
        /// <value>Show the payment method details on the document.</value>
        [DataMember(Name = "show_payment_method", EmitDefaultValue = true)]
        public bool ShowPaymentMethod { get; set; }

        /// <summary>
        /// Show paypal button
        /// </summary>
        /// <value>Show paypal button</value>
        [DataMember(Name = "show_paypal_button", EmitDefaultValue = true)]
        public bool ShowPaypalButton { get; set; }

        /// <summary>
        /// Show notification button
        /// </summary>
        /// <value>Show notification button</value>
        [DataMember(Name = "show_notification_button", EmitDefaultValue = true)]
        public bool ShowNotificationButton { get; set; }

        /// <summary>
        /// Show ts pay button.
        /// </summary>
        /// <value>Show ts pay button.</value>
        [DataMember(Name = "show_tspay_button", EmitDefaultValue = true)]
        public bool? ShowTspayButton { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryNote
        /// </summary>
        [DataMember(Name = "delivery_note", EmitDefaultValue = true)]
        public bool DeliveryNote { get; set; }

        /// <summary>
        /// Attach an accompanying invoice.
        /// </summary>
        /// <value>Attach an accompanying invoice.</value>
        [DataMember(Name = "accompanying_invoice", EmitDefaultValue = true)]
        public bool AccompanyingInvoice { get; set; }

        /// <summary>
        /// Number (for the attached delivery note).
        /// </summary>
        /// <value>Number (for the attached delivery note).</value>
        [DataMember(Name = "dn_number", EmitDefaultValue = false)]
        public int DnNumber { get; set; }

        /// <summary>
        /// Date (for the attached delivery note).
        /// </summary>
        /// <value>Date (for the attached delivery note).</value>
        [DataMember(Name = "dn_date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset DnDate { get; set; }

        /// <summary>
        /// Number of packages (for the attached delivery note).
        /// </summary>
        /// <value>Number of packages (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_packages_number", EmitDefaultValue = true)]
        public string DnAiPackagesNumber { get; set; }

        /// <summary>
        /// Weight (for the attached delivery note).
        /// </summary>
        /// <value>Weight (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_weight", EmitDefaultValue = true)]
        public string DnAiWeight { get; set; }

        /// <summary>
        /// Causal (for the attached delivery note).
        /// </summary>
        /// <value>Causal (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_causal", EmitDefaultValue = true)]
        public string DnAiCausal { get; set; }

        /// <summary>
        /// Destination (for the attached delivery note).
        /// </summary>
        /// <value>Destination (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_destination", EmitDefaultValue = true)]
        public string DnAiDestination { get; set; }

        /// <summary>
        /// Transporter (for the attached delivery note).
        /// </summary>
        /// <value>Transporter (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_transporter", EmitDefaultValue = true)]
        public string DnAiTransporter { get; set; }

        /// <summary>
        /// Notes (for the attached delivery note).
        /// </summary>
        /// <value>Notes (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_notes", EmitDefaultValue = true)]
        public string DnAiNotes { get; set; }

        /// <summary>
        /// This is true if the document is marked.
        /// </summary>
        /// <value>This is true if the document is marked.</value>
        [DataMember(Name = "is_marked", EmitDefaultValue = true)]
        public bool IsMarked { get; set; }

        /// <summary>
        /// [Read Only] Total net amount (competenze).
        /// </summary>
        /// <value>[Read Only] Total net amount (competenze).</value>
        [DataMember(Name = "amount_net", EmitDefaultValue = false)]
        public decimal AmountNet { get; private set; }

        /// <summary>
        /// Returns false as AmountNet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountNet()
        {
            return false;
        }
        /// <summary>
        /// [Read Only] Total vat amount (IVA).
        /// </summary>
        /// <value>[Read Only] Total vat amount (IVA).</value>
        [DataMember(Name = "amount_vat", EmitDefaultValue = false)]
        public decimal AmountVat { get; private set; }

        /// <summary>
        /// Returns false as AmountVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountVat()
        {
            return false;
        }
        /// <summary>
        /// [Read Only] Total gross amount (totale documento).
        /// </summary>
        /// <value>[Read Only] Total gross amount (totale documento).</value>
        [DataMember(Name = "amount_gross", EmitDefaultValue = false)]
        public decimal AmountGross { get; private set; }

        /// <summary>
        /// Returns false as AmountGross should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountGross()
        {
            return false;
        }
        /// <summary>
        /// Amount due discount
        /// </summary>
        /// <value>Amount due discount</value>
        [DataMember(Name = "amount_due_discount", EmitDefaultValue = false)]
        public decimal AmountDueDiscount { get; set; }

        /// <summary>
        /// [Read Only] Rivalsa amount.
        /// </summary>
        /// <value>[Read Only] Rivalsa amount.</value>
        [DataMember(Name = "amount_rivalsa", EmitDefaultValue = false)]
        public decimal AmountRivalsa { get; private set; }

        /// <summary>
        /// Returns false as AmountRivalsa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountRivalsa()
        {
            return false;
        }
        /// <summary>
        /// Taxable rivalsa amount
        /// </summary>
        /// <value>Taxable rivalsa amount</value>
        [DataMember(Name = "amount_rivalsa_taxable", EmitDefaultValue = true)]
        public decimal? AmountRivalsaTaxable { get; set; }

        /// <summary>
        /// [Read Only] Withholding tax amount (ritenuta d&#39;acconto).
        /// </summary>
        /// <value>[Read Only] Withholding tax amount (ritenuta d&#39;acconto).</value>
        [DataMember(Name = "amount_withholding_tax", EmitDefaultValue = false)]
        public decimal AmountWithholdingTax { get; private set; }

        /// <summary>
        /// Returns false as AmountWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountWithholdingTax()
        {
            return false;
        }
        /// <summary>
        /// Taxable withholding tax amount
        /// </summary>
        /// <value>Taxable withholding tax amount</value>
        [DataMember(Name = "amount_withholding_tax_taxable", EmitDefaultValue = true)]
        public decimal? AmountWithholdingTaxTaxable { get; set; }

        /// <summary>
        /// [Read Only] Other withholding tax amount (altra ritenuta).
        /// </summary>
        /// <value>[Read Only] Other withholding tax amount (altra ritenuta).</value>
        [DataMember(Name = "amount_other_withholding_tax", EmitDefaultValue = false)]
        public decimal AmountOtherWithholdingTax { get; private set; }

        /// <summary>
        /// Returns false as AmountOtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOtherWithholdingTax()
        {
            return false;
        }
        /// <summary>
        /// Taxable other withholding tax amount
        /// </summary>
        /// <value>Taxable other withholding tax amount</value>
        [DataMember(Name = "amount_other_withholding_tax_taxable", EmitDefaultValue = true)]
        public decimal? AmountOtherWithholdingTaxTaxable { get; set; }

        /// <summary>
        /// Taxable enasarco amount
        /// </summary>
        /// <value>Taxable enasarco amount</value>
        [DataMember(Name = "amount_enasarco_taxable", EmitDefaultValue = true)]
        public decimal? AmountEnasarcoTaxable { get; set; }

        /// <summary>
        /// Gets or Sets ExtraData
        /// </summary>
        [DataMember(Name = "extra_data", EmitDefaultValue = true)]
        public IssuedDocumentExtraData ExtraData { get; set; }

        /// <summary>
        /// Date when the client/supplier has seen the document.
        /// </summary>
        /// <value>Date when the client/supplier has seen the document.</value>
        [DataMember(Name = "seen_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? SeenDate { get; set; }

        /// <summary>
        /// Date of the next not paid payment.
        /// </summary>
        /// <value>Date of the next not paid payment.</value>
        [DataMember(Name = "next_due_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? NextDueDate { get; set; }

        /// <summary>
        /// Public url of the document PDF file.
        /// </summary>
        /// <value>Public url of the document PDF file.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// [Read Only] Public url of the attached file. Authomatically set if a valid attachment token is passed via POST /issued_documents or PUT /issued_documents/{documentId}.
        /// </summary>
        /// <value>[Read Only] Public url of the attached file. Authomatically set if a valid attachment token is passed via POST /issued_documents or PUT /issued_documents/{documentId}.</value>
        [DataMember(Name = "attachment_url", EmitDefaultValue = false)]
        public string AttachmentUrl { get; private set; }

        /// <summary>
        /// Returns false as AttachmentUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachmentUrl()
        {
            return false;
        }
        /// <summary>
        /// [Write Only] Attachment token returned by POST /issued_documents/attachment. Used to attach the file already uploaded.
        /// </summary>
        /// <value>[Write Only] Attachment token returned by POST /issued_documents/attachment. Used to attach the file already uploaded.</value>
        [DataMember(Name = "attachment_token", EmitDefaultValue = true)]
        public string AttachmentToken { get; set; }

        /// <summary>
        /// Advanced raw attributes for e-invoices.
        /// </summary>
        /// <value>Advanced raw attributes for e-invoices.</value>
        [DataMember(Name = "ei_raw", EmitDefaultValue = true)]
        public Object EiRaw { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Numeration: ").Append(Numeration).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  VisibleSubject: ").Append(VisibleSubject).Append("\n");
            sb.Append("  RcCenter: ").Append(RcCenter).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Rivalsa: ").Append(Rivalsa).Append("\n");
            sb.Append("  Cassa: ").Append(Cassa).Append("\n");
            sb.Append("  AmountCassa: ").Append(AmountCassa).Append("\n");
            sb.Append("  CassaTaxable: ").Append(CassaTaxable).Append("\n");
            sb.Append("  AmountCassaTaxable: ").Append(AmountCassaTaxable).Append("\n");
            sb.Append("  Cassa2: ").Append(Cassa2).Append("\n");
            sb.Append("  AmountCassa2: ").Append(AmountCassa2).Append("\n");
            sb.Append("  Cassa2Taxable: ").Append(Cassa2Taxable).Append("\n");
            sb.Append("  AmountCassa2Taxable: ").Append(AmountCassa2Taxable).Append("\n");
            sb.Append("  GlobalCassaTaxable: ").Append(GlobalCassaTaxable).Append("\n");
            sb.Append("  AmountGlobalCassaTaxable: ").Append(AmountGlobalCassaTaxable).Append("\n");
            sb.Append("  WithholdingTax: ").Append(WithholdingTax).Append("\n");
            sb.Append("  WithholdingTaxTaxable: ").Append(WithholdingTaxTaxable).Append("\n");
            sb.Append("  OtherWithholdingTax: ").Append(OtherWithholdingTax).Append("\n");
            sb.Append("  StampDuty: ").Append(StampDuty).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  UseSplitPayment: ").Append(UseSplitPayment).Append("\n");
            sb.Append("  UseGrossPrices: ").Append(UseGrossPrices).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  EiData: ").Append(EiData).Append("\n");
            sb.Append("  EiCassaType: ").Append(EiCassaType).Append("\n");
            sb.Append("  EiCassa2Type: ").Append(EiCassa2Type).Append("\n");
            sb.Append("  EiWithholdingTaxCausal: ").Append(EiWithholdingTaxCausal).Append("\n");
            sb.Append("  EiOtherWithholdingTaxType: ").Append(EiOtherWithholdingTaxType).Append("\n");
            sb.Append("  EiOtherWithholdingTaxCausal: ").Append(EiOtherWithholdingTaxCausal).Append("\n");
            sb.Append("  ItemsList: ").Append(ItemsList).Append("\n");
            sb.Append("  PaymentsList: ").Append(PaymentsList).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  DeliveryNoteTemplate: ").Append(DeliveryNoteTemplate).Append("\n");
            sb.Append("  AccInvTemplate: ").Append(AccInvTemplate).Append("\n");
            sb.Append("  HMargins: ").Append(HMargins).Append("\n");
            sb.Append("  VMargins: ").Append(VMargins).Append("\n");
            sb.Append("  ShowPayments: ").Append(ShowPayments).Append("\n");
            sb.Append("  ShowPaymentMethod: ").Append(ShowPaymentMethod).Append("\n");
            sb.Append("  ShowTotals: ").Append(ShowTotals).Append("\n");
            sb.Append("  ShowPaypalButton: ").Append(ShowPaypalButton).Append("\n");
            sb.Append("  ShowNotificationButton: ").Append(ShowNotificationButton).Append("\n");
            sb.Append("  ShowTspayButton: ").Append(ShowTspayButton).Append("\n");
            sb.Append("  DeliveryNote: ").Append(DeliveryNote).Append("\n");
            sb.Append("  AccompanyingInvoice: ").Append(AccompanyingInvoice).Append("\n");
            sb.Append("  DnNumber: ").Append(DnNumber).Append("\n");
            sb.Append("  DnDate: ").Append(DnDate).Append("\n");
            sb.Append("  DnAiPackagesNumber: ").Append(DnAiPackagesNumber).Append("\n");
            sb.Append("  DnAiWeight: ").Append(DnAiWeight).Append("\n");
            sb.Append("  DnAiCausal: ").Append(DnAiCausal).Append("\n");
            sb.Append("  DnAiDestination: ").Append(DnAiDestination).Append("\n");
            sb.Append("  DnAiTransporter: ").Append(DnAiTransporter).Append("\n");
            sb.Append("  DnAiNotes: ").Append(DnAiNotes).Append("\n");
            sb.Append("  IsMarked: ").Append(IsMarked).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  AmountDueDiscount: ").Append(AmountDueDiscount).Append("\n");
            sb.Append("  AmountRivalsa: ").Append(AmountRivalsa).Append("\n");
            sb.Append("  AmountRivalsaTaxable: ").Append(AmountRivalsaTaxable).Append("\n");
            sb.Append("  AmountWithholdingTax: ").Append(AmountWithholdingTax).Append("\n");
            sb.Append("  AmountWithholdingTaxTaxable: ").Append(AmountWithholdingTaxTaxable).Append("\n");
            sb.Append("  AmountOtherWithholdingTax: ").Append(AmountOtherWithholdingTax).Append("\n");
            sb.Append("  AmountOtherWithholdingTaxTaxable: ").Append(AmountOtherWithholdingTaxTaxable).Append("\n");
            sb.Append("  AmountEnasarcoTaxable: ").Append(AmountEnasarcoTaxable).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("  SeenDate: ").Append(SeenDate).Append("\n");
            sb.Append("  NextDueDate: ").Append(NextDueDate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("  AttachmentToken: ").Append(AttachmentToken).Append("\n");
            sb.Append("  EiRaw: ").Append(EiRaw).Append("\n");
            sb.Append("  EiStatus: ").Append(EiStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocument);
        }

        /// <summary>
        /// Returns true if IssuedDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                ) && 
                (
                    this.Numeration == input.Numeration ||
                    (this.Numeration != null &&
                    this.Numeration.Equals(input.Numeration))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.VisibleSubject == input.VisibleSubject ||
                    (this.VisibleSubject != null &&
                    this.VisibleSubject.Equals(input.VisibleSubject))
                ) && 
                (
                    this.RcCenter == input.RcCenter ||
                    (this.RcCenter != null &&
                    this.RcCenter.Equals(input.RcCenter))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Rivalsa == input.Rivalsa ||
                    this.Rivalsa.Equals(input.Rivalsa)
                ) && 
                (
                    this.Cassa == input.Cassa ||
                    this.Cassa.Equals(input.Cassa)
                ) && 
                (
                    this.AmountCassa == input.AmountCassa ||
                    this.AmountCassa.Equals(input.AmountCassa)
                ) && 
                (
                    this.CassaTaxable == input.CassaTaxable ||
                    this.CassaTaxable.Equals(input.CassaTaxable)
                ) && 
                (
                    this.AmountCassaTaxable == input.AmountCassaTaxable ||
                    (this.AmountCassaTaxable != null &&
                    this.AmountCassaTaxable.Equals(input.AmountCassaTaxable))
                ) && 
                (
                    this.Cassa2 == input.Cassa2 ||
                    this.Cassa2.Equals(input.Cassa2)
                ) && 
                (
                    this.AmountCassa2 == input.AmountCassa2 ||
                    (this.AmountCassa2 != null &&
                    this.AmountCassa2.Equals(input.AmountCassa2))
                ) && 
                (
                    this.Cassa2Taxable == input.Cassa2Taxable ||
                    this.Cassa2Taxable.Equals(input.Cassa2Taxable)
                ) && 
                (
                    this.AmountCassa2Taxable == input.AmountCassa2Taxable ||
                    (this.AmountCassa2Taxable != null &&
                    this.AmountCassa2Taxable.Equals(input.AmountCassa2Taxable))
                ) && 
                (
                    this.GlobalCassaTaxable == input.GlobalCassaTaxable ||
                    this.GlobalCassaTaxable.Equals(input.GlobalCassaTaxable)
                ) && 
                (
                    this.AmountGlobalCassaTaxable == input.AmountGlobalCassaTaxable ||
                    (this.AmountGlobalCassaTaxable != null &&
                    this.AmountGlobalCassaTaxable.Equals(input.AmountGlobalCassaTaxable))
                ) && 
                (
                    this.WithholdingTax == input.WithholdingTax ||
                    this.WithholdingTax.Equals(input.WithholdingTax)
                ) && 
                (
                    this.WithholdingTaxTaxable == input.WithholdingTaxTaxable ||
                    this.WithholdingTaxTaxable.Equals(input.WithholdingTaxTaxable)
                ) && 
                (
                    this.OtherWithholdingTax == input.OtherWithholdingTax ||
                    this.OtherWithholdingTax.Equals(input.OtherWithholdingTax)
                ) && 
                (
                    this.StampDuty == input.StampDuty ||
                    this.StampDuty.Equals(input.StampDuty)
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.UseSplitPayment == input.UseSplitPayment ||
                    this.UseSplitPayment.Equals(input.UseSplitPayment)
                ) && 
                (
                    this.UseGrossPrices == input.UseGrossPrices ||
                    this.UseGrossPrices.Equals(input.UseGrossPrices)
                ) && 
                (
                    this.EInvoice == input.EInvoice ||
                    this.EInvoice.Equals(input.EInvoice)
                ) && 
                (
                    this.EiData == input.EiData ||
                    (this.EiData != null &&
                    this.EiData.Equals(input.EiData))
                ) && 
                (
                    this.EiCassaType == input.EiCassaType ||
                    (this.EiCassaType != null &&
                    this.EiCassaType.Equals(input.EiCassaType))
                ) && 
                (
                    this.EiCassa2Type == input.EiCassa2Type ||
                    (this.EiCassa2Type != null &&
                    this.EiCassa2Type.Equals(input.EiCassa2Type))
                ) && 
                (
                    this.EiWithholdingTaxCausal == input.EiWithholdingTaxCausal ||
                    (this.EiWithholdingTaxCausal != null &&
                    this.EiWithholdingTaxCausal.Equals(input.EiWithholdingTaxCausal))
                ) && 
                (
                    this.EiOtherWithholdingTaxType == input.EiOtherWithholdingTaxType ||
                    (this.EiOtherWithholdingTaxType != null &&
                    this.EiOtherWithholdingTaxType.Equals(input.EiOtherWithholdingTaxType))
                ) && 
                (
                    this.EiOtherWithholdingTaxCausal == input.EiOtherWithholdingTaxCausal ||
                    (this.EiOtherWithholdingTaxCausal != null &&
                    this.EiOtherWithholdingTaxCausal.Equals(input.EiOtherWithholdingTaxCausal))
                ) && 
                (
                    this.ItemsList == input.ItemsList ||
                    this.ItemsList != null &&
                    input.ItemsList != null &&
                    this.ItemsList.SequenceEqual(input.ItemsList)
                ) && 
                (
                    this.PaymentsList == input.PaymentsList ||
                    this.PaymentsList != null &&
                    input.PaymentsList != null &&
                    this.PaymentsList.SequenceEqual(input.PaymentsList)
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.DeliveryNoteTemplate == input.DeliveryNoteTemplate ||
                    (this.DeliveryNoteTemplate != null &&
                    this.DeliveryNoteTemplate.Equals(input.DeliveryNoteTemplate))
                ) && 
                (
                    this.AccInvTemplate == input.AccInvTemplate ||
                    (this.AccInvTemplate != null &&
                    this.AccInvTemplate.Equals(input.AccInvTemplate))
                ) && 
                (
                    this.HMargins == input.HMargins ||
                    this.HMargins.Equals(input.HMargins)
                ) && 
                (
                    this.VMargins == input.VMargins ||
                    this.VMargins.Equals(input.VMargins)
                ) && 
                (
                    this.ShowPayments == input.ShowPayments ||
                    this.ShowPayments.Equals(input.ShowPayments)
                ) && 
                (
                    this.ShowPaymentMethod == input.ShowPaymentMethod ||
                    this.ShowPaymentMethod.Equals(input.ShowPaymentMethod)
                ) && 
                (
                    this.ShowTotals == input.ShowTotals ||
                    this.ShowTotals.Equals(input.ShowTotals)
                ) && 
                (
                    this.ShowPaypalButton == input.ShowPaypalButton ||
                    this.ShowPaypalButton.Equals(input.ShowPaypalButton)
                ) && 
                (
                    this.ShowNotificationButton == input.ShowNotificationButton ||
                    this.ShowNotificationButton.Equals(input.ShowNotificationButton)
                ) && 
                (
                    this.ShowTspayButton == input.ShowTspayButton ||
                    (this.ShowTspayButton != null &&
                    this.ShowTspayButton.Equals(input.ShowTspayButton))
                ) && 
                (
                    this.DeliveryNote == input.DeliveryNote ||
                    this.DeliveryNote.Equals(input.DeliveryNote)
                ) && 
                (
                    this.AccompanyingInvoice == input.AccompanyingInvoice ||
                    this.AccompanyingInvoice.Equals(input.AccompanyingInvoice)
                ) && 
                (
                    this.DnNumber == input.DnNumber ||
                    this.DnNumber.Equals(input.DnNumber)
                ) && 
                (
                    this.DnDate == input.DnDate ||
                    (this.DnDate != null &&
                    this.DnDate.Equals(input.DnDate))
                ) && 
                (
                    this.DnAiPackagesNumber == input.DnAiPackagesNumber ||
                    (this.DnAiPackagesNumber != null &&
                    this.DnAiPackagesNumber.Equals(input.DnAiPackagesNumber))
                ) && 
                (
                    this.DnAiWeight == input.DnAiWeight ||
                    (this.DnAiWeight != null &&
                    this.DnAiWeight.Equals(input.DnAiWeight))
                ) && 
                (
                    this.DnAiCausal == input.DnAiCausal ||
                    (this.DnAiCausal != null &&
                    this.DnAiCausal.Equals(input.DnAiCausal))
                ) && 
                (
                    this.DnAiDestination == input.DnAiDestination ||
                    (this.DnAiDestination != null &&
                    this.DnAiDestination.Equals(input.DnAiDestination))
                ) && 
                (
                    this.DnAiTransporter == input.DnAiTransporter ||
                    (this.DnAiTransporter != null &&
                    this.DnAiTransporter.Equals(input.DnAiTransporter))
                ) && 
                (
                    this.DnAiNotes == input.DnAiNotes ||
                    (this.DnAiNotes != null &&
                    this.DnAiNotes.Equals(input.DnAiNotes))
                ) && 
                (
                    this.IsMarked == input.IsMarked ||
                    this.IsMarked.Equals(input.IsMarked)
                ) && 
                (
                    this.AmountNet == input.AmountNet ||
                    this.AmountNet.Equals(input.AmountNet)
                ) && 
                (
                    this.AmountVat == input.AmountVat ||
                    this.AmountVat.Equals(input.AmountVat)
                ) && 
                (
                    this.AmountGross == input.AmountGross ||
                    this.AmountGross.Equals(input.AmountGross)
                ) && 
                (
                    this.AmountDueDiscount == input.AmountDueDiscount ||
                    this.AmountDueDiscount.Equals(input.AmountDueDiscount)
                ) && 
                (
                    this.AmountRivalsa == input.AmountRivalsa ||
                    this.AmountRivalsa.Equals(input.AmountRivalsa)
                ) && 
                (
                    this.AmountRivalsaTaxable == input.AmountRivalsaTaxable ||
                    (this.AmountRivalsaTaxable != null &&
                    this.AmountRivalsaTaxable.Equals(input.AmountRivalsaTaxable))
                ) && 
                (
                    this.AmountWithholdingTax == input.AmountWithholdingTax ||
                    this.AmountWithholdingTax.Equals(input.AmountWithholdingTax)
                ) && 
                (
                    this.AmountWithholdingTaxTaxable == input.AmountWithholdingTaxTaxable ||
                    (this.AmountWithholdingTaxTaxable != null &&
                    this.AmountWithholdingTaxTaxable.Equals(input.AmountWithholdingTaxTaxable))
                ) && 
                (
                    this.AmountOtherWithholdingTax == input.AmountOtherWithholdingTax ||
                    this.AmountOtherWithholdingTax.Equals(input.AmountOtherWithholdingTax)
                ) && 
                (
                    this.AmountOtherWithholdingTaxTaxable == input.AmountOtherWithholdingTaxTaxable ||
                    (this.AmountOtherWithholdingTaxTaxable != null &&
                    this.AmountOtherWithholdingTaxTaxable.Equals(input.AmountOtherWithholdingTaxTaxable))
                ) && 
                (
                    this.AmountEnasarcoTaxable == input.AmountEnasarcoTaxable ||
                    (this.AmountEnasarcoTaxable != null &&
                    this.AmountEnasarcoTaxable.Equals(input.AmountEnasarcoTaxable))
                ) && 
                (
                    this.ExtraData == input.ExtraData ||
                    (this.ExtraData != null &&
                    this.ExtraData.Equals(input.ExtraData))
                ) && 
                (
                    this.SeenDate == input.SeenDate ||
                    (this.SeenDate != null &&
                    this.SeenDate.Equals(input.SeenDate))
                ) && 
                (
                    this.NextDueDate == input.NextDueDate ||
                    (this.NextDueDate != null &&
                    this.NextDueDate.Equals(input.NextDueDate))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.AttachmentUrl == input.AttachmentUrl ||
                    (this.AttachmentUrl != null &&
                    this.AttachmentUrl.Equals(input.AttachmentUrl))
                ) && 
                (
                    this.AttachmentToken == input.AttachmentToken ||
                    (this.AttachmentToken != null &&
                    this.AttachmentToken.Equals(input.AttachmentToken))
                ) && 
                (
                    this.EiRaw == input.EiRaw ||
                    (this.EiRaw != null &&
                    this.EiRaw.Equals(input.EiRaw))
                ) && 
                (
                    this.EiStatus == input.EiStatus ||
                    this.EiStatus.Equals(input.EiStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Number.GetHashCode();
                if (this.Numeration != null)
                {
                    hashCode = (hashCode * 59) + this.Numeration.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Year.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.VisibleSubject != null)
                {
                    hashCode = (hashCode * 59) + this.VisibleSubject.GetHashCode();
                }
                if (this.RcCenter != null)
                {
                    hashCode = (hashCode * 59) + this.RcCenter.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Rivalsa.GetHashCode();
                hashCode = (hashCode * 59) + this.Cassa.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountCassa.GetHashCode();
                hashCode = (hashCode * 59) + this.CassaTaxable.GetHashCode();
                if (this.AmountCassaTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.AmountCassaTaxable.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Cassa2.GetHashCode();
                if (this.AmountCassa2 != null)
                {
                    hashCode = (hashCode * 59) + this.AmountCassa2.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Cassa2Taxable.GetHashCode();
                if (this.AmountCassa2Taxable != null)
                {
                    hashCode = (hashCode * 59) + this.AmountCassa2Taxable.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GlobalCassaTaxable.GetHashCode();
                if (this.AmountGlobalCassaTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.AmountGlobalCassaTaxable.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WithholdingTax.GetHashCode();
                hashCode = (hashCode * 59) + this.WithholdingTaxTaxable.GetHashCode();
                hashCode = (hashCode * 59) + this.OtherWithholdingTax.GetHashCode();
                hashCode = (hashCode * 59) + this.StampDuty.GetHashCode();
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseSplitPayment.GetHashCode();
                hashCode = (hashCode * 59) + this.UseGrossPrices.GetHashCode();
                hashCode = (hashCode * 59) + this.EInvoice.GetHashCode();
                if (this.EiData != null)
                {
                    hashCode = (hashCode * 59) + this.EiData.GetHashCode();
                }
                if (this.EiCassaType != null)
                {
                    hashCode = (hashCode * 59) + this.EiCassaType.GetHashCode();
                }
                if (this.EiCassa2Type != null)
                {
                    hashCode = (hashCode * 59) + this.EiCassa2Type.GetHashCode();
                }
                if (this.EiWithholdingTaxCausal != null)
                {
                    hashCode = (hashCode * 59) + this.EiWithholdingTaxCausal.GetHashCode();
                }
                if (this.EiOtherWithholdingTaxType != null)
                {
                    hashCode = (hashCode * 59) + this.EiOtherWithholdingTaxType.GetHashCode();
                }
                if (this.EiOtherWithholdingTaxCausal != null)
                {
                    hashCode = (hashCode * 59) + this.EiOtherWithholdingTaxCausal.GetHashCode();
                }
                if (this.ItemsList != null)
                {
                    hashCode = (hashCode * 59) + this.ItemsList.GetHashCode();
                }
                if (this.PaymentsList != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentsList.GetHashCode();
                }
                if (this.Template != null)
                {
                    hashCode = (hashCode * 59) + this.Template.GetHashCode();
                }
                if (this.DeliveryNoteTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryNoteTemplate.GetHashCode();
                }
                if (this.AccInvTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.AccInvTemplate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HMargins.GetHashCode();
                hashCode = (hashCode * 59) + this.VMargins.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowPayments.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowPaymentMethod.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowTotals.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowPaypalButton.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowNotificationButton.GetHashCode();
                if (this.ShowTspayButton != null)
                {
                    hashCode = (hashCode * 59) + this.ShowTspayButton.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeliveryNote.GetHashCode();
                hashCode = (hashCode * 59) + this.AccompanyingInvoice.GetHashCode();
                hashCode = (hashCode * 59) + this.DnNumber.GetHashCode();
                if (this.DnDate != null)
                {
                    hashCode = (hashCode * 59) + this.DnDate.GetHashCode();
                }
                if (this.DnAiPackagesNumber != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiPackagesNumber.GetHashCode();
                }
                if (this.DnAiWeight != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiWeight.GetHashCode();
                }
                if (this.DnAiCausal != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiCausal.GetHashCode();
                }
                if (this.DnAiDestination != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiDestination.GetHashCode();
                }
                if (this.DnAiTransporter != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiTransporter.GetHashCode();
                }
                if (this.DnAiNotes != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiNotes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMarked.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountNet.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountVat.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountGross.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountDueDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountRivalsa.GetHashCode();
                if (this.AmountRivalsaTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.AmountRivalsaTaxable.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AmountWithholdingTax.GetHashCode();
                if (this.AmountWithholdingTaxTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.AmountWithholdingTaxTaxable.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AmountOtherWithholdingTax.GetHashCode();
                if (this.AmountOtherWithholdingTaxTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.AmountOtherWithholdingTaxTaxable.GetHashCode();
                }
                if (this.AmountEnasarcoTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.AmountEnasarcoTaxable.GetHashCode();
                }
                if (this.ExtraData != null)
                {
                    hashCode = (hashCode * 59) + this.ExtraData.GetHashCode();
                }
                if (this.SeenDate != null)
                {
                    hashCode = (hashCode * 59) + this.SeenDate.GetHashCode();
                }
                if (this.NextDueDate != null)
                {
                    hashCode = (hashCode * 59) + this.NextDueDate.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.AttachmentUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentUrl.GetHashCode();
                }
                if (this.AttachmentToken != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentToken.GetHashCode();
                }
                if (this.EiRaw != null)
                {
                    hashCode = (hashCode * 59) + this.EiRaw.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EiStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Rivalsa (decimal) maximum
            if (this.Rivalsa > (decimal)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rivalsa, must be a value less than or equal to 100.", new [] { "Rivalsa" });
            }

            // Rivalsa (decimal) minimum
            if (this.Rivalsa < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rivalsa, must be a value greater than or equal to 0.", new [] { "Rivalsa" });
            }

            // Cassa (decimal) maximum
            if (this.Cassa > (decimal)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cassa, must be a value less than or equal to 100.", new [] { "Cassa" });
            }

            // Cassa (decimal) minimum
            if (this.Cassa < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cassa, must be a value greater than or equal to 0.", new [] { "Cassa" });
            }

            // CassaTaxable (decimal) maximum
            if (this.CassaTaxable > (decimal)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CassaTaxable, must be a value less than or equal to 100.", new [] { "CassaTaxable" });
            }

            // CassaTaxable (decimal) minimum
            if (this.CassaTaxable < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CassaTaxable, must be a value greater than or equal to 0.", new [] { "CassaTaxable" });
            }

            // Cassa2 (decimal) maximum
            if (this.Cassa2 > (decimal)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cassa2, must be a value less than or equal to 100.", new [] { "Cassa2" });
            }

            // Cassa2 (decimal) minimum
            if (this.Cassa2 < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cassa2, must be a value greater than or equal to 0.", new [] { "Cassa2" });
            }

            // Cassa2Taxable (decimal) maximum
            if (this.Cassa2Taxable > (decimal)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cassa2Taxable, must be a value less than or equal to 100.", new [] { "Cassa2Taxable" });
            }

            // Cassa2Taxable (decimal) minimum
            if (this.Cassa2Taxable < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cassa2Taxable, must be a value greater than or equal to 0.", new [] { "Cassa2Taxable" });
            }

            // GlobalCassaTaxable (decimal) maximum
            if (this.GlobalCassaTaxable > (decimal)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GlobalCassaTaxable, must be a value less than or equal to 100.", new [] { "GlobalCassaTaxable" });
            }

            // GlobalCassaTaxable (decimal) minimum
            if (this.GlobalCassaTaxable < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GlobalCassaTaxable, must be a value greater than or equal to 0.", new [] { "GlobalCassaTaxable" });
            }

            // WithholdingTax (decimal) maximum
            if (this.WithholdingTax > (decimal)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WithholdingTax, must be a value less than or equal to 100.", new [] { "WithholdingTax" });
            }

            // WithholdingTax (decimal) minimum
            if (this.WithholdingTax < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WithholdingTax, must be a value greater than or equal to 0.", new [] { "WithholdingTax" });
            }

            // WithholdingTaxTaxable (decimal) maximum
            if (this.WithholdingTaxTaxable > (decimal)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WithholdingTaxTaxable, must be a value less than or equal to 100.", new [] { "WithholdingTaxTaxable" });
            }

            // WithholdingTaxTaxable (decimal) minimum
            if (this.WithholdingTaxTaxable < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WithholdingTaxTaxable, must be a value greater than or equal to 0.", new [] { "WithholdingTaxTaxable" });
            }

            // OtherWithholdingTax (decimal) maximum
            if (this.OtherWithholdingTax > (decimal)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OtherWithholdingTax, must be a value less than or equal to 100.", new [] { "OtherWithholdingTax" });
            }

            // OtherWithholdingTax (decimal) minimum
            if (this.OtherWithholdingTax < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OtherWithholdingTax, must be a value greater than or equal to 0.", new [] { "OtherWithholdingTax" });
            }

            yield break;
        }
    }

}
