/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    ///     IssuedDocument
    /// </summary>
    [DataContract(Name = "IssuedDocument")]
    public class IssuedDocument : IEquatable<IssuedDocument>, IValidatableObject
    {
        /// <summary>
        ///     [Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the invoice, please wait up to
        ///     2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The invoice has yet to be sent
        ///     * &#x60;sent&#x60; - The invoice was sent   * &#x60;pending&#x60; - The checks for the digital signature and
        ///     sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the customer   * &#x60;
        ///     error&#x60; - An error occurred while handling the invoice, please try to resend it or contact support   * &#x60;
        ///     discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * &#x60;
        ///     not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer accepted
        ///     the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   * &#x60;
        ///     no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to ascertain
        ///     the status of the invoice
        /// </summary>
        /// <value>
        ///     [Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the invoice, please wait up
        ///     to 2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The invoice has yet to be
        ///     sent   * &#x60;sent&#x60; - The invoice was sent   * &#x60;pending&#x60; - The checks for the digital signature and
        ///     sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the customer   * &#x60;
        ///     error&#x60; - An error occurred while handling the invoice, please try to resend it or contact support   * &#x60;
        ///     discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * &#x60;
        ///     not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer accepted
        ///     the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   * &#x60;
        ///     no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to ascertain
        ///     the status of the invoice
        /// </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EiStatusEnum
        {
            /// <summary>
            ///     Enum Attempt for value: attempt
            /// </summary>
            [EnumMember(Value = "attempt")] Attempt = 1,

            /// <summary>
            ///     Enum Missing for value: missing
            /// </summary>
            [EnumMember(Value = "missing")] Missing = 2,

            /// <summary>
            ///     Enum NotSent for value: not_sent
            /// </summary>
            [EnumMember(Value = "not_sent")] NotSent = 3,

            /// <summary>
            ///     Enum Sent for value: sent
            /// </summary>
            [EnumMember(Value = "sent")] Sent = 4,

            /// <summary>
            ///     Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")] Pending = 5,

            /// <summary>
            ///     Enum Processing for value: processing
            /// </summary>
            [EnumMember(Value = "processing")] Processing = 6,

            /// <summary>
            ///     Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")] Error = 7,

            /// <summary>
            ///     Enum Discarded for value: discarded
            /// </summary>
            [EnumMember(Value = "discarded")] Discarded = 8,

            /// <summary>
            ///     Enum NotDelivered for value: not_delivered
            /// </summary>
            [EnumMember(Value = "not_delivered")] NotDelivered = 9,

            /// <summary>
            ///     Enum Accepted for value: accepted
            /// </summary>
            [EnumMember(Value = "accepted")] Accepted = 10,

            /// <summary>
            ///     Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")] Rejected = 11,

            /// <summary>
            ///     Enum NoResponse for value: no_response
            /// </summary>
            [EnumMember(Value = "no_response")] NoResponse = 12
        }

        private DocumentTemplate _AccInvTemplate;
        private bool? _AccompanyingInvoice;
        private decimal? _AmountCassa2Taxable;
        private decimal? _AmountCassaTaxable;
        private decimal? _AmountDueDiscount;
        private decimal? _AmountEnasarcoTaxable;
        private decimal? _AmountGlobalCassaTaxable;
        private decimal? _AmountOtherWithholdingTaxTaxable;
        private decimal? _AmountRivalsaTaxable;
        private decimal? _AmountWithholdingTaxTaxable;
        private string _AttachmentToken;
        private decimal? _Cassa;
        private decimal? _Cassa2;
        private decimal? _Cassa2Taxable;
        private decimal? _CassaTaxable;
        private Currency _Currency;
        private DateTime? _Date;
        private bool? _DeliveryNote;
        private DocumentTemplate _DeliveryNoteTemplate;
        private string _DnAiCausal;
        private string _DnAiDestination;
        private string _DnAiNotes;
        private string _DnAiPackagesNumber;
        private string _DnAiTransporter;
        private string _DnAiWeight;
        private DateTime? _DnDate;
        private int? _DnNumber;
        private string _EiCassa2Type;
        private string _EiCassaType;
        private IssuedDocumentEiData _EiData;
        private bool? _EInvoice;
        private string _EiOtherWithholdingTaxCausal;
        private string _EiOtherWithholdingTaxType;
        private Object _EiRaw;
        private EiStatusEnum? _EiStatus;
        private string _EiWithholdingTaxCausal;
        private Entity _Entity;
        private IssuedDocumentExtraData _ExtraData;
        private bool _flagAccInvTemplate;
        private bool _flagAccompanyingInvoice;
        private bool _flagAmountCassa2Taxable;
        private bool _flagAmountCassaTaxable;
        private bool _flagAmountDueDiscount;
        private bool _flagAmountEnasarcoTaxable;
        private bool _flagAmountGlobalCassaTaxable;
        private bool _flagAmountOtherWithholdingTaxTaxable;
        private bool _flagAmountRivalsaTaxable;
        private bool _flagAmountWithholdingTaxTaxable;
        private bool _flagAttachmentToken;
        private bool _flagCassa;
        private bool _flagCassa2;
        private bool _flagCassa2Taxable;
        private bool _flagCassaTaxable;
        private bool _flagCurrency;
        private bool _flagDate;
        private bool _flagDeliveryNote;
        private bool _flagDeliveryNoteTemplate;
        private bool _flagDnAiCausal;
        private bool _flagDnAiDestination;
        private bool _flagDnAiNotes;
        private bool _flagDnAiPackagesNumber;
        private bool _flagDnAiTransporter;
        private bool _flagDnAiWeight;
        private bool _flagDnDate;
        private bool _flagDnNumber;
        private bool _flagEiCassa2Type;
        private bool _flagEiCassaType;
        private bool _flagEiData;
        private bool _flagEInvoice;
        private bool _flagEiOtherWithholdingTaxCausal;
        private bool _flagEiOtherWithholdingTaxType;
        private bool _flagEiRaw;
        private bool _flagEiStatus;
        private bool _flagEiWithholdingTaxCausal;
        private bool _flagEntity;
        private bool _flagExtraData;
        private bool _flagGlobalCassaTaxable;
        private bool _flagHMargins;
        private bool _flagId;
        private bool _flagIsMarked;
        private bool _flagItemsList;
        private bool _flagLanguage;
        private bool _flagNextDueDate;
        private bool _flagNotes;
        private bool _flagNumber;
        private bool _flagNumeration;
        private bool _flagOtherWithholdingTax;
        private bool _flagPaymentMethod;
        private bool _flagPaymentsList;
        private bool _flagRcCenter;
        private bool _flagRivalsa;
        private bool _flagSeenDate;
        private bool _flagShowNotificationButton;
        private bool _flagShowPaymentMethod;
        private bool _flagShowPayments;
        private bool _flagShowPaypalButton;
        private bool _flagShowTotals;
        private bool _flagShowTspayButton;
        private bool _flagStampDuty;
        private bool _flagSubject;
        private bool _flagTemplate;
        private bool _flagType;
        private bool _flagUrl;
        private bool _flagUseGrossPrices;
        private bool _flagUseSplitPayment;
        private bool _flagVisibleSubject;
        private bool _flagVMargins;
        private bool _flagWithholdingTax;
        private bool _flagWithholdingTaxTaxable;
        private bool _flagYear;
        private decimal? _GlobalCassaTaxable;
        private int? _HMargins;
        private int? _Id;
        private bool? _IsMarked;
        private List<IssuedDocumentItemsListItem> _ItemsList;
        private Language _Language;
        private DateTime? _NextDueDate;
        private string _Notes;
        private int? _Number;
        private string _Numeration;
        private decimal? _OtherWithholdingTax;
        private PaymentMethod _PaymentMethod;
        private List<IssuedDocumentPaymentsListItem> _PaymentsList;
        private string _RcCenter;
        private decimal? _Rivalsa;
        private DateTime? _SeenDate;
        private bool? _ShowNotificationButton;
        private bool? _ShowPaymentMethod;
        private bool? _ShowPayments;
        private bool? _ShowPaypalButton;
        private ShowTotalsMode? _ShowTotals;
        private bool? _ShowTspayButton;
        private decimal? _StampDuty;
        private string _Subject;
        private DocumentTemplate _Template;
        private IssuedDocumentType? _Type;
        private string _Url;
        private bool? _UseGrossPrices;
        private bool? _UseSplitPayment;
        private string _VisibleSubject;
        private int? _VMargins;
        private decimal? _WithholdingTax;
        private decimal? _WithholdingTaxTaxable;
        private int? _Year;

        /// <summary>
        ///     Initializes a new instance of the <see cref="IssuedDocument" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the document..</param>
        /// <param name="entity">entity.</param>
        /// <param name="type">type.</param>
        /// <param name="number">Number of the document [If not specified, next number is used].</param>
        /// <param name="numeration">Numeration of the document [Not available if type&#x3D;delivery_note].</param>
        /// <param name="date">Date of the document [If not specified, today date is used].</param>
        /// <param name="year">Invoice year..</param>
        /// <param name="currency">currency.</param>
        /// <param name="language">language.</param>
        /// <param name="subject">Issued document subject..</param>
        /// <param name="visibleSubject">Issued document visible subject..</param>
        /// <param name="rcCenter">Revenue center [or cost center if type&#x3D;supplier_order]..</param>
        /// <param name="notes">Issued document extra notes..</param>
        /// <param name="rivalsa">\&quot;Rivalsa INPS\&quot; percentual value.</param>
        /// <param name="cassa">\&quot;Cassa previdenziale\&quot; percentual value.</param>
        /// <param name="cassaTaxable">Cassa taxable percentage.</param>
        /// <param name="amountCassaTaxable">[Can be set only if cassa_taxable is NULL] Cassa2 taxable amount.</param>
        /// <param name="cassa2">\&quot;Cassa previdenziale 2\&quot; percentual value.</param>
        /// <param name="cassa2Taxable">Cassa2 taxable percentage.</param>
        /// <param name="amountCassa2Taxable">[Can be set only if cassa2_taxable is NULL] Cassa2 taxable amount.</param>
        /// <param name="globalCassaTaxable">Global cassa taxable percentage.</param>
        /// <param name="amountGlobalCassaTaxable">[Can be set only if global_cassa_taxable is NULL] Global cassa taxable amount.</param>
        /// <param name="withholdingTax">Withholding tax (ritenuta d&#39;acconto) percentual value.</param>
        /// <param name="withholdingTaxTaxable">Withholding tax taxable (imponibile) percentual value.</param>
        /// <param name="otherWithholdingTax">Other withholding tax (altra ritenuta) percentual value.</param>
        /// <param name="stampDuty">Stamp duty value [0 if not present].</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="useSplitPayment">Use split payment.</param>
        /// <param name="useGrossPrices">Use gross prices.</param>
        /// <param name="eInvoice">Indicates if this is an e-invoice..</param>
        /// <param name="eiData">eiData.</param>
        /// <param name="eiCassaType">E-invoice cassa type.</param>
        /// <param name="eiCassa2Type">E-invoice cassa2 type.</param>
        /// <param name="eiWithholdingTaxCausal">E-invoice withholding tax causal.</param>
        /// <param name="eiOtherWithholdingTaxType">E-invoice other withholding tax type.</param>
        /// <param name="eiOtherWithholdingTaxCausal">E-invoice other withholding tax causal.</param>
        /// <param name="itemsList">itemsList.</param>
        /// <param name="paymentsList">paymentsList.</param>
        /// <param name="template">template.</param>
        /// <param name="deliveryNoteTemplate">deliveryNoteTemplate.</param>
        /// <param name="accInvTemplate">accInvTemplate.</param>
        /// <param name="hMargins">Horizontal margins..</param>
        /// <param name="vMargins">Vertical margins..</param>
        /// <param name="showPayments">Shows the expiration dates of the payments on the document..</param>
        /// <param name="showPaymentMethod">Show the payment method details on the document..</param>
        /// <param name="showTotals">showTotals.</param>
        /// <param name="showPaypalButton">Show paypal button.</param>
        /// <param name="showNotificationButton">Show notification button.</param>
        /// <param name="showTspayButton">Show ts pay button..</param>
        /// <param name="deliveryNote">deliveryNote.</param>
        /// <param name="accompanyingInvoice">Attach an accompanying invoice..</param>
        /// <param name="dnNumber">Number (for the attached delivery note)..</param>
        /// <param name="dnDate">Date (for the attached delivery note)..</param>
        /// <param name="dnAiPackagesNumber">Number of packages (for the attached delivery note)..</param>
        /// <param name="dnAiWeight">Weight (for the attached delivery note)..</param>
        /// <param name="dnAiCausal">Causal (for the attached delivery note)..</param>
        /// <param name="dnAiDestination">Destination (for the attached delivery note)..</param>
        /// <param name="dnAiTransporter">Transporter (for the attached delivery note)..</param>
        /// <param name="dnAiNotes">Notes (for the attached delivery note)..</param>
        /// <param name="isMarked">This is true if the document is marked..</param>
        /// <param name="amountDueDiscount">Amount due discount.</param>
        /// <param name="amountRivalsaTaxable">Taxable rivalsa amount.</param>
        /// <param name="amountWithholdingTaxTaxable">Taxable withholding tax amount.</param>
        /// <param name="amountOtherWithholdingTaxTaxable">Taxable other withholding tax amount.</param>
        /// <param name="amountEnasarcoTaxable">Taxable enasarco amount.</param>
        /// <param name="extraData">extraData.</param>
        /// <param name="seenDate">Date when the client/supplier has seen the document..</param>
        /// <param name="nextDueDate">Date of the next not paid payment..</param>
        /// <param name="url">Public url of the document PDF file..</param>
        /// <param name="attachmentToken">
        ///     [Write Only] Attachment token returned by POST /issued_documents/attachment. Used to
        ///     attach the file already uploaded..
        /// </param>
        /// <param name="eiRaw">Advanced raw attributes for e-invoices..</param>
        /// <param name="eiStatus">
        ///     [Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the
        ///     invoice, please wait up to 2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The
        ///     invoice has yet to be sent   * &#x60;sent&#x60; - The invoice was sent   * &#x60;pending&#x60; - The checks for the
        ///     digital signature and sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the
        ///     customer   * &#x60;error&#x60; - An error occurred while handling the invoice, please try to resend it or contact
        ///     support   * &#x60;discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent
        ///     * &#x60;not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer
        ///     accepted the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   *
        ///     &#x60;no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to
        ///     ascertain the status of the invoice .
        /// </param>
        public IssuedDocument(int? id = default(int?), Entity entity = default,
            IssuedDocumentType? type = default(IssuedDocumentType?), int? number = default(int?),
            string numeration = default(string), DateTime? date = default(DateTime?), int? year = default(int?),
            Currency currency = default, Language language = default, string subject = default(string),
            string visibleSubject = default(string), string rcCenter = default(string), string notes = default(string),
            decimal? rivalsa = default(decimal?), decimal? cassa = default(decimal?),
            decimal? cassaTaxable = default(decimal?), decimal? amountCassaTaxable = default(decimal?),
            decimal? cassa2 = default(decimal?), decimal? cassa2Taxable = default(decimal?),
            decimal? amountCassa2Taxable = default(decimal?), decimal? globalCassaTaxable = default(decimal?),
            decimal? amountGlobalCassaTaxable = default(decimal?), decimal? withholdingTax = default(decimal?),
            decimal? withholdingTaxTaxable = default(decimal?), decimal? otherWithholdingTax = default(decimal?),
            decimal? stampDuty = default(decimal?), PaymentMethod paymentMethod = default,
            bool? useSplitPayment = default(bool?), bool? useGrossPrices = default(bool?),
            bool? eInvoice = default(bool?), IssuedDocumentEiData eiData = default,
            string eiCassaType = default(string), string eiCassa2Type = default(string),
            string eiWithholdingTaxCausal = default(string), string eiOtherWithholdingTaxType = default(string),
            string eiOtherWithholdingTaxCausal = default(string),
            List<IssuedDocumentItemsListItem> itemsList = default(List<IssuedDocumentItemsListItem>),
            List<IssuedDocumentPaymentsListItem> paymentsList = default(List<IssuedDocumentPaymentsListItem>),
            DocumentTemplate template = default, DocumentTemplate deliveryNoteTemplate = default,
            DocumentTemplate accInvTemplate = default, int? hMargins = default(int?), int? vMargins = default(int?),
            bool? showPayments = default(bool?), bool? showPaymentMethod = default(bool?),
            ShowTotalsMode? showTotals = default(ShowTotalsMode?), bool? showPaypalButton = default(bool?),
            bool? showNotificationButton = default(bool?), bool? showTspayButton = default(bool?),
            bool? deliveryNote = default(bool?), bool? accompanyingInvoice = default(bool?),
            int? dnNumber = default(int?), DateTime? dnDate = default(DateTime?),
            string dnAiPackagesNumber = default(string), string dnAiWeight = default(string),
            string dnAiCausal = default(string), string dnAiDestination = default(string),
            string dnAiTransporter = default(string), string dnAiNotes = default(string),
            bool? isMarked = default(bool?), decimal? amountDueDiscount = default(decimal?),
            decimal? amountRivalsaTaxable = default(decimal?), decimal? amountWithholdingTaxTaxable = default(decimal?),
            decimal? amountOtherWithholdingTaxTaxable = default(decimal?),
            decimal? amountEnasarcoTaxable = default(decimal?), IssuedDocumentExtraData extraData = default,
            DateTime? seenDate = default(DateTime?), DateTime? nextDueDate = default(DateTime?),
            string url = default(string), string attachmentToken = default(string), Object eiRaw = default(Object),
            EiStatusEnum? eiStatus = default(EiStatusEnum?))
        {
            _Id = id;
            if (Id != null) _flagId = true;
            _Entity = entity;
            if (Entity != null) _flagEntity = true;
            _Type = type;
            if (Type != null) _flagType = true;
            _Number = number;
            if (Number != null) _flagNumber = true;
            _Numeration = numeration;
            if (Numeration != null) _flagNumeration = true;
            _Date = date;
            if (Date != null) _flagDate = true;
            _Year = year;
            if (Year != null) _flagYear = true;
            _Currency = currency;
            if (Currency != null) _flagCurrency = true;
            _Language = language;
            if (Language != null) _flagLanguage = true;
            _Subject = subject;
            if (Subject != null) _flagSubject = true;
            _VisibleSubject = visibleSubject;
            if (VisibleSubject != null) _flagVisibleSubject = true;
            _RcCenter = rcCenter;
            if (RcCenter != null) _flagRcCenter = true;
            _Notes = notes;
            if (Notes != null) _flagNotes = true;
            _Rivalsa = rivalsa;
            if (Rivalsa != null) _flagRivalsa = true;
            _Cassa = cassa;
            if (Cassa != null) _flagCassa = true;
            _CassaTaxable = cassaTaxable;
            if (CassaTaxable != null) _flagCassaTaxable = true;
            _AmountCassaTaxable = amountCassaTaxable;
            if (AmountCassaTaxable != null) _flagAmountCassaTaxable = true;
            _Cassa2 = cassa2;
            if (Cassa2 != null) _flagCassa2 = true;
            _Cassa2Taxable = cassa2Taxable;
            if (Cassa2Taxable != null) _flagCassa2Taxable = true;
            _AmountCassa2Taxable = amountCassa2Taxable;
            if (AmountCassa2Taxable != null) _flagAmountCassa2Taxable = true;
            _GlobalCassaTaxable = globalCassaTaxable;
            if (GlobalCassaTaxable != null) _flagGlobalCassaTaxable = true;
            _AmountGlobalCassaTaxable = amountGlobalCassaTaxable;
            if (AmountGlobalCassaTaxable != null) _flagAmountGlobalCassaTaxable = true;
            _WithholdingTax = withholdingTax;
            if (WithholdingTax != null) _flagWithholdingTax = true;
            _WithholdingTaxTaxable = withholdingTaxTaxable;
            if (WithholdingTaxTaxable != null) _flagWithholdingTaxTaxable = true;
            _OtherWithholdingTax = otherWithholdingTax;
            if (OtherWithholdingTax != null) _flagOtherWithholdingTax = true;
            _StampDuty = stampDuty;
            if (StampDuty != null) _flagStampDuty = true;
            _PaymentMethod = paymentMethod;
            if (PaymentMethod != null) _flagPaymentMethod = true;
            _UseSplitPayment = useSplitPayment;
            if (UseSplitPayment != null) _flagUseSplitPayment = true;
            _UseGrossPrices = useGrossPrices;
            if (UseGrossPrices != null) _flagUseGrossPrices = true;
            _EInvoice = eInvoice;
            if (EInvoice != null) _flagEInvoice = true;
            _EiData = eiData;
            if (EiData != null) _flagEiData = true;
            _EiCassaType = eiCassaType;
            if (EiCassaType != null) _flagEiCassaType = true;
            _EiCassa2Type = eiCassa2Type;
            if (EiCassa2Type != null) _flagEiCassa2Type = true;
            _EiWithholdingTaxCausal = eiWithholdingTaxCausal;
            if (EiWithholdingTaxCausal != null) _flagEiWithholdingTaxCausal = true;
            _EiOtherWithholdingTaxType = eiOtherWithholdingTaxType;
            if (EiOtherWithholdingTaxType != null) _flagEiOtherWithholdingTaxType = true;
            _EiOtherWithholdingTaxCausal = eiOtherWithholdingTaxCausal;
            if (EiOtherWithholdingTaxCausal != null) _flagEiOtherWithholdingTaxCausal = true;
            _ItemsList = itemsList;
            if (ItemsList != null) _flagItemsList = true;
            _PaymentsList = paymentsList;
            if (PaymentsList != null) _flagPaymentsList = true;
            _Template = template;
            if (Template != null) _flagTemplate = true;
            _DeliveryNoteTemplate = deliveryNoteTemplate;
            if (DeliveryNoteTemplate != null) _flagDeliveryNoteTemplate = true;
            _AccInvTemplate = accInvTemplate;
            if (AccInvTemplate != null) _flagAccInvTemplate = true;
            _HMargins = hMargins;
            if (HMargins != null) _flagHMargins = true;
            _VMargins = vMargins;
            if (VMargins != null) _flagVMargins = true;
            _ShowPayments = showPayments;
            if (ShowPayments != null) _flagShowPayments = true;
            _ShowPaymentMethod = showPaymentMethod;
            if (ShowPaymentMethod != null) _flagShowPaymentMethod = true;
            _ShowTotals = showTotals;
            if (ShowTotals != null) _flagShowTotals = true;
            _ShowPaypalButton = showPaypalButton;
            if (ShowPaypalButton != null) _flagShowPaypalButton = true;
            _ShowNotificationButton = showNotificationButton;
            if (ShowNotificationButton != null) _flagShowNotificationButton = true;
            _ShowTspayButton = showTspayButton;
            if (ShowTspayButton != null) _flagShowTspayButton = true;
            _DeliveryNote = deliveryNote;
            if (DeliveryNote != null) _flagDeliveryNote = true;
            _AccompanyingInvoice = accompanyingInvoice;
            if (AccompanyingInvoice != null) _flagAccompanyingInvoice = true;
            _DnNumber = dnNumber;
            if (DnNumber != null) _flagDnNumber = true;
            _DnDate = dnDate;
            if (DnDate != null) _flagDnDate = true;
            _DnAiPackagesNumber = dnAiPackagesNumber;
            if (DnAiPackagesNumber != null) _flagDnAiPackagesNumber = true;
            _DnAiWeight = dnAiWeight;
            if (DnAiWeight != null) _flagDnAiWeight = true;
            _DnAiCausal = dnAiCausal;
            if (DnAiCausal != null) _flagDnAiCausal = true;
            _DnAiDestination = dnAiDestination;
            if (DnAiDestination != null) _flagDnAiDestination = true;
            _DnAiTransporter = dnAiTransporter;
            if (DnAiTransporter != null) _flagDnAiTransporter = true;
            _DnAiNotes = dnAiNotes;
            if (DnAiNotes != null) _flagDnAiNotes = true;
            _IsMarked = isMarked;
            if (IsMarked != null) _flagIsMarked = true;
            _AmountDueDiscount = amountDueDiscount;
            if (AmountDueDiscount != null) _flagAmountDueDiscount = true;
            _AmountRivalsaTaxable = amountRivalsaTaxable;
            if (AmountRivalsaTaxable != null) _flagAmountRivalsaTaxable = true;
            _AmountWithholdingTaxTaxable = amountWithholdingTaxTaxable;
            if (AmountWithholdingTaxTaxable != null) _flagAmountWithholdingTaxTaxable = true;
            _AmountOtherWithholdingTaxTaxable = amountOtherWithholdingTaxTaxable;
            if (AmountOtherWithholdingTaxTaxable != null) _flagAmountOtherWithholdingTaxTaxable = true;
            _AmountEnasarcoTaxable = amountEnasarcoTaxable;
            if (AmountEnasarcoTaxable != null) _flagAmountEnasarcoTaxable = true;
            _ExtraData = extraData;
            if (ExtraData != null) _flagExtraData = true;
            _SeenDate = seenDate;
            if (SeenDate != null) _flagSeenDate = true;
            _NextDueDate = nextDueDate;
            if (NextDueDate != null) _flagNextDueDate = true;
            _Url = url;
            if (Url != null) _flagUrl = true;
            _AttachmentToken = attachmentToken;
            if (AttachmentToken != null) _flagAttachmentToken = true;
            _EiRaw = eiRaw;
            if (EiRaw != null) _flagEiRaw = true;
            _EiStatus = eiStatus;
            if (EiStatus != null) _flagEiStatus = true;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = false)]
        public IssuedDocumentType? Type
        {
            get => _Type;
            set
            {
                _Type = value;
                _flagType = true;
            }
        }

        /// <summary>
        ///     Gets or Sets ShowTotals
        /// </summary>

        [DataMember(Name = "show_totals", EmitDefaultValue = false)]
        public ShowTotalsMode? ShowTotals
        {
            get => _ShowTotals;
            set
            {
                _ShowTotals = value;
                _flagShowTotals = true;
            }
        }


        /// <summary>
        ///     [Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the invoice, please wait up to
        ///     2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The invoice has yet to be sent
        ///     * &#x60;sent&#x60; - The invoice was sent   * &#x60;pending&#x60; - The checks for the digital signature and
        ///     sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the customer   * &#x60;
        ///     error&#x60; - An error occurred while handling the invoice, please try to resend it or contact support   * &#x60;
        ///     discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * &#x60;
        ///     not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer accepted
        ///     the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   * &#x60;
        ///     no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to ascertain
        ///     the status of the invoice
        /// </summary>
        /// <value>
        ///     [Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the invoice, please wait up
        ///     to 2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The invoice has yet to be
        ///     sent   * &#x60;sent&#x60; - The invoice was sent   * &#x60;pending&#x60; - The checks for the digital signature and
        ///     sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the customer   * &#x60;
        ///     error&#x60; - An error occurred while handling the invoice, please try to resend it or contact support   * &#x60;
        ///     discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * &#x60;
        ///     not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer accepted
        ///     the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   * &#x60;
        ///     no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to ascertain
        ///     the status of the invoice
        /// </value>

        [DataMember(Name = "ei_status", EmitDefaultValue = true)]
        public EiStatusEnum? EiStatus
        {
            get => _EiStatus;
            set
            {
                _EiStatus = value;
                _flagEiStatus = true;
            }
        }

        /// <summary>
        ///     Unique identifier of the document.
        /// </summary>
        /// <value>Unique identifier of the document.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get => _Id;
            set
            {
                _Id = value;
                _flagId = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public Entity Entity
        {
            get => _Entity;
            set
            {
                _Entity = value;
                _flagEntity = true;
            }
        }

        /// <summary>
        ///     Number of the document [If not specified, next number is used]
        /// </summary>
        /// <value>Number of the document [If not specified, next number is used]</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public int? Number
        {
            get => _Number;
            set
            {
                _Number = value;
                _flagNumber = true;
            }
        }

        /// <summary>
        ///     Numeration of the document [Not available if type&#x3D;delivery_note]
        /// </summary>
        /// <value>Numeration of the document [Not available if type&#x3D;delivery_note]</value>
        [DataMember(Name = "numeration", EmitDefaultValue = true)]
        public string Numeration
        {
            get => _Numeration;
            set
            {
                _Numeration = value;
                _flagNumeration = true;
            }
        }

        /// <summary>
        ///     Date of the document [If not specified, today date is used]
        /// </summary>
        /// <value>Date of the document [If not specified, today date is used]</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateTime? Date
        {
            get => _Date;
            set
            {
                _Date = value;
                _flagDate = true;
            }
        }

        /// <summary>
        ///     Invoice year.
        /// </summary>
        /// <value>Invoice year.</value>
        [DataMember(Name = "year", EmitDefaultValue = true)]
        public int? Year
        {
            get => _Year;
            set
            {
                _Year = value;
                _flagYear = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public Currency Currency
        {
            get => _Currency;
            set
            {
                _Currency = value;
                _flagCurrency = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public Language Language
        {
            get => _Language;
            set
            {
                _Language = value;
                _flagLanguage = true;
            }
        }

        /// <summary>
        ///     Issued document subject.
        /// </summary>
        /// <value>Issued document subject.</value>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject
        {
            get => _Subject;
            set
            {
                _Subject = value;
                _flagSubject = true;
            }
        }

        /// <summary>
        ///     Issued document visible subject.
        /// </summary>
        /// <value>Issued document visible subject.</value>
        [DataMember(Name = "visible_subject", EmitDefaultValue = true)]
        public string VisibleSubject
        {
            get => _VisibleSubject;
            set
            {
                _VisibleSubject = value;
                _flagVisibleSubject = true;
            }
        }

        /// <summary>
        ///     Revenue center [or cost center if type&#x3D;supplier_order].
        /// </summary>
        /// <value>Revenue center [or cost center if type&#x3D;supplier_order].</value>
        [DataMember(Name = "rc_center", EmitDefaultValue = true)]
        public string RcCenter
        {
            get => _RcCenter;
            set
            {
                _RcCenter = value;
                _flagRcCenter = true;
            }
        }

        /// <summary>
        ///     Issued document extra notes.
        /// </summary>
        /// <value>Issued document extra notes.</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes
        {
            get => _Notes;
            set
            {
                _Notes = value;
                _flagNotes = true;
            }
        }

        /// <summary>
        ///     \&quot;Rivalsa INPS\&quot; percentual value
        /// </summary>
        /// <value>\&quot;Rivalsa INPS\&quot; percentual value</value>
        [DataMember(Name = "rivalsa", EmitDefaultValue = true)]
        public decimal? Rivalsa
        {
            get => _Rivalsa;
            set
            {
                _Rivalsa = value;
                _flagRivalsa = true;
            }
        }

        /// <summary>
        ///     \&quot;Cassa previdenziale\&quot; percentual value
        /// </summary>
        /// <value>\&quot;Cassa previdenziale\&quot; percentual value</value>
        [DataMember(Name = "cassa", EmitDefaultValue = true)]
        public decimal? Cassa
        {
            get => _Cassa;
            set
            {
                _Cassa = value;
                _flagCassa = true;
            }
        }

        /// <summary>
        ///     [Read Only] Cassa amount.
        /// </summary>
        /// <value>[Read Only] Cassa amount.</value>
        [DataMember(Name = "amount_cassa", EmitDefaultValue = true)]
        public decimal? AmountCassa { get; private set; }

        /// <summary>
        ///     Cassa taxable percentage
        /// </summary>
        /// <value>Cassa taxable percentage</value>
        [DataMember(Name = "cassa_taxable", EmitDefaultValue = true)]
        public decimal? CassaTaxable
        {
            get => _CassaTaxable;
            set
            {
                _CassaTaxable = value;
                _flagCassaTaxable = true;
            }
        }

        /// <summary>
        ///     [Can be set only if cassa_taxable is NULL] Cassa2 taxable amount
        /// </summary>
        /// <value>[Can be set only if cassa_taxable is NULL] Cassa2 taxable amount</value>
        [DataMember(Name = "amount_cassa_taxable", EmitDefaultValue = true)]
        public decimal? AmountCassaTaxable
        {
            get => _AmountCassaTaxable;
            set
            {
                _AmountCassaTaxable = value;
                _flagAmountCassaTaxable = true;
            }
        }

        /// <summary>
        ///     \&quot;Cassa previdenziale 2\&quot; percentual value
        /// </summary>
        /// <value>\&quot;Cassa previdenziale 2\&quot; percentual value</value>
        [DataMember(Name = "cassa2", EmitDefaultValue = true)]
        public decimal? Cassa2
        {
            get => _Cassa2;
            set
            {
                _Cassa2 = value;
                _flagCassa2 = true;
            }
        }

        /// <summary>
        ///     [Read Only] Cassa amount.
        /// </summary>
        /// <value>[Read Only] Cassa amount.</value>
        [DataMember(Name = "amount_cassa2", EmitDefaultValue = true)]
        public decimal? AmountCassa2 { get; private set; }

        /// <summary>
        ///     Cassa2 taxable percentage
        /// </summary>
        /// <value>Cassa2 taxable percentage</value>
        [DataMember(Name = "cassa2_taxable", EmitDefaultValue = true)]
        public decimal? Cassa2Taxable
        {
            get => _Cassa2Taxable;
            set
            {
                _Cassa2Taxable = value;
                _flagCassa2Taxable = true;
            }
        }

        /// <summary>
        ///     [Can be set only if cassa2_taxable is NULL] Cassa2 taxable amount
        /// </summary>
        /// <value>[Can be set only if cassa2_taxable is NULL] Cassa2 taxable amount</value>
        [DataMember(Name = "amount_cassa2_taxable", EmitDefaultValue = true)]
        public decimal? AmountCassa2Taxable
        {
            get => _AmountCassa2Taxable;
            set
            {
                _AmountCassa2Taxable = value;
                _flagAmountCassa2Taxable = true;
            }
        }

        /// <summary>
        ///     Global cassa taxable percentage
        /// </summary>
        /// <value>Global cassa taxable percentage</value>
        [DataMember(Name = "global_cassa_taxable", EmitDefaultValue = true)]
        public decimal? GlobalCassaTaxable
        {
            get => _GlobalCassaTaxable;
            set
            {
                _GlobalCassaTaxable = value;
                _flagGlobalCassaTaxable = true;
            }
        }

        /// <summary>
        ///     [Can be set only if global_cassa_taxable is NULL] Global cassa taxable amount
        /// </summary>
        /// <value>[Can be set only if global_cassa_taxable is NULL] Global cassa taxable amount</value>
        [DataMember(Name = "amount_global_cassa_taxable", EmitDefaultValue = true)]
        public decimal? AmountGlobalCassaTaxable
        {
            get => _AmountGlobalCassaTaxable;
            set
            {
                _AmountGlobalCassaTaxable = value;
                _flagAmountGlobalCassaTaxable = true;
            }
        }

        /// <summary>
        ///     Withholding tax (ritenuta d&#39;acconto) percentual value
        /// </summary>
        /// <value>Withholding tax (ritenuta d&#39;acconto) percentual value</value>
        [DataMember(Name = "withholding_tax", EmitDefaultValue = true)]
        public decimal? WithholdingTax
        {
            get => _WithholdingTax;
            set
            {
                _WithholdingTax = value;
                _flagWithholdingTax = true;
            }
        }

        /// <summary>
        ///     Withholding tax taxable (imponibile) percentual value
        /// </summary>
        /// <value>Withholding tax taxable (imponibile) percentual value</value>
        [DataMember(Name = "withholding_tax_taxable", EmitDefaultValue = true)]
        public decimal? WithholdingTaxTaxable
        {
            get => _WithholdingTaxTaxable;
            set
            {
                _WithholdingTaxTaxable = value;
                _flagWithholdingTaxTaxable = true;
            }
        }

        /// <summary>
        ///     Other withholding tax (altra ritenuta) percentual value
        /// </summary>
        /// <value>Other withholding tax (altra ritenuta) percentual value</value>
        [DataMember(Name = "other_withholding_tax", EmitDefaultValue = true)]
        public decimal? OtherWithholdingTax
        {
            get => _OtherWithholdingTax;
            set
            {
                _OtherWithholdingTax = value;
                _flagOtherWithholdingTax = true;
            }
        }

        /// <summary>
        ///     Stamp duty value [0 if not present]
        /// </summary>
        /// <value>Stamp duty value [0 if not present]</value>
        [DataMember(Name = "stamp_duty", EmitDefaultValue = true)]
        public decimal? StampDuty
        {
            get => _StampDuty;
            set
            {
                _StampDuty = value;
                _flagStampDuty = true;
            }
        }

        /// <summary>
        ///     Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "payment_method", EmitDefaultValue = false)]
        public PaymentMethod PaymentMethod
        {
            get => _PaymentMethod;
            set
            {
                _PaymentMethod = value;
                _flagPaymentMethod = true;
            }
        }

        /// <summary>
        ///     Use split payment
        /// </summary>
        /// <value>Use split payment</value>
        [DataMember(Name = "use_split_payment", EmitDefaultValue = true)]
        public bool? UseSplitPayment
        {
            get => _UseSplitPayment;
            set
            {
                _UseSplitPayment = value;
                _flagUseSplitPayment = true;
            }
        }

        /// <summary>
        ///     Use gross prices
        /// </summary>
        /// <value>Use gross prices</value>
        [DataMember(Name = "use_gross_prices", EmitDefaultValue = true)]
        public bool? UseGrossPrices
        {
            get => _UseGrossPrices;
            set
            {
                _UseGrossPrices = value;
                _flagUseGrossPrices = true;
            }
        }

        /// <summary>
        ///     Indicates if this is an e-invoice.
        /// </summary>
        /// <value>Indicates if this is an e-invoice.</value>
        [DataMember(Name = "e_invoice", EmitDefaultValue = true)]
        public bool? EInvoice
        {
            get => _EInvoice;
            set
            {
                _EInvoice = value;
                _flagEInvoice = true;
            }
        }

        /// <summary>
        ///     Gets or Sets EiData
        /// </summary>
        [DataMember(Name = "ei_data", EmitDefaultValue = true)]
        public IssuedDocumentEiData EiData
        {
            get => _EiData;
            set
            {
                _EiData = value;
                _flagEiData = true;
            }
        }

        /// <summary>
        ///     E-invoice cassa type
        /// </summary>
        /// <value>E-invoice cassa type</value>
        [DataMember(Name = "ei_cassa_type", EmitDefaultValue = true)]
        public string EiCassaType
        {
            get => _EiCassaType;
            set
            {
                _EiCassaType = value;
                _flagEiCassaType = true;
            }
        }

        /// <summary>
        ///     E-invoice cassa2 type
        /// </summary>
        /// <value>E-invoice cassa2 type</value>
        [DataMember(Name = "ei_cassa2_type", EmitDefaultValue = true)]
        public string EiCassa2Type
        {
            get => _EiCassa2Type;
            set
            {
                _EiCassa2Type = value;
                _flagEiCassa2Type = true;
            }
        }

        /// <summary>
        ///     E-invoice withholding tax causal
        /// </summary>
        /// <value>E-invoice withholding tax causal</value>
        [DataMember(Name = "ei_withholding_tax_causal", EmitDefaultValue = true)]
        public string EiWithholdingTaxCausal
        {
            get => _EiWithholdingTaxCausal;
            set
            {
                _EiWithholdingTaxCausal = value;
                _flagEiWithholdingTaxCausal = true;
            }
        }

        /// <summary>
        ///     E-invoice other withholding tax type
        /// </summary>
        /// <value>E-invoice other withholding tax type</value>
        [DataMember(Name = "ei_other_withholding_tax_type", EmitDefaultValue = true)]
        public string EiOtherWithholdingTaxType
        {
            get => _EiOtherWithholdingTaxType;
            set
            {
                _EiOtherWithholdingTaxType = value;
                _flagEiOtherWithholdingTaxType = true;
            }
        }

        /// <summary>
        ///     E-invoice other withholding tax causal
        /// </summary>
        /// <value>E-invoice other withholding tax causal</value>
        [DataMember(Name = "ei_other_withholding_tax_causal", EmitDefaultValue = true)]
        public string EiOtherWithholdingTaxCausal
        {
            get => _EiOtherWithholdingTaxCausal;
            set
            {
                _EiOtherWithholdingTaxCausal = value;
                _flagEiOtherWithholdingTaxCausal = true;
            }
        }

        /// <summary>
        ///     Gets or Sets ItemsList
        /// </summary>
        [DataMember(Name = "items_list", EmitDefaultValue = true)]
        public List<IssuedDocumentItemsListItem> ItemsList
        {
            get => _ItemsList;
            set
            {
                _ItemsList = value;
                _flagItemsList = true;
            }
        }

        /// <summary>
        ///     Gets or Sets PaymentsList
        /// </summary>
        [DataMember(Name = "payments_list", EmitDefaultValue = true)]
        public List<IssuedDocumentPaymentsListItem> PaymentsList
        {
            get => _PaymentsList;
            set
            {
                _PaymentsList = value;
                _flagPaymentsList = true;
            }
        }

        /// <summary>
        ///     Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public DocumentTemplate Template
        {
            get => _Template;
            set
            {
                _Template = value;
                _flagTemplate = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DeliveryNoteTemplate
        /// </summary>
        [DataMember(Name = "delivery_note_template", EmitDefaultValue = false)]
        public DocumentTemplate DeliveryNoteTemplate
        {
            get => _DeliveryNoteTemplate;
            set
            {
                _DeliveryNoteTemplate = value;
                _flagDeliveryNoteTemplate = true;
            }
        }

        /// <summary>
        ///     Gets or Sets AccInvTemplate
        /// </summary>
        [DataMember(Name = "acc_inv_template", EmitDefaultValue = false)]
        public DocumentTemplate AccInvTemplate
        {
            get => _AccInvTemplate;
            set
            {
                _AccInvTemplate = value;
                _flagAccInvTemplate = true;
            }
        }

        /// <summary>
        ///     Horizontal margins.
        /// </summary>
        /// <value>Horizontal margins.</value>
        [DataMember(Name = "h_margins", EmitDefaultValue = true)]
        public int? HMargins
        {
            get => _HMargins;
            set
            {
                _HMargins = value;
                _flagHMargins = true;
            }
        }

        /// <summary>
        ///     Vertical margins.
        /// </summary>
        /// <value>Vertical margins.</value>
        [DataMember(Name = "v_margins", EmitDefaultValue = true)]
        public int? VMargins
        {
            get => _VMargins;
            set
            {
                _VMargins = value;
                _flagVMargins = true;
            }
        }

        /// <summary>
        ///     Shows the expiration dates of the payments on the document.
        /// </summary>
        /// <value>Shows the expiration dates of the payments on the document.</value>
        [DataMember(Name = "show_payments", EmitDefaultValue = true)]
        public bool? ShowPayments
        {
            get => _ShowPayments;
            set
            {
                _ShowPayments = value;
                _flagShowPayments = true;
            }
        }

        /// <summary>
        ///     Show the payment method details on the document.
        /// </summary>
        /// <value>Show the payment method details on the document.</value>
        [DataMember(Name = "show_payment_method", EmitDefaultValue = true)]
        public bool? ShowPaymentMethod
        {
            get => _ShowPaymentMethod;
            set
            {
                _ShowPaymentMethod = value;
                _flagShowPaymentMethod = true;
            }
        }

        /// <summary>
        ///     Show paypal button
        /// </summary>
        /// <value>Show paypal button</value>
        [DataMember(Name = "show_paypal_button", EmitDefaultValue = true)]
        public bool? ShowPaypalButton
        {
            get => _ShowPaypalButton;
            set
            {
                _ShowPaypalButton = value;
                _flagShowPaypalButton = true;
            }
        }

        /// <summary>
        ///     Show notification button
        /// </summary>
        /// <value>Show notification button</value>
        [DataMember(Name = "show_notification_button", EmitDefaultValue = true)]
        public bool? ShowNotificationButton
        {
            get => _ShowNotificationButton;
            set
            {
                _ShowNotificationButton = value;
                _flagShowNotificationButton = true;
            }
        }

        /// <summary>
        ///     Show ts pay button.
        /// </summary>
        /// <value>Show ts pay button.</value>
        [DataMember(Name = "show_tspay_button", EmitDefaultValue = true)]
        public bool? ShowTspayButton
        {
            get => _ShowTspayButton;
            set
            {
                _ShowTspayButton = value;
                _flagShowTspayButton = true;
            }
        }

        /// <summary>
        ///     Gets or Sets DeliveryNote
        /// </summary>
        [DataMember(Name = "delivery_note", EmitDefaultValue = true)]
        public bool? DeliveryNote
        {
            get => _DeliveryNote;
            set
            {
                _DeliveryNote = value;
                _flagDeliveryNote = true;
            }
        }

        /// <summary>
        ///     Attach an accompanying invoice.
        /// </summary>
        /// <value>Attach an accompanying invoice.</value>
        [DataMember(Name = "accompanying_invoice", EmitDefaultValue = true)]
        public bool? AccompanyingInvoice
        {
            get => _AccompanyingInvoice;
            set
            {
                _AccompanyingInvoice = value;
                _flagAccompanyingInvoice = true;
            }
        }

        /// <summary>
        ///     Number (for the attached delivery note).
        /// </summary>
        /// <value>Number (for the attached delivery note).</value>
        [DataMember(Name = "dn_number", EmitDefaultValue = true)]
        public int? DnNumber
        {
            get => _DnNumber;
            set
            {
                _DnNumber = value;
                _flagDnNumber = true;
            }
        }

        /// <summary>
        ///     Date (for the attached delivery note).
        /// </summary>
        /// <value>Date (for the attached delivery note).</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "dn_date", EmitDefaultValue = true)]
        public DateTime? DnDate
        {
            get => _DnDate;
            set
            {
                _DnDate = value;
                _flagDnDate = true;
            }
        }

        /// <summary>
        ///     Number of packages (for the attached delivery note).
        /// </summary>
        /// <value>Number of packages (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_packages_number", EmitDefaultValue = true)]
        public string DnAiPackagesNumber
        {
            get => _DnAiPackagesNumber;
            set
            {
                _DnAiPackagesNumber = value;
                _flagDnAiPackagesNumber = true;
            }
        }

        /// <summary>
        ///     Weight (for the attached delivery note).
        /// </summary>
        /// <value>Weight (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_weight", EmitDefaultValue = true)]
        public string DnAiWeight
        {
            get => _DnAiWeight;
            set
            {
                _DnAiWeight = value;
                _flagDnAiWeight = true;
            }
        }

        /// <summary>
        ///     Causal (for the attached delivery note).
        /// </summary>
        /// <value>Causal (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_causal", EmitDefaultValue = true)]
        public string DnAiCausal
        {
            get => _DnAiCausal;
            set
            {
                _DnAiCausal = value;
                _flagDnAiCausal = true;
            }
        }

        /// <summary>
        ///     Destination (for the attached delivery note).
        /// </summary>
        /// <value>Destination (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_destination", EmitDefaultValue = true)]
        public string DnAiDestination
        {
            get => _DnAiDestination;
            set
            {
                _DnAiDestination = value;
                _flagDnAiDestination = true;
            }
        }

        /// <summary>
        ///     Transporter (for the attached delivery note).
        /// </summary>
        /// <value>Transporter (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_transporter", EmitDefaultValue = true)]
        public string DnAiTransporter
        {
            get => _DnAiTransporter;
            set
            {
                _DnAiTransporter = value;
                _flagDnAiTransporter = true;
            }
        }

        /// <summary>
        ///     Notes (for the attached delivery note).
        /// </summary>
        /// <value>Notes (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_notes", EmitDefaultValue = true)]
        public string DnAiNotes
        {
            get => _DnAiNotes;
            set
            {
                _DnAiNotes = value;
                _flagDnAiNotes = true;
            }
        }

        /// <summary>
        ///     This is true if the document is marked.
        /// </summary>
        /// <value>This is true if the document is marked.</value>
        [DataMember(Name = "is_marked", EmitDefaultValue = true)]
        public bool? IsMarked
        {
            get => _IsMarked;
            set
            {
                _IsMarked = value;
                _flagIsMarked = true;
            }
        }

        /// <summary>
        ///     [Read Only] Total net amount (competenze).
        /// </summary>
        /// <value>[Read Only] Total net amount (competenze).</value>
        [DataMember(Name = "amount_net", EmitDefaultValue = true)]
        public decimal? AmountNet { get; private set; }

        /// <summary>
        ///     [Read Only] Total vat amount (IVA).
        /// </summary>
        /// <value>[Read Only] Total vat amount (IVA).</value>
        [DataMember(Name = "amount_vat", EmitDefaultValue = true)]
        public decimal? AmountVat { get; private set; }

        /// <summary>
        ///     [Read Only] Total gross amount (totale documento).
        /// </summary>
        /// <value>[Read Only] Total gross amount (totale documento).</value>
        [DataMember(Name = "amount_gross", EmitDefaultValue = true)]
        public decimal? AmountGross { get; private set; }

        /// <summary>
        ///     Amount due discount
        /// </summary>
        /// <value>Amount due discount</value>
        [DataMember(Name = "amount_due_discount", EmitDefaultValue = true)]
        public decimal? AmountDueDiscount
        {
            get => _AmountDueDiscount;
            set
            {
                _AmountDueDiscount = value;
                _flagAmountDueDiscount = true;
            }
        }

        /// <summary>
        ///     [Read Only] Rivalsa amount.
        /// </summary>
        /// <value>[Read Only] Rivalsa amount.</value>
        [DataMember(Name = "amount_rivalsa", EmitDefaultValue = true)]
        public decimal? AmountRivalsa { get; private set; }

        /// <summary>
        ///     Taxable rivalsa amount
        /// </summary>
        /// <value>Taxable rivalsa amount</value>
        [DataMember(Name = "amount_rivalsa_taxable", EmitDefaultValue = true)]
        public decimal? AmountRivalsaTaxable
        {
            get => _AmountRivalsaTaxable;
            set
            {
                _AmountRivalsaTaxable = value;
                _flagAmountRivalsaTaxable = true;
            }
        }

        /// <summary>
        ///     [Read Only] Withholding tax amount (ritenuta d&#39;acconto).
        /// </summary>
        /// <value>[Read Only] Withholding tax amount (ritenuta d&#39;acconto).</value>
        [DataMember(Name = "amount_withholding_tax", EmitDefaultValue = true)]
        public decimal? AmountWithholdingTax { get; private set; }

        /// <summary>
        ///     Taxable withholding tax amount
        /// </summary>
        /// <value>Taxable withholding tax amount</value>
        [DataMember(Name = "amount_withholding_tax_taxable", EmitDefaultValue = true)]
        public decimal? AmountWithholdingTaxTaxable
        {
            get => _AmountWithholdingTaxTaxable;
            set
            {
                _AmountWithholdingTaxTaxable = value;
                _flagAmountWithholdingTaxTaxable = true;
            }
        }

        /// <summary>
        ///     [Read Only] Other withholding tax amount (altra ritenuta).
        /// </summary>
        /// <value>[Read Only] Other withholding tax amount (altra ritenuta).</value>
        [DataMember(Name = "amount_other_withholding_tax", EmitDefaultValue = true)]
        public decimal? AmountOtherWithholdingTax { get; private set; }

        /// <summary>
        ///     Taxable other withholding tax amount
        /// </summary>
        /// <value>Taxable other withholding tax amount</value>
        [DataMember(Name = "amount_other_withholding_tax_taxable", EmitDefaultValue = true)]
        public decimal? AmountOtherWithholdingTaxTaxable
        {
            get => _AmountOtherWithholdingTaxTaxable;
            set
            {
                _AmountOtherWithholdingTaxTaxable = value;
                _flagAmountOtherWithholdingTaxTaxable = true;
            }
        }

        /// <summary>
        ///     Taxable enasarco amount
        /// </summary>
        /// <value>Taxable enasarco amount</value>
        [DataMember(Name = "amount_enasarco_taxable", EmitDefaultValue = true)]
        public decimal? AmountEnasarcoTaxable
        {
            get => _AmountEnasarcoTaxable;
            set
            {
                _AmountEnasarcoTaxable = value;
                _flagAmountEnasarcoTaxable = true;
            }
        }

        /// <summary>
        ///     Gets or Sets ExtraData
        /// </summary>
        [DataMember(Name = "extra_data", EmitDefaultValue = true)]
        public IssuedDocumentExtraData ExtraData
        {
            get => _ExtraData;
            set
            {
                _ExtraData = value;
                _flagExtraData = true;
            }
        }

        /// <summary>
        ///     Date when the client/supplier has seen the document.
        /// </summary>
        /// <value>Date when the client/supplier has seen the document.</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "seen_date", EmitDefaultValue = true)]
        public DateTime? SeenDate
        {
            get => _SeenDate;
            set
            {
                _SeenDate = value;
                _flagSeenDate = true;
            }
        }

        /// <summary>
        ///     Date of the next not paid payment.
        /// </summary>
        /// <value>Date of the next not paid payment.</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "next_due_date", EmitDefaultValue = true)]
        public DateTime? NextDueDate
        {
            get => _NextDueDate;
            set
            {
                _NextDueDate = value;
                _flagNextDueDate = true;
            }
        }

        /// <summary>
        ///     Public url of the document PDF file.
        /// </summary>
        /// <value>Public url of the document PDF file.</value>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url
        {
            get => _Url;
            set
            {
                _Url = value;
                _flagUrl = true;
            }
        }

        /// <summary>
        ///     [Read Only] Public url of the attached file. Authomatically set if a valid attachment token is passed via POST
        ///     /issued_documents or PUT /issued_documents/{documentId}.
        /// </summary>
        /// <value>
        ///     [Read Only] Public url of the attached file. Authomatically set if a valid attachment token is passed via POST
        ///     /issued_documents or PUT /issued_documents/{documentId}.
        /// </value>
        [DataMember(Name = "attachment_url", EmitDefaultValue = true)]
        public string AttachmentUrl { get; private set; }

        /// <summary>
        ///     [Write Only] Attachment token returned by POST /issued_documents/attachment. Used to attach the file already
        ///     uploaded.
        /// </summary>
        /// <value>
        ///     [Write Only] Attachment token returned by POST /issued_documents/attachment. Used to attach the file already
        ///     uploaded.
        /// </value>
        [DataMember(Name = "attachment_token", EmitDefaultValue = true)]
        public string AttachmentToken
        {
            get => _AttachmentToken;
            set
            {
                _AttachmentToken = value;
                _flagAttachmentToken = true;
            }
        }

        /// <summary>
        ///     Advanced raw attributes for e-invoices.
        /// </summary>
        /// <value>Advanced raw attributes for e-invoices.</value>
        [DataMember(Name = "ei_raw", EmitDefaultValue = true)]
        public Object EiRaw
        {
            get => _EiRaw;
            set
            {
                _EiRaw = value;
                _flagEiRaw = true;
            }
        }

        /// <summary>
        ///     Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }

        /// <summary>
        ///     Returns false as ShowTotals should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowTotals()
        {
            return _flagShowTotals;
        }

        /// <summary>
        ///     Returns false as EiStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiStatus()
        {
            return _flagEiStatus;
        }

        /// <summary>
        ///     Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }

        /// <summary>
        ///     Returns false as Entity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntity()
        {
            return _flagEntity;
        }

        /// <summary>
        ///     Returns false as Number should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumber()
        {
            return _flagNumber;
        }

        /// <summary>
        ///     Returns false as Numeration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumeration()
        {
            return _flagNumeration;
        }

        /// <summary>
        ///     Returns false as Date should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDate()
        {
            return _flagDate;
        }

        /// <summary>
        ///     Returns false as Year should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeYear()
        {
            return _flagYear;
        }

        /// <summary>
        ///     Returns false as Currency should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrency()
        {
            return _flagCurrency;
        }

        /// <summary>
        ///     Returns false as Language should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLanguage()
        {
            return _flagLanguage;
        }

        /// <summary>
        ///     Returns false as Subject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubject()
        {
            return _flagSubject;
        }

        /// <summary>
        ///     Returns false as VisibleSubject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVisibleSubject()
        {
            return _flagVisibleSubject;
        }

        /// <summary>
        ///     Returns false as RcCenter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRcCenter()
        {
            return _flagRcCenter;
        }

        /// <summary>
        ///     Returns false as Notes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotes()
        {
            return _flagNotes;
        }

        /// <summary>
        ///     Returns false as Rivalsa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRivalsa()
        {
            return _flagRivalsa;
        }

        /// <summary>
        ///     Returns false as Cassa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassa()
        {
            return _flagCassa;
        }

        /// <summary>
        ///     Returns false as AmountCassa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassa()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as CassaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassaTaxable()
        {
            return _flagCassaTaxable;
        }

        /// <summary>
        ///     Returns false as AmountCassaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassaTaxable()
        {
            return _flagAmountCassaTaxable;
        }

        /// <summary>
        ///     Returns false as Cassa2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassa2()
        {
            return _flagCassa2;
        }

        /// <summary>
        ///     Returns false as AmountCassa2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassa2()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as Cassa2Taxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassa2Taxable()
        {
            return _flagCassa2Taxable;
        }

        /// <summary>
        ///     Returns false as AmountCassa2Taxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassa2Taxable()
        {
            return _flagAmountCassa2Taxable;
        }

        /// <summary>
        ///     Returns false as GlobalCassaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGlobalCassaTaxable()
        {
            return _flagGlobalCassaTaxable;
        }

        /// <summary>
        ///     Returns false as AmountGlobalCassaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountGlobalCassaTaxable()
        {
            return _flagAmountGlobalCassaTaxable;
        }

        /// <summary>
        ///     Returns false as WithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWithholdingTax()
        {
            return _flagWithholdingTax;
        }

        /// <summary>
        ///     Returns false as WithholdingTaxTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWithholdingTaxTaxable()
        {
            return _flagWithholdingTaxTaxable;
        }

        /// <summary>
        ///     Returns false as OtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOtherWithholdingTax()
        {
            return _flagOtherWithholdingTax;
        }

        /// <summary>
        ///     Returns false as StampDuty should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStampDuty()
        {
            return _flagStampDuty;
        }

        /// <summary>
        ///     Returns false as PaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentMethod()
        {
            return _flagPaymentMethod;
        }

        /// <summary>
        ///     Returns false as UseSplitPayment should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseSplitPayment()
        {
            return _flagUseSplitPayment;
        }

        /// <summary>
        ///     Returns false as UseGrossPrices should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseGrossPrices()
        {
            return _flagUseGrossPrices;
        }

        /// <summary>
        ///     Returns false as EInvoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEInvoice()
        {
            return _flagEInvoice;
        }

        /// <summary>
        ///     Returns false as EiData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiData()
        {
            return _flagEiData;
        }

        /// <summary>
        ///     Returns false as EiCassaType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiCassaType()
        {
            return _flagEiCassaType;
        }

        /// <summary>
        ///     Returns false as EiCassa2Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiCassa2Type()
        {
            return _flagEiCassa2Type;
        }

        /// <summary>
        ///     Returns false as EiWithholdingTaxCausal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiWithholdingTaxCausal()
        {
            return _flagEiWithholdingTaxCausal;
        }

        /// <summary>
        ///     Returns false as EiOtherWithholdingTaxType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiOtherWithholdingTaxType()
        {
            return _flagEiOtherWithholdingTaxType;
        }

        /// <summary>
        ///     Returns false as EiOtherWithholdingTaxCausal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiOtherWithholdingTaxCausal()
        {
            return _flagEiOtherWithholdingTaxCausal;
        }

        /// <summary>
        ///     Returns false as ItemsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItemsList()
        {
            return _flagItemsList;
        }

        /// <summary>
        ///     Returns false as PaymentsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentsList()
        {
            return _flagPaymentsList;
        }

        /// <summary>
        ///     Returns false as Template should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTemplate()
        {
            return _flagTemplate;
        }

        /// <summary>
        ///     Returns false as DeliveryNoteTemplate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeliveryNoteTemplate()
        {
            return _flagDeliveryNoteTemplate;
        }

        /// <summary>
        ///     Returns false as AccInvTemplate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccInvTemplate()
        {
            return _flagAccInvTemplate;
        }

        /// <summary>
        ///     Returns false as HMargins should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHMargins()
        {
            return _flagHMargins;
        }

        /// <summary>
        ///     Returns false as VMargins should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVMargins()
        {
            return _flagVMargins;
        }

        /// <summary>
        ///     Returns false as ShowPayments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowPayments()
        {
            return _flagShowPayments;
        }

        /// <summary>
        ///     Returns false as ShowPaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowPaymentMethod()
        {
            return _flagShowPaymentMethod;
        }

        /// <summary>
        ///     Returns false as ShowPaypalButton should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowPaypalButton()
        {
            return _flagShowPaypalButton;
        }

        /// <summary>
        ///     Returns false as ShowNotificationButton should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowNotificationButton()
        {
            return _flagShowNotificationButton;
        }

        /// <summary>
        ///     Returns false as ShowTspayButton should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowTspayButton()
        {
            return _flagShowTspayButton;
        }

        /// <summary>
        ///     Returns false as DeliveryNote should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeliveryNote()
        {
            return _flagDeliveryNote;
        }

        /// <summary>
        ///     Returns false as AccompanyingInvoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccompanyingInvoice()
        {
            return _flagAccompanyingInvoice;
        }

        /// <summary>
        ///     Returns false as DnNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnNumber()
        {
            return _flagDnNumber;
        }

        /// <summary>
        ///     Returns false as DnDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnDate()
        {
            return _flagDnDate;
        }

        /// <summary>
        ///     Returns false as DnAiPackagesNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiPackagesNumber()
        {
            return _flagDnAiPackagesNumber;
        }

        /// <summary>
        ///     Returns false as DnAiWeight should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiWeight()
        {
            return _flagDnAiWeight;
        }

        /// <summary>
        ///     Returns false as DnAiCausal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiCausal()
        {
            return _flagDnAiCausal;
        }

        /// <summary>
        ///     Returns false as DnAiDestination should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiDestination()
        {
            return _flagDnAiDestination;
        }

        /// <summary>
        ///     Returns false as DnAiTransporter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiTransporter()
        {
            return _flagDnAiTransporter;
        }

        /// <summary>
        ///     Returns false as DnAiNotes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiNotes()
        {
            return _flagDnAiNotes;
        }

        /// <summary>
        ///     Returns false as IsMarked should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsMarked()
        {
            return _flagIsMarked;
        }

        /// <summary>
        ///     Returns false as AmountNet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountNet()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as AmountVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountVat()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as AmountGross should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountGross()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as AmountDueDiscount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountDueDiscount()
        {
            return _flagAmountDueDiscount;
        }

        /// <summary>
        ///     Returns false as AmountRivalsa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountRivalsa()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as AmountRivalsaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountRivalsaTaxable()
        {
            return _flagAmountRivalsaTaxable;
        }

        /// <summary>
        ///     Returns false as AmountWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountWithholdingTax()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as AmountWithholdingTaxTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountWithholdingTaxTaxable()
        {
            return _flagAmountWithholdingTaxTaxable;
        }

        /// <summary>
        ///     Returns false as AmountOtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOtherWithholdingTax()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as AmountOtherWithholdingTaxTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOtherWithholdingTaxTaxable()
        {
            return _flagAmountOtherWithholdingTaxTaxable;
        }

        /// <summary>
        ///     Returns false as AmountEnasarcoTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountEnasarcoTaxable()
        {
            return _flagAmountEnasarcoTaxable;
        }

        /// <summary>
        ///     Returns false as ExtraData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExtraData()
        {
            return _flagExtraData;
        }

        /// <summary>
        ///     Returns false as SeenDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSeenDate()
        {
            return _flagSeenDate;
        }

        /// <summary>
        ///     Returns false as NextDueDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNextDueDate()
        {
            return _flagNextDueDate;
        }

        /// <summary>
        ///     Returns false as Url should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrl()
        {
            return _flagUrl;
        }

        /// <summary>
        ///     Returns false as AttachmentUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachmentUrl()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as AttachmentToken should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachmentToken()
        {
            return _flagAttachmentToken;
        }

        /// <summary>
        ///     Returns false as EiRaw should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiRaw()
        {
            return _flagEiRaw;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Numeration: ").Append(Numeration).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  VisibleSubject: ").Append(VisibleSubject).Append("\n");
            sb.Append("  RcCenter: ").Append(RcCenter).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Rivalsa: ").Append(Rivalsa).Append("\n");
            sb.Append("  Cassa: ").Append(Cassa).Append("\n");
            sb.Append("  AmountCassa: ").Append(AmountCassa).Append("\n");
            sb.Append("  CassaTaxable: ").Append(CassaTaxable).Append("\n");
            sb.Append("  AmountCassaTaxable: ").Append(AmountCassaTaxable).Append("\n");
            sb.Append("  Cassa2: ").Append(Cassa2).Append("\n");
            sb.Append("  AmountCassa2: ").Append(AmountCassa2).Append("\n");
            sb.Append("  Cassa2Taxable: ").Append(Cassa2Taxable).Append("\n");
            sb.Append("  AmountCassa2Taxable: ").Append(AmountCassa2Taxable).Append("\n");
            sb.Append("  GlobalCassaTaxable: ").Append(GlobalCassaTaxable).Append("\n");
            sb.Append("  AmountGlobalCassaTaxable: ").Append(AmountGlobalCassaTaxable).Append("\n");
            sb.Append("  WithholdingTax: ").Append(WithholdingTax).Append("\n");
            sb.Append("  WithholdingTaxTaxable: ").Append(WithholdingTaxTaxable).Append("\n");
            sb.Append("  OtherWithholdingTax: ").Append(OtherWithholdingTax).Append("\n");
            sb.Append("  StampDuty: ").Append(StampDuty).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  UseSplitPayment: ").Append(UseSplitPayment).Append("\n");
            sb.Append("  UseGrossPrices: ").Append(UseGrossPrices).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  EiData: ").Append(EiData).Append("\n");
            sb.Append("  EiCassaType: ").Append(EiCassaType).Append("\n");
            sb.Append("  EiCassa2Type: ").Append(EiCassa2Type).Append("\n");
            sb.Append("  EiWithholdingTaxCausal: ").Append(EiWithholdingTaxCausal).Append("\n");
            sb.Append("  EiOtherWithholdingTaxType: ").Append(EiOtherWithholdingTaxType).Append("\n");
            sb.Append("  EiOtherWithholdingTaxCausal: ").Append(EiOtherWithholdingTaxCausal).Append("\n");
            sb.Append("  ItemsList: ").Append(ItemsList).Append("\n");
            sb.Append("  PaymentsList: ").Append(PaymentsList).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  DeliveryNoteTemplate: ").Append(DeliveryNoteTemplate).Append("\n");
            sb.Append("  AccInvTemplate: ").Append(AccInvTemplate).Append("\n");
            sb.Append("  HMargins: ").Append(HMargins).Append("\n");
            sb.Append("  VMargins: ").Append(VMargins).Append("\n");
            sb.Append("  ShowPayments: ").Append(ShowPayments).Append("\n");
            sb.Append("  ShowPaymentMethod: ").Append(ShowPaymentMethod).Append("\n");
            sb.Append("  ShowTotals: ").Append(ShowTotals).Append("\n");
            sb.Append("  ShowPaypalButton: ").Append(ShowPaypalButton).Append("\n");
            sb.Append("  ShowNotificationButton: ").Append(ShowNotificationButton).Append("\n");
            sb.Append("  ShowTspayButton: ").Append(ShowTspayButton).Append("\n");
            sb.Append("  DeliveryNote: ").Append(DeliveryNote).Append("\n");
            sb.Append("  AccompanyingInvoice: ").Append(AccompanyingInvoice).Append("\n");
            sb.Append("  DnNumber: ").Append(DnNumber).Append("\n");
            sb.Append("  DnDate: ").Append(DnDate).Append("\n");
            sb.Append("  DnAiPackagesNumber: ").Append(DnAiPackagesNumber).Append("\n");
            sb.Append("  DnAiWeight: ").Append(DnAiWeight).Append("\n");
            sb.Append("  DnAiCausal: ").Append(DnAiCausal).Append("\n");
            sb.Append("  DnAiDestination: ").Append(DnAiDestination).Append("\n");
            sb.Append("  DnAiTransporter: ").Append(DnAiTransporter).Append("\n");
            sb.Append("  DnAiNotes: ").Append(DnAiNotes).Append("\n");
            sb.Append("  IsMarked: ").Append(IsMarked).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  AmountDueDiscount: ").Append(AmountDueDiscount).Append("\n");
            sb.Append("  AmountRivalsa: ").Append(AmountRivalsa).Append("\n");
            sb.Append("  AmountRivalsaTaxable: ").Append(AmountRivalsaTaxable).Append("\n");
            sb.Append("  AmountWithholdingTax: ").Append(AmountWithholdingTax).Append("\n");
            sb.Append("  AmountWithholdingTaxTaxable: ").Append(AmountWithholdingTaxTaxable).Append("\n");
            sb.Append("  AmountOtherWithholdingTax: ").Append(AmountOtherWithholdingTax).Append("\n");
            sb.Append("  AmountOtherWithholdingTaxTaxable: ").Append(AmountOtherWithholdingTaxTaxable).Append("\n");
            sb.Append("  AmountEnasarcoTaxable: ").Append(AmountEnasarcoTaxable).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("  SeenDate: ").Append(SeenDate).Append("\n");
            sb.Append("  NextDueDate: ").Append(NextDueDate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("  AttachmentToken: ").Append(AttachmentToken).Append("\n");
            sb.Append("  EiRaw: ").Append(EiRaw).Append("\n");
            sb.Append("  EiStatus: ").Append(EiStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as IssuedDocument);
        }

        /// <summary>
        ///     Returns true if IssuedDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocument input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Entity == input.Entity ||
                    (Entity != null &&
                     Entity.Equals(input.Entity))
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    Number == input.Number ||
                    (Number != null &&
                     Number.Equals(input.Number))
                ) &&
                (
                    Numeration == input.Numeration ||
                    (Numeration != null &&
                     Numeration.Equals(input.Numeration))
                ) &&
                (
                    Date == input.Date ||
                    (Date != null &&
                     Date.Equals(input.Date))
                ) &&
                (
                    Year == input.Year ||
                    (Year != null &&
                     Year.Equals(input.Year))
                ) &&
                (
                    Currency == input.Currency ||
                    (Currency != null &&
                     Currency.Equals(input.Currency))
                ) &&
                (
                    Language == input.Language ||
                    (Language != null &&
                     Language.Equals(input.Language))
                ) &&
                (
                    Subject == input.Subject ||
                    (Subject != null &&
                     Subject.Equals(input.Subject))
                ) &&
                (
                    VisibleSubject == input.VisibleSubject ||
                    (VisibleSubject != null &&
                     VisibleSubject.Equals(input.VisibleSubject))
                ) &&
                (
                    RcCenter == input.RcCenter ||
                    (RcCenter != null &&
                     RcCenter.Equals(input.RcCenter))
                ) &&
                (
                    Notes == input.Notes ||
                    (Notes != null &&
                     Notes.Equals(input.Notes))
                ) &&
                (
                    Rivalsa == input.Rivalsa ||
                    (Rivalsa != null &&
                     Rivalsa.Equals(input.Rivalsa))
                ) &&
                (
                    Cassa == input.Cassa ||
                    (Cassa != null &&
                     Cassa.Equals(input.Cassa))
                ) &&
                (
                    AmountCassa == input.AmountCassa ||
                    (AmountCassa != null &&
                     AmountCassa.Equals(input.AmountCassa))
                ) &&
                (
                    CassaTaxable == input.CassaTaxable ||
                    (CassaTaxable != null &&
                     CassaTaxable.Equals(input.CassaTaxable))
                ) &&
                (
                    AmountCassaTaxable == input.AmountCassaTaxable ||
                    (AmountCassaTaxable != null &&
                     AmountCassaTaxable.Equals(input.AmountCassaTaxable))
                ) &&
                (
                    Cassa2 == input.Cassa2 ||
                    (Cassa2 != null &&
                     Cassa2.Equals(input.Cassa2))
                ) &&
                (
                    AmountCassa2 == input.AmountCassa2 ||
                    (AmountCassa2 != null &&
                     AmountCassa2.Equals(input.AmountCassa2))
                ) &&
                (
                    Cassa2Taxable == input.Cassa2Taxable ||
                    (Cassa2Taxable != null &&
                     Cassa2Taxable.Equals(input.Cassa2Taxable))
                ) &&
                (
                    AmountCassa2Taxable == input.AmountCassa2Taxable ||
                    (AmountCassa2Taxable != null &&
                     AmountCassa2Taxable.Equals(input.AmountCassa2Taxable))
                ) &&
                (
                    GlobalCassaTaxable == input.GlobalCassaTaxable ||
                    (GlobalCassaTaxable != null &&
                     GlobalCassaTaxable.Equals(input.GlobalCassaTaxable))
                ) &&
                (
                    AmountGlobalCassaTaxable == input.AmountGlobalCassaTaxable ||
                    (AmountGlobalCassaTaxable != null &&
                     AmountGlobalCassaTaxable.Equals(input.AmountGlobalCassaTaxable))
                ) &&
                (
                    WithholdingTax == input.WithholdingTax ||
                    (WithholdingTax != null &&
                     WithholdingTax.Equals(input.WithholdingTax))
                ) &&
                (
                    WithholdingTaxTaxable == input.WithholdingTaxTaxable ||
                    (WithholdingTaxTaxable != null &&
                     WithholdingTaxTaxable.Equals(input.WithholdingTaxTaxable))
                ) &&
                (
                    OtherWithholdingTax == input.OtherWithholdingTax ||
                    (OtherWithholdingTax != null &&
                     OtherWithholdingTax.Equals(input.OtherWithholdingTax))
                ) &&
                (
                    StampDuty == input.StampDuty ||
                    (StampDuty != null &&
                     StampDuty.Equals(input.StampDuty))
                ) &&
                (
                    PaymentMethod == input.PaymentMethod ||
                    (PaymentMethod != null &&
                     PaymentMethod.Equals(input.PaymentMethod))
                ) &&
                (
                    UseSplitPayment == input.UseSplitPayment ||
                    (UseSplitPayment != null &&
                     UseSplitPayment.Equals(input.UseSplitPayment))
                ) &&
                (
                    UseGrossPrices == input.UseGrossPrices ||
                    (UseGrossPrices != null &&
                     UseGrossPrices.Equals(input.UseGrossPrices))
                ) &&
                (
                    EInvoice == input.EInvoice ||
                    (EInvoice != null &&
                     EInvoice.Equals(input.EInvoice))
                ) &&
                (
                    EiData == input.EiData ||
                    (EiData != null &&
                     EiData.Equals(input.EiData))
                ) &&
                (
                    EiCassaType == input.EiCassaType ||
                    (EiCassaType != null &&
                     EiCassaType.Equals(input.EiCassaType))
                ) &&
                (
                    EiCassa2Type == input.EiCassa2Type ||
                    (EiCassa2Type != null &&
                     EiCassa2Type.Equals(input.EiCassa2Type))
                ) &&
                (
                    EiWithholdingTaxCausal == input.EiWithholdingTaxCausal ||
                    (EiWithholdingTaxCausal != null &&
                     EiWithholdingTaxCausal.Equals(input.EiWithholdingTaxCausal))
                ) &&
                (
                    EiOtherWithholdingTaxType == input.EiOtherWithholdingTaxType ||
                    (EiOtherWithholdingTaxType != null &&
                     EiOtherWithholdingTaxType.Equals(input.EiOtherWithholdingTaxType))
                ) &&
                (
                    EiOtherWithholdingTaxCausal == input.EiOtherWithholdingTaxCausal ||
                    (EiOtherWithholdingTaxCausal != null &&
                     EiOtherWithholdingTaxCausal.Equals(input.EiOtherWithholdingTaxCausal))
                ) &&
                (
                    ItemsList == input.ItemsList ||
                    (ItemsList != null &&
                     input.ItemsList != null &&
                     ItemsList.SequenceEqual(input.ItemsList))
                ) &&
                (
                    PaymentsList == input.PaymentsList ||
                    (PaymentsList != null &&
                     input.PaymentsList != null &&
                     PaymentsList.SequenceEqual(input.PaymentsList))
                ) &&
                (
                    Template == input.Template ||
                    (Template != null &&
                     Template.Equals(input.Template))
                ) &&
                (
                    DeliveryNoteTemplate == input.DeliveryNoteTemplate ||
                    (DeliveryNoteTemplate != null &&
                     DeliveryNoteTemplate.Equals(input.DeliveryNoteTemplate))
                ) &&
                (
                    AccInvTemplate == input.AccInvTemplate ||
                    (AccInvTemplate != null &&
                     AccInvTemplate.Equals(input.AccInvTemplate))
                ) &&
                (
                    HMargins == input.HMargins ||
                    (HMargins != null &&
                     HMargins.Equals(input.HMargins))
                ) &&
                (
                    VMargins == input.VMargins ||
                    (VMargins != null &&
                     VMargins.Equals(input.VMargins))
                ) &&
                (
                    ShowPayments == input.ShowPayments ||
                    (ShowPayments != null &&
                     ShowPayments.Equals(input.ShowPayments))
                ) &&
                (
                    ShowPaymentMethod == input.ShowPaymentMethod ||
                    (ShowPaymentMethod != null &&
                     ShowPaymentMethod.Equals(input.ShowPaymentMethod))
                ) &&
                (
                    ShowTotals == input.ShowTotals ||
                    ShowTotals.Equals(input.ShowTotals)
                ) &&
                (
                    ShowPaypalButton == input.ShowPaypalButton ||
                    (ShowPaypalButton != null &&
                     ShowPaypalButton.Equals(input.ShowPaypalButton))
                ) &&
                (
                    ShowNotificationButton == input.ShowNotificationButton ||
                    (ShowNotificationButton != null &&
                     ShowNotificationButton.Equals(input.ShowNotificationButton))
                ) &&
                (
                    ShowTspayButton == input.ShowTspayButton ||
                    (ShowTspayButton != null &&
                     ShowTspayButton.Equals(input.ShowTspayButton))
                ) &&
                (
                    DeliveryNote == input.DeliveryNote ||
                    (DeliveryNote != null &&
                     DeliveryNote.Equals(input.DeliveryNote))
                ) &&
                (
                    AccompanyingInvoice == input.AccompanyingInvoice ||
                    (AccompanyingInvoice != null &&
                     AccompanyingInvoice.Equals(input.AccompanyingInvoice))
                ) &&
                (
                    DnNumber == input.DnNumber ||
                    (DnNumber != null &&
                     DnNumber.Equals(input.DnNumber))
                ) &&
                (
                    DnDate == input.DnDate ||
                    (DnDate != null &&
                     DnDate.Equals(input.DnDate))
                ) &&
                (
                    DnAiPackagesNumber == input.DnAiPackagesNumber ||
                    (DnAiPackagesNumber != null &&
                     DnAiPackagesNumber.Equals(input.DnAiPackagesNumber))
                ) &&
                (
                    DnAiWeight == input.DnAiWeight ||
                    (DnAiWeight != null &&
                     DnAiWeight.Equals(input.DnAiWeight))
                ) &&
                (
                    DnAiCausal == input.DnAiCausal ||
                    (DnAiCausal != null &&
                     DnAiCausal.Equals(input.DnAiCausal))
                ) &&
                (
                    DnAiDestination == input.DnAiDestination ||
                    (DnAiDestination != null &&
                     DnAiDestination.Equals(input.DnAiDestination))
                ) &&
                (
                    DnAiTransporter == input.DnAiTransporter ||
                    (DnAiTransporter != null &&
                     DnAiTransporter.Equals(input.DnAiTransporter))
                ) &&
                (
                    DnAiNotes == input.DnAiNotes ||
                    (DnAiNotes != null &&
                     DnAiNotes.Equals(input.DnAiNotes))
                ) &&
                (
                    IsMarked == input.IsMarked ||
                    (IsMarked != null &&
                     IsMarked.Equals(input.IsMarked))
                ) &&
                (
                    AmountNet == input.AmountNet ||
                    (AmountNet != null &&
                     AmountNet.Equals(input.AmountNet))
                ) &&
                (
                    AmountVat == input.AmountVat ||
                    (AmountVat != null &&
                     AmountVat.Equals(input.AmountVat))
                ) &&
                (
                    AmountGross == input.AmountGross ||
                    (AmountGross != null &&
                     AmountGross.Equals(input.AmountGross))
                ) &&
                (
                    AmountDueDiscount == input.AmountDueDiscount ||
                    (AmountDueDiscount != null &&
                     AmountDueDiscount.Equals(input.AmountDueDiscount))
                ) &&
                (
                    AmountRivalsa == input.AmountRivalsa ||
                    (AmountRivalsa != null &&
                     AmountRivalsa.Equals(input.AmountRivalsa))
                ) &&
                (
                    AmountRivalsaTaxable == input.AmountRivalsaTaxable ||
                    (AmountRivalsaTaxable != null &&
                     AmountRivalsaTaxable.Equals(input.AmountRivalsaTaxable))
                ) &&
                (
                    AmountWithholdingTax == input.AmountWithholdingTax ||
                    (AmountWithholdingTax != null &&
                     AmountWithholdingTax.Equals(input.AmountWithholdingTax))
                ) &&
                (
                    AmountWithholdingTaxTaxable == input.AmountWithholdingTaxTaxable ||
                    (AmountWithholdingTaxTaxable != null &&
                     AmountWithholdingTaxTaxable.Equals(input.AmountWithholdingTaxTaxable))
                ) &&
                (
                    AmountOtherWithholdingTax == input.AmountOtherWithholdingTax ||
                    (AmountOtherWithholdingTax != null &&
                     AmountOtherWithholdingTax.Equals(input.AmountOtherWithholdingTax))
                ) &&
                (
                    AmountOtherWithholdingTaxTaxable == input.AmountOtherWithholdingTaxTaxable ||
                    (AmountOtherWithholdingTaxTaxable != null &&
                     AmountOtherWithholdingTaxTaxable.Equals(input.AmountOtherWithholdingTaxTaxable))
                ) &&
                (
                    AmountEnasarcoTaxable == input.AmountEnasarcoTaxable ||
                    (AmountEnasarcoTaxable != null &&
                     AmountEnasarcoTaxable.Equals(input.AmountEnasarcoTaxable))
                ) &&
                (
                    ExtraData == input.ExtraData ||
                    (ExtraData != null &&
                     ExtraData.Equals(input.ExtraData))
                ) &&
                (
                    SeenDate == input.SeenDate ||
                    (SeenDate != null &&
                     SeenDate.Equals(input.SeenDate))
                ) &&
                (
                    NextDueDate == input.NextDueDate ||
                    (NextDueDate != null &&
                     NextDueDate.Equals(input.NextDueDate))
                ) &&
                (
                    Url == input.Url ||
                    (Url != null &&
                     Url.Equals(input.Url))
                ) &&
                (
                    AttachmentUrl == input.AttachmentUrl ||
                    (AttachmentUrl != null &&
                     AttachmentUrl.Equals(input.AttachmentUrl))
                ) &&
                (
                    AttachmentToken == input.AttachmentToken ||
                    (AttachmentToken != null &&
                     AttachmentToken.Equals(input.AttachmentToken))
                ) &&
                (
                    EiRaw == input.EiRaw ||
                    (EiRaw != null &&
                     EiRaw.Equals(input.EiRaw))
                ) &&
                (
                    EiStatus == input.EiStatus ||
                    EiStatus.Equals(input.EiStatus)
                );
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (Entity != null) hashCode = hashCode * 59 + Entity.GetHashCode();
                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Number != null) hashCode = hashCode * 59 + Number.GetHashCode();
                if (Numeration != null) hashCode = hashCode * 59 + Numeration.GetHashCode();
                if (Date != null) hashCode = hashCode * 59 + Date.GetHashCode();
                if (Year != null) hashCode = hashCode * 59 + Year.GetHashCode();
                if (Currency != null) hashCode = hashCode * 59 + Currency.GetHashCode();
                if (Language != null) hashCode = hashCode * 59 + Language.GetHashCode();
                if (Subject != null) hashCode = hashCode * 59 + Subject.GetHashCode();
                if (VisibleSubject != null) hashCode = hashCode * 59 + VisibleSubject.GetHashCode();
                if (RcCenter != null) hashCode = hashCode * 59 + RcCenter.GetHashCode();
                if (Notes != null) hashCode = hashCode * 59 + Notes.GetHashCode();
                if (Rivalsa != null) hashCode = hashCode * 59 + Rivalsa.GetHashCode();
                if (Cassa != null) hashCode = hashCode * 59 + Cassa.GetHashCode();
                if (AmountCassa != null) hashCode = hashCode * 59 + AmountCassa.GetHashCode();
                if (CassaTaxable != null) hashCode = hashCode * 59 + CassaTaxable.GetHashCode();
                if (AmountCassaTaxable != null) hashCode = hashCode * 59 + AmountCassaTaxable.GetHashCode();
                if (Cassa2 != null) hashCode = hashCode * 59 + Cassa2.GetHashCode();
                if (AmountCassa2 != null) hashCode = hashCode * 59 + AmountCassa2.GetHashCode();
                if (Cassa2Taxable != null) hashCode = hashCode * 59 + Cassa2Taxable.GetHashCode();
                if (AmountCassa2Taxable != null) hashCode = hashCode * 59 + AmountCassa2Taxable.GetHashCode();
                if (GlobalCassaTaxable != null) hashCode = hashCode * 59 + GlobalCassaTaxable.GetHashCode();
                if (AmountGlobalCassaTaxable != null) hashCode = hashCode * 59 + AmountGlobalCassaTaxable.GetHashCode();
                if (WithholdingTax != null) hashCode = hashCode * 59 + WithholdingTax.GetHashCode();
                if (WithholdingTaxTaxable != null) hashCode = hashCode * 59 + WithholdingTaxTaxable.GetHashCode();
                if (OtherWithholdingTax != null) hashCode = hashCode * 59 + OtherWithholdingTax.GetHashCode();
                if (StampDuty != null) hashCode = hashCode * 59 + StampDuty.GetHashCode();
                if (PaymentMethod != null) hashCode = hashCode * 59 + PaymentMethod.GetHashCode();
                if (UseSplitPayment != null) hashCode = hashCode * 59 + UseSplitPayment.GetHashCode();
                if (UseGrossPrices != null) hashCode = hashCode * 59 + UseGrossPrices.GetHashCode();
                if (EInvoice != null) hashCode = hashCode * 59 + EInvoice.GetHashCode();
                if (EiData != null) hashCode = hashCode * 59 + EiData.GetHashCode();
                if (EiCassaType != null) hashCode = hashCode * 59 + EiCassaType.GetHashCode();
                if (EiCassa2Type != null) hashCode = hashCode * 59 + EiCassa2Type.GetHashCode();
                if (EiWithholdingTaxCausal != null) hashCode = hashCode * 59 + EiWithholdingTaxCausal.GetHashCode();
                if (EiOtherWithholdingTaxType != null)
                    hashCode = hashCode * 59 + EiOtherWithholdingTaxType.GetHashCode();
                if (EiOtherWithholdingTaxCausal != null)
                    hashCode = hashCode * 59 + EiOtherWithholdingTaxCausal.GetHashCode();
                if (ItemsList != null) hashCode = hashCode * 59 + ItemsList.GetHashCode();
                if (PaymentsList != null) hashCode = hashCode * 59 + PaymentsList.GetHashCode();
                if (Template != null) hashCode = hashCode * 59 + Template.GetHashCode();
                if (DeliveryNoteTemplate != null) hashCode = hashCode * 59 + DeliveryNoteTemplate.GetHashCode();
                if (AccInvTemplate != null) hashCode = hashCode * 59 + AccInvTemplate.GetHashCode();
                if (HMargins != null) hashCode = hashCode * 59 + HMargins.GetHashCode();
                if (VMargins != null) hashCode = hashCode * 59 + VMargins.GetHashCode();
                if (ShowPayments != null) hashCode = hashCode * 59 + ShowPayments.GetHashCode();
                if (ShowPaymentMethod != null) hashCode = hashCode * 59 + ShowPaymentMethod.GetHashCode();
                hashCode = hashCode * 59 + ShowTotals.GetHashCode();
                if (ShowPaypalButton != null) hashCode = hashCode * 59 + ShowPaypalButton.GetHashCode();
                if (ShowNotificationButton != null) hashCode = hashCode * 59 + ShowNotificationButton.GetHashCode();
                if (ShowTspayButton != null) hashCode = hashCode * 59 + ShowTspayButton.GetHashCode();
                if (DeliveryNote != null) hashCode = hashCode * 59 + DeliveryNote.GetHashCode();
                if (AccompanyingInvoice != null) hashCode = hashCode * 59 + AccompanyingInvoice.GetHashCode();
                if (DnNumber != null) hashCode = hashCode * 59 + DnNumber.GetHashCode();
                if (DnDate != null) hashCode = hashCode * 59 + DnDate.GetHashCode();
                if (DnAiPackagesNumber != null) hashCode = hashCode * 59 + DnAiPackagesNumber.GetHashCode();
                if (DnAiWeight != null) hashCode = hashCode * 59 + DnAiWeight.GetHashCode();
                if (DnAiCausal != null) hashCode = hashCode * 59 + DnAiCausal.GetHashCode();
                if (DnAiDestination != null) hashCode = hashCode * 59 + DnAiDestination.GetHashCode();
                if (DnAiTransporter != null) hashCode = hashCode * 59 + DnAiTransporter.GetHashCode();
                if (DnAiNotes != null) hashCode = hashCode * 59 + DnAiNotes.GetHashCode();
                if (IsMarked != null) hashCode = hashCode * 59 + IsMarked.GetHashCode();
                if (AmountNet != null) hashCode = hashCode * 59 + AmountNet.GetHashCode();
                if (AmountVat != null) hashCode = hashCode * 59 + AmountVat.GetHashCode();
                if (AmountGross != null) hashCode = hashCode * 59 + AmountGross.GetHashCode();
                if (AmountDueDiscount != null) hashCode = hashCode * 59 + AmountDueDiscount.GetHashCode();
                if (AmountRivalsa != null) hashCode = hashCode * 59 + AmountRivalsa.GetHashCode();
                if (AmountRivalsaTaxable != null) hashCode = hashCode * 59 + AmountRivalsaTaxable.GetHashCode();
                if (AmountWithholdingTax != null) hashCode = hashCode * 59 + AmountWithholdingTax.GetHashCode();
                if (AmountWithholdingTaxTaxable != null)
                    hashCode = hashCode * 59 + AmountWithholdingTaxTaxable.GetHashCode();
                if (AmountOtherWithholdingTax != null)
                    hashCode = hashCode * 59 + AmountOtherWithholdingTax.GetHashCode();
                if (AmountOtherWithholdingTaxTaxable != null)
                    hashCode = hashCode * 59 + AmountOtherWithholdingTaxTaxable.GetHashCode();
                if (AmountEnasarcoTaxable != null) hashCode = hashCode * 59 + AmountEnasarcoTaxable.GetHashCode();
                if (ExtraData != null) hashCode = hashCode * 59 + ExtraData.GetHashCode();
                if (SeenDate != null) hashCode = hashCode * 59 + SeenDate.GetHashCode();
                if (NextDueDate != null) hashCode = hashCode * 59 + NextDueDate.GetHashCode();
                if (Url != null) hashCode = hashCode * 59 + Url.GetHashCode();
                if (AttachmentUrl != null) hashCode = hashCode * 59 + AttachmentUrl.GetHashCode();
                if (AttachmentToken != null) hashCode = hashCode * 59 + AttachmentToken.GetHashCode();
                if (EiRaw != null) hashCode = hashCode * 59 + EiRaw.GetHashCode();
                hashCode = hashCode * 59 + EiStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}