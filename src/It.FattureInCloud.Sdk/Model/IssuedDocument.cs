/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.22
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = It.FattureInCloud.Sdk.Client.OpenAPIDateConverter;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// IssuedDocument
    /// </summary>
    [DataContract(Name = "IssuedDocument")]
    public partial class IssuedDocument : IEquatable<IssuedDocument>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = false)]
        public IssuedDocumentType? Type
        {
            get { return _Type; }
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private IssuedDocumentType? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }

        /// <summary>
        /// Gets or Sets ShowTotals
        /// </summary>

        [DataMember(Name = "show_totals", EmitDefaultValue = false)]
        public ShowTotalsMode? ShowTotals
        {
            get { return _ShowTotals; }
            set
            {
                _ShowTotals = value;
                _flagShowTotals = true;
            }
        }
        private ShowTotalsMode? _ShowTotals;
        private bool _flagShowTotals;

        /// <summary>
        /// Returns false as ShowTotals should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowTotals()
        {
            return _flagShowTotals;
        }
        /// <summary>
        /// [Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the invoice, please wait up to 2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The invoice has yet to be sent   * &#x60;sent&#x60; - The invoice was sent   * &#x60;pending&#x60; - The checks for the digital signature and sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the customer   * &#x60;error&#x60; - An error occurred while handling the invoice, please try to resend it or contact support   * &#x60;discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * &#x60;not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer accepted the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   * &#x60;no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * &#x60;manual_accepted&#x60; - The customer accepted the invoice   * &#x60;manual_rejected&#x60; - The customer rejected the invoice 
        /// </summary>
        /// <value>[Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the invoice, please wait up to 2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The invoice has yet to be sent   * &#x60;sent&#x60; - The invoice was sent   * &#x60;pending&#x60; - The checks for the digital signature and sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the customer   * &#x60;error&#x60; - An error occurred while handling the invoice, please try to resend it or contact support   * &#x60;discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * &#x60;not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer accepted the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   * &#x60;no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * &#x60;manual_accepted&#x60; - The customer accepted the invoice   * &#x60;manual_rejected&#x60; - The customer rejected the invoice </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EiStatusEnum
        {
            /// <summary>
            /// Enum Attempt for value: attempt
            /// </summary>
            [EnumMember(Value = "attempt")]
            Attempt = 1,

            /// <summary>
            /// Enum Missing for value: missing
            /// </summary>
            [EnumMember(Value = "missing")]
            Missing = 2,

            /// <summary>
            /// Enum NotSent for value: not_sent
            /// </summary>
            [EnumMember(Value = "not_sent")]
            NotSent = 3,

            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            [EnumMember(Value = "sent")]
            Sent = 4,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 5,

            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing = 6,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 7,

            /// <summary>
            /// Enum Discarded for value: discarded
            /// </summary>
            [EnumMember(Value = "discarded")]
            Discarded = 8,

            /// <summary>
            /// Enum NotDelivered for value: not_delivered
            /// </summary>
            [EnumMember(Value = "not_delivered")]
            NotDelivered = 9,

            /// <summary>
            /// Enum Accepted for value: accepted
            /// </summary>
            [EnumMember(Value = "accepted")]
            Accepted = 10,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            Rejected = 11,

            /// <summary>
            /// Enum NoResponse for value: no_response
            /// </summary>
            [EnumMember(Value = "no_response")]
            NoResponse = 12,

            /// <summary>
            /// Enum ManualAccepted for value: manual_accepted
            /// </summary>
            [EnumMember(Value = "manual_accepted")]
            ManualAccepted = 13,

            /// <summary>
            /// Enum ManualRejected for value: manual_rejected
            /// </summary>
            [EnumMember(Value = "manual_rejected")]
            ManualRejected = 14

        }


        /// <summary>
        /// [Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the invoice, please wait up to 2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The invoice has yet to be sent   * &#x60;sent&#x60; - The invoice was sent   * &#x60;pending&#x60; - The checks for the digital signature and sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the customer   * &#x60;error&#x60; - An error occurred while handling the invoice, please try to resend it or contact support   * &#x60;discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * &#x60;not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer accepted the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   * &#x60;no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * &#x60;manual_accepted&#x60; - The customer accepted the invoice   * &#x60;manual_rejected&#x60; - The customer rejected the invoice 
        /// </summary>
        /// <value>[Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the invoice, please wait up to 2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The invoice has yet to be sent   * &#x60;sent&#x60; - The invoice was sent   * &#x60;pending&#x60; - The checks for the digital signature and sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the customer   * &#x60;error&#x60; - An error occurred while handling the invoice, please try to resend it or contact support   * &#x60;discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * &#x60;not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer accepted the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   * &#x60;no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * &#x60;manual_accepted&#x60; - The customer accepted the invoice   * &#x60;manual_rejected&#x60; - The customer rejected the invoice </value>

        [DataMember(Name = "ei_status", EmitDefaultValue = true)]
        public EiStatusEnum? EiStatus
        {
            get { return _EiStatus; }
            set
            {
                _EiStatus = value;
                _flagEiStatus = true;
            }
        }
        private EiStatusEnum? _EiStatus;
        private bool _flagEiStatus;

        /// <summary>
        /// Returns false as EiStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiStatus()
        {
            return _flagEiStatus;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocument" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the document..</param>
        /// <param name="entity">entity.</param>
        /// <param name="type">type.</param>
        /// <param name="number">Number of the document [If not specified, next number is used].</param>
        /// <param name="numeration">Numeration of the document [Not available if type&#x3D;delivery_note].</param>
        /// <param name="date">Date of the document [If not specified, today date is used].</param>
        /// <param name="year">Invoice year..</param>
        /// <param name="currency">currency.</param>
        /// <param name="language">language.</param>
        /// <param name="subject">Issued document subject..</param>
        /// <param name="visibleSubject">Issued document visible subject..</param>
        /// <param name="rcCenter">Revenue center [or cost center if type&#x3D;supplier_order]..</param>
        /// <param name="notes">Issued document extra notes..</param>
        /// <param name="rivalsa">\&quot;Rivalsa INPS\&quot; percentual value.</param>
        /// <param name="cassa">\&quot;Cassa previdenziale\&quot; percentual value.</param>
        /// <param name="cassaTaxable">Cassa taxable percentage.</param>
        /// <param name="amountCassaTaxable">[Can be set only if cassa_taxable is NULL] Cassa2 taxable amount.</param>
        /// <param name="cassa2">\&quot;Cassa previdenziale 2\&quot; percentual value.</param>
        /// <param name="cassa2Taxable">Cassa2 taxable percentage.</param>
        /// <param name="amountCassa2Taxable">[Can be set only if cassa2_taxable is NULL] Cassa2 taxable amount.</param>
        /// <param name="globalCassaTaxable">Global cassa taxable percentage.</param>
        /// <param name="amountGlobalCassaTaxable">[Can be set only if global_cassa_taxable is NULL] Global cassa taxable amount.</param>
        /// <param name="withholdingTax">Withholding tax (ritenuta d&#39;acconto) percentual value.</param>
        /// <param name="withholdingTaxTaxable">Withholding tax taxable (imponibile) percentual value.</param>
        /// <param name="otherWithholdingTax">Other withholding tax (altra ritenuta) percentual value.</param>
        /// <param name="stampDuty">Stamp duty value [0 if not present].</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="useSplitPayment">Use split payment.</param>
        /// <param name="useGrossPrices">Use gross prices.</param>
        /// <param name="eInvoice">Indicates if this is an e-invoice..</param>
        /// <param name="eiData">eiData.</param>
        /// <param name="eiCassaType">E-invoice cassa type.</param>
        /// <param name="eiCassa2Type">E-invoice cassa2 type.</param>
        /// <param name="eiWithholdingTaxCausal">E-invoice withholding tax causal.</param>
        /// <param name="eiOtherWithholdingTaxType">E-invoice other withholding tax type.</param>
        /// <param name="eiOtherWithholdingTaxCausal">E-invoice other withholding tax causal.</param>
        /// <param name="itemsList">itemsList.</param>
        /// <param name="paymentsList">paymentsList.</param>
        /// <param name="template">template.</param>
        /// <param name="deliveryNoteTemplate">deliveryNoteTemplate.</param>
        /// <param name="accInvTemplate">accInvTemplate.</param>
        /// <param name="hMargins">Horizontal margins..</param>
        /// <param name="vMargins">Vertical margins..</param>
        /// <param name="showPayments">Shows the expiration dates of the payments on the document..</param>
        /// <param name="showPaymentMethod">Show the payment method details on the document..</param>
        /// <param name="showTotals">showTotals.</param>
        /// <param name="showPaypalButton">Show paypal button.</param>
        /// <param name="showNotificationButton">Show notification button.</param>
        /// <param name="showTspayButton">Show ts pay button..</param>
        /// <param name="deliveryNote">deliveryNote.</param>
        /// <param name="accompanyingInvoice">Attach an accompanying invoice..</param>
        /// <param name="dnNumber">Number (for the attached delivery note)..</param>
        /// <param name="dnDate">Date (for the attached delivery note)..</param>
        /// <param name="dnAiPackagesNumber">Number of packages (for the attached delivery note)..</param>
        /// <param name="dnAiWeight">Weight (for the attached delivery note)..</param>
        /// <param name="dnAiCausal">Causal (for the attached delivery note)..</param>
        /// <param name="dnAiDestination">Destination (for the attached delivery note)..</param>
        /// <param name="dnAiTransporter">Transporter (for the attached delivery note)..</param>
        /// <param name="dnAiNotes">Notes (for the attached delivery note)..</param>
        /// <param name="isMarked">This is true if the document is marked..</param>
        /// <param name="amountDueDiscount">Amount due discount.</param>
        /// <param name="amountRivalsaTaxable">Taxable rivalsa amount.</param>
        /// <param name="amountWithholdingTaxTaxable">Taxable withholding tax amount.</param>
        /// <param name="amountOtherWithholdingTaxTaxable">Taxable other withholding tax amount.</param>
        /// <param name="amountEnasarcoTaxable">Taxable enasarco amount.</param>
        /// <param name="extraData">extraData.</param>
        /// <param name="seenDate">Date when the client/supplier has seen the document..</param>
        /// <param name="nextDueDate">Date of the next not paid payment..</param>
        /// <param name="url">Public url of the document PDF file..</param>
        /// <param name="attachmentToken">[Write Only] Attachment token returned by POST /issued_documents/attachment. Used to attach the file already uploaded..</param>
        /// <param name="eiRaw">Advanced raw attributes for e-invoices..</param>
        /// <param name="eiStatus">[Read only] Status of the e-invoice.   * &#x60;attempt&#x60; - We are trying to send the invoice, please wait up to 2 hours   * &#x60;missing&#x60; - The invoice is missing   * &#x60;not_sent&#x60; - The invoice has yet to be sent   * &#x60;sent&#x60; - The invoice was sent   * &#x60;pending&#x60; - The checks for the digital signature and sending are in progress   * &#x60;processing&#x60; - The SDI is delivering the invoice to the customer   * &#x60;error&#x60; - An error occurred while handling the invoice, please try to resend it or contact support   * &#x60;discarded&#x60; - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * &#x60;not_delivered&#x60; - The SDI was unable to deliver the invoice   * &#x60;accepted&#x60; - The customer accepted the invoice   * &#x60;rejected&#x60; - The customer rejected the invoice, so it must be corrected   * &#x60;no_response&#x60; - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * &#x60;manual_accepted&#x60; - The customer accepted the invoice   * &#x60;manual_rejected&#x60; - The customer rejected the invoice .</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public IssuedDocument(int? id = default(int?), Entity entity = default(Entity), IssuedDocumentType? type = default(IssuedDocumentType?), int? number = default(int?), string numeration = default(string), DateTime? date = default(DateTime?), int? year = default(int?), Currency currency = default(Currency), Language language = default(Language), string subject = default(string), string visibleSubject = default(string), string rcCenter = default(string), string notes = default(string), decimal? rivalsa = default(decimal?), decimal? cassa = default(decimal?), decimal? cassaTaxable = default(decimal?), decimal? amountCassaTaxable = default(decimal?), decimal? cassa2 = default(decimal?), decimal? cassa2Taxable = default(decimal?), decimal? amountCassa2Taxable = default(decimal?), decimal? globalCassaTaxable = default(decimal?), decimal? amountGlobalCassaTaxable = default(decimal?), decimal? withholdingTax = default(decimal?), decimal? withholdingTaxTaxable = default(decimal?), decimal? otherWithholdingTax = default(decimal?), decimal? stampDuty = default(decimal?), PaymentMethod paymentMethod = default(PaymentMethod), bool? useSplitPayment = default(bool?), bool? useGrossPrices = default(bool?), bool? eInvoice = default(bool?), IssuedDocumentEiData eiData = default(IssuedDocumentEiData), string eiCassaType = default(string), string eiCassa2Type = default(string), string eiWithholdingTaxCausal = default(string), string eiOtherWithholdingTaxType = default(string), string eiOtherWithholdingTaxCausal = default(string), List<IssuedDocumentItemsListItem> itemsList = default(List<IssuedDocumentItemsListItem>), List<IssuedDocumentPaymentsListItem> paymentsList = default(List<IssuedDocumentPaymentsListItem>), DocumentTemplate template = default(DocumentTemplate), DocumentTemplate deliveryNoteTemplate = default(DocumentTemplate), DocumentTemplate accInvTemplate = default(DocumentTemplate), int? hMargins = default(int?), int? vMargins = default(int?), bool? showPayments = default(bool?), bool? showPaymentMethod = default(bool?), ShowTotalsMode? showTotals = default(ShowTotalsMode?), bool? showPaypalButton = default(bool?), bool? showNotificationButton = default(bool?), bool? showTspayButton = default(bool?), bool? deliveryNote = default(bool?), bool? accompanyingInvoice = default(bool?), int? dnNumber = default(int?), DateTime? dnDate = default(DateTime?), string dnAiPackagesNumber = default(string), string dnAiWeight = default(string), string dnAiCausal = default(string), string dnAiDestination = default(string), string dnAiTransporter = default(string), string dnAiNotes = default(string), bool? isMarked = default(bool?), decimal? amountDueDiscount = default(decimal?), decimal? amountRivalsaTaxable = default(decimal?), decimal? amountWithholdingTaxTaxable = default(decimal?), decimal? amountOtherWithholdingTaxTaxable = default(decimal?), decimal? amountEnasarcoTaxable = default(decimal?), IssuedDocumentExtraData extraData = default(IssuedDocumentExtraData), DateTime? seenDate = default(DateTime?), DateTime? nextDueDate = default(DateTime?), string url = default(string), string attachmentToken = default(string), Object eiRaw = default(Object), EiStatusEnum? eiStatus = default(EiStatusEnum?), string createdAt = default(string), string updatedAt = default(string))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Entity = entity;
            if (this.Entity != null)
            {
                this._flagEntity = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Number = number;
            if (this.Number != null)
            {
                this._flagNumber = true;
            }
            this._Numeration = numeration;
            if (this.Numeration != null)
            {
                this._flagNumeration = true;
            }
            this._Date = date;
            if (this.Date != null)
            {
                this._flagDate = true;
            }
            this._Year = year;
            if (this.Year != null)
            {
                this._flagYear = true;
            }
            this._Currency = currency;
            if (this.Currency != null)
            {
                this._flagCurrency = true;
            }
            this._Language = language;
            if (this.Language != null)
            {
                this._flagLanguage = true;
            }
            this._Subject = subject;
            if (this.Subject != null)
            {
                this._flagSubject = true;
            }
            this._VisibleSubject = visibleSubject;
            if (this.VisibleSubject != null)
            {
                this._flagVisibleSubject = true;
            }
            this._RcCenter = rcCenter;
            if (this.RcCenter != null)
            {
                this._flagRcCenter = true;
            }
            this._Notes = notes;
            if (this.Notes != null)
            {
                this._flagNotes = true;
            }
            this._Rivalsa = rivalsa;
            if (this.Rivalsa != null)
            {
                this._flagRivalsa = true;
            }
            this._Cassa = cassa;
            if (this.Cassa != null)
            {
                this._flagCassa = true;
            }
            this._CassaTaxable = cassaTaxable;
            if (this.CassaTaxable != null)
            {
                this._flagCassaTaxable = true;
            }
            this._AmountCassaTaxable = amountCassaTaxable;
            if (this.AmountCassaTaxable != null)
            {
                this._flagAmountCassaTaxable = true;
            }
            this._Cassa2 = cassa2;
            if (this.Cassa2 != null)
            {
                this._flagCassa2 = true;
            }
            this._Cassa2Taxable = cassa2Taxable;
            if (this.Cassa2Taxable != null)
            {
                this._flagCassa2Taxable = true;
            }
            this._AmountCassa2Taxable = amountCassa2Taxable;
            if (this.AmountCassa2Taxable != null)
            {
                this._flagAmountCassa2Taxable = true;
            }
            this._GlobalCassaTaxable = globalCassaTaxable;
            if (this.GlobalCassaTaxable != null)
            {
                this._flagGlobalCassaTaxable = true;
            }
            this._AmountGlobalCassaTaxable = amountGlobalCassaTaxable;
            if (this.AmountGlobalCassaTaxable != null)
            {
                this._flagAmountGlobalCassaTaxable = true;
            }
            this._WithholdingTax = withholdingTax;
            if (this.WithholdingTax != null)
            {
                this._flagWithholdingTax = true;
            }
            this._WithholdingTaxTaxable = withholdingTaxTaxable;
            if (this.WithholdingTaxTaxable != null)
            {
                this._flagWithholdingTaxTaxable = true;
            }
            this._OtherWithholdingTax = otherWithholdingTax;
            if (this.OtherWithholdingTax != null)
            {
                this._flagOtherWithholdingTax = true;
            }
            this._StampDuty = stampDuty;
            if (this.StampDuty != null)
            {
                this._flagStampDuty = true;
            }
            this._PaymentMethod = paymentMethod;
            if (this.PaymentMethod != null)
            {
                this._flagPaymentMethod = true;
            }
            this._UseSplitPayment = useSplitPayment;
            if (this.UseSplitPayment != null)
            {
                this._flagUseSplitPayment = true;
            }
            this._UseGrossPrices = useGrossPrices;
            if (this.UseGrossPrices != null)
            {
                this._flagUseGrossPrices = true;
            }
            this._EInvoice = eInvoice;
            if (this.EInvoice != null)
            {
                this._flagEInvoice = true;
            }
            this._EiData = eiData;
            if (this.EiData != null)
            {
                this._flagEiData = true;
            }
            this._EiCassaType = eiCassaType;
            if (this.EiCassaType != null)
            {
                this._flagEiCassaType = true;
            }
            this._EiCassa2Type = eiCassa2Type;
            if (this.EiCassa2Type != null)
            {
                this._flagEiCassa2Type = true;
            }
            this._EiWithholdingTaxCausal = eiWithholdingTaxCausal;
            if (this.EiWithholdingTaxCausal != null)
            {
                this._flagEiWithholdingTaxCausal = true;
            }
            this._EiOtherWithholdingTaxType = eiOtherWithholdingTaxType;
            if (this.EiOtherWithholdingTaxType != null)
            {
                this._flagEiOtherWithholdingTaxType = true;
            }
            this._EiOtherWithholdingTaxCausal = eiOtherWithholdingTaxCausal;
            if (this.EiOtherWithholdingTaxCausal != null)
            {
                this._flagEiOtherWithholdingTaxCausal = true;
            }
            this._ItemsList = itemsList;
            if (this.ItemsList != null)
            {
                this._flagItemsList = true;
            }
            this._PaymentsList = paymentsList;
            if (this.PaymentsList != null)
            {
                this._flagPaymentsList = true;
            }
            this._Template = template;
            if (this.Template != null)
            {
                this._flagTemplate = true;
            }
            this._DeliveryNoteTemplate = deliveryNoteTemplate;
            if (this.DeliveryNoteTemplate != null)
            {
                this._flagDeliveryNoteTemplate = true;
            }
            this._AccInvTemplate = accInvTemplate;
            if (this.AccInvTemplate != null)
            {
                this._flagAccInvTemplate = true;
            }
            this._HMargins = hMargins;
            if (this.HMargins != null)
            {
                this._flagHMargins = true;
            }
            this._VMargins = vMargins;
            if (this.VMargins != null)
            {
                this._flagVMargins = true;
            }
            this._ShowPayments = showPayments;
            if (this.ShowPayments != null)
            {
                this._flagShowPayments = true;
            }
            this._ShowPaymentMethod = showPaymentMethod;
            if (this.ShowPaymentMethod != null)
            {
                this._flagShowPaymentMethod = true;
            }
            this._ShowTotals = showTotals;
            if (this.ShowTotals != null)
            {
                this._flagShowTotals = true;
            }
            this._ShowPaypalButton = showPaypalButton;
            if (this.ShowPaypalButton != null)
            {
                this._flagShowPaypalButton = true;
            }
            this._ShowNotificationButton = showNotificationButton;
            if (this.ShowNotificationButton != null)
            {
                this._flagShowNotificationButton = true;
            }
            this._ShowTspayButton = showTspayButton;
            if (this.ShowTspayButton != null)
            {
                this._flagShowTspayButton = true;
            }
            this._DeliveryNote = deliveryNote;
            if (this.DeliveryNote != null)
            {
                this._flagDeliveryNote = true;
            }
            this._AccompanyingInvoice = accompanyingInvoice;
            if (this.AccompanyingInvoice != null)
            {
                this._flagAccompanyingInvoice = true;
            }
            this._DnNumber = dnNumber;
            if (this.DnNumber != null)
            {
                this._flagDnNumber = true;
            }
            this._DnDate = dnDate;
            if (this.DnDate != null)
            {
                this._flagDnDate = true;
            }
            this._DnAiPackagesNumber = dnAiPackagesNumber;
            if (this.DnAiPackagesNumber != null)
            {
                this._flagDnAiPackagesNumber = true;
            }
            this._DnAiWeight = dnAiWeight;
            if (this.DnAiWeight != null)
            {
                this._flagDnAiWeight = true;
            }
            this._DnAiCausal = dnAiCausal;
            if (this.DnAiCausal != null)
            {
                this._flagDnAiCausal = true;
            }
            this._DnAiDestination = dnAiDestination;
            if (this.DnAiDestination != null)
            {
                this._flagDnAiDestination = true;
            }
            this._DnAiTransporter = dnAiTransporter;
            if (this.DnAiTransporter != null)
            {
                this._flagDnAiTransporter = true;
            }
            this._DnAiNotes = dnAiNotes;
            if (this.DnAiNotes != null)
            {
                this._flagDnAiNotes = true;
            }
            this._IsMarked = isMarked;
            if (this.IsMarked != null)
            {
                this._flagIsMarked = true;
            }
            this._AmountDueDiscount = amountDueDiscount;
            if (this.AmountDueDiscount != null)
            {
                this._flagAmountDueDiscount = true;
            }
            this._AmountRivalsaTaxable = amountRivalsaTaxable;
            if (this.AmountRivalsaTaxable != null)
            {
                this._flagAmountRivalsaTaxable = true;
            }
            this._AmountWithholdingTaxTaxable = amountWithholdingTaxTaxable;
            if (this.AmountWithholdingTaxTaxable != null)
            {
                this._flagAmountWithholdingTaxTaxable = true;
            }
            this._AmountOtherWithholdingTaxTaxable = amountOtherWithholdingTaxTaxable;
            if (this.AmountOtherWithholdingTaxTaxable != null)
            {
                this._flagAmountOtherWithholdingTaxTaxable = true;
            }
            this._AmountEnasarcoTaxable = amountEnasarcoTaxable;
            if (this.AmountEnasarcoTaxable != null)
            {
                this._flagAmountEnasarcoTaxable = true;
            }
            this._ExtraData = extraData;
            if (this.ExtraData != null)
            {
                this._flagExtraData = true;
            }
            this._SeenDate = seenDate;
            if (this.SeenDate != null)
            {
                this._flagSeenDate = true;
            }
            this._NextDueDate = nextDueDate;
            if (this.NextDueDate != null)
            {
                this._flagNextDueDate = true;
            }
            this._Url = url;
            if (this.Url != null)
            {
                this._flagUrl = true;
            }
            this._AttachmentToken = attachmentToken;
            if (this.AttachmentToken != null)
            {
                this._flagAttachmentToken = true;
            }
            this._EiRaw = eiRaw;
            if (this.EiRaw != null)
            {
                this._flagEiRaw = true;
            }
            this._EiStatus = eiStatus;
            if (this.EiStatus != null)
            {
                this._flagEiStatus = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
        }

        /// <summary>
        /// Unique identifier of the document.
        /// </summary>
        /// <value>Unique identifier of the document.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id
        {
            get { return _Id; }
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private int? _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public Entity Entity
        {
            get { return _Entity; }
            set
            {
                _Entity = value;
                _flagEntity = true;
            }
        }
        private Entity _Entity;
        private bool _flagEntity;

        /// <summary>
        /// Returns false as Entity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntity()
        {
            return _flagEntity;
        }
        /// <summary>
        /// Number of the document [If not specified, next number is used]
        /// </summary>
        /// <value>Number of the document [If not specified, next number is used]</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public int? Number
        {
            get { return _Number; }
            set
            {
                _Number = value;
                _flagNumber = true;
            }
        }
        private int? _Number;
        private bool _flagNumber;

        /// <summary>
        /// Returns false as Number should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumber()
        {
            return _flagNumber;
        }
        /// <summary>
        /// Numeration of the document [Not available if type&#x3D;delivery_note]
        /// </summary>
        /// <value>Numeration of the document [Not available if type&#x3D;delivery_note]</value>
        [DataMember(Name = "numeration", EmitDefaultValue = true)]
        public string Numeration
        {
            get { return _Numeration; }
            set
            {
                _Numeration = value;
                _flagNumeration = true;
            }
        }
        private string _Numeration;
        private bool _flagNumeration;

        /// <summary>
        /// Returns false as Numeration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumeration()
        {
            return _flagNumeration;
        }
        /// <summary>
        /// Date of the document [If not specified, today date is used]
        /// </summary>
        /// <value>Date of the document [If not specified, today date is used]</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateTime? Date
        {
            get { return _Date; }
            set
            {
                _Date = value;
                _flagDate = true;
            }
        }
        private DateTime? _Date;
        private bool _flagDate;

        /// <summary>
        /// Returns false as Date should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDate()
        {
            return _flagDate;
        }
        /// <summary>
        /// Invoice year.
        /// </summary>
        /// <value>Invoice year.</value>
        [DataMember(Name = "year", EmitDefaultValue = true)]
        public int? Year
        {
            get { return _Year; }
            set
            {
                _Year = value;
                _flagYear = true;
            }
        }
        private int? _Year;
        private bool _flagYear;

        /// <summary>
        /// Returns false as Year should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeYear()
        {
            return _flagYear;
        }
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public Currency Currency
        {
            get { return _Currency; }
            set
            {
                _Currency = value;
                _flagCurrency = true;
            }
        }
        private Currency _Currency;
        private bool _flagCurrency;

        /// <summary>
        /// Returns false as Currency should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrency()
        {
            return _flagCurrency;
        }
        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public Language Language
        {
            get { return _Language; }
            set
            {
                _Language = value;
                _flagLanguage = true;
            }
        }
        private Language _Language;
        private bool _flagLanguage;

        /// <summary>
        /// Returns false as Language should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLanguage()
        {
            return _flagLanguage;
        }
        /// <summary>
        /// Issued document subject.
        /// </summary>
        /// <value>Issued document subject.</value>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject
        {
            get { return _Subject; }
            set
            {
                _Subject = value;
                _flagSubject = true;
            }
        }
        private string _Subject;
        private bool _flagSubject;

        /// <summary>
        /// Returns false as Subject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubject()
        {
            return _flagSubject;
        }
        /// <summary>
        /// Issued document visible subject.
        /// </summary>
        /// <value>Issued document visible subject.</value>
        [DataMember(Name = "visible_subject", EmitDefaultValue = true)]
        public string VisibleSubject
        {
            get { return _VisibleSubject; }
            set
            {
                _VisibleSubject = value;
                _flagVisibleSubject = true;
            }
        }
        private string _VisibleSubject;
        private bool _flagVisibleSubject;

        /// <summary>
        /// Returns false as VisibleSubject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVisibleSubject()
        {
            return _flagVisibleSubject;
        }
        /// <summary>
        /// Revenue center [or cost center if type&#x3D;supplier_order].
        /// </summary>
        /// <value>Revenue center [or cost center if type&#x3D;supplier_order].</value>
        [DataMember(Name = "rc_center", EmitDefaultValue = true)]
        public string RcCenter
        {
            get { return _RcCenter; }
            set
            {
                _RcCenter = value;
                _flagRcCenter = true;
            }
        }
        private string _RcCenter;
        private bool _flagRcCenter;

        /// <summary>
        /// Returns false as RcCenter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRcCenter()
        {
            return _flagRcCenter;
        }
        /// <summary>
        /// Issued document extra notes.
        /// </summary>
        /// <value>Issued document extra notes.</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes
        {
            get { return _Notes; }
            set
            {
                _Notes = value;
                _flagNotes = true;
            }
        }
        private string _Notes;
        private bool _flagNotes;

        /// <summary>
        /// Returns false as Notes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotes()
        {
            return _flagNotes;
        }
        /// <summary>
        /// \&quot;Rivalsa INPS\&quot; percentual value
        /// </summary>
        /// <value>\&quot;Rivalsa INPS\&quot; percentual value</value>
        [DataMember(Name = "rivalsa", EmitDefaultValue = true)]
        public decimal? Rivalsa
        {
            get { return _Rivalsa; }
            set
            {
                _Rivalsa = value;
                _flagRivalsa = true;
            }
        }
        private decimal? _Rivalsa;
        private bool _flagRivalsa;

        /// <summary>
        /// Returns false as Rivalsa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRivalsa()
        {
            return _flagRivalsa;
        }
        /// <summary>
        /// \&quot;Cassa previdenziale\&quot; percentual value
        /// </summary>
        /// <value>\&quot;Cassa previdenziale\&quot; percentual value</value>
        [DataMember(Name = "cassa", EmitDefaultValue = true)]
        public decimal? Cassa
        {
            get { return _Cassa; }
            set
            {
                _Cassa = value;
                _flagCassa = true;
            }
        }
        private decimal? _Cassa;
        private bool _flagCassa;

        /// <summary>
        /// Returns false as Cassa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassa()
        {
            return _flagCassa;
        }
        /// <summary>
        /// [Read Only] Cassa amount.
        /// </summary>
        /// <value>[Read Only] Cassa amount.</value>
        [DataMember(Name = "amount_cassa", EmitDefaultValue = true)]
        public decimal? AmountCassa { get; private set; }

        /// <summary>
        /// Returns false as AmountCassa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassa()
        {
            return false;
        }
        /// <summary>
        /// Cassa taxable percentage
        /// </summary>
        /// <value>Cassa taxable percentage</value>
        [DataMember(Name = "cassa_taxable", EmitDefaultValue = true)]
        public decimal? CassaTaxable
        {
            get { return _CassaTaxable; }
            set
            {
                _CassaTaxable = value;
                _flagCassaTaxable = true;
            }
        }
        private decimal? _CassaTaxable;
        private bool _flagCassaTaxable;

        /// <summary>
        /// Returns false as CassaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassaTaxable()
        {
            return _flagCassaTaxable;
        }
        /// <summary>
        /// [Can be set only if cassa_taxable is NULL] Cassa2 taxable amount
        /// </summary>
        /// <value>[Can be set only if cassa_taxable is NULL] Cassa2 taxable amount</value>
        [DataMember(Name = "amount_cassa_taxable", EmitDefaultValue = true)]
        public decimal? AmountCassaTaxable
        {
            get { return _AmountCassaTaxable; }
            set
            {
                _AmountCassaTaxable = value;
                _flagAmountCassaTaxable = true;
            }
        }
        private decimal? _AmountCassaTaxable;
        private bool _flagAmountCassaTaxable;

        /// <summary>
        /// Returns false as AmountCassaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassaTaxable()
        {
            return _flagAmountCassaTaxable;
        }
        /// <summary>
        /// \&quot;Cassa previdenziale 2\&quot; percentual value
        /// </summary>
        /// <value>\&quot;Cassa previdenziale 2\&quot; percentual value</value>
        [DataMember(Name = "cassa2", EmitDefaultValue = true)]
        public decimal? Cassa2
        {
            get { return _Cassa2; }
            set
            {
                _Cassa2 = value;
                _flagCassa2 = true;
            }
        }
        private decimal? _Cassa2;
        private bool _flagCassa2;

        /// <summary>
        /// Returns false as Cassa2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassa2()
        {
            return _flagCassa2;
        }
        /// <summary>
        /// [Read Only] Cassa amount.
        /// </summary>
        /// <value>[Read Only] Cassa amount.</value>
        [DataMember(Name = "amount_cassa2", EmitDefaultValue = true)]
        public decimal? AmountCassa2 { get; private set; }

        /// <summary>
        /// Returns false as AmountCassa2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassa2()
        {
            return false;
        }
        /// <summary>
        /// Cassa2 taxable percentage
        /// </summary>
        /// <value>Cassa2 taxable percentage</value>
        [DataMember(Name = "cassa2_taxable", EmitDefaultValue = true)]
        public decimal? Cassa2Taxable
        {
            get { return _Cassa2Taxable; }
            set
            {
                _Cassa2Taxable = value;
                _flagCassa2Taxable = true;
            }
        }
        private decimal? _Cassa2Taxable;
        private bool _flagCassa2Taxable;

        /// <summary>
        /// Returns false as Cassa2Taxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassa2Taxable()
        {
            return _flagCassa2Taxable;
        }
        /// <summary>
        /// [Can be set only if cassa2_taxable is NULL] Cassa2 taxable amount
        /// </summary>
        /// <value>[Can be set only if cassa2_taxable is NULL] Cassa2 taxable amount</value>
        [DataMember(Name = "amount_cassa2_taxable", EmitDefaultValue = true)]
        public decimal? AmountCassa2Taxable
        {
            get { return _AmountCassa2Taxable; }
            set
            {
                _AmountCassa2Taxable = value;
                _flagAmountCassa2Taxable = true;
            }
        }
        private decimal? _AmountCassa2Taxable;
        private bool _flagAmountCassa2Taxable;

        /// <summary>
        /// Returns false as AmountCassa2Taxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassa2Taxable()
        {
            return _flagAmountCassa2Taxable;
        }
        /// <summary>
        /// Global cassa taxable percentage
        /// </summary>
        /// <value>Global cassa taxable percentage</value>
        [DataMember(Name = "global_cassa_taxable", EmitDefaultValue = true)]
        public decimal? GlobalCassaTaxable
        {
            get { return _GlobalCassaTaxable; }
            set
            {
                _GlobalCassaTaxable = value;
                _flagGlobalCassaTaxable = true;
            }
        }
        private decimal? _GlobalCassaTaxable;
        private bool _flagGlobalCassaTaxable;

        /// <summary>
        /// Returns false as GlobalCassaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGlobalCassaTaxable()
        {
            return _flagGlobalCassaTaxable;
        }
        /// <summary>
        /// [Can be set only if global_cassa_taxable is NULL] Global cassa taxable amount
        /// </summary>
        /// <value>[Can be set only if global_cassa_taxable is NULL] Global cassa taxable amount</value>
        [DataMember(Name = "amount_global_cassa_taxable", EmitDefaultValue = true)]
        public decimal? AmountGlobalCassaTaxable
        {
            get { return _AmountGlobalCassaTaxable; }
            set
            {
                _AmountGlobalCassaTaxable = value;
                _flagAmountGlobalCassaTaxable = true;
            }
        }
        private decimal? _AmountGlobalCassaTaxable;
        private bool _flagAmountGlobalCassaTaxable;

        /// <summary>
        /// Returns false as AmountGlobalCassaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountGlobalCassaTaxable()
        {
            return _flagAmountGlobalCassaTaxable;
        }
        /// <summary>
        /// Withholding tax (ritenuta d&#39;acconto) percentual value
        /// </summary>
        /// <value>Withholding tax (ritenuta d&#39;acconto) percentual value</value>
        [DataMember(Name = "withholding_tax", EmitDefaultValue = true)]
        public decimal? WithholdingTax
        {
            get { return _WithholdingTax; }
            set
            {
                _WithholdingTax = value;
                _flagWithholdingTax = true;
            }
        }
        private decimal? _WithholdingTax;
        private bool _flagWithholdingTax;

        /// <summary>
        /// Returns false as WithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWithholdingTax()
        {
            return _flagWithholdingTax;
        }
        /// <summary>
        /// Withholding tax taxable (imponibile) percentual value
        /// </summary>
        /// <value>Withholding tax taxable (imponibile) percentual value</value>
        [DataMember(Name = "withholding_tax_taxable", EmitDefaultValue = true)]
        public decimal? WithholdingTaxTaxable
        {
            get { return _WithholdingTaxTaxable; }
            set
            {
                _WithholdingTaxTaxable = value;
                _flagWithholdingTaxTaxable = true;
            }
        }
        private decimal? _WithholdingTaxTaxable;
        private bool _flagWithholdingTaxTaxable;

        /// <summary>
        /// Returns false as WithholdingTaxTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWithholdingTaxTaxable()
        {
            return _flagWithholdingTaxTaxable;
        }
        /// <summary>
        /// Other withholding tax (altra ritenuta) percentual value
        /// </summary>
        /// <value>Other withholding tax (altra ritenuta) percentual value</value>
        [DataMember(Name = "other_withholding_tax", EmitDefaultValue = true)]
        public decimal? OtherWithholdingTax
        {
            get { return _OtherWithholdingTax; }
            set
            {
                _OtherWithholdingTax = value;
                _flagOtherWithholdingTax = true;
            }
        }
        private decimal? _OtherWithholdingTax;
        private bool _flagOtherWithholdingTax;

        /// <summary>
        /// Returns false as OtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOtherWithholdingTax()
        {
            return _flagOtherWithholdingTax;
        }
        /// <summary>
        /// Stamp duty value [0 if not present]
        /// </summary>
        /// <value>Stamp duty value [0 if not present]</value>
        [DataMember(Name = "stamp_duty", EmitDefaultValue = true)]
        public decimal? StampDuty
        {
            get { return _StampDuty; }
            set
            {
                _StampDuty = value;
                _flagStampDuty = true;
            }
        }
        private decimal? _StampDuty;
        private bool _flagStampDuty;

        /// <summary>
        /// Returns false as StampDuty should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStampDuty()
        {
            return _flagStampDuty;
        }
        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "payment_method", EmitDefaultValue = false)]
        public PaymentMethod PaymentMethod
        {
            get { return _PaymentMethod; }
            set
            {
                _PaymentMethod = value;
                _flagPaymentMethod = true;
            }
        }
        private PaymentMethod _PaymentMethod;
        private bool _flagPaymentMethod;

        /// <summary>
        /// Returns false as PaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentMethod()
        {
            return _flagPaymentMethod;
        }
        /// <summary>
        /// Use split payment
        /// </summary>
        /// <value>Use split payment</value>
        [DataMember(Name = "use_split_payment", EmitDefaultValue = true)]
        public bool? UseSplitPayment
        {
            get { return _UseSplitPayment; }
            set
            {
                _UseSplitPayment = value;
                _flagUseSplitPayment = true;
            }
        }
        private bool? _UseSplitPayment;
        private bool _flagUseSplitPayment;

        /// <summary>
        /// Returns false as UseSplitPayment should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseSplitPayment()
        {
            return _flagUseSplitPayment;
        }
        /// <summary>
        /// Use gross prices
        /// </summary>
        /// <value>Use gross prices</value>
        [DataMember(Name = "use_gross_prices", EmitDefaultValue = true)]
        public bool? UseGrossPrices
        {
            get { return _UseGrossPrices; }
            set
            {
                _UseGrossPrices = value;
                _flagUseGrossPrices = true;
            }
        }
        private bool? _UseGrossPrices;
        private bool _flagUseGrossPrices;

        /// <summary>
        /// Returns false as UseGrossPrices should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseGrossPrices()
        {
            return _flagUseGrossPrices;
        }
        /// <summary>
        /// Indicates if this is an e-invoice.
        /// </summary>
        /// <value>Indicates if this is an e-invoice.</value>
        [DataMember(Name = "e_invoice", EmitDefaultValue = true)]
        public bool? EInvoice
        {
            get { return _EInvoice; }
            set
            {
                _EInvoice = value;
                _flagEInvoice = true;
            }
        }
        private bool? _EInvoice;
        private bool _flagEInvoice;

        /// <summary>
        /// Returns false as EInvoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEInvoice()
        {
            return _flagEInvoice;
        }
        /// <summary>
        /// Gets or Sets EiData
        /// </summary>
        [DataMember(Name = "ei_data", EmitDefaultValue = true)]
        public IssuedDocumentEiData EiData
        {
            get { return _EiData; }
            set
            {
                _EiData = value;
                _flagEiData = true;
            }
        }
        private IssuedDocumentEiData _EiData;
        private bool _flagEiData;

        /// <summary>
        /// Returns false as EiData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiData()
        {
            return _flagEiData;
        }
        /// <summary>
        /// E-invoice cassa type
        /// </summary>
        /// <value>E-invoice cassa type</value>
        [DataMember(Name = "ei_cassa_type", EmitDefaultValue = true)]
        public string EiCassaType
        {
            get { return _EiCassaType; }
            set
            {
                _EiCassaType = value;
                _flagEiCassaType = true;
            }
        }
        private string _EiCassaType;
        private bool _flagEiCassaType;

        /// <summary>
        /// Returns false as EiCassaType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiCassaType()
        {
            return _flagEiCassaType;
        }
        /// <summary>
        /// E-invoice cassa2 type
        /// </summary>
        /// <value>E-invoice cassa2 type</value>
        [DataMember(Name = "ei_cassa2_type", EmitDefaultValue = true)]
        public string EiCassa2Type
        {
            get { return _EiCassa2Type; }
            set
            {
                _EiCassa2Type = value;
                _flagEiCassa2Type = true;
            }
        }
        private string _EiCassa2Type;
        private bool _flagEiCassa2Type;

        /// <summary>
        /// Returns false as EiCassa2Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiCassa2Type()
        {
            return _flagEiCassa2Type;
        }
        /// <summary>
        /// E-invoice withholding tax causal
        /// </summary>
        /// <value>E-invoice withholding tax causal</value>
        [DataMember(Name = "ei_withholding_tax_causal", EmitDefaultValue = true)]
        public string EiWithholdingTaxCausal
        {
            get { return _EiWithholdingTaxCausal; }
            set
            {
                _EiWithholdingTaxCausal = value;
                _flagEiWithholdingTaxCausal = true;
            }
        }
        private string _EiWithholdingTaxCausal;
        private bool _flagEiWithholdingTaxCausal;

        /// <summary>
        /// Returns false as EiWithholdingTaxCausal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiWithholdingTaxCausal()
        {
            return _flagEiWithholdingTaxCausal;
        }
        /// <summary>
        /// E-invoice other withholding tax type
        /// </summary>
        /// <value>E-invoice other withholding tax type</value>
        [DataMember(Name = "ei_other_withholding_tax_type", EmitDefaultValue = true)]
        public string EiOtherWithholdingTaxType
        {
            get { return _EiOtherWithholdingTaxType; }
            set
            {
                _EiOtherWithholdingTaxType = value;
                _flagEiOtherWithholdingTaxType = true;
            }
        }
        private string _EiOtherWithholdingTaxType;
        private bool _flagEiOtherWithholdingTaxType;

        /// <summary>
        /// Returns false as EiOtherWithholdingTaxType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiOtherWithholdingTaxType()
        {
            return _flagEiOtherWithholdingTaxType;
        }
        /// <summary>
        /// E-invoice other withholding tax causal
        /// </summary>
        /// <value>E-invoice other withholding tax causal</value>
        [DataMember(Name = "ei_other_withholding_tax_causal", EmitDefaultValue = true)]
        public string EiOtherWithholdingTaxCausal
        {
            get { return _EiOtherWithholdingTaxCausal; }
            set
            {
                _EiOtherWithholdingTaxCausal = value;
                _flagEiOtherWithholdingTaxCausal = true;
            }
        }
        private string _EiOtherWithholdingTaxCausal;
        private bool _flagEiOtherWithholdingTaxCausal;

        /// <summary>
        /// Returns false as EiOtherWithholdingTaxCausal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiOtherWithholdingTaxCausal()
        {
            return _flagEiOtherWithholdingTaxCausal;
        }
        /// <summary>
        /// Gets or Sets ItemsList
        /// </summary>
        [DataMember(Name = "items_list", EmitDefaultValue = true)]
        public List<IssuedDocumentItemsListItem> ItemsList
        {
            get { return _ItemsList; }
            set
            {
                _ItemsList = value;
                _flagItemsList = true;
            }
        }
        private List<IssuedDocumentItemsListItem> _ItemsList;
        private bool _flagItemsList;

        /// <summary>
        /// Returns false as ItemsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItemsList()
        {
            return _flagItemsList;
        }
        /// <summary>
        /// Gets or Sets PaymentsList
        /// </summary>
        [DataMember(Name = "payments_list", EmitDefaultValue = true)]
        public List<IssuedDocumentPaymentsListItem> PaymentsList
        {
            get { return _PaymentsList; }
            set
            {
                _PaymentsList = value;
                _flagPaymentsList = true;
            }
        }
        private List<IssuedDocumentPaymentsListItem> _PaymentsList;
        private bool _flagPaymentsList;

        /// <summary>
        /// Returns false as PaymentsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentsList()
        {
            return _flagPaymentsList;
        }
        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public DocumentTemplate Template
        {
            get { return _Template; }
            set
            {
                _Template = value;
                _flagTemplate = true;
            }
        }
        private DocumentTemplate _Template;
        private bool _flagTemplate;

        /// <summary>
        /// Returns false as Template should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTemplate()
        {
            return _flagTemplate;
        }
        /// <summary>
        /// Gets or Sets DeliveryNoteTemplate
        /// </summary>
        [DataMember(Name = "delivery_note_template", EmitDefaultValue = false)]
        public DocumentTemplate DeliveryNoteTemplate
        {
            get { return _DeliveryNoteTemplate; }
            set
            {
                _DeliveryNoteTemplate = value;
                _flagDeliveryNoteTemplate = true;
            }
        }
        private DocumentTemplate _DeliveryNoteTemplate;
        private bool _flagDeliveryNoteTemplate;

        /// <summary>
        /// Returns false as DeliveryNoteTemplate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeliveryNoteTemplate()
        {
            return _flagDeliveryNoteTemplate;
        }
        /// <summary>
        /// Gets or Sets AccInvTemplate
        /// </summary>
        [DataMember(Name = "acc_inv_template", EmitDefaultValue = false)]
        public DocumentTemplate AccInvTemplate
        {
            get { return _AccInvTemplate; }
            set
            {
                _AccInvTemplate = value;
                _flagAccInvTemplate = true;
            }
        }
        private DocumentTemplate _AccInvTemplate;
        private bool _flagAccInvTemplate;

        /// <summary>
        /// Returns false as AccInvTemplate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccInvTemplate()
        {
            return _flagAccInvTemplate;
        }
        /// <summary>
        /// Horizontal margins.
        /// </summary>
        /// <value>Horizontal margins.</value>
        [DataMember(Name = "h_margins", EmitDefaultValue = true)]
        public int? HMargins
        {
            get { return _HMargins; }
            set
            {
                _HMargins = value;
                _flagHMargins = true;
            }
        }
        private int? _HMargins;
        private bool _flagHMargins;

        /// <summary>
        /// Returns false as HMargins should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHMargins()
        {
            return _flagHMargins;
        }
        /// <summary>
        /// Vertical margins.
        /// </summary>
        /// <value>Vertical margins.</value>
        [DataMember(Name = "v_margins", EmitDefaultValue = true)]
        public int? VMargins
        {
            get { return _VMargins; }
            set
            {
                _VMargins = value;
                _flagVMargins = true;
            }
        }
        private int? _VMargins;
        private bool _flagVMargins;

        /// <summary>
        /// Returns false as VMargins should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVMargins()
        {
            return _flagVMargins;
        }
        /// <summary>
        /// Shows the expiration dates of the payments on the document.
        /// </summary>
        /// <value>Shows the expiration dates of the payments on the document.</value>
        [DataMember(Name = "show_payments", EmitDefaultValue = true)]
        public bool? ShowPayments
        {
            get { return _ShowPayments; }
            set
            {
                _ShowPayments = value;
                _flagShowPayments = true;
            }
        }
        private bool? _ShowPayments;
        private bool _flagShowPayments;

        /// <summary>
        /// Returns false as ShowPayments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowPayments()
        {
            return _flagShowPayments;
        }
        /// <summary>
        /// Show the payment method details on the document.
        /// </summary>
        /// <value>Show the payment method details on the document.</value>
        [DataMember(Name = "show_payment_method", EmitDefaultValue = true)]
        public bool? ShowPaymentMethod
        {
            get { return _ShowPaymentMethod; }
            set
            {
                _ShowPaymentMethod = value;
                _flagShowPaymentMethod = true;
            }
        }
        private bool? _ShowPaymentMethod;
        private bool _flagShowPaymentMethod;

        /// <summary>
        /// Returns false as ShowPaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowPaymentMethod()
        {
            return _flagShowPaymentMethod;
        }
        /// <summary>
        /// Show paypal button
        /// </summary>
        /// <value>Show paypal button</value>
        [DataMember(Name = "show_paypal_button", EmitDefaultValue = true)]
        public bool? ShowPaypalButton
        {
            get { return _ShowPaypalButton; }
            set
            {
                _ShowPaypalButton = value;
                _flagShowPaypalButton = true;
            }
        }
        private bool? _ShowPaypalButton;
        private bool _flagShowPaypalButton;

        /// <summary>
        /// Returns false as ShowPaypalButton should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowPaypalButton()
        {
            return _flagShowPaypalButton;
        }
        /// <summary>
        /// Show notification button
        /// </summary>
        /// <value>Show notification button</value>
        [DataMember(Name = "show_notification_button", EmitDefaultValue = true)]
        public bool? ShowNotificationButton
        {
            get { return _ShowNotificationButton; }
            set
            {
                _ShowNotificationButton = value;
                _flagShowNotificationButton = true;
            }
        }
        private bool? _ShowNotificationButton;
        private bool _flagShowNotificationButton;

        /// <summary>
        /// Returns false as ShowNotificationButton should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowNotificationButton()
        {
            return _flagShowNotificationButton;
        }
        /// <summary>
        /// Show ts pay button.
        /// </summary>
        /// <value>Show ts pay button.</value>
        [DataMember(Name = "show_tspay_button", EmitDefaultValue = true)]
        public bool? ShowTspayButton
        {
            get { return _ShowTspayButton; }
            set
            {
                _ShowTspayButton = value;
                _flagShowTspayButton = true;
            }
        }
        private bool? _ShowTspayButton;
        private bool _flagShowTspayButton;

        /// <summary>
        /// Returns false as ShowTspayButton should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowTspayButton()
        {
            return _flagShowTspayButton;
        }
        /// <summary>
        /// Gets or Sets DeliveryNote
        /// </summary>
        [DataMember(Name = "delivery_note", EmitDefaultValue = true)]
        public bool? DeliveryNote
        {
            get { return _DeliveryNote; }
            set
            {
                _DeliveryNote = value;
                _flagDeliveryNote = true;
            }
        }
        private bool? _DeliveryNote;
        private bool _flagDeliveryNote;

        /// <summary>
        /// Returns false as DeliveryNote should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeliveryNote()
        {
            return _flagDeliveryNote;
        }
        /// <summary>
        /// Attach an accompanying invoice.
        /// </summary>
        /// <value>Attach an accompanying invoice.</value>
        [DataMember(Name = "accompanying_invoice", EmitDefaultValue = true)]
        public bool? AccompanyingInvoice
        {
            get { return _AccompanyingInvoice; }
            set
            {
                _AccompanyingInvoice = value;
                _flagAccompanyingInvoice = true;
            }
        }
        private bool? _AccompanyingInvoice;
        private bool _flagAccompanyingInvoice;

        /// <summary>
        /// Returns false as AccompanyingInvoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccompanyingInvoice()
        {
            return _flagAccompanyingInvoice;
        }
        /// <summary>
        /// Number (for the attached delivery note).
        /// </summary>
        /// <value>Number (for the attached delivery note).</value>
        [DataMember(Name = "dn_number", EmitDefaultValue = true)]
        public int? DnNumber
        {
            get { return _DnNumber; }
            set
            {
                _DnNumber = value;
                _flagDnNumber = true;
            }
        }
        private int? _DnNumber;
        private bool _flagDnNumber;

        /// <summary>
        /// Returns false as DnNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnNumber()
        {
            return _flagDnNumber;
        }
        /// <summary>
        /// Date (for the attached delivery note).
        /// </summary>
        /// <value>Date (for the attached delivery note).</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "dn_date", EmitDefaultValue = true)]
        public DateTime? DnDate
        {
            get { return _DnDate; }
            set
            {
                _DnDate = value;
                _flagDnDate = true;
            }
        }
        private DateTime? _DnDate;
        private bool _flagDnDate;

        /// <summary>
        /// Returns false as DnDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnDate()
        {
            return _flagDnDate;
        }
        /// <summary>
        /// Number of packages (for the attached delivery note).
        /// </summary>
        /// <value>Number of packages (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_packages_number", EmitDefaultValue = true)]
        public string DnAiPackagesNumber
        {
            get { return _DnAiPackagesNumber; }
            set
            {
                _DnAiPackagesNumber = value;
                _flagDnAiPackagesNumber = true;
            }
        }
        private string _DnAiPackagesNumber;
        private bool _flagDnAiPackagesNumber;

        /// <summary>
        /// Returns false as DnAiPackagesNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiPackagesNumber()
        {
            return _flagDnAiPackagesNumber;
        }
        /// <summary>
        /// Weight (for the attached delivery note).
        /// </summary>
        /// <value>Weight (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_weight", EmitDefaultValue = true)]
        public string DnAiWeight
        {
            get { return _DnAiWeight; }
            set
            {
                _DnAiWeight = value;
                _flagDnAiWeight = true;
            }
        }
        private string _DnAiWeight;
        private bool _flagDnAiWeight;

        /// <summary>
        /// Returns false as DnAiWeight should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiWeight()
        {
            return _flagDnAiWeight;
        }
        /// <summary>
        /// Causal (for the attached delivery note).
        /// </summary>
        /// <value>Causal (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_causal", EmitDefaultValue = true)]
        public string DnAiCausal
        {
            get { return _DnAiCausal; }
            set
            {
                _DnAiCausal = value;
                _flagDnAiCausal = true;
            }
        }
        private string _DnAiCausal;
        private bool _flagDnAiCausal;

        /// <summary>
        /// Returns false as DnAiCausal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiCausal()
        {
            return _flagDnAiCausal;
        }
        /// <summary>
        /// Destination (for the attached delivery note).
        /// </summary>
        /// <value>Destination (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_destination", EmitDefaultValue = true)]
        public string DnAiDestination
        {
            get { return _DnAiDestination; }
            set
            {
                _DnAiDestination = value;
                _flagDnAiDestination = true;
            }
        }
        private string _DnAiDestination;
        private bool _flagDnAiDestination;

        /// <summary>
        /// Returns false as DnAiDestination should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiDestination()
        {
            return _flagDnAiDestination;
        }
        /// <summary>
        /// Transporter (for the attached delivery note).
        /// </summary>
        /// <value>Transporter (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_transporter", EmitDefaultValue = true)]
        public string DnAiTransporter
        {
            get { return _DnAiTransporter; }
            set
            {
                _DnAiTransporter = value;
                _flagDnAiTransporter = true;
            }
        }
        private string _DnAiTransporter;
        private bool _flagDnAiTransporter;

        /// <summary>
        /// Returns false as DnAiTransporter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiTransporter()
        {
            return _flagDnAiTransporter;
        }
        /// <summary>
        /// Notes (for the attached delivery note).
        /// </summary>
        /// <value>Notes (for the attached delivery note).</value>
        [DataMember(Name = "dn_ai_notes", EmitDefaultValue = true)]
        public string DnAiNotes
        {
            get { return _DnAiNotes; }
            set
            {
                _DnAiNotes = value;
                _flagDnAiNotes = true;
            }
        }
        private string _DnAiNotes;
        private bool _flagDnAiNotes;

        /// <summary>
        /// Returns false as DnAiNotes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiNotes()
        {
            return _flagDnAiNotes;
        }
        /// <summary>
        /// This is true if the document is marked.
        /// </summary>
        /// <value>This is true if the document is marked.</value>
        [DataMember(Name = "is_marked", EmitDefaultValue = true)]
        public bool? IsMarked
        {
            get { return _IsMarked; }
            set
            {
                _IsMarked = value;
                _flagIsMarked = true;
            }
        }
        private bool? _IsMarked;
        private bool _flagIsMarked;

        /// <summary>
        /// Returns false as IsMarked should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsMarked()
        {
            return _flagIsMarked;
        }
        /// <summary>
        /// [Read Only] Total net amount (competenze).
        /// </summary>
        /// <value>[Read Only] Total net amount (competenze).</value>
        [DataMember(Name = "amount_net", EmitDefaultValue = true)]
        public decimal? AmountNet { get; private set; }

        /// <summary>
        /// Returns false as AmountNet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountNet()
        {
            return false;
        }
        /// <summary>
        /// [Read Only] Total vat amount (IVA).
        /// </summary>
        /// <value>[Read Only] Total vat amount (IVA).</value>
        [DataMember(Name = "amount_vat", EmitDefaultValue = true)]
        public decimal? AmountVat { get; private set; }

        /// <summary>
        /// Returns false as AmountVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountVat()
        {
            return false;
        }
        /// <summary>
        /// [Read Only] Total gross amount (totale documento).
        /// </summary>
        /// <value>[Read Only] Total gross amount (totale documento).</value>
        [DataMember(Name = "amount_gross", EmitDefaultValue = true)]
        public decimal? AmountGross { get; private set; }

        /// <summary>
        /// Returns false as AmountGross should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountGross()
        {
            return false;
        }
        /// <summary>
        /// Amount due discount
        /// </summary>
        /// <value>Amount due discount</value>
        [DataMember(Name = "amount_due_discount", EmitDefaultValue = true)]
        public decimal? AmountDueDiscount
        {
            get { return _AmountDueDiscount; }
            set
            {
                _AmountDueDiscount = value;
                _flagAmountDueDiscount = true;
            }
        }
        private decimal? _AmountDueDiscount;
        private bool _flagAmountDueDiscount;

        /// <summary>
        /// Returns false as AmountDueDiscount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountDueDiscount()
        {
            return _flagAmountDueDiscount;
        }
        /// <summary>
        /// [Read Only] Rivalsa amount.
        /// </summary>
        /// <value>[Read Only] Rivalsa amount.</value>
        [DataMember(Name = "amount_rivalsa", EmitDefaultValue = true)]
        public decimal? AmountRivalsa { get; private set; }

        /// <summary>
        /// Returns false as AmountRivalsa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountRivalsa()
        {
            return false;
        }
        /// <summary>
        /// Taxable rivalsa amount
        /// </summary>
        /// <value>Taxable rivalsa amount</value>
        [DataMember(Name = "amount_rivalsa_taxable", EmitDefaultValue = true)]
        public decimal? AmountRivalsaTaxable
        {
            get { return _AmountRivalsaTaxable; }
            set
            {
                _AmountRivalsaTaxable = value;
                _flagAmountRivalsaTaxable = true;
            }
        }
        private decimal? _AmountRivalsaTaxable;
        private bool _flagAmountRivalsaTaxable;

        /// <summary>
        /// Returns false as AmountRivalsaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountRivalsaTaxable()
        {
            return _flagAmountRivalsaTaxable;
        }
        /// <summary>
        /// [Read Only] Withholding tax amount (ritenuta d&#39;acconto).
        /// </summary>
        /// <value>[Read Only] Withholding tax amount (ritenuta d&#39;acconto).</value>
        [DataMember(Name = "amount_withholding_tax", EmitDefaultValue = true)]
        public decimal? AmountWithholdingTax { get; private set; }

        /// <summary>
        /// Returns false as AmountWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountWithholdingTax()
        {
            return false;
        }
        /// <summary>
        /// Taxable withholding tax amount
        /// </summary>
        /// <value>Taxable withholding tax amount</value>
        [DataMember(Name = "amount_withholding_tax_taxable", EmitDefaultValue = true)]
        public decimal? AmountWithholdingTaxTaxable
        {
            get { return _AmountWithholdingTaxTaxable; }
            set
            {
                _AmountWithholdingTaxTaxable = value;
                _flagAmountWithholdingTaxTaxable = true;
            }
        }
        private decimal? _AmountWithholdingTaxTaxable;
        private bool _flagAmountWithholdingTaxTaxable;

        /// <summary>
        /// Returns false as AmountWithholdingTaxTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountWithholdingTaxTaxable()
        {
            return _flagAmountWithholdingTaxTaxable;
        }
        /// <summary>
        /// [Read Only] Other withholding tax amount (altra ritenuta).
        /// </summary>
        /// <value>[Read Only] Other withholding tax amount (altra ritenuta).</value>
        [DataMember(Name = "amount_other_withholding_tax", EmitDefaultValue = true)]
        public decimal? AmountOtherWithholdingTax { get; private set; }

        /// <summary>
        /// Returns false as AmountOtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOtherWithholdingTax()
        {
            return false;
        }
        /// <summary>
        /// Taxable other withholding tax amount
        /// </summary>
        /// <value>Taxable other withholding tax amount</value>
        [DataMember(Name = "amount_other_withholding_tax_taxable", EmitDefaultValue = true)]
        public decimal? AmountOtherWithholdingTaxTaxable
        {
            get { return _AmountOtherWithholdingTaxTaxable; }
            set
            {
                _AmountOtherWithholdingTaxTaxable = value;
                _flagAmountOtherWithholdingTaxTaxable = true;
            }
        }
        private decimal? _AmountOtherWithholdingTaxTaxable;
        private bool _flagAmountOtherWithholdingTaxTaxable;

        /// <summary>
        /// Returns false as AmountOtherWithholdingTaxTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOtherWithholdingTaxTaxable()
        {
            return _flagAmountOtherWithholdingTaxTaxable;
        }
        /// <summary>
        /// Taxable enasarco amount
        /// </summary>
        /// <value>Taxable enasarco amount</value>
        [DataMember(Name = "amount_enasarco_taxable", EmitDefaultValue = true)]
        public decimal? AmountEnasarcoTaxable
        {
            get { return _AmountEnasarcoTaxable; }
            set
            {
                _AmountEnasarcoTaxable = value;
                _flagAmountEnasarcoTaxable = true;
            }
        }
        private decimal? _AmountEnasarcoTaxable;
        private bool _flagAmountEnasarcoTaxable;

        /// <summary>
        /// Returns false as AmountEnasarcoTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountEnasarcoTaxable()
        {
            return _flagAmountEnasarcoTaxable;
        }
        /// <summary>
        /// Gets or Sets ExtraData
        /// </summary>
        [DataMember(Name = "extra_data", EmitDefaultValue = true)]
        public IssuedDocumentExtraData ExtraData
        {
            get { return _ExtraData; }
            set
            {
                _ExtraData = value;
                _flagExtraData = true;
            }
        }
        private IssuedDocumentExtraData _ExtraData;
        private bool _flagExtraData;

        /// <summary>
        /// Returns false as ExtraData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExtraData()
        {
            return _flagExtraData;
        }
        /// <summary>
        /// Date when the client/supplier has seen the document.
        /// </summary>
        /// <value>Date when the client/supplier has seen the document.</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "seen_date", EmitDefaultValue = true)]
        public DateTime? SeenDate
        {
            get { return _SeenDate; }
            set
            {
                _SeenDate = value;
                _flagSeenDate = true;
            }
        }
        private DateTime? _SeenDate;
        private bool _flagSeenDate;

        /// <summary>
        /// Returns false as SeenDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSeenDate()
        {
            return _flagSeenDate;
        }
        /// <summary>
        /// Date of the next not paid payment.
        /// </summary>
        /// <value>Date of the next not paid payment.</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "next_due_date", EmitDefaultValue = true)]
        public DateTime? NextDueDate
        {
            get { return _NextDueDate; }
            set
            {
                _NextDueDate = value;
                _flagNextDueDate = true;
            }
        }
        private DateTime? _NextDueDate;
        private bool _flagNextDueDate;

        /// <summary>
        /// Returns false as NextDueDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNextDueDate()
        {
            return _flagNextDueDate;
        }
        /// <summary>
        /// Public url of the document PDF file.
        /// </summary>
        /// <value>Public url of the document PDF file.</value>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url
        {
            get { return _Url; }
            set
            {
                _Url = value;
                _flagUrl = true;
            }
        }
        private string _Url;
        private bool _flagUrl;

        /// <summary>
        /// Returns false as Url should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrl()
        {
            return _flagUrl;
        }
        /// <summary>
        /// [Read Only] Public url of the attached file. Authomatically set if a valid attachment token is passed via POST /issued_documents or PUT /issued_documents/{documentId}.
        /// </summary>
        /// <value>[Read Only] Public url of the attached file. Authomatically set if a valid attachment token is passed via POST /issued_documents or PUT /issued_documents/{documentId}.</value>
        [DataMember(Name = "attachment_url", EmitDefaultValue = true)]
        public string AttachmentUrl { get; private set; }

        /// <summary>
        /// Returns false as AttachmentUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachmentUrl()
        {
            return false;
        }
        /// <summary>
        /// [Write Only] Attachment token returned by POST /issued_documents/attachment. Used to attach the file already uploaded.
        /// </summary>
        /// <value>[Write Only] Attachment token returned by POST /issued_documents/attachment. Used to attach the file already uploaded.</value>
        [DataMember(Name = "attachment_token", EmitDefaultValue = true)]
        public string AttachmentToken
        {
            get { return _AttachmentToken; }
            set
            {
                _AttachmentToken = value;
                _flagAttachmentToken = true;
            }
        }
        private string _AttachmentToken;
        private bool _flagAttachmentToken;

        /// <summary>
        /// Returns false as AttachmentToken should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachmentToken()
        {
            return _flagAttachmentToken;
        }
        /// <summary>
        /// Advanced raw attributes for e-invoices.
        /// </summary>
        /// <value>Advanced raw attributes for e-invoices.</value>
        [DataMember(Name = "ei_raw", EmitDefaultValue = true)]
        public Object EiRaw
        {
            get { return _EiRaw; }
            set
            {
                _EiRaw = value;
                _flagEiRaw = true;
            }
        }
        private Object _EiRaw;
        private bool _flagEiRaw;

        /// <summary>
        /// Returns false as EiRaw should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiRaw()
        {
            return _flagEiRaw;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt
        {
            get { return _CreatedAt; }
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private string _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt
        {
            get { return _UpdatedAt; }
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private string _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Numeration: ").Append(Numeration).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  VisibleSubject: ").Append(VisibleSubject).Append("\n");
            sb.Append("  RcCenter: ").Append(RcCenter).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Rivalsa: ").Append(Rivalsa).Append("\n");
            sb.Append("  Cassa: ").Append(Cassa).Append("\n");
            sb.Append("  AmountCassa: ").Append(AmountCassa).Append("\n");
            sb.Append("  CassaTaxable: ").Append(CassaTaxable).Append("\n");
            sb.Append("  AmountCassaTaxable: ").Append(AmountCassaTaxable).Append("\n");
            sb.Append("  Cassa2: ").Append(Cassa2).Append("\n");
            sb.Append("  AmountCassa2: ").Append(AmountCassa2).Append("\n");
            sb.Append("  Cassa2Taxable: ").Append(Cassa2Taxable).Append("\n");
            sb.Append("  AmountCassa2Taxable: ").Append(AmountCassa2Taxable).Append("\n");
            sb.Append("  GlobalCassaTaxable: ").Append(GlobalCassaTaxable).Append("\n");
            sb.Append("  AmountGlobalCassaTaxable: ").Append(AmountGlobalCassaTaxable).Append("\n");
            sb.Append("  WithholdingTax: ").Append(WithholdingTax).Append("\n");
            sb.Append("  WithholdingTaxTaxable: ").Append(WithholdingTaxTaxable).Append("\n");
            sb.Append("  OtherWithholdingTax: ").Append(OtherWithholdingTax).Append("\n");
            sb.Append("  StampDuty: ").Append(StampDuty).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  UseSplitPayment: ").Append(UseSplitPayment).Append("\n");
            sb.Append("  UseGrossPrices: ").Append(UseGrossPrices).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  EiData: ").Append(EiData).Append("\n");
            sb.Append("  EiCassaType: ").Append(EiCassaType).Append("\n");
            sb.Append("  EiCassa2Type: ").Append(EiCassa2Type).Append("\n");
            sb.Append("  EiWithholdingTaxCausal: ").Append(EiWithholdingTaxCausal).Append("\n");
            sb.Append("  EiOtherWithholdingTaxType: ").Append(EiOtherWithholdingTaxType).Append("\n");
            sb.Append("  EiOtherWithholdingTaxCausal: ").Append(EiOtherWithholdingTaxCausal).Append("\n");
            sb.Append("  ItemsList: ").Append(ItemsList).Append("\n");
            sb.Append("  PaymentsList: ").Append(PaymentsList).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  DeliveryNoteTemplate: ").Append(DeliveryNoteTemplate).Append("\n");
            sb.Append("  AccInvTemplate: ").Append(AccInvTemplate).Append("\n");
            sb.Append("  HMargins: ").Append(HMargins).Append("\n");
            sb.Append("  VMargins: ").Append(VMargins).Append("\n");
            sb.Append("  ShowPayments: ").Append(ShowPayments).Append("\n");
            sb.Append("  ShowPaymentMethod: ").Append(ShowPaymentMethod).Append("\n");
            sb.Append("  ShowTotals: ").Append(ShowTotals).Append("\n");
            sb.Append("  ShowPaypalButton: ").Append(ShowPaypalButton).Append("\n");
            sb.Append("  ShowNotificationButton: ").Append(ShowNotificationButton).Append("\n");
            sb.Append("  ShowTspayButton: ").Append(ShowTspayButton).Append("\n");
            sb.Append("  DeliveryNote: ").Append(DeliveryNote).Append("\n");
            sb.Append("  AccompanyingInvoice: ").Append(AccompanyingInvoice).Append("\n");
            sb.Append("  DnNumber: ").Append(DnNumber).Append("\n");
            sb.Append("  DnDate: ").Append(DnDate).Append("\n");
            sb.Append("  DnAiPackagesNumber: ").Append(DnAiPackagesNumber).Append("\n");
            sb.Append("  DnAiWeight: ").Append(DnAiWeight).Append("\n");
            sb.Append("  DnAiCausal: ").Append(DnAiCausal).Append("\n");
            sb.Append("  DnAiDestination: ").Append(DnAiDestination).Append("\n");
            sb.Append("  DnAiTransporter: ").Append(DnAiTransporter).Append("\n");
            sb.Append("  DnAiNotes: ").Append(DnAiNotes).Append("\n");
            sb.Append("  IsMarked: ").Append(IsMarked).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  AmountDueDiscount: ").Append(AmountDueDiscount).Append("\n");
            sb.Append("  AmountRivalsa: ").Append(AmountRivalsa).Append("\n");
            sb.Append("  AmountRivalsaTaxable: ").Append(AmountRivalsaTaxable).Append("\n");
            sb.Append("  AmountWithholdingTax: ").Append(AmountWithholdingTax).Append("\n");
            sb.Append("  AmountWithholdingTaxTaxable: ").Append(AmountWithholdingTaxTaxable).Append("\n");
            sb.Append("  AmountOtherWithholdingTax: ").Append(AmountOtherWithholdingTax).Append("\n");
            sb.Append("  AmountOtherWithholdingTaxTaxable: ").Append(AmountOtherWithholdingTaxTaxable).Append("\n");
            sb.Append("  AmountEnasarcoTaxable: ").Append(AmountEnasarcoTaxable).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("  SeenDate: ").Append(SeenDate).Append("\n");
            sb.Append("  NextDueDate: ").Append(NextDueDate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("  AttachmentToken: ").Append(AttachmentToken).Append("\n");
            sb.Append("  EiRaw: ").Append(EiRaw).Append("\n");
            sb.Append("  EiStatus: ").Append(EiStatus).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocument);
        }

        /// <summary>
        /// Returns true if IssuedDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocument input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) &&
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) &&
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) &&
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) &&
                (
                    this.Numeration == input.Numeration ||
                    (this.Numeration != null &&
                    this.Numeration.Equals(input.Numeration))
                ) &&
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) &&
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) &&
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) &&
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) &&
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) &&
                (
                    this.VisibleSubject == input.VisibleSubject ||
                    (this.VisibleSubject != null &&
                    this.VisibleSubject.Equals(input.VisibleSubject))
                ) &&
                (
                    this.RcCenter == input.RcCenter ||
                    (this.RcCenter != null &&
                    this.RcCenter.Equals(input.RcCenter))
                ) &&
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) &&
                (
                    this.Rivalsa == input.Rivalsa ||
                    (this.Rivalsa != null &&
                    this.Rivalsa.Equals(input.Rivalsa))
                ) &&
                (
                    this.Cassa == input.Cassa ||
                    (this.Cassa != null &&
                    this.Cassa.Equals(input.Cassa))
                ) &&
                (
                    this.AmountCassa == input.AmountCassa ||
                    (this.AmountCassa != null &&
                    this.AmountCassa.Equals(input.AmountCassa))
                ) &&
                (
                    this.CassaTaxable == input.CassaTaxable ||
                    (this.CassaTaxable != null &&
                    this.CassaTaxable.Equals(input.CassaTaxable))
                ) &&
                (
                    this.AmountCassaTaxable == input.AmountCassaTaxable ||
                    (this.AmountCassaTaxable != null &&
                    this.AmountCassaTaxable.Equals(input.AmountCassaTaxable))
                ) &&
                (
                    this.Cassa2 == input.Cassa2 ||
                    (this.Cassa2 != null &&
                    this.Cassa2.Equals(input.Cassa2))
                ) &&
                (
                    this.AmountCassa2 == input.AmountCassa2 ||
                    (this.AmountCassa2 != null &&
                    this.AmountCassa2.Equals(input.AmountCassa2))
                ) &&
                (
                    this.Cassa2Taxable == input.Cassa2Taxable ||
                    (this.Cassa2Taxable != null &&
                    this.Cassa2Taxable.Equals(input.Cassa2Taxable))
                ) &&
                (
                    this.AmountCassa2Taxable == input.AmountCassa2Taxable ||
                    (this.AmountCassa2Taxable != null &&
                    this.AmountCassa2Taxable.Equals(input.AmountCassa2Taxable))
                ) &&
                (
                    this.GlobalCassaTaxable == input.GlobalCassaTaxable ||
                    (this.GlobalCassaTaxable != null &&
                    this.GlobalCassaTaxable.Equals(input.GlobalCassaTaxable))
                ) &&
                (
                    this.AmountGlobalCassaTaxable == input.AmountGlobalCassaTaxable ||
                    (this.AmountGlobalCassaTaxable != null &&
                    this.AmountGlobalCassaTaxable.Equals(input.AmountGlobalCassaTaxable))
                ) &&
                (
                    this.WithholdingTax == input.WithholdingTax ||
                    (this.WithholdingTax != null &&
                    this.WithholdingTax.Equals(input.WithholdingTax))
                ) &&
                (
                    this.WithholdingTaxTaxable == input.WithholdingTaxTaxable ||
                    (this.WithholdingTaxTaxable != null &&
                    this.WithholdingTaxTaxable.Equals(input.WithholdingTaxTaxable))
                ) &&
                (
                    this.OtherWithholdingTax == input.OtherWithholdingTax ||
                    (this.OtherWithholdingTax != null &&
                    this.OtherWithholdingTax.Equals(input.OtherWithholdingTax))
                ) &&
                (
                    this.StampDuty == input.StampDuty ||
                    (this.StampDuty != null &&
                    this.StampDuty.Equals(input.StampDuty))
                ) &&
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) &&
                (
                    this.UseSplitPayment == input.UseSplitPayment ||
                    (this.UseSplitPayment != null &&
                    this.UseSplitPayment.Equals(input.UseSplitPayment))
                ) &&
                (
                    this.UseGrossPrices == input.UseGrossPrices ||
                    (this.UseGrossPrices != null &&
                    this.UseGrossPrices.Equals(input.UseGrossPrices))
                ) &&
                (
                    this.EInvoice == input.EInvoice ||
                    (this.EInvoice != null &&
                    this.EInvoice.Equals(input.EInvoice))
                ) &&
                (
                    this.EiData == input.EiData ||
                    (this.EiData != null &&
                    this.EiData.Equals(input.EiData))
                ) &&
                (
                    this.EiCassaType == input.EiCassaType ||
                    (this.EiCassaType != null &&
                    this.EiCassaType.Equals(input.EiCassaType))
                ) &&
                (
                    this.EiCassa2Type == input.EiCassa2Type ||
                    (this.EiCassa2Type != null &&
                    this.EiCassa2Type.Equals(input.EiCassa2Type))
                ) &&
                (
                    this.EiWithholdingTaxCausal == input.EiWithholdingTaxCausal ||
                    (this.EiWithholdingTaxCausal != null &&
                    this.EiWithholdingTaxCausal.Equals(input.EiWithholdingTaxCausal))
                ) &&
                (
                    this.EiOtherWithholdingTaxType == input.EiOtherWithholdingTaxType ||
                    (this.EiOtherWithholdingTaxType != null &&
                    this.EiOtherWithholdingTaxType.Equals(input.EiOtherWithholdingTaxType))
                ) &&
                (
                    this.EiOtherWithholdingTaxCausal == input.EiOtherWithholdingTaxCausal ||
                    (this.EiOtherWithholdingTaxCausal != null &&
                    this.EiOtherWithholdingTaxCausal.Equals(input.EiOtherWithholdingTaxCausal))
                ) &&
                (
                    this.ItemsList == input.ItemsList ||
                    this.ItemsList != null &&
                    input.ItemsList != null &&
                    this.ItemsList.SequenceEqual(input.ItemsList)
                ) &&
                (
                    this.PaymentsList == input.PaymentsList ||
                    this.PaymentsList != null &&
                    input.PaymentsList != null &&
                    this.PaymentsList.SequenceEqual(input.PaymentsList)
                ) &&
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) &&
                (
                    this.DeliveryNoteTemplate == input.DeliveryNoteTemplate ||
                    (this.DeliveryNoteTemplate != null &&
                    this.DeliveryNoteTemplate.Equals(input.DeliveryNoteTemplate))
                ) &&
                (
                    this.AccInvTemplate == input.AccInvTemplate ||
                    (this.AccInvTemplate != null &&
                    this.AccInvTemplate.Equals(input.AccInvTemplate))
                ) &&
                (
                    this.HMargins == input.HMargins ||
                    (this.HMargins != null &&
                    this.HMargins.Equals(input.HMargins))
                ) &&
                (
                    this.VMargins == input.VMargins ||
                    (this.VMargins != null &&
                    this.VMargins.Equals(input.VMargins))
                ) &&
                (
                    this.ShowPayments == input.ShowPayments ||
                    (this.ShowPayments != null &&
                    this.ShowPayments.Equals(input.ShowPayments))
                ) &&
                (
                    this.ShowPaymentMethod == input.ShowPaymentMethod ||
                    (this.ShowPaymentMethod != null &&
                    this.ShowPaymentMethod.Equals(input.ShowPaymentMethod))
                ) &&
                (
                    this.ShowTotals == input.ShowTotals ||
                    this.ShowTotals.Equals(input.ShowTotals)
                ) &&
                (
                    this.ShowPaypalButton == input.ShowPaypalButton ||
                    (this.ShowPaypalButton != null &&
                    this.ShowPaypalButton.Equals(input.ShowPaypalButton))
                ) &&
                (
                    this.ShowNotificationButton == input.ShowNotificationButton ||
                    (this.ShowNotificationButton != null &&
                    this.ShowNotificationButton.Equals(input.ShowNotificationButton))
                ) &&
                (
                    this.ShowTspayButton == input.ShowTspayButton ||
                    (this.ShowTspayButton != null &&
                    this.ShowTspayButton.Equals(input.ShowTspayButton))
                ) &&
                (
                    this.DeliveryNote == input.DeliveryNote ||
                    (this.DeliveryNote != null &&
                    this.DeliveryNote.Equals(input.DeliveryNote))
                ) &&
                (
                    this.AccompanyingInvoice == input.AccompanyingInvoice ||
                    (this.AccompanyingInvoice != null &&
                    this.AccompanyingInvoice.Equals(input.AccompanyingInvoice))
                ) &&
                (
                    this.DnNumber == input.DnNumber ||
                    (this.DnNumber != null &&
                    this.DnNumber.Equals(input.DnNumber))
                ) &&
                (
                    this.DnDate == input.DnDate ||
                    (this.DnDate != null &&
                    this.DnDate.Equals(input.DnDate))
                ) &&
                (
                    this.DnAiPackagesNumber == input.DnAiPackagesNumber ||
                    (this.DnAiPackagesNumber != null &&
                    this.DnAiPackagesNumber.Equals(input.DnAiPackagesNumber))
                ) &&
                (
                    this.DnAiWeight == input.DnAiWeight ||
                    (this.DnAiWeight != null &&
                    this.DnAiWeight.Equals(input.DnAiWeight))
                ) &&
                (
                    this.DnAiCausal == input.DnAiCausal ||
                    (this.DnAiCausal != null &&
                    this.DnAiCausal.Equals(input.DnAiCausal))
                ) &&
                (
                    this.DnAiDestination == input.DnAiDestination ||
                    (this.DnAiDestination != null &&
                    this.DnAiDestination.Equals(input.DnAiDestination))
                ) &&
                (
                    this.DnAiTransporter == input.DnAiTransporter ||
                    (this.DnAiTransporter != null &&
                    this.DnAiTransporter.Equals(input.DnAiTransporter))
                ) &&
                (
                    this.DnAiNotes == input.DnAiNotes ||
                    (this.DnAiNotes != null &&
                    this.DnAiNotes.Equals(input.DnAiNotes))
                ) &&
                (
                    this.IsMarked == input.IsMarked ||
                    (this.IsMarked != null &&
                    this.IsMarked.Equals(input.IsMarked))
                ) &&
                (
                    this.AmountNet == input.AmountNet ||
                    (this.AmountNet != null &&
                    this.AmountNet.Equals(input.AmountNet))
                ) &&
                (
                    this.AmountVat == input.AmountVat ||
                    (this.AmountVat != null &&
                    this.AmountVat.Equals(input.AmountVat))
                ) &&
                (
                    this.AmountGross == input.AmountGross ||
                    (this.AmountGross != null &&
                    this.AmountGross.Equals(input.AmountGross))
                ) &&
                (
                    this.AmountDueDiscount == input.AmountDueDiscount ||
                    (this.AmountDueDiscount != null &&
                    this.AmountDueDiscount.Equals(input.AmountDueDiscount))
                ) &&
                (
                    this.AmountRivalsa == input.AmountRivalsa ||
                    (this.AmountRivalsa != null &&
                    this.AmountRivalsa.Equals(input.AmountRivalsa))
                ) &&
                (
                    this.AmountRivalsaTaxable == input.AmountRivalsaTaxable ||
                    (this.AmountRivalsaTaxable != null &&
                    this.AmountRivalsaTaxable.Equals(input.AmountRivalsaTaxable))
                ) &&
                (
                    this.AmountWithholdingTax == input.AmountWithholdingTax ||
                    (this.AmountWithholdingTax != null &&
                    this.AmountWithholdingTax.Equals(input.AmountWithholdingTax))
                ) &&
                (
                    this.AmountWithholdingTaxTaxable == input.AmountWithholdingTaxTaxable ||
                    (this.AmountWithholdingTaxTaxable != null &&
                    this.AmountWithholdingTaxTaxable.Equals(input.AmountWithholdingTaxTaxable))
                ) &&
                (
                    this.AmountOtherWithholdingTax == input.AmountOtherWithholdingTax ||
                    (this.AmountOtherWithholdingTax != null &&
                    this.AmountOtherWithholdingTax.Equals(input.AmountOtherWithholdingTax))
                ) &&
                (
                    this.AmountOtherWithholdingTaxTaxable == input.AmountOtherWithholdingTaxTaxable ||
                    (this.AmountOtherWithholdingTaxTaxable != null &&
                    this.AmountOtherWithholdingTaxTaxable.Equals(input.AmountOtherWithholdingTaxTaxable))
                ) &&
                (
                    this.AmountEnasarcoTaxable == input.AmountEnasarcoTaxable ||
                    (this.AmountEnasarcoTaxable != null &&
                    this.AmountEnasarcoTaxable.Equals(input.AmountEnasarcoTaxable))
                ) &&
                (
                    this.ExtraData == input.ExtraData ||
                    (this.ExtraData != null &&
                    this.ExtraData.Equals(input.ExtraData))
                ) &&
                (
                    this.SeenDate == input.SeenDate ||
                    (this.SeenDate != null &&
                    this.SeenDate.Equals(input.SeenDate))
                ) &&
                (
                    this.NextDueDate == input.NextDueDate ||
                    (this.NextDueDate != null &&
                    this.NextDueDate.Equals(input.NextDueDate))
                ) &&
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) &&
                (
                    this.AttachmentUrl == input.AttachmentUrl ||
                    (this.AttachmentUrl != null &&
                    this.AttachmentUrl.Equals(input.AttachmentUrl))
                ) &&
                (
                    this.AttachmentToken == input.AttachmentToken ||
                    (this.AttachmentToken != null &&
                    this.AttachmentToken.Equals(input.AttachmentToken))
                ) &&
                (
                    this.EiRaw == input.EiRaw ||
                    (this.EiRaw != null &&
                    this.EiRaw.Equals(input.EiRaw))
                ) &&
                (
                    this.EiStatus == input.EiStatus ||
                    this.EiStatus.Equals(input.EiStatus)
                ) &&
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) &&
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.Numeration != null)
                {
                    hashCode = (hashCode * 59) + this.Numeration.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Year != null)
                {
                    hashCode = (hashCode * 59) + this.Year.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.VisibleSubject != null)
                {
                    hashCode = (hashCode * 59) + this.VisibleSubject.GetHashCode();
                }
                if (this.RcCenter != null)
                {
                    hashCode = (hashCode * 59) + this.RcCenter.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.Rivalsa != null)
                {
                    hashCode = (hashCode * 59) + this.Rivalsa.GetHashCode();
                }
                if (this.Cassa != null)
                {
                    hashCode = (hashCode * 59) + this.Cassa.GetHashCode();
                }
                if (this.AmountCassa != null)
                {
                    hashCode = (hashCode * 59) + this.AmountCassa.GetHashCode();
                }
                if (this.CassaTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.CassaTaxable.GetHashCode();
                }
                if (this.AmountCassaTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.AmountCassaTaxable.GetHashCode();
                }
                if (this.Cassa2 != null)
                {
                    hashCode = (hashCode * 59) + this.Cassa2.GetHashCode();
                }
                if (this.AmountCassa2 != null)
                {
                    hashCode = (hashCode * 59) + this.AmountCassa2.GetHashCode();
                }
                if (this.Cassa2Taxable != null)
                {
                    hashCode = (hashCode * 59) + this.Cassa2Taxable.GetHashCode();
                }
                if (this.AmountCassa2Taxable != null)
                {
                    hashCode = (hashCode * 59) + this.AmountCassa2Taxable.GetHashCode();
                }
                if (this.GlobalCassaTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalCassaTaxable.GetHashCode();
                }
                if (this.AmountGlobalCassaTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.AmountGlobalCassaTaxable.GetHashCode();
                }
                if (this.WithholdingTax != null)
                {
                    hashCode = (hashCode * 59) + this.WithholdingTax.GetHashCode();
                }
                if (this.WithholdingTaxTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.WithholdingTaxTaxable.GetHashCode();
                }
                if (this.OtherWithholdingTax != null)
                {
                    hashCode = (hashCode * 59) + this.OtherWithholdingTax.GetHashCode();
                }
                if (this.StampDuty != null)
                {
                    hashCode = (hashCode * 59) + this.StampDuty.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                if (this.UseSplitPayment != null)
                {
                    hashCode = (hashCode * 59) + this.UseSplitPayment.GetHashCode();
                }
                if (this.UseGrossPrices != null)
                {
                    hashCode = (hashCode * 59) + this.UseGrossPrices.GetHashCode();
                }
                if (this.EInvoice != null)
                {
                    hashCode = (hashCode * 59) + this.EInvoice.GetHashCode();
                }
                if (this.EiData != null)
                {
                    hashCode = (hashCode * 59) + this.EiData.GetHashCode();
                }
                if (this.EiCassaType != null)
                {
                    hashCode = (hashCode * 59) + this.EiCassaType.GetHashCode();
                }
                if (this.EiCassa2Type != null)
                {
                    hashCode = (hashCode * 59) + this.EiCassa2Type.GetHashCode();
                }
                if (this.EiWithholdingTaxCausal != null)
                {
                    hashCode = (hashCode * 59) + this.EiWithholdingTaxCausal.GetHashCode();
                }
                if (this.EiOtherWithholdingTaxType != null)
                {
                    hashCode = (hashCode * 59) + this.EiOtherWithholdingTaxType.GetHashCode();
                }
                if (this.EiOtherWithholdingTaxCausal != null)
                {
                    hashCode = (hashCode * 59) + this.EiOtherWithholdingTaxCausal.GetHashCode();
                }
                if (this.ItemsList != null)
                {
                    hashCode = (hashCode * 59) + this.ItemsList.GetHashCode();
                }
                if (this.PaymentsList != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentsList.GetHashCode();
                }
                if (this.Template != null)
                {
                    hashCode = (hashCode * 59) + this.Template.GetHashCode();
                }
                if (this.DeliveryNoteTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryNoteTemplate.GetHashCode();
                }
                if (this.AccInvTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.AccInvTemplate.GetHashCode();
                }
                if (this.HMargins != null)
                {
                    hashCode = (hashCode * 59) + this.HMargins.GetHashCode();
                }
                if (this.VMargins != null)
                {
                    hashCode = (hashCode * 59) + this.VMargins.GetHashCode();
                }
                if (this.ShowPayments != null)
                {
                    hashCode = (hashCode * 59) + this.ShowPayments.GetHashCode();
                }
                if (this.ShowPaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.ShowPaymentMethod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowTotals.GetHashCode();
                if (this.ShowPaypalButton != null)
                {
                    hashCode = (hashCode * 59) + this.ShowPaypalButton.GetHashCode();
                }
                if (this.ShowNotificationButton != null)
                {
                    hashCode = (hashCode * 59) + this.ShowNotificationButton.GetHashCode();
                }
                if (this.ShowTspayButton != null)
                {
                    hashCode = (hashCode * 59) + this.ShowTspayButton.GetHashCode();
                }
                if (this.DeliveryNote != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryNote.GetHashCode();
                }
                if (this.AccompanyingInvoice != null)
                {
                    hashCode = (hashCode * 59) + this.AccompanyingInvoice.GetHashCode();
                }
                if (this.DnNumber != null)
                {
                    hashCode = (hashCode * 59) + this.DnNumber.GetHashCode();
                }
                if (this.DnDate != null)
                {
                    hashCode = (hashCode * 59) + this.DnDate.GetHashCode();
                }
                if (this.DnAiPackagesNumber != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiPackagesNumber.GetHashCode();
                }
                if (this.DnAiWeight != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiWeight.GetHashCode();
                }
                if (this.DnAiCausal != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiCausal.GetHashCode();
                }
                if (this.DnAiDestination != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiDestination.GetHashCode();
                }
                if (this.DnAiTransporter != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiTransporter.GetHashCode();
                }
                if (this.DnAiNotes != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiNotes.GetHashCode();
                }
                if (this.IsMarked != null)
                {
                    hashCode = (hashCode * 59) + this.IsMarked.GetHashCode();
                }
                if (this.AmountNet != null)
                {
                    hashCode = (hashCode * 59) + this.AmountNet.GetHashCode();
                }
                if (this.AmountVat != null)
                {
                    hashCode = (hashCode * 59) + this.AmountVat.GetHashCode();
                }
                if (this.AmountGross != null)
                {
                    hashCode = (hashCode * 59) + this.AmountGross.GetHashCode();
                }
                if (this.AmountDueDiscount != null)
                {
                    hashCode = (hashCode * 59) + this.AmountDueDiscount.GetHashCode();
                }
                if (this.AmountRivalsa != null)
                {
                    hashCode = (hashCode * 59) + this.AmountRivalsa.GetHashCode();
                }
                if (this.AmountRivalsaTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.AmountRivalsaTaxable.GetHashCode();
                }
                if (this.AmountWithholdingTax != null)
                {
                    hashCode = (hashCode * 59) + this.AmountWithholdingTax.GetHashCode();
                }
                if (this.AmountWithholdingTaxTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.AmountWithholdingTaxTaxable.GetHashCode();
                }
                if (this.AmountOtherWithholdingTax != null)
                {
                    hashCode = (hashCode * 59) + this.AmountOtherWithholdingTax.GetHashCode();
                }
                if (this.AmountOtherWithholdingTaxTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.AmountOtherWithholdingTaxTaxable.GetHashCode();
                }
                if (this.AmountEnasarcoTaxable != null)
                {
                    hashCode = (hashCode * 59) + this.AmountEnasarcoTaxable.GetHashCode();
                }
                if (this.ExtraData != null)
                {
                    hashCode = (hashCode * 59) + this.ExtraData.GetHashCode();
                }
                if (this.SeenDate != null)
                {
                    hashCode = (hashCode * 59) + this.SeenDate.GetHashCode();
                }
                if (this.NextDueDate != null)
                {
                    hashCode = (hashCode * 59) + this.NextDueDate.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.AttachmentUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentUrl.GetHashCode();
                }
                if (this.AttachmentToken != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentToken.GetHashCode();
                }
                if (this.EiRaw != null)
                {
                    hashCode = (hashCode * 59) + this.EiRaw.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EiStatus.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
