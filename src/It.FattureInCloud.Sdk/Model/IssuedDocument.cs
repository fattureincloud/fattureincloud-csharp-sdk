// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// IssuedDocument
    /// </summary>
    public partial class IssuedDocument : IEquatable<IssuedDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocument" /> class.
        /// </summary>
        /// <param name="id">Issued document id</param>
        /// <param name="entity">entity</param>
        /// <param name="type">type</param>
        /// <param name="number">Issued document number [If not specified, next number is used]</param>
        /// <param name="numeration">Issued document numeration [Not available if type&#x3D;delivery_note]</param>
        /// <param name="date">Issued document date [defaults to today&#39;s date]</param>
        /// <param name="year">Issued document year</param>
        /// <param name="currency">currency</param>
        /// <param name="language">language</param>
        /// <param name="subject">Issued document subject [not shown on the PDF]</param>
        /// <param name="visibleSubject">Issued document visible subject</param>
        /// <param name="rcCenter">Issued document revenue center [or cost center if type&#x3D;supplier_order].</param>
        /// <param name="notes">Issued document extra notes</param>
        /// <param name="rivalsa">Issued document \&quot;Rivalsa INPS\&quot; percentual value</param>
        /// <param name="cassa">Issued document \&quot;Cassa previdenziale\&quot; percentual value</param>
        /// <param name="amountCassa">[Read Only] Issued document cassa amount.</param>
        /// <param name="cassaTaxable">Issued document cassa taxable percentage</param>
        /// <param name="amountCassaTaxable">[Can be set only if cassa_taxable is NULL] Issued document cassa taxable amount</param>
        /// <param name="cassa2">Issued document \&quot;Cassa previdenziale 2\&quot; percentual value</param>
        /// <param name="amountCassa2">[Read Only] Issued document cassa2 amount</param>
        /// <param name="cassa2Taxable">Issued document cassa2 taxable percentage</param>
        /// <param name="amountCassa2Taxable">[Can be set only if cassa2_taxable is NULL] Issued document cassa2 taxable amount</param>
        /// <param name="globalCassaTaxable">Issued document global cassa taxable percentage</param>
        /// <param name="amountGlobalCassaTaxable">[Can be set only if global_cassa_taxable is NULL] Issued document global cassa taxable amount</param>
        /// <param name="withholdingTax">Issued document withholding tax (ritenuta d&#39;acconto) percentual value</param>
        /// <param name="withholdingTaxTaxable">Issued document withholding tax taxable (imponibile) percentual value</param>
        /// <param name="otherWithholdingTax">Issued document other withholding tax (altra ritenuta) percentual value</param>
        /// <param name="stampDuty">Issued document stamp duty value [0 if not present]</param>
        /// <param name="paymentMethod">paymentMethod</param>
        /// <param name="useSplitPayment">Issued document uses split payment</param>
        /// <param name="useGrossPrices">Issued document uses gross prices</param>
        /// <param name="eInvoice">Issued document is an e-invoice.</param>
        /// <param name="eiData">eiData</param>
        /// <param name="eiCassaType">E-invoice cassa type</param>
        /// <param name="eiCassa2Type">E-invoice cassa2 type</param>
        /// <param name="eiWithholdingTaxCausal">E-invoice withholding tax causal</param>
        /// <param name="eiOtherWithholdingTaxType">E-invoice other withholding tax type</param>
        /// <param name="eiOtherWithholdingTaxCausal">E-invoice other withholding tax causal</param>
        /// <param name="itemsList">itemsList</param>
        /// <param name="paymentsList">paymentsList</param>
        /// <param name="template">template</param>
        /// <param name="deliveryNoteTemplate">deliveryNoteTemplate</param>
        /// <param name="accInvTemplate">accInvTemplate</param>
        /// <param name="hMargins">Issued document PDF horizontal margins</param>
        /// <param name="vMargins">Issued document PDF vertical margins</param>
        /// <param name="showPayments">Show the expiration dates of the payments on the document</param>
        /// <param name="showPaymentMethod">Show the payment method details on the document</param>
        /// <param name="showTotals">showTotals</param>
        /// <param name="showNotificationButton">Show notification button in the PDF</param>
        /// <param name="showTspayButton">Show ts pay button in the PDF</param>
        /// <param name="deliveryNote">Issued document has delivery note</param>
        /// <param name="accompanyingInvoice">Issued document has an accompanying invoice</param>
        /// <param name="dnNumber">Issued document attached delivery note number</param>
        /// <param name="dnDate">Issued document attached delivery note date</param>
        /// <param name="dnAiPackagesNumber">Issued document attached delivery note number of packages</param>
        /// <param name="dnAiWeight">Issued document attached delivery note package weight</param>
        /// <param name="dnAiCausal">Issued document attached delivery note causal</param>
        /// <param name="dnAiDestination">Issued document attached delivery note destination</param>
        /// <param name="dnAiTransporter">Issued document attached delivery note transporter</param>
        /// <param name="dnAiNotes">Issued document attached delivery note notes</param>
        /// <param name="isMarked">Issued document is marked</param>
        /// <param name="amountNet">[Read only] Issued document total net amount</param>
        /// <param name="amountVat">[Read Only] Issued document total vat amount</param>
        /// <param name="amountGross">[Read Only] Issued document total gross amount</param>
        /// <param name="amountDueDiscount">Issued document amount due discount</param>
        /// <param name="amountRivalsa">[Read Only] Issued document rivalsa amount</param>
        /// <param name="amountRivalsaTaxable">Issued document taxable rivalsa amount</param>
        /// <param name="amountWithholdingTax">[Read Only] Issued document withholding tax amount (ritenuta d&#39;acconto).</param>
        /// <param name="amountWithholdingTaxTaxable">Issued document taxable withholding tax amount</param>
        /// <param name="amountOtherWithholdingTax">[Read Only] Issued document other withholding tax amount (altra ritenuta)</param>
        /// <param name="amountOtherWithholdingTaxTaxable">Issued document taxable other withholding tax amount</param>
        /// <param name="amountEnasarcoTaxable">Issued document taxable enasarco amount</param>
        /// <param name="extraData">extraData</param>
        /// <param name="seenDate">Issued document seen date</param>
        /// <param name="nextDueDate">Issued document date of the next not paid payment</param>
        /// <param name="url">[Temporary] [Read Only] Issued document url of the document PDF file</param>
        /// <param name="dnUrl">[Temporary] [Read Only] Issued document url of the attached delivery note PDF file</param>
        /// <param name="aiUrl">[Temporary] [Read Only] Issued document url of the accompanying invoice PDF file</param>
        /// <param name="attachmentUrl">[Temporary] [Read Only] Issued document url of the attached file</param>
        /// <param name="attachmentToken">[Write Only] Issued document attachment token returned by POST /issued_documents/attachment</param>
        /// <param name="eiRaw">Issued document advanced raw attributes for e-invoices</param>
        /// <param name="eiStatus">[Read only] Status of the e-invoice.   * **attempt** - We are trying to send the invoice, please wait up to 2 hours   * **missing** - The invoice is missing   * **not_sent** - The invoice has yet to be sent   * **sent** - The invoice was sent   * **pending** - The checks for the digital signature and sending are in progress   * **processing** - The SDI is delivering the invoice to the customer   * **error** - An error occurred while handling the invoice, please try to resend it or contact support   * **discarded** - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * **not_delivered** - The SDI was unable to deliver the invoice   * **accepted** - The customer accepted the invoice   * **rejected** - The customer rejected the invoice, so it must be corrected   * **no_response** - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * **manual_accepted** - The customer accepted the invoice   * **manual_rejected** - The customer rejected the invoice </param>
        /// <param name="priceListId">Price list id</param>
        /// <param name="locked">Issued Document can&#39;t be edited</param>
        /// <param name="createdAt">Issued document creation date</param>
        /// <param name="updatedAt">Issued document last update date</param>
        [JsonConstructor]
        public IssuedDocument(Option<int?> id = default, Option<Entity> entity = default, Option<IssuedDocumentType?> type = default, Option<int?> number = default, Option<string> numeration = default, Option<DateTimeOffset?> date = default, Option<int?> year = default, Option<Currency> currency = default, Option<Language> language = default, Option<string> subject = default, Option<string> visibleSubject = default, Option<string> rcCenter = default, Option<string> notes = default, Option<decimal?> rivalsa = default, Option<decimal?> cassa = default, Option<decimal?> amountCassa = default, Option<decimal?> cassaTaxable = default, Option<decimal?> amountCassaTaxable = default, Option<decimal?> cassa2 = default, Option<decimal?> amountCassa2 = default, Option<decimal?> cassa2Taxable = default, Option<decimal?> amountCassa2Taxable = default, Option<decimal?> globalCassaTaxable = default, Option<decimal?> amountGlobalCassaTaxable = default, Option<decimal?> withholdingTax = default, Option<decimal?> withholdingTaxTaxable = default, Option<decimal?> otherWithholdingTax = default, Option<decimal?> stampDuty = default, Option<PaymentMethod> paymentMethod = default, Option<bool?> useSplitPayment = default, Option<bool?> useGrossPrices = default, Option<bool?> eInvoice = default, Option<IssuedDocumentEiData> eiData = default, Option<string> eiCassaType = default, Option<string> eiCassa2Type = default, Option<string> eiWithholdingTaxCausal = default, Option<string> eiOtherWithholdingTaxType = default, Option<string> eiOtherWithholdingTaxCausal = default, Option<List<IssuedDocumentItemsListItem>> itemsList = default, Option<List<IssuedDocumentPaymentsListItem>> paymentsList = default, Option<DocumentTemplate> template = default, Option<DocumentTemplate> deliveryNoteTemplate = default, Option<DocumentTemplate> accInvTemplate = default, Option<int?> hMargins = default, Option<int?> vMargins = default, Option<bool?> showPayments = default, Option<bool?> showPaymentMethod = default, Option<ShowTotalsMode?> showTotals = default, Option<bool?> showNotificationButton = default, Option<bool?> showTspayButton = default, Option<bool?> deliveryNote = default, Option<bool?> accompanyingInvoice = default, Option<int?> dnNumber = default, Option<DateTimeOffset?> dnDate = default, Option<string> dnAiPackagesNumber = default, Option<string> dnAiWeight = default, Option<string> dnAiCausal = default, Option<string> dnAiDestination = default, Option<string> dnAiTransporter = default, Option<string> dnAiNotes = default, Option<bool?> isMarked = default, Option<decimal?> amountNet = default, Option<decimal?> amountVat = default, Option<decimal?> amountGross = default, Option<decimal?> amountDueDiscount = default, Option<decimal?> amountRivalsa = default, Option<decimal?> amountRivalsaTaxable = default, Option<decimal?> amountWithholdingTax = default, Option<decimal?> amountWithholdingTaxTaxable = default, Option<decimal?> amountOtherWithholdingTax = default, Option<decimal?> amountOtherWithholdingTaxTaxable = default, Option<decimal?> amountEnasarcoTaxable = default, Option<IssuedDocumentExtraData> extraData = default, Option<DateTimeOffset?> seenDate = default, Option<DateTimeOffset?> nextDueDate = default, Option<string> url = default, Option<string> dnUrl = default, Option<string> aiUrl = default, Option<string> attachmentUrl = default, Option<string> attachmentToken = default, Option<Object> eiRaw = default, Option<EiStatusEnum?> eiStatus = default, Option<string> priceListId = default, Option<bool?> locked = default, Option<string> createdAt = default, Option<string> updatedAt = default)
        {
            IdOption = id;
            EntityOption = entity;
            TypeOption = type;
            NumberOption = number;
            NumerationOption = numeration;
            DateOption = date;
            YearOption = year;
            CurrencyOption = currency;
            LanguageOption = language;
            SubjectOption = subject;
            VisibleSubjectOption = visibleSubject;
            RcCenterOption = rcCenter;
            NotesOption = notes;
            RivalsaOption = rivalsa;
            CassaOption = cassa;
            AmountCassaOption = amountCassa;
            CassaTaxableOption = cassaTaxable;
            AmountCassaTaxableOption = amountCassaTaxable;
            Cassa2Option = cassa2;
            AmountCassa2Option = amountCassa2;
            Cassa2TaxableOption = cassa2Taxable;
            AmountCassa2TaxableOption = amountCassa2Taxable;
            GlobalCassaTaxableOption = globalCassaTaxable;
            AmountGlobalCassaTaxableOption = amountGlobalCassaTaxable;
            WithholdingTaxOption = withholdingTax;
            WithholdingTaxTaxableOption = withholdingTaxTaxable;
            OtherWithholdingTaxOption = otherWithholdingTax;
            StampDutyOption = stampDuty;
            PaymentMethodOption = paymentMethod;
            UseSplitPaymentOption = useSplitPayment;
            UseGrossPricesOption = useGrossPrices;
            EInvoiceOption = eInvoice;
            EiDataOption = eiData;
            EiCassaTypeOption = eiCassaType;
            EiCassa2TypeOption = eiCassa2Type;
            EiWithholdingTaxCausalOption = eiWithholdingTaxCausal;
            EiOtherWithholdingTaxTypeOption = eiOtherWithholdingTaxType;
            EiOtherWithholdingTaxCausalOption = eiOtherWithholdingTaxCausal;
            ItemsListOption = itemsList;
            PaymentsListOption = paymentsList;
            TemplateOption = template;
            DeliveryNoteTemplateOption = deliveryNoteTemplate;
            AccInvTemplateOption = accInvTemplate;
            HMarginsOption = hMargins;
            VMarginsOption = vMargins;
            ShowPaymentsOption = showPayments;
            ShowPaymentMethodOption = showPaymentMethod;
            ShowTotalsOption = showTotals;
            ShowNotificationButtonOption = showNotificationButton;
            ShowTspayButtonOption = showTspayButton;
            DeliveryNoteOption = deliveryNote;
            AccompanyingInvoiceOption = accompanyingInvoice;
            DnNumberOption = dnNumber;
            DnDateOption = dnDate;
            DnAiPackagesNumberOption = dnAiPackagesNumber;
            DnAiWeightOption = dnAiWeight;
            DnAiCausalOption = dnAiCausal;
            DnAiDestinationOption = dnAiDestination;
            DnAiTransporterOption = dnAiTransporter;
            DnAiNotesOption = dnAiNotes;
            IsMarkedOption = isMarked;
            AmountNetOption = amountNet;
            AmountVatOption = amountVat;
            AmountGrossOption = amountGross;
            AmountDueDiscountOption = amountDueDiscount;
            AmountRivalsaOption = amountRivalsa;
            AmountRivalsaTaxableOption = amountRivalsaTaxable;
            AmountWithholdingTaxOption = amountWithholdingTax;
            AmountWithholdingTaxTaxableOption = amountWithholdingTaxTaxable;
            AmountOtherWithholdingTaxOption = amountOtherWithholdingTax;
            AmountOtherWithholdingTaxTaxableOption = amountOtherWithholdingTaxTaxable;
            AmountEnasarcoTaxableOption = amountEnasarcoTaxable;
            ExtraDataOption = extraData;
            SeenDateOption = seenDate;
            NextDueDateOption = nextDueDate;
            UrlOption = url;
            DnUrlOption = dnUrl;
            AiUrlOption = aiUrl;
            AttachmentUrlOption = attachmentUrl;
            AttachmentTokenOption = attachmentToken;
            EiRawOption = eiRaw;
            EiStatusOption = eiStatus;
            PriceListIdOption = priceListId;
            LockedOption = locked;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IssuedDocumentType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public IssuedDocumentType? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<IssuedDocumentType?>(value); } }

        /// <summary>
        /// Used to track the state of ShowTotals
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShowTotalsMode?> ShowTotalsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShowTotals
        /// </summary>
        [JsonPropertyName("show_totals")]
        public ShowTotalsMode? ShowTotals { get { return this.ShowTotalsOption; } set { this.ShowTotalsOption = new Option<ShowTotalsMode?>(value); } }

        /// <summary>
        /// [Read only] Status of the e-invoice.   * **attempt** - We are trying to send the invoice, please wait up to 2 hours   * **missing** - The invoice is missing   * **not_sent** - The invoice has yet to be sent   * **sent** - The invoice was sent   * **pending** - The checks for the digital signature and sending are in progress   * **processing** - The SDI is delivering the invoice to the customer   * **error** - An error occurred while handling the invoice, please try to resend it or contact support   * **discarded** - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * **not_delivered** - The SDI was unable to deliver the invoice   * **accepted** - The customer accepted the invoice   * **rejected** - The customer rejected the invoice, so it must be corrected   * **no_response** - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * **manual_accepted** - The customer accepted the invoice   * **manual_rejected** - The customer rejected the invoice 
        /// </summary>
        /// <value>[Read only] Status of the e-invoice.   * **attempt** - We are trying to send the invoice, please wait up to 2 hours   * **missing** - The invoice is missing   * **not_sent** - The invoice has yet to be sent   * **sent** - The invoice was sent   * **pending** - The checks for the digital signature and sending are in progress   * **processing** - The SDI is delivering the invoice to the customer   * **error** - An error occurred while handling the invoice, please try to resend it or contact support   * **discarded** - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * **not_delivered** - The SDI was unable to deliver the invoice   * **accepted** - The customer accepted the invoice   * **rejected** - The customer rejected the invoice, so it must be corrected   * **no_response** - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * **manual_accepted** - The customer accepted the invoice   * **manual_rejected** - The customer rejected the invoice </value>
        public enum EiStatusEnum
        {
            /// <summary>
            /// Enum Attempt for value: attempt
            /// </summary>
            Attempt = 1,

            /// <summary>
            /// Enum Missing for value: missing
            /// </summary>
            Missing = 2,

            /// <summary>
            /// Enum NotSent for value: not_sent
            /// </summary>
            NotSent = 3,

            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            Sent = 4,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 5,

            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            Processing = 6,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            Error = 7,

            /// <summary>
            /// Enum Discarded for value: discarded
            /// </summary>
            Discarded = 8,

            /// <summary>
            /// Enum NotDelivered for value: not_delivered
            /// </summary>
            NotDelivered = 9,

            /// <summary>
            /// Enum Accepted for value: accepted
            /// </summary>
            Accepted = 10,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            Rejected = 11,

            /// <summary>
            /// Enum NoResponse for value: no_response
            /// </summary>
            NoResponse = 12,

            /// <summary>
            /// Enum ManualAccepted for value: manual_accepted
            /// </summary>
            ManualAccepted = 13,

            /// <summary>
            /// Enum ManualRejected for value: manual_rejected
            /// </summary>
            ManualRejected = 14
        }

        /// <summary>
        /// Returns a <see cref="EiStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EiStatusEnum EiStatusEnumFromString(string value)
        {
            if (value.Equals("attempt"))
                return EiStatusEnum.Attempt;

            if (value.Equals("missing"))
                return EiStatusEnum.Missing;

            if (value.Equals("not_sent"))
                return EiStatusEnum.NotSent;

            if (value.Equals("sent"))
                return EiStatusEnum.Sent;

            if (value.Equals("pending"))
                return EiStatusEnum.Pending;

            if (value.Equals("processing"))
                return EiStatusEnum.Processing;

            if (value.Equals("error"))
                return EiStatusEnum.Error;

            if (value.Equals("discarded"))
                return EiStatusEnum.Discarded;

            if (value.Equals("not_delivered"))
                return EiStatusEnum.NotDelivered;

            if (value.Equals("accepted"))
                return EiStatusEnum.Accepted;

            if (value.Equals("rejected"))
                return EiStatusEnum.Rejected;

            if (value.Equals("no_response"))
                return EiStatusEnum.NoResponse;

            if (value.Equals("manual_accepted"))
                return EiStatusEnum.ManualAccepted;

            if (value.Equals("manual_rejected"))
                return EiStatusEnum.ManualRejected;

            throw new NotImplementedException($"Could not convert value to type EiStatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EiStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EiStatusEnum? EiStatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("attempt"))
                return EiStatusEnum.Attempt;

            if (value.Equals("missing"))
                return EiStatusEnum.Missing;

            if (value.Equals("not_sent"))
                return EiStatusEnum.NotSent;

            if (value.Equals("sent"))
                return EiStatusEnum.Sent;

            if (value.Equals("pending"))
                return EiStatusEnum.Pending;

            if (value.Equals("processing"))
                return EiStatusEnum.Processing;

            if (value.Equals("error"))
                return EiStatusEnum.Error;

            if (value.Equals("discarded"))
                return EiStatusEnum.Discarded;

            if (value.Equals("not_delivered"))
                return EiStatusEnum.NotDelivered;

            if (value.Equals("accepted"))
                return EiStatusEnum.Accepted;

            if (value.Equals("rejected"))
                return EiStatusEnum.Rejected;

            if (value.Equals("no_response"))
                return EiStatusEnum.NoResponse;

            if (value.Equals("manual_accepted"))
                return EiStatusEnum.ManualAccepted;

            if (value.Equals("manual_rejected"))
                return EiStatusEnum.ManualRejected;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EiStatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EiStatusEnumToJsonValue(EiStatusEnum? value)
        {
            if (value == null)
                return null;

            if (value == EiStatusEnum.Attempt)
                return "attempt";

            if (value == EiStatusEnum.Missing)
                return "missing";

            if (value == EiStatusEnum.NotSent)
                return "not_sent";

            if (value == EiStatusEnum.Sent)
                return "sent";

            if (value == EiStatusEnum.Pending)
                return "pending";

            if (value == EiStatusEnum.Processing)
                return "processing";

            if (value == EiStatusEnum.Error)
                return "error";

            if (value == EiStatusEnum.Discarded)
                return "discarded";

            if (value == EiStatusEnum.NotDelivered)
                return "not_delivered";

            if (value == EiStatusEnum.Accepted)
                return "accepted";

            if (value == EiStatusEnum.Rejected)
                return "rejected";

            if (value == EiStatusEnum.NoResponse)
                return "no_response";

            if (value == EiStatusEnum.ManualAccepted)
                return "manual_accepted";

            if (value == EiStatusEnum.ManualRejected)
                return "manual_rejected";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }


        /// <summary>
        /// Used to track the state of EiStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EiStatusEnum?> EiStatusOption { get; private set; }

        /// <summary>
        /// [Read only] Status of the e-invoice.   * **attempt** - We are trying to send the invoice, please wait up to 2 hours   * **missing** - The invoice is missing   * **not_sent** - The invoice has yet to be sent   * **sent** - The invoice was sent   * **pending** - The checks for the digital signature and sending are in progress   * **processing** - The SDI is delivering the invoice to the customer   * **error** - An error occurred while handling the invoice, please try to resend it or contact support   * **discarded** - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * **not_delivered** - The SDI was unable to deliver the invoice   * **accepted** - The customer accepted the invoice   * **rejected** - The customer rejected the invoice, so it must be corrected   * **no_response** - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * **manual_accepted** - The customer accepted the invoice   * **manual_rejected** - The customer rejected the invoice 
        /// </summary>
        /// <value>[Read only] Status of the e-invoice.   * **attempt** - We are trying to send the invoice, please wait up to 2 hours   * **missing** - The invoice is missing   * **not_sent** - The invoice has yet to be sent   * **sent** - The invoice was sent   * **pending** - The checks for the digital signature and sending are in progress   * **processing** - The SDI is delivering the invoice to the customer   * **error** - An error occurred while handling the invoice, please try to resend it or contact support   * **discarded** - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * **not_delivered** - The SDI was unable to deliver the invoice   * **accepted** - The customer accepted the invoice   * **rejected** - The customer rejected the invoice, so it must be corrected   * **no_response** - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * **manual_accepted** - The customer accepted the invoice   * **manual_rejected** - The customer rejected the invoice </value>
        [JsonPropertyName("ei_status")]
        public EiStatusEnum? EiStatus { get { return this.EiStatusOption; } set { this.EiStatusOption = new Option<EiStatusEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Issued document id
        /// </summary>
        /// <value>Issued document id</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Entity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Entity> EntityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [JsonPropertyName("entity")]
        public Entity Entity { get { return this.EntityOption; } set { this.EntityOption = new Option<Entity>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOption { get; private set; }

        /// <summary>
        /// Issued document number [If not specified, next number is used]
        /// </summary>
        /// <value>Issued document number [If not specified, next number is used]</value>
        /* <example>1</example> */
        [JsonPropertyName("number")]
        public int? Number { get { return this.NumberOption; } set { this.NumberOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Numeration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NumerationOption { get; private set; }

        /// <summary>
        /// Issued document numeration [Not available if type&#x3D;delivery_note]
        /// </summary>
        /// <value>Issued document numeration [Not available if type&#x3D;delivery_note]</value>
        /* <example>/A</example> */
        [JsonPropertyName("numeration")]
        public string Numeration { get { return this.NumerationOption; } set { this.NumerationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> DateOption { get; private set; }

        /// <summary>
        /// Issued document date [defaults to today&#39;s date]
        /// </summary>
        /// <value>Issued document date [defaults to today&#39;s date]</value>
        [JsonPropertyName("date")]
        public DateTimeOffset? Date { get { return this.DateOption; } set { this.DateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of Year
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> YearOption { get; private set; }

        /// <summary>
        /// Issued document year
        /// </summary>
        /// <value>Issued document year</value>
        [JsonPropertyName("year")]
        public int? Year { get { return this.YearOption; } set { this.YearOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Currency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Currency> CurrencyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [JsonPropertyName("currency")]
        public Currency Currency { get { return this.CurrencyOption; } set { this.CurrencyOption = new Option<Currency>(value); } }

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Language> LanguageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [JsonPropertyName("language")]
        public Language Language { get { return this.LanguageOption; } set { this.LanguageOption = new Option<Language>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Issued document subject [not shown on the PDF]
        /// </summary>
        /// <value>Issued document subject [not shown on the PDF]</value>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VisibleSubject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> VisibleSubjectOption { get; private set; }

        /// <summary>
        /// Issued document visible subject
        /// </summary>
        /// <value>Issued document visible subject</value>
        [JsonPropertyName("visible_subject")]
        public string VisibleSubject { get { return this.VisibleSubjectOption; } set { this.VisibleSubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RcCenter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RcCenterOption { get; private set; }

        /// <summary>
        /// Issued document revenue center [or cost center if type&#x3D;supplier_order].
        /// </summary>
        /// <value>Issued document revenue center [or cost center if type&#x3D;supplier_order].</value>
        [JsonPropertyName("rc_center")]
        public string RcCenter { get { return this.RcCenterOption; } set { this.RcCenterOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NotesOption { get; private set; }

        /// <summary>
        /// Issued document extra notes
        /// </summary>
        /// <value>Issued document extra notes</value>
        [JsonPropertyName("notes")]
        public string Notes { get { return this.NotesOption; } set { this.NotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Rivalsa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> RivalsaOption { get; private set; }

        /// <summary>
        /// Issued document \&quot;Rivalsa INPS\&quot; percentual value
        /// </summary>
        /// <value>Issued document \&quot;Rivalsa INPS\&quot; percentual value</value>
        [JsonPropertyName("rivalsa")]
        public decimal? Rivalsa { get { return this.RivalsaOption; } set { this.RivalsaOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Cassa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> CassaOption { get; private set; }

        /// <summary>
        /// Issued document \&quot;Cassa previdenziale\&quot; percentual value
        /// </summary>
        /// <value>Issued document \&quot;Cassa previdenziale\&quot; percentual value</value>
        [JsonPropertyName("cassa")]
        public decimal? Cassa { get { return this.CassaOption; } set { this.CassaOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountCassa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountCassaOption { get; }

        /// <summary>
        /// [Read Only] Issued document cassa amount.
        /// </summary>
        /// <value>[Read Only] Issued document cassa amount.</value>
        [JsonPropertyName("amount_cassa")]
        public decimal? AmountCassa { get { return this.AmountCassaOption; } }

        /// <summary>
        /// Used to track the state of CassaTaxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> CassaTaxableOption { get; private set; }

        /// <summary>
        /// Issued document cassa taxable percentage
        /// </summary>
        /// <value>Issued document cassa taxable percentage</value>
        [JsonPropertyName("cassa_taxable")]
        public decimal? CassaTaxable { get { return this.CassaTaxableOption; } set { this.CassaTaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountCassaTaxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountCassaTaxableOption { get; private set; }

        /// <summary>
        /// [Can be set only if cassa_taxable is NULL] Issued document cassa taxable amount
        /// </summary>
        /// <value>[Can be set only if cassa_taxable is NULL] Issued document cassa taxable amount</value>
        [JsonPropertyName("amount_cassa_taxable")]
        public decimal? AmountCassaTaxable { get { return this.AmountCassaTaxableOption; } set { this.AmountCassaTaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Cassa2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> Cassa2Option { get; private set; }

        /// <summary>
        /// Issued document \&quot;Cassa previdenziale 2\&quot; percentual value
        /// </summary>
        /// <value>Issued document \&quot;Cassa previdenziale 2\&quot; percentual value</value>
        [JsonPropertyName("cassa2")]
        public decimal? Cassa2 { get { return this.Cassa2Option; } set { this.Cassa2Option = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountCassa2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountCassa2Option { get; }

        /// <summary>
        /// [Read Only] Issued document cassa2 amount
        /// </summary>
        /// <value>[Read Only] Issued document cassa2 amount</value>
        [JsonPropertyName("amount_cassa2")]
        public decimal? AmountCassa2 { get { return this.AmountCassa2Option; } }

        /// <summary>
        /// Used to track the state of Cassa2Taxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> Cassa2TaxableOption { get; private set; }

        /// <summary>
        /// Issued document cassa2 taxable percentage
        /// </summary>
        /// <value>Issued document cassa2 taxable percentage</value>
        [JsonPropertyName("cassa2_taxable")]
        public decimal? Cassa2Taxable { get { return this.Cassa2TaxableOption; } set { this.Cassa2TaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountCassa2Taxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountCassa2TaxableOption { get; private set; }

        /// <summary>
        /// [Can be set only if cassa2_taxable is NULL] Issued document cassa2 taxable amount
        /// </summary>
        /// <value>[Can be set only if cassa2_taxable is NULL] Issued document cassa2 taxable amount</value>
        [JsonPropertyName("amount_cassa2_taxable")]
        public decimal? AmountCassa2Taxable { get { return this.AmountCassa2TaxableOption; } set { this.AmountCassa2TaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of GlobalCassaTaxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> GlobalCassaTaxableOption { get; private set; }

        /// <summary>
        /// Issued document global cassa taxable percentage
        /// </summary>
        /// <value>Issued document global cassa taxable percentage</value>
        [JsonPropertyName("global_cassa_taxable")]
        public decimal? GlobalCassaTaxable { get { return this.GlobalCassaTaxableOption; } set { this.GlobalCassaTaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountGlobalCassaTaxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountGlobalCassaTaxableOption { get; private set; }

        /// <summary>
        /// [Can be set only if global_cassa_taxable is NULL] Issued document global cassa taxable amount
        /// </summary>
        /// <value>[Can be set only if global_cassa_taxable is NULL] Issued document global cassa taxable amount</value>
        [JsonPropertyName("amount_global_cassa_taxable")]
        public decimal? AmountGlobalCassaTaxable { get { return this.AmountGlobalCassaTaxableOption; } set { this.AmountGlobalCassaTaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of WithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> WithholdingTaxOption { get; private set; }

        /// <summary>
        /// Issued document withholding tax (ritenuta d&#39;acconto) percentual value
        /// </summary>
        /// <value>Issued document withholding tax (ritenuta d&#39;acconto) percentual value</value>
        [JsonPropertyName("withholding_tax")]
        public decimal? WithholdingTax { get { return this.WithholdingTaxOption; } set { this.WithholdingTaxOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of WithholdingTaxTaxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> WithholdingTaxTaxableOption { get; private set; }

        /// <summary>
        /// Issued document withholding tax taxable (imponibile) percentual value
        /// </summary>
        /// <value>Issued document withholding tax taxable (imponibile) percentual value</value>
        [JsonPropertyName("withholding_tax_taxable")]
        public decimal? WithholdingTaxTaxable { get { return this.WithholdingTaxTaxableOption; } set { this.WithholdingTaxTaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of OtherWithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> OtherWithholdingTaxOption { get; private set; }

        /// <summary>
        /// Issued document other withholding tax (altra ritenuta) percentual value
        /// </summary>
        /// <value>Issued document other withholding tax (altra ritenuta) percentual value</value>
        [JsonPropertyName("other_withholding_tax")]
        public decimal? OtherWithholdingTax { get { return this.OtherWithholdingTaxOption; } set { this.OtherWithholdingTaxOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of StampDuty
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StampDutyOption { get; private set; }

        /// <summary>
        /// Issued document stamp duty value [0 if not present]
        /// </summary>
        /// <value>Issued document stamp duty value [0 if not present]</value>
        [JsonPropertyName("stamp_duty")]
        public decimal? StampDuty { get { return this.StampDutyOption; } set { this.StampDutyOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of PaymentMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentMethod> PaymentMethodOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [JsonPropertyName("payment_method")]
        public PaymentMethod PaymentMethod { get { return this.PaymentMethodOption; } set { this.PaymentMethodOption = new Option<PaymentMethod>(value); } }

        /// <summary>
        /// Used to track the state of UseSplitPayment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseSplitPaymentOption { get; private set; }

        /// <summary>
        /// Issued document uses split payment
        /// </summary>
        /// <value>Issued document uses split payment</value>
        [JsonPropertyName("use_split_payment")]
        public bool? UseSplitPayment { get { return this.UseSplitPaymentOption; } set { this.UseSplitPaymentOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of UseGrossPrices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseGrossPricesOption { get; private set; }

        /// <summary>
        /// Issued document uses gross prices
        /// </summary>
        /// <value>Issued document uses gross prices</value>
        [JsonPropertyName("use_gross_prices")]
        public bool? UseGrossPrices { get { return this.UseGrossPricesOption; } set { this.UseGrossPricesOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of EInvoice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EInvoiceOption { get; private set; }

        /// <summary>
        /// Issued document is an e-invoice.
        /// </summary>
        /// <value>Issued document is an e-invoice.</value>
        [JsonPropertyName("e_invoice")]
        public bool? EInvoice { get { return this.EInvoiceOption; } set { this.EInvoiceOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of EiData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IssuedDocumentEiData> EiDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets EiData
        /// </summary>
        [JsonPropertyName("ei_data")]
        public IssuedDocumentEiData EiData { get { return this.EiDataOption; } set { this.EiDataOption = new Option<IssuedDocumentEiData>(value); } }

        /// <summary>
        /// Used to track the state of EiCassaType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EiCassaTypeOption { get; private set; }

        /// <summary>
        /// E-invoice cassa type
        /// </summary>
        /// <value>E-invoice cassa type</value>
        [JsonPropertyName("ei_cassa_type")]
        public string EiCassaType { get { return this.EiCassaTypeOption; } set { this.EiCassaTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EiCassa2Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EiCassa2TypeOption { get; private set; }

        /// <summary>
        /// E-invoice cassa2 type
        /// </summary>
        /// <value>E-invoice cassa2 type</value>
        [JsonPropertyName("ei_cassa2_type")]
        public string EiCassa2Type { get { return this.EiCassa2TypeOption; } set { this.EiCassa2TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EiWithholdingTaxCausal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EiWithholdingTaxCausalOption { get; private set; }

        /// <summary>
        /// E-invoice withholding tax causal
        /// </summary>
        /// <value>E-invoice withholding tax causal</value>
        [JsonPropertyName("ei_withholding_tax_causal")]
        public string EiWithholdingTaxCausal { get { return this.EiWithholdingTaxCausalOption; } set { this.EiWithholdingTaxCausalOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EiOtherWithholdingTaxType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EiOtherWithholdingTaxTypeOption { get; private set; }

        /// <summary>
        /// E-invoice other withholding tax type
        /// </summary>
        /// <value>E-invoice other withholding tax type</value>
        [JsonPropertyName("ei_other_withholding_tax_type")]
        public string EiOtherWithholdingTaxType { get { return this.EiOtherWithholdingTaxTypeOption; } set { this.EiOtherWithholdingTaxTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EiOtherWithholdingTaxCausal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EiOtherWithholdingTaxCausalOption { get; private set; }

        /// <summary>
        /// E-invoice other withholding tax causal
        /// </summary>
        /// <value>E-invoice other withholding tax causal</value>
        [JsonPropertyName("ei_other_withholding_tax_causal")]
        public string EiOtherWithholdingTaxCausal { get { return this.EiOtherWithholdingTaxCausalOption; } set { this.EiOtherWithholdingTaxCausalOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ItemsList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<IssuedDocumentItemsListItem>> ItemsListOption { get; private set; }

        /// <summary>
        /// Gets or Sets ItemsList
        /// </summary>
        [JsonPropertyName("items_list")]
        public List<IssuedDocumentItemsListItem> ItemsList { get { return this.ItemsListOption; } set { this.ItemsListOption = new Option<List<IssuedDocumentItemsListItem>>(value); } }

        /// <summary>
        /// Used to track the state of PaymentsList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<IssuedDocumentPaymentsListItem>> PaymentsListOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentsList
        /// </summary>
        [JsonPropertyName("payments_list")]
        public List<IssuedDocumentPaymentsListItem> PaymentsList { get { return this.PaymentsListOption; } set { this.PaymentsListOption = new Option<List<IssuedDocumentPaymentsListItem>>(value); } }

        /// <summary>
        /// Used to track the state of Template
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocumentTemplate> TemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [JsonPropertyName("template")]
        public DocumentTemplate Template { get { return this.TemplateOption; } set { this.TemplateOption = new Option<DocumentTemplate>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryNoteTemplate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocumentTemplate> DeliveryNoteTemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryNoteTemplate
        /// </summary>
        [JsonPropertyName("delivery_note_template")]
        public DocumentTemplate DeliveryNoteTemplate { get { return this.DeliveryNoteTemplateOption; } set { this.DeliveryNoteTemplateOption = new Option<DocumentTemplate>(value); } }

        /// <summary>
        /// Used to track the state of AccInvTemplate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocumentTemplate> AccInvTemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccInvTemplate
        /// </summary>
        [JsonPropertyName("acc_inv_template")]
        public DocumentTemplate AccInvTemplate { get { return this.AccInvTemplateOption; } set { this.AccInvTemplateOption = new Option<DocumentTemplate>(value); } }

        /// <summary>
        /// Used to track the state of HMargins
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HMarginsOption { get; private set; }

        /// <summary>
        /// Issued document PDF horizontal margins
        /// </summary>
        /// <value>Issued document PDF horizontal margins</value>
        [JsonPropertyName("h_margins")]
        public int? HMargins { get { return this.HMarginsOption; } set { this.HMarginsOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of VMargins
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VMarginsOption { get; private set; }

        /// <summary>
        /// Issued document PDF vertical margins
        /// </summary>
        /// <value>Issued document PDF vertical margins</value>
        [JsonPropertyName("v_margins")]
        public int? VMargins { get { return this.VMarginsOption; } set { this.VMarginsOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ShowPayments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowPaymentsOption { get; private set; }

        /// <summary>
        /// Show the expiration dates of the payments on the document
        /// </summary>
        /// <value>Show the expiration dates of the payments on the document</value>
        [JsonPropertyName("show_payments")]
        public bool? ShowPayments { get { return this.ShowPaymentsOption; } set { this.ShowPaymentsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ShowPaymentMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowPaymentMethodOption { get; private set; }

        /// <summary>
        /// Show the payment method details on the document
        /// </summary>
        /// <value>Show the payment method details on the document</value>
        [JsonPropertyName("show_payment_method")]
        public bool? ShowPaymentMethod { get { return this.ShowPaymentMethodOption; } set { this.ShowPaymentMethodOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ShowNotificationButton
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowNotificationButtonOption { get; private set; }

        /// <summary>
        /// Show notification button in the PDF
        /// </summary>
        /// <value>Show notification button in the PDF</value>
        [JsonPropertyName("show_notification_button")]
        public bool? ShowNotificationButton { get { return this.ShowNotificationButtonOption; } set { this.ShowNotificationButtonOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ShowTspayButton
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowTspayButtonOption { get; private set; }

        /// <summary>
        /// Show ts pay button in the PDF
        /// </summary>
        /// <value>Show ts pay button in the PDF</value>
        [JsonPropertyName("show_tspay_button")]
        public bool? ShowTspayButton { get { return this.ShowTspayButtonOption; } set { this.ShowTspayButtonOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryNote
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeliveryNoteOption { get; private set; }

        /// <summary>
        /// Issued document has delivery note
        /// </summary>
        /// <value>Issued document has delivery note</value>
        [JsonPropertyName("delivery_note")]
        public bool? DeliveryNote { get { return this.DeliveryNoteOption; } set { this.DeliveryNoteOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of AccompanyingInvoice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AccompanyingInvoiceOption { get; private set; }

        /// <summary>
        /// Issued document has an accompanying invoice
        /// </summary>
        /// <value>Issued document has an accompanying invoice</value>
        [JsonPropertyName("accompanying_invoice")]
        public bool? AccompanyingInvoice { get { return this.AccompanyingInvoiceOption; } set { this.AccompanyingInvoiceOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of DnNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DnNumberOption { get; private set; }

        /// <summary>
        /// Issued document attached delivery note number
        /// </summary>
        /// <value>Issued document attached delivery note number</value>
        [JsonPropertyName("dn_number")]
        public int? DnNumber { get { return this.DnNumberOption; } set { this.DnNumberOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of DnDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> DnDateOption { get; private set; }

        /// <summary>
        /// Issued document attached delivery note date
        /// </summary>
        /// <value>Issued document attached delivery note date</value>
        [JsonPropertyName("dn_date")]
        public DateTimeOffset? DnDate { get { return this.DnDateOption; } set { this.DnDateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of DnAiPackagesNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DnAiPackagesNumberOption { get; private set; }

        /// <summary>
        /// Issued document attached delivery note number of packages
        /// </summary>
        /// <value>Issued document attached delivery note number of packages</value>
        [JsonPropertyName("dn_ai_packages_number")]
        public string DnAiPackagesNumber { get { return this.DnAiPackagesNumberOption; } set { this.DnAiPackagesNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DnAiWeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DnAiWeightOption { get; private set; }

        /// <summary>
        /// Issued document attached delivery note package weight
        /// </summary>
        /// <value>Issued document attached delivery note package weight</value>
        [JsonPropertyName("dn_ai_weight")]
        public string DnAiWeight { get { return this.DnAiWeightOption; } set { this.DnAiWeightOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DnAiCausal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DnAiCausalOption { get; private set; }

        /// <summary>
        /// Issued document attached delivery note causal
        /// </summary>
        /// <value>Issued document attached delivery note causal</value>
        [JsonPropertyName("dn_ai_causal")]
        public string DnAiCausal { get { return this.DnAiCausalOption; } set { this.DnAiCausalOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DnAiDestination
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DnAiDestinationOption { get; private set; }

        /// <summary>
        /// Issued document attached delivery note destination
        /// </summary>
        /// <value>Issued document attached delivery note destination</value>
        [JsonPropertyName("dn_ai_destination")]
        public string DnAiDestination { get { return this.DnAiDestinationOption; } set { this.DnAiDestinationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DnAiTransporter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DnAiTransporterOption { get; private set; }

        /// <summary>
        /// Issued document attached delivery note transporter
        /// </summary>
        /// <value>Issued document attached delivery note transporter</value>
        [JsonPropertyName("dn_ai_transporter")]
        public string DnAiTransporter { get { return this.DnAiTransporterOption; } set { this.DnAiTransporterOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DnAiNotes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DnAiNotesOption { get; private set; }

        /// <summary>
        /// Issued document attached delivery note notes
        /// </summary>
        /// <value>Issued document attached delivery note notes</value>
        [JsonPropertyName("dn_ai_notes")]
        public string DnAiNotes { get { return this.DnAiNotesOption; } set { this.DnAiNotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsMarked
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsMarkedOption { get; private set; }

        /// <summary>
        /// Issued document is marked
        /// </summary>
        /// <value>Issued document is marked</value>
        [JsonPropertyName("is_marked")]
        public bool? IsMarked { get { return this.IsMarkedOption; } set { this.IsMarkedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of AmountNet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountNetOption { get; }

        /// <summary>
        /// [Read only] Issued document total net amount
        /// </summary>
        /// <value>[Read only] Issued document total net amount</value>
        [JsonPropertyName("amount_net")]
        public decimal? AmountNet { get { return this.AmountNetOption; } }

        /// <summary>
        /// Used to track the state of AmountVat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountVatOption { get; }

        /// <summary>
        /// [Read Only] Issued document total vat amount
        /// </summary>
        /// <value>[Read Only] Issued document total vat amount</value>
        [JsonPropertyName("amount_vat")]
        public decimal? AmountVat { get { return this.AmountVatOption; } }

        /// <summary>
        /// Used to track the state of AmountGross
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountGrossOption { get; }

        /// <summary>
        /// [Read Only] Issued document total gross amount
        /// </summary>
        /// <value>[Read Only] Issued document total gross amount</value>
        [JsonPropertyName("amount_gross")]
        public decimal? AmountGross { get { return this.AmountGrossOption; } }

        /// <summary>
        /// Used to track the state of AmountDueDiscount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountDueDiscountOption { get; private set; }

        /// <summary>
        /// Issued document amount due discount
        /// </summary>
        /// <value>Issued document amount due discount</value>
        [JsonPropertyName("amount_due_discount")]
        public decimal? AmountDueDiscount { get { return this.AmountDueDiscountOption; } set { this.AmountDueDiscountOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountRivalsa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountRivalsaOption { get; }

        /// <summary>
        /// [Read Only] Issued document rivalsa amount
        /// </summary>
        /// <value>[Read Only] Issued document rivalsa amount</value>
        [JsonPropertyName("amount_rivalsa")]
        public decimal? AmountRivalsa { get { return this.AmountRivalsaOption; } }

        /// <summary>
        /// Used to track the state of AmountRivalsaTaxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountRivalsaTaxableOption { get; private set; }

        /// <summary>
        /// Issued document taxable rivalsa amount
        /// </summary>
        /// <value>Issued document taxable rivalsa amount</value>
        [JsonPropertyName("amount_rivalsa_taxable")]
        public decimal? AmountRivalsaTaxable { get { return this.AmountRivalsaTaxableOption; } set { this.AmountRivalsaTaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountWithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountWithholdingTaxOption { get; }

        /// <summary>
        /// [Read Only] Issued document withholding tax amount (ritenuta d&#39;acconto).
        /// </summary>
        /// <value>[Read Only] Issued document withholding tax amount (ritenuta d&#39;acconto).</value>
        [JsonPropertyName("amount_withholding_tax")]
        public decimal? AmountWithholdingTax { get { return this.AmountWithholdingTaxOption; } }

        /// <summary>
        /// Used to track the state of AmountWithholdingTaxTaxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountWithholdingTaxTaxableOption { get; private set; }

        /// <summary>
        /// Issued document taxable withholding tax amount
        /// </summary>
        /// <value>Issued document taxable withholding tax amount</value>
        [JsonPropertyName("amount_withholding_tax_taxable")]
        public decimal? AmountWithholdingTaxTaxable { get { return this.AmountWithholdingTaxTaxableOption; } set { this.AmountWithholdingTaxTaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountOtherWithholdingTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountOtherWithholdingTaxOption { get; }

        /// <summary>
        /// [Read Only] Issued document other withholding tax amount (altra ritenuta)
        /// </summary>
        /// <value>[Read Only] Issued document other withholding tax amount (altra ritenuta)</value>
        [JsonPropertyName("amount_other_withholding_tax")]
        public decimal? AmountOtherWithholdingTax { get { return this.AmountOtherWithholdingTaxOption; } }

        /// <summary>
        /// Used to track the state of AmountOtherWithholdingTaxTaxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountOtherWithholdingTaxTaxableOption { get; private set; }

        /// <summary>
        /// Issued document taxable other withholding tax amount
        /// </summary>
        /// <value>Issued document taxable other withholding tax amount</value>
        [JsonPropertyName("amount_other_withholding_tax_taxable")]
        public decimal? AmountOtherWithholdingTaxTaxable { get { return this.AmountOtherWithholdingTaxTaxableOption; } set { this.AmountOtherWithholdingTaxTaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of AmountEnasarcoTaxable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> AmountEnasarcoTaxableOption { get; private set; }

        /// <summary>
        /// Issued document taxable enasarco amount
        /// </summary>
        /// <value>Issued document taxable enasarco amount</value>
        [JsonPropertyName("amount_enasarco_taxable")]
        public decimal? AmountEnasarcoTaxable { get { return this.AmountEnasarcoTaxableOption; } set { this.AmountEnasarcoTaxableOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of ExtraData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IssuedDocumentExtraData> ExtraDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExtraData
        /// </summary>
        [JsonPropertyName("extra_data")]
        public IssuedDocumentExtraData ExtraData { get { return this.ExtraDataOption; } set { this.ExtraDataOption = new Option<IssuedDocumentExtraData>(value); } }

        /// <summary>
        /// Used to track the state of SeenDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> SeenDateOption { get; private set; }

        /// <summary>
        /// Issued document seen date
        /// </summary>
        /// <value>Issued document seen date</value>
        [JsonPropertyName("seen_date")]
        public DateTimeOffset? SeenDate { get { return this.SeenDateOption; } set { this.SeenDateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of NextDueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> NextDueDateOption { get; private set; }

        /// <summary>
        /// Issued document date of the next not paid payment
        /// </summary>
        /// <value>Issued document date of the next not paid payment</value>
        [JsonPropertyName("next_due_date")]
        public DateTimeOffset? NextDueDate { get { return this.NextDueDateOption; } set { this.NextDueDateOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UrlOption { get; private set; }

        /// <summary>
        /// [Temporary] [Read Only] Issued document url of the document PDF file
        /// </summary>
        /// <value>[Temporary] [Read Only] Issued document url of the document PDF file</value>
        [JsonPropertyName("url")]
        public string Url { get { return this.UrlOption; } set { this.UrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DnUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DnUrlOption { get; private set; }

        /// <summary>
        /// [Temporary] [Read Only] Issued document url of the attached delivery note PDF file
        /// </summary>
        /// <value>[Temporary] [Read Only] Issued document url of the attached delivery note PDF file</value>
        [JsonPropertyName("dn_url")]
        public string DnUrl { get { return this.DnUrlOption; } set { this.DnUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AiUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AiUrlOption { get; private set; }

        /// <summary>
        /// [Temporary] [Read Only] Issued document url of the accompanying invoice PDF file
        /// </summary>
        /// <value>[Temporary] [Read Only] Issued document url of the accompanying invoice PDF file</value>
        [JsonPropertyName("ai_url")]
        public string AiUrl { get { return this.AiUrlOption; } set { this.AiUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AttachmentUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AttachmentUrlOption { get; }

        /// <summary>
        /// [Temporary] [Read Only] Issued document url of the attached file
        /// </summary>
        /// <value>[Temporary] [Read Only] Issued document url of the attached file</value>
        [JsonPropertyName("attachment_url")]
        public string AttachmentUrl { get { return this.AttachmentUrlOption; } }

        /// <summary>
        /// Used to track the state of AttachmentToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AttachmentTokenOption { get; private set; }

        /// <summary>
        /// [Write Only] Issued document attachment token returned by POST /issued_documents/attachment
        /// </summary>
        /// <value>[Write Only] Issued document attachment token returned by POST /issued_documents/attachment</value>
        [JsonPropertyName("attachment_token")]
        public string AttachmentToken { get { return this.AttachmentTokenOption; } set { this.AttachmentTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EiRaw
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object> EiRawOption { get; private set; }

        /// <summary>
        /// Issued document advanced raw attributes for e-invoices
        /// </summary>
        /// <value>Issued document advanced raw attributes for e-invoices</value>
        [JsonPropertyName("ei_raw")]
        public Object EiRaw { get { return this.EiRawOption; } set { this.EiRawOption = new Option<Object>(value); } }

        /// <summary>
        /// Used to track the state of PriceListId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PriceListIdOption { get; private set; }

        /// <summary>
        /// Price list id
        /// </summary>
        /// <value>Price list id</value>
        [JsonPropertyName("price_list_id")]
        public string PriceListId { get { return this.PriceListIdOption; } set { this.PriceListIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Locked
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LockedOption { get; private set; }

        /// <summary>
        /// Issued Document can&#39;t be edited
        /// </summary>
        /// <value>Issued Document can&#39;t be edited</value>
        [JsonPropertyName("locked")]
        public bool? Locked { get { return this.LockedOption; } set { this.LockedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CreatedAtOption { get; private set; }

        /// <summary>
        /// Issued document creation date
        /// </summary>
        /// <value>Issued document creation date</value>
        [JsonPropertyName("created_at")]
        public string CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Issued document last update date
        /// </summary>
        /// <value>Issued document last update date</value>
        [JsonPropertyName("updated_at")]
        public string UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Numeration: ").Append(Numeration).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  VisibleSubject: ").Append(VisibleSubject).Append("\n");
            sb.Append("  RcCenter: ").Append(RcCenter).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Rivalsa: ").Append(Rivalsa).Append("\n");
            sb.Append("  Cassa: ").Append(Cassa).Append("\n");
            sb.Append("  AmountCassa: ").Append(AmountCassa).Append("\n");
            sb.Append("  CassaTaxable: ").Append(CassaTaxable).Append("\n");
            sb.Append("  AmountCassaTaxable: ").Append(AmountCassaTaxable).Append("\n");
            sb.Append("  Cassa2: ").Append(Cassa2).Append("\n");
            sb.Append("  AmountCassa2: ").Append(AmountCassa2).Append("\n");
            sb.Append("  Cassa2Taxable: ").Append(Cassa2Taxable).Append("\n");
            sb.Append("  AmountCassa2Taxable: ").Append(AmountCassa2Taxable).Append("\n");
            sb.Append("  GlobalCassaTaxable: ").Append(GlobalCassaTaxable).Append("\n");
            sb.Append("  AmountGlobalCassaTaxable: ").Append(AmountGlobalCassaTaxable).Append("\n");
            sb.Append("  WithholdingTax: ").Append(WithholdingTax).Append("\n");
            sb.Append("  WithholdingTaxTaxable: ").Append(WithholdingTaxTaxable).Append("\n");
            sb.Append("  OtherWithholdingTax: ").Append(OtherWithholdingTax).Append("\n");
            sb.Append("  StampDuty: ").Append(StampDuty).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  UseSplitPayment: ").Append(UseSplitPayment).Append("\n");
            sb.Append("  UseGrossPrices: ").Append(UseGrossPrices).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  EiData: ").Append(EiData).Append("\n");
            sb.Append("  EiCassaType: ").Append(EiCassaType).Append("\n");
            sb.Append("  EiCassa2Type: ").Append(EiCassa2Type).Append("\n");
            sb.Append("  EiWithholdingTaxCausal: ").Append(EiWithholdingTaxCausal).Append("\n");
            sb.Append("  EiOtherWithholdingTaxType: ").Append(EiOtherWithholdingTaxType).Append("\n");
            sb.Append("  EiOtherWithholdingTaxCausal: ").Append(EiOtherWithholdingTaxCausal).Append("\n");
            sb.Append("  ItemsList: ").Append(ItemsList).Append("\n");
            sb.Append("  PaymentsList: ").Append(PaymentsList).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  DeliveryNoteTemplate: ").Append(DeliveryNoteTemplate).Append("\n");
            sb.Append("  AccInvTemplate: ").Append(AccInvTemplate).Append("\n");
            sb.Append("  HMargins: ").Append(HMargins).Append("\n");
            sb.Append("  VMargins: ").Append(VMargins).Append("\n");
            sb.Append("  ShowPayments: ").Append(ShowPayments).Append("\n");
            sb.Append("  ShowPaymentMethod: ").Append(ShowPaymentMethod).Append("\n");
            sb.Append("  ShowTotals: ").Append(ShowTotals).Append("\n");
            sb.Append("  ShowNotificationButton: ").Append(ShowNotificationButton).Append("\n");
            sb.Append("  ShowTspayButton: ").Append(ShowTspayButton).Append("\n");
            sb.Append("  DeliveryNote: ").Append(DeliveryNote).Append("\n");
            sb.Append("  AccompanyingInvoice: ").Append(AccompanyingInvoice).Append("\n");
            sb.Append("  DnNumber: ").Append(DnNumber).Append("\n");
            sb.Append("  DnDate: ").Append(DnDate).Append("\n");
            sb.Append("  DnAiPackagesNumber: ").Append(DnAiPackagesNumber).Append("\n");
            sb.Append("  DnAiWeight: ").Append(DnAiWeight).Append("\n");
            sb.Append("  DnAiCausal: ").Append(DnAiCausal).Append("\n");
            sb.Append("  DnAiDestination: ").Append(DnAiDestination).Append("\n");
            sb.Append("  DnAiTransporter: ").Append(DnAiTransporter).Append("\n");
            sb.Append("  DnAiNotes: ").Append(DnAiNotes).Append("\n");
            sb.Append("  IsMarked: ").Append(IsMarked).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  AmountDueDiscount: ").Append(AmountDueDiscount).Append("\n");
            sb.Append("  AmountRivalsa: ").Append(AmountRivalsa).Append("\n");
            sb.Append("  AmountRivalsaTaxable: ").Append(AmountRivalsaTaxable).Append("\n");
            sb.Append("  AmountWithholdingTax: ").Append(AmountWithholdingTax).Append("\n");
            sb.Append("  AmountWithholdingTaxTaxable: ").Append(AmountWithholdingTaxTaxable).Append("\n");
            sb.Append("  AmountOtherWithholdingTax: ").Append(AmountOtherWithholdingTax).Append("\n");
            sb.Append("  AmountOtherWithholdingTaxTaxable: ").Append(AmountOtherWithholdingTaxTaxable).Append("\n");
            sb.Append("  AmountEnasarcoTaxable: ").Append(AmountEnasarcoTaxable).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("  SeenDate: ").Append(SeenDate).Append("\n");
            sb.Append("  NextDueDate: ").Append(NextDueDate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  DnUrl: ").Append(DnUrl).Append("\n");
            sb.Append("  AiUrl: ").Append(AiUrl).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("  AttachmentToken: ").Append(AttachmentToken).Append("\n");
            sb.Append("  EiRaw: ").Append(EiRaw).Append("\n");
            sb.Append("  EiStatus: ").Append(EiStatus).Append("\n");
            sb.Append("  PriceListId: ").Append(PriceListId).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocument);
        }

        /// <summary>
        /// Returns true if IssuedDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    AmountCassa == input.AmountCassa ||
                    AmountCassa.Equals(input.AmountCassa)
                ) && 
                (
                    AmountCassa2 == input.AmountCassa2 ||
                    AmountCassa2.Equals(input.AmountCassa2)
                ) && 
                (
                    AmountNet == input.AmountNet ||
                    AmountNet.Equals(input.AmountNet)
                ) && 
                (
                    AmountVat == input.AmountVat ||
                    AmountVat.Equals(input.AmountVat)
                ) && 
                (
                    AmountGross == input.AmountGross ||
                    AmountGross.Equals(input.AmountGross)
                ) && 
                (
                    AmountRivalsa == input.AmountRivalsa ||
                    AmountRivalsa.Equals(input.AmountRivalsa)
                ) && 
                (
                    AmountWithholdingTax == input.AmountWithholdingTax ||
                    AmountWithholdingTax.Equals(input.AmountWithholdingTax)
                ) && 
                (
                    AmountOtherWithholdingTax == input.AmountOtherWithholdingTax ||
                    AmountOtherWithholdingTax.Equals(input.AmountOtherWithholdingTax)
                ) && 
                (
                    AttachmentUrl == input.AttachmentUrl ||
                    (AttachmentUrl != null &&
                    AttachmentUrl.Equals(input.AttachmentUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (AmountCassa != null)
                    hashCode = (hashCode * 59) + AmountCassa.GetHashCode();

                if (AmountCassa2 != null)
                    hashCode = (hashCode * 59) + AmountCassa2.GetHashCode();

                if (AmountNet != null)
                    hashCode = (hashCode * 59) + AmountNet.GetHashCode();

                if (AmountVat != null)
                    hashCode = (hashCode * 59) + AmountVat.GetHashCode();

                if (AmountGross != null)
                    hashCode = (hashCode * 59) + AmountGross.GetHashCode();

                if (AmountRivalsa != null)
                    hashCode = (hashCode * 59) + AmountRivalsa.GetHashCode();

                if (AmountWithholdingTax != null)
                    hashCode = (hashCode * 59) + AmountWithholdingTax.GetHashCode();

                if (AmountOtherWithholdingTax != null)
                    hashCode = (hashCode * 59) + AmountOtherWithholdingTax.GetHashCode();

                if (AttachmentUrl != null)
                    hashCode = (hashCode * 59) + AttachmentUrl.GetHashCode();


                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocument" />
    /// </summary>
    public class IssuedDocumentJsonConverter : JsonConverter<IssuedDocument>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize DnDate
        /// </summary>
        public static string DnDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize SeenDate
        /// </summary>
        public static string SeenDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize NextDueDate
        /// </summary>
        public static string NextDueDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="IssuedDocument" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocument Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<Entity> entity = default;
            Option<IssuedDocumentType?> type = default;
            Option<int?> number = default;
            Option<string> numeration = default;
            Option<DateTimeOffset?> date = default;
            Option<int?> year = default;
            Option<Currency> currency = default;
            Option<Language> language = default;
            Option<string> subject = default;
            Option<string> visibleSubject = default;
            Option<string> rcCenter = default;
            Option<string> notes = default;
            Option<decimal?> rivalsa = default;
            Option<decimal?> cassa = default;
            Option<decimal?> amountCassa = default;
            Option<decimal?> cassaTaxable = default;
            Option<decimal?> amountCassaTaxable = default;
            Option<decimal?> cassa2 = default;
            Option<decimal?> amountCassa2 = default;
            Option<decimal?> cassa2Taxable = default;
            Option<decimal?> amountCassa2Taxable = default;
            Option<decimal?> globalCassaTaxable = default;
            Option<decimal?> amountGlobalCassaTaxable = default;
            Option<decimal?> withholdingTax = default;
            Option<decimal?> withholdingTaxTaxable = default;
            Option<decimal?> otherWithholdingTax = default;
            Option<decimal?> stampDuty = default;
            Option<PaymentMethod> paymentMethod = default;
            Option<bool?> useSplitPayment = default;
            Option<bool?> useGrossPrices = default;
            Option<bool?> eInvoice = default;
            Option<IssuedDocumentEiData> eiData = default;
            Option<string> eiCassaType = default;
            Option<string> eiCassa2Type = default;
            Option<string> eiWithholdingTaxCausal = default;
            Option<string> eiOtherWithholdingTaxType = default;
            Option<string> eiOtherWithholdingTaxCausal = default;
            Option<List<IssuedDocumentItemsListItem>> itemsList = default;
            Option<List<IssuedDocumentPaymentsListItem>> paymentsList = default;
            Option<DocumentTemplate> template = default;
            Option<DocumentTemplate> deliveryNoteTemplate = default;
            Option<DocumentTemplate> accInvTemplate = default;
            Option<int?> hMargins = default;
            Option<int?> vMargins = default;
            Option<bool?> showPayments = default;
            Option<bool?> showPaymentMethod = default;
            Option<ShowTotalsMode?> showTotals = default;
            Option<bool?> showNotificationButton = default;
            Option<bool?> showTspayButton = default;
            Option<bool?> deliveryNote = default;
            Option<bool?> accompanyingInvoice = default;
            Option<int?> dnNumber = default;
            Option<DateTimeOffset?> dnDate = default;
            Option<string> dnAiPackagesNumber = default;
            Option<string> dnAiWeight = default;
            Option<string> dnAiCausal = default;
            Option<string> dnAiDestination = default;
            Option<string> dnAiTransporter = default;
            Option<string> dnAiNotes = default;
            Option<bool?> isMarked = default;
            Option<decimal?> amountNet = default;
            Option<decimal?> amountVat = default;
            Option<decimal?> amountGross = default;
            Option<decimal?> amountDueDiscount = default;
            Option<decimal?> amountRivalsa = default;
            Option<decimal?> amountRivalsaTaxable = default;
            Option<decimal?> amountWithholdingTax = default;
            Option<decimal?> amountWithholdingTaxTaxable = default;
            Option<decimal?> amountOtherWithholdingTax = default;
            Option<decimal?> amountOtherWithholdingTaxTaxable = default;
            Option<decimal?> amountEnasarcoTaxable = default;
            Option<IssuedDocumentExtraData> extraData = default;
            Option<DateTimeOffset?> seenDate = default;
            Option<DateTimeOffset?> nextDueDate = default;
            Option<string> url = default;
            Option<string> dnUrl = default;
            Option<string> aiUrl = default;
            Option<string> attachmentUrl = default;
            Option<string> attachmentToken = default;
            Option<Object> eiRaw = default;
            Option<IssuedDocument.EiStatusEnum?> eiStatus = default;
            Option<string> priceListId = default;
            Option<bool?> locked = default;
            Option<string> createdAt = default;
            Option<string> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "entity":
                            entity = new Option<Entity>(JsonSerializer.Deserialize<Entity>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<IssuedDocumentType?>(IssuedDocumentTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "number":
                            number = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "numeration":
                            numeration = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "date":
                            date = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "year":
                            year = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "currency":
                            currency = new Option<Currency>(JsonSerializer.Deserialize<Currency>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "language":
                            language = new Option<Language>(JsonSerializer.Deserialize<Language>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "visible_subject":
                            visibleSubject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rc_center":
                            rcCenter = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "notes":
                            notes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rivalsa":
                            rivalsa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "cassa":
                            cassa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_cassa":
                            amountCassa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "cassa_taxable":
                            cassaTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_cassa_taxable":
                            amountCassaTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "cassa2":
                            cassa2 = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_cassa2":
                            amountCassa2 = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "cassa2_taxable":
                            cassa2Taxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_cassa2_taxable":
                            amountCassa2Taxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "global_cassa_taxable":
                            globalCassaTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_global_cassa_taxable":
                            amountGlobalCassaTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "withholding_tax":
                            withholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "withholding_tax_taxable":
                            withholdingTaxTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "other_withholding_tax":
                            otherWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "stamp_duty":
                            stampDuty = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "payment_method":
                            paymentMethod = new Option<PaymentMethod>(JsonSerializer.Deserialize<PaymentMethod>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "use_split_payment":
                            useSplitPayment = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "use_gross_prices":
                            useGrossPrices = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "e_invoice":
                            eInvoice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ei_data":
                            eiData = new Option<IssuedDocumentEiData>(JsonSerializer.Deserialize<IssuedDocumentEiData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ei_cassa_type":
                            eiCassaType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ei_cassa2_type":
                            eiCassa2Type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ei_withholding_tax_causal":
                            eiWithholdingTaxCausal = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ei_other_withholding_tax_type":
                            eiOtherWithholdingTaxType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ei_other_withholding_tax_causal":
                            eiOtherWithholdingTaxCausal = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "items_list":
                            itemsList = new Option<List<IssuedDocumentItemsListItem>>(JsonSerializer.Deserialize<List<IssuedDocumentItemsListItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payments_list":
                            paymentsList = new Option<List<IssuedDocumentPaymentsListItem>>(JsonSerializer.Deserialize<List<IssuedDocumentPaymentsListItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "template":
                            template = new Option<DocumentTemplate>(JsonSerializer.Deserialize<DocumentTemplate>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "delivery_note_template":
                            deliveryNoteTemplate = new Option<DocumentTemplate>(JsonSerializer.Deserialize<DocumentTemplate>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "acc_inv_template":
                            accInvTemplate = new Option<DocumentTemplate>(JsonSerializer.Deserialize<DocumentTemplate>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "h_margins":
                            hMargins = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "v_margins":
                            vMargins = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "show_payments":
                            showPayments = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "show_payment_method":
                            showPaymentMethod = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "show_totals":
                            string showTotalsRawValue = utf8JsonReader.GetString();
                            if (showTotalsRawValue != null)
                                showTotals = new Option<ShowTotalsMode?>(ShowTotalsModeValueConverter.FromStringOrDefault(showTotalsRawValue));
                            break;
                        case "show_notification_button":
                            showNotificationButton = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "show_tspay_button":
                            showTspayButton = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "delivery_note":
                            deliveryNote = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "accompanying_invoice":
                            accompanyingInvoice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "dn_number":
                            dnNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "dn_date":
                            dnDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dn_ai_packages_number":
                            dnAiPackagesNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dn_ai_weight":
                            dnAiWeight = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dn_ai_causal":
                            dnAiCausal = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dn_ai_destination":
                            dnAiDestination = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dn_ai_transporter":
                            dnAiTransporter = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dn_ai_notes":
                            dnAiNotes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "is_marked":
                            isMarked = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "amount_net":
                            amountNet = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_vat":
                            amountVat = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_gross":
                            amountGross = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_due_discount":
                            amountDueDiscount = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_rivalsa":
                            amountRivalsa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_rivalsa_taxable":
                            amountRivalsaTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_withholding_tax":
                            amountWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_withholding_tax_taxable":
                            amountWithholdingTaxTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_other_withholding_tax":
                            amountOtherWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_other_withholding_tax_taxable":
                            amountOtherWithholdingTaxTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_enasarco_taxable":
                            amountEnasarcoTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "extra_data":
                            extraData = new Option<IssuedDocumentExtraData>(JsonSerializer.Deserialize<IssuedDocumentExtraData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "seen_date":
                            seenDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "next_due_date":
                            nextDueDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "url":
                            url = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dn_url":
                            dnUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ai_url":
                            aiUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "attachment_url":
                            attachmentUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "attachment_token":
                            attachmentToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ei_raw":
                            eiRaw = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ei_status":
                            string eiStatusRawValue = utf8JsonReader.GetString();
                            if (eiStatusRawValue != null)
                                eiStatus = new Option<IssuedDocument.EiStatusEnum?>(IssuedDocument.EiStatusEnumFromStringOrDefault(eiStatusRawValue));
                            break;
                        case "price_list_id":
                            priceListId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "locked":
                            locked = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "created_at":
                            createdAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (entity.IsSet && entity.Value == null)
                throw new ArgumentNullException(nameof(entity), "Property is not nullable for class IssuedDocument.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class IssuedDocument.");

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class IssuedDocument.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class IssuedDocument.");

            if (paymentMethod.IsSet && paymentMethod.Value == null)
                throw new ArgumentNullException(nameof(paymentMethod), "Property is not nullable for class IssuedDocument.");

            if (template.IsSet && template.Value == null)
                throw new ArgumentNullException(nameof(template), "Property is not nullable for class IssuedDocument.");

            if (deliveryNoteTemplate.IsSet && deliveryNoteTemplate.Value == null)
                throw new ArgumentNullException(nameof(deliveryNoteTemplate), "Property is not nullable for class IssuedDocument.");

            if (accInvTemplate.IsSet && accInvTemplate.Value == null)
                throw new ArgumentNullException(nameof(accInvTemplate), "Property is not nullable for class IssuedDocument.");

            if (showTotals.IsSet && showTotals.Value == null)
                throw new ArgumentNullException(nameof(showTotals), "Property is not nullable for class IssuedDocument.");

            return new IssuedDocument(id, entity, type, number, numeration, date, year, currency, language, subject, visibleSubject, rcCenter, notes, rivalsa, cassa, amountCassa, cassaTaxable, amountCassaTaxable, cassa2, amountCassa2, cassa2Taxable, amountCassa2Taxable, globalCassaTaxable, amountGlobalCassaTaxable, withholdingTax, withholdingTaxTaxable, otherWithholdingTax, stampDuty, paymentMethod, useSplitPayment, useGrossPrices, eInvoice, eiData, eiCassaType, eiCassa2Type, eiWithholdingTaxCausal, eiOtherWithholdingTaxType, eiOtherWithholdingTaxCausal, itemsList, paymentsList, template, deliveryNoteTemplate, accInvTemplate, hMargins, vMargins, showPayments, showPaymentMethod, showTotals, showNotificationButton, showTspayButton, deliveryNote, accompanyingInvoice, dnNumber, dnDate, dnAiPackagesNumber, dnAiWeight, dnAiCausal, dnAiDestination, dnAiTransporter, dnAiNotes, isMarked, amountNet, amountVat, amountGross, amountDueDiscount, amountRivalsa, amountRivalsaTaxable, amountWithholdingTax, amountWithholdingTaxTaxable, amountOtherWithholdingTax, amountOtherWithholdingTaxTaxable, amountEnasarcoTaxable, extraData, seenDate, nextDueDate, url, dnUrl, aiUrl, attachmentUrl, attachmentToken, eiRaw, eiStatus, priceListId, locked, createdAt, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocument" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocument"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocument issuedDocument, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocument, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocument" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocument"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocument issuedDocument, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocument.EntityOption.IsSet && issuedDocument.Entity == null)
                throw new ArgumentNullException(nameof(issuedDocument.Entity), "Property is required for class IssuedDocument.");

            if (issuedDocument.CurrencyOption.IsSet && issuedDocument.Currency == null)
                throw new ArgumentNullException(nameof(issuedDocument.Currency), "Property is required for class IssuedDocument.");

            if (issuedDocument.LanguageOption.IsSet && issuedDocument.Language == null)
                throw new ArgumentNullException(nameof(issuedDocument.Language), "Property is required for class IssuedDocument.");

            if (issuedDocument.PaymentMethodOption.IsSet && issuedDocument.PaymentMethod == null)
                throw new ArgumentNullException(nameof(issuedDocument.PaymentMethod), "Property is required for class IssuedDocument.");

            if (issuedDocument.TemplateOption.IsSet && issuedDocument.Template == null)
                throw new ArgumentNullException(nameof(issuedDocument.Template), "Property is required for class IssuedDocument.");

            if (issuedDocument.DeliveryNoteTemplateOption.IsSet && issuedDocument.DeliveryNoteTemplate == null)
                throw new ArgumentNullException(nameof(issuedDocument.DeliveryNoteTemplate), "Property is required for class IssuedDocument.");

            if (issuedDocument.AccInvTemplateOption.IsSet && issuedDocument.AccInvTemplate == null)
                throw new ArgumentNullException(nameof(issuedDocument.AccInvTemplate), "Property is required for class IssuedDocument.");

            if (issuedDocument.IdOption.IsSet)
                if (issuedDocument.IdOption.Value != null)
                    writer.WriteNumber("id", issuedDocument.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (issuedDocument.EntityOption.IsSet)
            {
                writer.WritePropertyName("entity");
                JsonSerializer.Serialize(writer, issuedDocument.Entity, jsonSerializerOptions);
            }
            if (issuedDocument.TypeOption.IsSet)
            {
                var typeRawValue = IssuedDocumentTypeValueConverter.ToJsonValue(issuedDocument.Type.Value);
                writer.WriteString("type", typeRawValue);
            }
            if (issuedDocument.NumberOption.IsSet)
                if (issuedDocument.NumberOption.Value != null)
                    writer.WriteNumber("number", issuedDocument.NumberOption.Value.Value);
                else
                    writer.WriteNull("number");

            if (issuedDocument.NumerationOption.IsSet)
                if (issuedDocument.NumerationOption.Value != null)
                    writer.WriteString("numeration", issuedDocument.Numeration);
                else
                    writer.WriteNull("numeration");

            if (issuedDocument.DateOption.IsSet)
                if (issuedDocument.DateOption.Value != null)
                    writer.WriteString("date", issuedDocument.DateOption.Value.Value.ToString(DateFormat));
                else
                    writer.WriteNull("date");

            if (issuedDocument.YearOption.IsSet)
                if (issuedDocument.YearOption.Value != null)
                    writer.WriteNumber("year", issuedDocument.YearOption.Value.Value);
                else
                    writer.WriteNull("year");

            if (issuedDocument.CurrencyOption.IsSet)
            {
                writer.WritePropertyName("currency");
                JsonSerializer.Serialize(writer, issuedDocument.Currency, jsonSerializerOptions);
            }
            if (issuedDocument.LanguageOption.IsSet)
            {
                writer.WritePropertyName("language");
                JsonSerializer.Serialize(writer, issuedDocument.Language, jsonSerializerOptions);
            }
            if (issuedDocument.SubjectOption.IsSet)
                if (issuedDocument.SubjectOption.Value != null)
                    writer.WriteString("subject", issuedDocument.Subject);
                else
                    writer.WriteNull("subject");

            if (issuedDocument.VisibleSubjectOption.IsSet)
                if (issuedDocument.VisibleSubjectOption.Value != null)
                    writer.WriteString("visible_subject", issuedDocument.VisibleSubject);
                else
                    writer.WriteNull("visible_subject");

            if (issuedDocument.RcCenterOption.IsSet)
                if (issuedDocument.RcCenterOption.Value != null)
                    writer.WriteString("rc_center", issuedDocument.RcCenter);
                else
                    writer.WriteNull("rc_center");

            if (issuedDocument.NotesOption.IsSet)
                if (issuedDocument.NotesOption.Value != null)
                    writer.WriteString("notes", issuedDocument.Notes);
                else
                    writer.WriteNull("notes");

            if (issuedDocument.RivalsaOption.IsSet)
                if (issuedDocument.RivalsaOption.Value != null)
                    writer.WriteNumber("rivalsa", issuedDocument.RivalsaOption.Value.Value);
                else
                    writer.WriteNull("rivalsa");

            if (issuedDocument.CassaOption.IsSet)
                if (issuedDocument.CassaOption.Value != null)
                    writer.WriteNumber("cassa", issuedDocument.CassaOption.Value.Value);
                else
                    writer.WriteNull("cassa");

            if (issuedDocument.AmountCassaOption.IsSet)
                if (issuedDocument.AmountCassaOption.Value != null)
                    writer.WriteNumber("amount_cassa", issuedDocument.AmountCassaOption.Value.Value);
                else
                    writer.WriteNull("amount_cassa");

            if (issuedDocument.CassaTaxableOption.IsSet)
                if (issuedDocument.CassaTaxableOption.Value != null)
                    writer.WriteNumber("cassa_taxable", issuedDocument.CassaTaxableOption.Value.Value);
                else
                    writer.WriteNull("cassa_taxable");

            if (issuedDocument.AmountCassaTaxableOption.IsSet)
                if (issuedDocument.AmountCassaTaxableOption.Value != null)
                    writer.WriteNumber("amount_cassa_taxable", issuedDocument.AmountCassaTaxableOption.Value.Value);
                else
                    writer.WriteNull("amount_cassa_taxable");

            if (issuedDocument.Cassa2Option.IsSet)
                if (issuedDocument.Cassa2Option.Value != null)
                    writer.WriteNumber("cassa2", issuedDocument.Cassa2Option.Value.Value);
                else
                    writer.WriteNull("cassa2");

            if (issuedDocument.AmountCassa2Option.IsSet)
                if (issuedDocument.AmountCassa2Option.Value != null)
                    writer.WriteNumber("amount_cassa2", issuedDocument.AmountCassa2Option.Value.Value);
                else
                    writer.WriteNull("amount_cassa2");

            if (issuedDocument.Cassa2TaxableOption.IsSet)
                if (issuedDocument.Cassa2TaxableOption.Value != null)
                    writer.WriteNumber("cassa2_taxable", issuedDocument.Cassa2TaxableOption.Value.Value);
                else
                    writer.WriteNull("cassa2_taxable");

            if (issuedDocument.AmountCassa2TaxableOption.IsSet)
                if (issuedDocument.AmountCassa2TaxableOption.Value != null)
                    writer.WriteNumber("amount_cassa2_taxable", issuedDocument.AmountCassa2TaxableOption.Value.Value);
                else
                    writer.WriteNull("amount_cassa2_taxable");

            if (issuedDocument.GlobalCassaTaxableOption.IsSet)
                if (issuedDocument.GlobalCassaTaxableOption.Value != null)
                    writer.WriteNumber("global_cassa_taxable", issuedDocument.GlobalCassaTaxableOption.Value.Value);
                else
                    writer.WriteNull("global_cassa_taxable");

            if (issuedDocument.AmountGlobalCassaTaxableOption.IsSet)
                if (issuedDocument.AmountGlobalCassaTaxableOption.Value != null)
                    writer.WriteNumber("amount_global_cassa_taxable", issuedDocument.AmountGlobalCassaTaxableOption.Value.Value);
                else
                    writer.WriteNull("amount_global_cassa_taxable");

            if (issuedDocument.WithholdingTaxOption.IsSet)
                if (issuedDocument.WithholdingTaxOption.Value != null)
                    writer.WriteNumber("withholding_tax", issuedDocument.WithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("withholding_tax");

            if (issuedDocument.WithholdingTaxTaxableOption.IsSet)
                if (issuedDocument.WithholdingTaxTaxableOption.Value != null)
                    writer.WriteNumber("withholding_tax_taxable", issuedDocument.WithholdingTaxTaxableOption.Value.Value);
                else
                    writer.WriteNull("withholding_tax_taxable");

            if (issuedDocument.OtherWithholdingTaxOption.IsSet)
                if (issuedDocument.OtherWithholdingTaxOption.Value != null)
                    writer.WriteNumber("other_withholding_tax", issuedDocument.OtherWithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("other_withholding_tax");

            if (issuedDocument.StampDutyOption.IsSet)
                if (issuedDocument.StampDutyOption.Value != null)
                    writer.WriteNumber("stamp_duty", issuedDocument.StampDutyOption.Value.Value);
                else
                    writer.WriteNull("stamp_duty");

            if (issuedDocument.PaymentMethodOption.IsSet)
            {
                writer.WritePropertyName("payment_method");
                JsonSerializer.Serialize(writer, issuedDocument.PaymentMethod, jsonSerializerOptions);
            }
            if (issuedDocument.UseSplitPaymentOption.IsSet)
                if (issuedDocument.UseSplitPaymentOption.Value != null)
                    writer.WriteBoolean("use_split_payment", issuedDocument.UseSplitPaymentOption.Value.Value);
                else
                    writer.WriteNull("use_split_payment");

            if (issuedDocument.UseGrossPricesOption.IsSet)
                if (issuedDocument.UseGrossPricesOption.Value != null)
                    writer.WriteBoolean("use_gross_prices", issuedDocument.UseGrossPricesOption.Value.Value);
                else
                    writer.WriteNull("use_gross_prices");

            if (issuedDocument.EInvoiceOption.IsSet)
                if (issuedDocument.EInvoiceOption.Value != null)
                    writer.WriteBoolean("e_invoice", issuedDocument.EInvoiceOption.Value.Value);
                else
                    writer.WriteNull("e_invoice");

            if (issuedDocument.EiDataOption.IsSet)
                if (issuedDocument.EiDataOption.Value != null)
                {
                    writer.WritePropertyName("ei_data");
                    JsonSerializer.Serialize(writer, issuedDocument.EiData, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ei_data");
            if (issuedDocument.EiCassaTypeOption.IsSet)
                if (issuedDocument.EiCassaTypeOption.Value != null)
                    writer.WriteString("ei_cassa_type", issuedDocument.EiCassaType);
                else
                    writer.WriteNull("ei_cassa_type");

            if (issuedDocument.EiCassa2TypeOption.IsSet)
                if (issuedDocument.EiCassa2TypeOption.Value != null)
                    writer.WriteString("ei_cassa2_type", issuedDocument.EiCassa2Type);
                else
                    writer.WriteNull("ei_cassa2_type");

            if (issuedDocument.EiWithholdingTaxCausalOption.IsSet)
                if (issuedDocument.EiWithholdingTaxCausalOption.Value != null)
                    writer.WriteString("ei_withholding_tax_causal", issuedDocument.EiWithholdingTaxCausal);
                else
                    writer.WriteNull("ei_withholding_tax_causal");

            if (issuedDocument.EiOtherWithholdingTaxTypeOption.IsSet)
                if (issuedDocument.EiOtherWithholdingTaxTypeOption.Value != null)
                    writer.WriteString("ei_other_withholding_tax_type", issuedDocument.EiOtherWithholdingTaxType);
                else
                    writer.WriteNull("ei_other_withholding_tax_type");

            if (issuedDocument.EiOtherWithholdingTaxCausalOption.IsSet)
                if (issuedDocument.EiOtherWithholdingTaxCausalOption.Value != null)
                    writer.WriteString("ei_other_withholding_tax_causal", issuedDocument.EiOtherWithholdingTaxCausal);
                else
                    writer.WriteNull("ei_other_withholding_tax_causal");

            if (issuedDocument.ItemsListOption.IsSet)
                if (issuedDocument.ItemsListOption.Value != null)
                {
                    writer.WritePropertyName("items_list");
                    JsonSerializer.Serialize(writer, issuedDocument.ItemsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items_list");
            if (issuedDocument.PaymentsListOption.IsSet)
                if (issuedDocument.PaymentsListOption.Value != null)
                {
                    writer.WritePropertyName("payments_list");
                    JsonSerializer.Serialize(writer, issuedDocument.PaymentsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payments_list");
            if (issuedDocument.TemplateOption.IsSet)
            {
                writer.WritePropertyName("template");
                JsonSerializer.Serialize(writer, issuedDocument.Template, jsonSerializerOptions);
            }
            if (issuedDocument.DeliveryNoteTemplateOption.IsSet)
            {
                writer.WritePropertyName("delivery_note_template");
                JsonSerializer.Serialize(writer, issuedDocument.DeliveryNoteTemplate, jsonSerializerOptions);
            }
            if (issuedDocument.AccInvTemplateOption.IsSet)
            {
                writer.WritePropertyName("acc_inv_template");
                JsonSerializer.Serialize(writer, issuedDocument.AccInvTemplate, jsonSerializerOptions);
            }
            if (issuedDocument.HMarginsOption.IsSet)
                if (issuedDocument.HMarginsOption.Value != null)
                    writer.WriteNumber("h_margins", issuedDocument.HMarginsOption.Value.Value);
                else
                    writer.WriteNull("h_margins");

            if (issuedDocument.VMarginsOption.IsSet)
                if (issuedDocument.VMarginsOption.Value != null)
                    writer.WriteNumber("v_margins", issuedDocument.VMarginsOption.Value.Value);
                else
                    writer.WriteNull("v_margins");

            if (issuedDocument.ShowPaymentsOption.IsSet)
                if (issuedDocument.ShowPaymentsOption.Value != null)
                    writer.WriteBoolean("show_payments", issuedDocument.ShowPaymentsOption.Value.Value);
                else
                    writer.WriteNull("show_payments");

            if (issuedDocument.ShowPaymentMethodOption.IsSet)
                if (issuedDocument.ShowPaymentMethodOption.Value != null)
                    writer.WriteBoolean("show_payment_method", issuedDocument.ShowPaymentMethodOption.Value.Value);
                else
                    writer.WriteNull("show_payment_method");

            if (issuedDocument.ShowTotalsOption.IsSet)
            {
                var showTotalsRawValue = ShowTotalsModeValueConverter.ToJsonValue(issuedDocument.ShowTotals.Value);
                writer.WriteString("show_totals", showTotalsRawValue);
            }
            if (issuedDocument.ShowNotificationButtonOption.IsSet)
                if (issuedDocument.ShowNotificationButtonOption.Value != null)
                    writer.WriteBoolean("show_notification_button", issuedDocument.ShowNotificationButtonOption.Value.Value);
                else
                    writer.WriteNull("show_notification_button");

            if (issuedDocument.ShowTspayButtonOption.IsSet)
                if (issuedDocument.ShowTspayButtonOption.Value != null)
                    writer.WriteBoolean("show_tspay_button", issuedDocument.ShowTspayButtonOption.Value.Value);
                else
                    writer.WriteNull("show_tspay_button");

            if (issuedDocument.DeliveryNoteOption.IsSet)
                if (issuedDocument.DeliveryNoteOption.Value != null)
                    writer.WriteBoolean("delivery_note", issuedDocument.DeliveryNoteOption.Value.Value);
                else
                    writer.WriteNull("delivery_note");

            if (issuedDocument.AccompanyingInvoiceOption.IsSet)
                if (issuedDocument.AccompanyingInvoiceOption.Value != null)
                    writer.WriteBoolean("accompanying_invoice", issuedDocument.AccompanyingInvoiceOption.Value.Value);
                else
                    writer.WriteNull("accompanying_invoice");

            if (issuedDocument.DnNumberOption.IsSet)
                if (issuedDocument.DnNumberOption.Value != null)
                    writer.WriteNumber("dn_number", issuedDocument.DnNumberOption.Value.Value);
                else
                    writer.WriteNull("dn_number");

            if (issuedDocument.DnDateOption.IsSet)
                if (issuedDocument.DnDateOption.Value != null)
                    writer.WriteString("dn_date", issuedDocument.DnDateOption.Value.Value.ToString(DnDateFormat));
                else
                    writer.WriteNull("dn_date");

            if (issuedDocument.DnAiPackagesNumberOption.IsSet)
                if (issuedDocument.DnAiPackagesNumberOption.Value != null)
                    writer.WriteString("dn_ai_packages_number", issuedDocument.DnAiPackagesNumber);
                else
                    writer.WriteNull("dn_ai_packages_number");

            if (issuedDocument.DnAiWeightOption.IsSet)
                if (issuedDocument.DnAiWeightOption.Value != null)
                    writer.WriteString("dn_ai_weight", issuedDocument.DnAiWeight);
                else
                    writer.WriteNull("dn_ai_weight");

            if (issuedDocument.DnAiCausalOption.IsSet)
                if (issuedDocument.DnAiCausalOption.Value != null)
                    writer.WriteString("dn_ai_causal", issuedDocument.DnAiCausal);
                else
                    writer.WriteNull("dn_ai_causal");

            if (issuedDocument.DnAiDestinationOption.IsSet)
                if (issuedDocument.DnAiDestinationOption.Value != null)
                    writer.WriteString("dn_ai_destination", issuedDocument.DnAiDestination);
                else
                    writer.WriteNull("dn_ai_destination");

            if (issuedDocument.DnAiTransporterOption.IsSet)
                if (issuedDocument.DnAiTransporterOption.Value != null)
                    writer.WriteString("dn_ai_transporter", issuedDocument.DnAiTransporter);
                else
                    writer.WriteNull("dn_ai_transporter");

            if (issuedDocument.DnAiNotesOption.IsSet)
                if (issuedDocument.DnAiNotesOption.Value != null)
                    writer.WriteString("dn_ai_notes", issuedDocument.DnAiNotes);
                else
                    writer.WriteNull("dn_ai_notes");

            if (issuedDocument.IsMarkedOption.IsSet)
                if (issuedDocument.IsMarkedOption.Value != null)
                    writer.WriteBoolean("is_marked", issuedDocument.IsMarkedOption.Value.Value);
                else
                    writer.WriteNull("is_marked");

            if (issuedDocument.AmountNetOption.IsSet)
                if (issuedDocument.AmountNetOption.Value != null)
                    writer.WriteNumber("amount_net", issuedDocument.AmountNetOption.Value.Value);
                else
                    writer.WriteNull("amount_net");

            if (issuedDocument.AmountVatOption.IsSet)
                if (issuedDocument.AmountVatOption.Value != null)
                    writer.WriteNumber("amount_vat", issuedDocument.AmountVatOption.Value.Value);
                else
                    writer.WriteNull("amount_vat");

            if (issuedDocument.AmountGrossOption.IsSet)
                if (issuedDocument.AmountGrossOption.Value != null)
                    writer.WriteNumber("amount_gross", issuedDocument.AmountGrossOption.Value.Value);
                else
                    writer.WriteNull("amount_gross");

            if (issuedDocument.AmountDueDiscountOption.IsSet)
                if (issuedDocument.AmountDueDiscountOption.Value != null)
                    writer.WriteNumber("amount_due_discount", issuedDocument.AmountDueDiscountOption.Value.Value);
                else
                    writer.WriteNull("amount_due_discount");

            if (issuedDocument.AmountRivalsaOption.IsSet)
                if (issuedDocument.AmountRivalsaOption.Value != null)
                    writer.WriteNumber("amount_rivalsa", issuedDocument.AmountRivalsaOption.Value.Value);
                else
                    writer.WriteNull("amount_rivalsa");

            if (issuedDocument.AmountRivalsaTaxableOption.IsSet)
                if (issuedDocument.AmountRivalsaTaxableOption.Value != null)
                    writer.WriteNumber("amount_rivalsa_taxable", issuedDocument.AmountRivalsaTaxableOption.Value.Value);
                else
                    writer.WriteNull("amount_rivalsa_taxable");

            if (issuedDocument.AmountWithholdingTaxOption.IsSet)
                if (issuedDocument.AmountWithholdingTaxOption.Value != null)
                    writer.WriteNumber("amount_withholding_tax", issuedDocument.AmountWithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("amount_withholding_tax");

            if (issuedDocument.AmountWithholdingTaxTaxableOption.IsSet)
                if (issuedDocument.AmountWithholdingTaxTaxableOption.Value != null)
                    writer.WriteNumber("amount_withholding_tax_taxable", issuedDocument.AmountWithholdingTaxTaxableOption.Value.Value);
                else
                    writer.WriteNull("amount_withholding_tax_taxable");

            if (issuedDocument.AmountOtherWithholdingTaxOption.IsSet)
                if (issuedDocument.AmountOtherWithholdingTaxOption.Value != null)
                    writer.WriteNumber("amount_other_withholding_tax", issuedDocument.AmountOtherWithholdingTaxOption.Value.Value);
                else
                    writer.WriteNull("amount_other_withholding_tax");

            if (issuedDocument.AmountOtherWithholdingTaxTaxableOption.IsSet)
                if (issuedDocument.AmountOtherWithholdingTaxTaxableOption.Value != null)
                    writer.WriteNumber("amount_other_withholding_tax_taxable", issuedDocument.AmountOtherWithholdingTaxTaxableOption.Value.Value);
                else
                    writer.WriteNull("amount_other_withholding_tax_taxable");

            if (issuedDocument.AmountEnasarcoTaxableOption.IsSet)
                if (issuedDocument.AmountEnasarcoTaxableOption.Value != null)
                    writer.WriteNumber("amount_enasarco_taxable", issuedDocument.AmountEnasarcoTaxableOption.Value.Value);
                else
                    writer.WriteNull("amount_enasarco_taxable");

            if (issuedDocument.ExtraDataOption.IsSet)
                if (issuedDocument.ExtraDataOption.Value != null)
                {
                    writer.WritePropertyName("extra_data");
                    JsonSerializer.Serialize(writer, issuedDocument.ExtraData, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("extra_data");
            if (issuedDocument.SeenDateOption.IsSet)
                if (issuedDocument.SeenDateOption.Value != null)
                    writer.WriteString("seen_date", issuedDocument.SeenDateOption.Value.Value.ToString(SeenDateFormat));
                else
                    writer.WriteNull("seen_date");

            if (issuedDocument.NextDueDateOption.IsSet)
                if (issuedDocument.NextDueDateOption.Value != null)
                    writer.WriteString("next_due_date", issuedDocument.NextDueDateOption.Value.Value.ToString(NextDueDateFormat));
                else
                    writer.WriteNull("next_due_date");

            if (issuedDocument.UrlOption.IsSet)
                if (issuedDocument.UrlOption.Value != null)
                    writer.WriteString("url", issuedDocument.Url);
                else
                    writer.WriteNull("url");

            if (issuedDocument.DnUrlOption.IsSet)
                if (issuedDocument.DnUrlOption.Value != null)
                    writer.WriteString("dn_url", issuedDocument.DnUrl);
                else
                    writer.WriteNull("dn_url");

            if (issuedDocument.AiUrlOption.IsSet)
                if (issuedDocument.AiUrlOption.Value != null)
                    writer.WriteString("ai_url", issuedDocument.AiUrl);
                else
                    writer.WriteNull("ai_url");

            if (issuedDocument.AttachmentUrlOption.IsSet)
                if (issuedDocument.AttachmentUrlOption.Value != null)
                    writer.WriteString("attachment_url", issuedDocument.AttachmentUrl);
                else
                    writer.WriteNull("attachment_url");

            if (issuedDocument.AttachmentTokenOption.IsSet)
                if (issuedDocument.AttachmentTokenOption.Value != null)
                    writer.WriteString("attachment_token", issuedDocument.AttachmentToken);
                else
                    writer.WriteNull("attachment_token");

            if (issuedDocument.EiRawOption.IsSet)
                if (issuedDocument.EiRawOption.Value != null)
                {
                    writer.WritePropertyName("ei_raw");
                    JsonSerializer.Serialize(writer, issuedDocument.EiRaw, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ei_raw");
            var eiStatusRawValue = IssuedDocument.EiStatusEnumToJsonValue(issuedDocument.EiStatusOption.Value.Value);
            if (eiStatusRawValue != null)
                writer.WriteString("ei_status", eiStatusRawValue);
            else
                writer.WriteNull("ei_status");

            if (issuedDocument.PriceListIdOption.IsSet)
                if (issuedDocument.PriceListIdOption.Value != null)
                    writer.WriteString("price_list_id", issuedDocument.PriceListId);
                else
                    writer.WriteNull("price_list_id");

            if (issuedDocument.LockedOption.IsSet)
                if (issuedDocument.LockedOption.Value != null)
                    writer.WriteBoolean("locked", issuedDocument.LockedOption.Value.Value);
                else
                    writer.WriteNull("locked");

            if (issuedDocument.CreatedAtOption.IsSet)
                if (issuedDocument.CreatedAtOption.Value != null)
                    writer.WriteString("created_at", issuedDocument.CreatedAt);
                else
                    writer.WriteNull("created_at");

            if (issuedDocument.UpdatedAtOption.IsSet)
                if (issuedDocument.UpdatedAtOption.Value != null)
                    writer.WriteString("updated_at", issuedDocument.UpdatedAt);
                else
                    writer.WriteNull("updated_at");
        }
    }
}
